// Package Swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for AlertNotifierOrderByInput.
const (
	AlertNotifierOrderByInputCreatedAtASC AlertNotifierOrderByInput = "createdAt_ASC"

	AlertNotifierOrderByInputCreatedAtDESC AlertNotifierOrderByInput = "createdAt_DESC"

	AlertNotifierOrderByInputDisabledASC AlertNotifierOrderByInput = "disabled_ASC"

	AlertNotifierOrderByInputDisabledDESC AlertNotifierOrderByInput = "disabled_DESC"

	AlertNotifierOrderByInputEmailFromASC AlertNotifierOrderByInput = "email_from_ASC"

	AlertNotifierOrderByInputEmailFromDESC AlertNotifierOrderByInput = "email_from_DESC"

	AlertNotifierOrderByInputIdASC AlertNotifierOrderByInput = "id_ASC"

	AlertNotifierOrderByInputIdDESC AlertNotifierOrderByInput = "id_DESC"

	AlertNotifierOrderByInputLanguageCodeASC AlertNotifierOrderByInput = "language_code_ASC"

	AlertNotifierOrderByInputLanguageCodeDESC AlertNotifierOrderByInput = "language_code_DESC"

	AlertNotifierOrderByInputPasswordASC AlertNotifierOrderByInput = "password_ASC"

	AlertNotifierOrderByInputPasswordDESC AlertNotifierOrderByInput = "password_DESC"

	AlertNotifierOrderByInputSecurityModeASC AlertNotifierOrderByInput = "security_mode_ASC"

	AlertNotifierOrderByInputSecurityModeDESC AlertNotifierOrderByInput = "security_mode_DESC"

	AlertNotifierOrderByInputSmtpServerHostASC AlertNotifierOrderByInput = "smtp_server_host_ASC"

	AlertNotifierOrderByInputSmtpServerHostDESC AlertNotifierOrderByInput = "smtp_server_host_DESC"

	AlertNotifierOrderByInputSmtpServerPortASC AlertNotifierOrderByInput = "smtp_server_port_ASC"

	AlertNotifierOrderByInputSmtpServerPortDESC AlertNotifierOrderByInput = "smtp_server_port_DESC"

	AlertNotifierOrderByInputUpdatedAtASC AlertNotifierOrderByInput = "updatedAt_ASC"

	AlertNotifierOrderByInputUpdatedAtDESC AlertNotifierOrderByInput = "updatedAt_DESC"

	AlertNotifierOrderByInputUsernameASC AlertNotifierOrderByInput = "username_ASC"

	AlertNotifierOrderByInputUsernameDESC AlertNotifierOrderByInput = "username_DESC"
)

// Defines values for AlertOrderByInput.
const (
	AlertOrderByInputCauseASC AlertOrderByInput = "cause_ASC"

	AlertOrderByInputCauseDESC AlertOrderByInput = "cause_DESC"

	AlertOrderByInputCreatedAtASC AlertOrderByInput = "createdAt_ASC"

	AlertOrderByInputCreatedAtDESC AlertOrderByInput = "createdAt_DESC"

	AlertOrderByInputEndedASC AlertOrderByInput = "ended_ASC"

	AlertOrderByInputEndedDESC AlertOrderByInput = "ended_DESC"

	AlertOrderByInputIdASC AlertOrderByInput = "id_ASC"

	AlertOrderByInputIdDESC AlertOrderByInput = "id_DESC"

	AlertOrderByInputImpactASC AlertOrderByInput = "impact_ASC"

	AlertOrderByInputImpactDESC AlertOrderByInput = "impact_DESC"

	AlertOrderByInputLabelsASC AlertOrderByInput = "labels_ASC"

	AlertOrderByInputLabelsDESC AlertOrderByInput = "labels_DESC"

	AlertOrderByInputLocalCreateTimeASC AlertOrderByInput = "local_create_time_ASC"

	AlertOrderByInputLocalCreateTimeDESC AlertOrderByInput = "local_create_time_DESC"

	AlertOrderByInputLocalEndTimeASC AlertOrderByInput = "local_end_time_ASC"

	AlertOrderByInputLocalEndTimeDESC AlertOrderByInput = "local_end_time_DESC"

	AlertOrderByInputLocalIdASC AlertOrderByInput = "local_id_ASC"

	AlertOrderByInputLocalIdDESC AlertOrderByInput = "local_id_DESC"

	AlertOrderByInputLocalStartTimeASC AlertOrderByInput = "local_start_time_ASC"

	AlertOrderByInputLocalStartTimeDESC AlertOrderByInput = "local_start_time_DESC"

	AlertOrderByInputLocalUpdateTimeASC AlertOrderByInput = "local_update_time_ASC"

	AlertOrderByInputLocalUpdateTimeDESC AlertOrderByInput = "local_update_time_DESC"

	AlertOrderByInputMessageASC AlertOrderByInput = "message_ASC"

	AlertOrderByInputMessageDESC AlertOrderByInput = "message_DESC"

	AlertOrderByInputSeverityASC AlertOrderByInput = "severity_ASC"

	AlertOrderByInputSeverityDESC AlertOrderByInput = "severity_DESC"

	AlertOrderByInputSolutionASC AlertOrderByInput = "solution_ASC"

	AlertOrderByInputSolutionDESC AlertOrderByInput = "solution_DESC"

	AlertOrderByInputThresholdASC AlertOrderByInput = "threshold_ASC"

	AlertOrderByInputThresholdDESC AlertOrderByInput = "threshold_DESC"

	AlertOrderByInputUpdatedAtASC AlertOrderByInput = "updatedAt_ASC"

	AlertOrderByInputUpdatedAtDESC AlertOrderByInput = "updatedAt_DESC"

	AlertOrderByInputValueASC AlertOrderByInput = "value_ASC"

	AlertOrderByInputValueDESC AlertOrderByInput = "value_DESC"
)

// Defines values for AlertRuleObject.
const (
	AlertRuleObjectBRICK AlertRuleObject = "BRICK"

	AlertRuleObjectCLUSTER AlertRuleObject = "CLUSTER"

	AlertRuleObjectDISK AlertRuleObject = "DISK"

	AlertRuleObjectHYPERVISOR AlertRuleObject = "HYPERVISOR"

	AlertRuleObjectNETWORK AlertRuleObject = "NETWORK"

	AlertRuleObjectNTPSERVER AlertRuleObject = "NTP_SERVER"

	AlertRuleObjectPHYSICALHOST AlertRuleObject = "PHYSICAL_HOST"

	AlertRuleObjectSCVM AlertRuleObject = "SCVM"

	AlertRuleObjectSNAPSHOTPLAN AlertRuleObject = "SNAPSHOT_PLAN"

	AlertRuleObjectSTORAGECHUNK AlertRuleObject = "STORAGE_CHUNK"

	AlertRuleObjectSTORAGEPOOL AlertRuleObject = "STORAGE_POOL"

	AlertRuleObjectSYSTEMSERVICE AlertRuleObject = "SYSTEM_SERVICE"

	AlertRuleObjectTIMEMACHINEPLAN AlertRuleObject = "TIME_MACHINE_PLAN"

	AlertRuleObjectVM AlertRuleObject = "VM"

	AlertRuleObjectWITNESS AlertRuleObject = "WITNESS"

	AlertRuleObjectZBSZONE AlertRuleObject = "ZBS_ZONE"
)

// Defines values for AlertRuleOrderByInput.
const (
	AlertRuleOrderByInputCreatedAtASC AlertRuleOrderByInput = "createdAt_ASC"

	AlertRuleOrderByInputCreatedAtDESC AlertRuleOrderByInput = "createdAt_DESC"

	AlertRuleOrderByInputCustomizedASC AlertRuleOrderByInput = "customized_ASC"

	AlertRuleOrderByInputCustomizedDESC AlertRuleOrderByInput = "customized_DESC"

	AlertRuleOrderByInputDisabledASC AlertRuleOrderByInput = "disabled_ASC"

	AlertRuleOrderByInputDisabledDESC AlertRuleOrderByInput = "disabled_DESC"

	AlertRuleOrderByInputIdASC AlertRuleOrderByInput = "id_ASC"

	AlertRuleOrderByInputIdDESC AlertRuleOrderByInput = "id_DESC"

	AlertRuleOrderByInputLocalIdASC AlertRuleOrderByInput = "local_id_ASC"

	AlertRuleOrderByInputLocalIdDESC AlertRuleOrderByInput = "local_id_DESC"

	AlertRuleOrderByInputThresholdsASC AlertRuleOrderByInput = "thresholds_ASC"

	AlertRuleOrderByInputThresholdsDESC AlertRuleOrderByInput = "thresholds_DESC"

	AlertRuleOrderByInputUpdatedAtASC AlertRuleOrderByInput = "updatedAt_ASC"

	AlertRuleOrderByInputUpdatedAtDESC AlertRuleOrderByInput = "updatedAt_DESC"
)

// Defines values for AlertRuleUnit.
const (
	AlertRuleUnitBIT AlertRuleUnit = "BIT"

	AlertRuleUnitBYTE AlertRuleUnit = "BYTE"

	AlertRuleUnitBYTEPERSECOND AlertRuleUnit = "BYTE_PER_SECOND"

	AlertRuleUnitCELSIUS AlertRuleUnit = "CELSIUS"

	AlertRuleUnitHERTZ AlertRuleUnit = "HERTZ"

	AlertRuleUnitNANOSECOND AlertRuleUnit = "NANOSECOND"

	AlertRuleUnitPERCENT AlertRuleUnit = "PERCENT"

	AlertRuleUnitSECOND AlertRuleUnit = "SECOND"

	AlertRuleUnitUNITUNSPECIFIED AlertRuleUnit = "UNIT_UNSPECIFIED"
)

// Defines values for ApplicationOrderByInput.
const (
	ApplicationOrderByInputCreatedAtASC ApplicationOrderByInput = "createdAt_ASC"

	ApplicationOrderByInputCreatedAtDESC ApplicationOrderByInput = "createdAt_DESC"

	ApplicationOrderByInputErrorMessageASC ApplicationOrderByInput = "error_message_ASC"

	ApplicationOrderByInputErrorMessageDESC ApplicationOrderByInput = "error_message_DESC"

	ApplicationOrderByInputIdASC ApplicationOrderByInput = "id_ASC"

	ApplicationOrderByInputIdDESC ApplicationOrderByInput = "id_DESC"

	ApplicationOrderByInputImageNameASC ApplicationOrderByInput = "image_name_ASC"

	ApplicationOrderByInputImageNameDESC ApplicationOrderByInput = "image_name_DESC"

	ApplicationOrderByInputLocalIdASC ApplicationOrderByInput = "local_id_ASC"

	ApplicationOrderByInputLocalIdDESC ApplicationOrderByInput = "local_id_DESC"

	ApplicationOrderByInputMemoryASC ApplicationOrderByInput = "memory_ASC"

	ApplicationOrderByInputMemoryDESC ApplicationOrderByInput = "memory_DESC"

	ApplicationOrderByInputStateASC ApplicationOrderByInput = "state_ASC"

	ApplicationOrderByInputStateDESC ApplicationOrderByInput = "state_DESC"

	ApplicationOrderByInputStorageIpASC ApplicationOrderByInput = "storage_ip_ASC"

	ApplicationOrderByInputStorageIpDESC ApplicationOrderByInput = "storage_ip_DESC"

	ApplicationOrderByInputTypeASC ApplicationOrderByInput = "type_ASC"

	ApplicationOrderByInputTypeDESC ApplicationOrderByInput = "type_DESC"

	ApplicationOrderByInputUpdateTimeASC ApplicationOrderByInput = "update_time_ASC"

	ApplicationOrderByInputUpdateTimeDESC ApplicationOrderByInput = "update_time_DESC"

	ApplicationOrderByInputUpdatedAtASC ApplicationOrderByInput = "updatedAt_ASC"

	ApplicationOrderByInputUpdatedAtDESC ApplicationOrderByInput = "updatedAt_DESC"

	ApplicationOrderByInputVcpuASC ApplicationOrderByInput = "vcpu_ASC"

	ApplicationOrderByInputVcpuDESC ApplicationOrderByInput = "vcpu_DESC"

	ApplicationOrderByInputVersionASC ApplicationOrderByInput = "version_ASC"

	ApplicationOrderByInputVersionDESC ApplicationOrderByInput = "version_DESC"

	ApplicationOrderByInputVolumeSizeASC ApplicationOrderByInput = "volume_size_ASC"

	ApplicationOrderByInputVolumeSizeDESC ApplicationOrderByInput = "volume_size_DESC"
)

// Defines values for ApplicationState.
const (
	ApplicationStateDEPLOYED ApplicationState = "DEPLOYED"

	ApplicationStateDEPLOYERROR ApplicationState = "DEPLOY_ERROR"

	ApplicationStateDEPLOYING ApplicationState = "DEPLOYING"

	ApplicationStateEDITING ApplicationState = "EDITING"

	ApplicationStateNOTDEPLOYED ApplicationState = "NOT_DEPLOYED"

	ApplicationStateSTOPERROR ApplicationState = "STOP_ERROR"

	ApplicationStateSTOPPED ApplicationState = "STOPPED"

	ApplicationStateSTOPPING ApplicationState = "STOPPING"

	ApplicationStateUPGRADING ApplicationState = "UPGRADING"
)

// Defines values for ApplicationType.
const (
	ApplicationTypeMONITOR ApplicationType = "MONITOR"
)

// Defines values for Architecture.
const (
	ArchitectureAARCH64 Architecture = "AARCH64"

	ArchitectureX8664 Architecture = "X86_64"
)

// Defines values for BatchHostsTypename.
const (
	BatchHostsTypenameBatchHosts BatchHostsTypename = "BatchHosts"
)

// Defines values for BrickPhaseEnum.
const (
	BrickPhaseEnumBACKWARD BrickPhaseEnum = "BACKWARD"

	BrickPhaseEnumFORWARD BrickPhaseEnum = "FORWARD"
)

// Defines values for BrickTopoOrderByInput.
const (
	BrickTopoOrderByInputCapacityASC BrickTopoOrderByInput = "capacity_ASC"

	BrickTopoOrderByInputCapacityDESC BrickTopoOrderByInput = "capacity_DESC"

	BrickTopoOrderByInputCreatedAtASC BrickTopoOrderByInput = "createdAt_ASC"

	BrickTopoOrderByInputCreatedAtDESC BrickTopoOrderByInput = "createdAt_DESC"

	BrickTopoOrderByInputDiskLayoutASC BrickTopoOrderByInput = "disk_layout_ASC"

	BrickTopoOrderByInputDiskLayoutDESC BrickTopoOrderByInput = "disk_layout_DESC"

	BrickTopoOrderByInputHeightASC BrickTopoOrderByInput = "height_ASC"

	BrickTopoOrderByInputHeightDESC BrickTopoOrderByInput = "height_DESC"

	BrickTopoOrderByInputIdASC BrickTopoOrderByInput = "id_ASC"

	BrickTopoOrderByInputIdDESC BrickTopoOrderByInput = "id_DESC"

	BrickTopoOrderByInputLocalIdASC BrickTopoOrderByInput = "local_id_ASC"

	BrickTopoOrderByInputLocalIdDESC BrickTopoOrderByInput = "local_id_DESC"

	BrickTopoOrderByInputModelASC BrickTopoOrderByInput = "model_ASC"

	BrickTopoOrderByInputModelDESC BrickTopoOrderByInput = "model_DESC"

	BrickTopoOrderByInputNameASC BrickTopoOrderByInput = "name_ASC"

	BrickTopoOrderByInputNameDESC BrickTopoOrderByInput = "name_DESC"

	BrickTopoOrderByInputPositionASC BrickTopoOrderByInput = "position_ASC"

	BrickTopoOrderByInputPositionDESC BrickTopoOrderByInput = "position_DESC"

	BrickTopoOrderByInputPowerLayoutASC BrickTopoOrderByInput = "power_layout_ASC"

	BrickTopoOrderByInputPowerLayoutDESC BrickTopoOrderByInput = "power_layout_DESC"

	BrickTopoOrderByInputPowerPositionASC BrickTopoOrderByInput = "power_position_ASC"

	BrickTopoOrderByInputPowerPositionDESC BrickTopoOrderByInput = "power_position_DESC"

	BrickTopoOrderByInputPowersASC BrickTopoOrderByInput = "powers_ASC"

	BrickTopoOrderByInputPowersDESC BrickTopoOrderByInput = "powers_DESC"

	BrickTopoOrderByInputTagPositionInBrickASC BrickTopoOrderByInput = "tag_position_in_brick_ASC"

	BrickTopoOrderByInputTagPositionInBrickDESC BrickTopoOrderByInput = "tag_position_in_brick_DESC"

	BrickTopoOrderByInputUpdatedAtASC BrickTopoOrderByInput = "updatedAt_ASC"

	BrickTopoOrderByInputUpdatedAtDESC BrickTopoOrderByInput = "updatedAt_DESC"
)

// Defines values for Bus.
const (
	BusIDE Bus = "IDE"

	BusSCSI Bus = "SCSI"

	BusVIRTIO Bus = "VIRTIO"
)

// Defines values for CloudInitNetworkTypeEnum.
const (
	CloudInitNetworkTypeEnumIPV4 CloudInitNetworkTypeEnum = "IPV4"

	CloudInitNetworkTypeEnumIPV4DHCP CloudInitNetworkTypeEnum = "IPV4_DHCP"
)

// Defines values for ClusterConnectorErrorCode.
const (
	ClusterConnectorErrorCodeLOADCLUSTERFAILED ClusterConnectorErrorCode = "LOAD_CLUSTER_FAILED"

	ClusterConnectorErrorCodeLOADCLUSTERNETWORKERROR ClusterConnectorErrorCode = "LOAD_CLUSTER_NETWORK_ERROR"

	ClusterConnectorErrorCodeLOADCLUSTERNOTFOUND ClusterConnectorErrorCode = "LOAD_CLUSTER_NOT_FOUND"

	ClusterConnectorErrorCodeLOADCLUSTERUNAUTHORIZED ClusterConnectorErrorCode = "LOAD_CLUSTER_UNAUTHORIZED"

	ClusterConnectorErrorCodeLOADCLUSTERUNHEALTHY ClusterConnectorErrorCode = "LOAD_CLUSTER_UNHEALTHY"
)

// Defines values for ClusterImageOrderByInput.
const (
	ClusterImageOrderByInputCreatedAtASC ClusterImageOrderByInput = "createdAt_ASC"

	ClusterImageOrderByInputCreatedAtDESC ClusterImageOrderByInput = "createdAt_DESC"

	ClusterImageOrderByInputEntityAsyncStatusASC ClusterImageOrderByInput = "entityAsyncStatus_ASC"

	ClusterImageOrderByInputEntityAsyncStatusDESC ClusterImageOrderByInput = "entityAsyncStatus_DESC"

	ClusterImageOrderByInputIdASC ClusterImageOrderByInput = "id_ASC"

	ClusterImageOrderByInputIdDESC ClusterImageOrderByInput = "id_DESC"

	ClusterImageOrderByInputMetaNameASC ClusterImageOrderByInput = "meta_name_ASC"

	ClusterImageOrderByInputMetaNameDESC ClusterImageOrderByInput = "meta_name_DESC"

	ClusterImageOrderByInputMetaSizeASC ClusterImageOrderByInput = "meta_size_ASC"

	ClusterImageOrderByInputMetaSizeDESC ClusterImageOrderByInput = "meta_size_DESC"

	ClusterImageOrderByInputNameASC ClusterImageOrderByInput = "name_ASC"

	ClusterImageOrderByInputNameDESC ClusterImageOrderByInput = "name_DESC"

	ClusterImageOrderByInputSizeASC ClusterImageOrderByInput = "size_ASC"

	ClusterImageOrderByInputSizeDESC ClusterImageOrderByInput = "size_DESC"

	ClusterImageOrderByInputUpdatedAtASC ClusterImageOrderByInput = "updatedAt_ASC"

	ClusterImageOrderByInputUpdatedAtDESC ClusterImageOrderByInput = "updatedAt_DESC"

	ClusterImageOrderByInputVersionASC ClusterImageOrderByInput = "version_ASC"

	ClusterImageOrderByInputVersionDESC ClusterImageOrderByInput = "version_DESC"
)

// Defines values for ClusterOrderByInput.
const (
	ClusterOrderByInputArchitectureASC ClusterOrderByInput = "architecture_ASC"

	ClusterOrderByInputArchitectureDESC ClusterOrderByInput = "architecture_DESC"

	ClusterOrderByInputAutoConvergeASC ClusterOrderByInput = "auto_converge_ASC"

	ClusterOrderByInputAutoConvergeDESC ClusterOrderByInput = "auto_converge_DESC"

	ClusterOrderByInputConnectStateASC ClusterOrderByInput = "connect_state_ASC"

	ClusterOrderByInputConnectStateDESC ClusterOrderByInput = "connect_state_DESC"

	ClusterOrderByInputCreatedAtASC ClusterOrderByInput = "createdAt_ASC"

	ClusterOrderByInputCreatedAtDESC ClusterOrderByInput = "createdAt_DESC"

	ClusterOrderByInputCurrentCpuModelASC ClusterOrderByInput = "current_cpu_model_ASC"

	ClusterOrderByInputCurrentCpuModelDESC ClusterOrderByInput = "current_cpu_model_DESC"

	ClusterOrderByInputDisconnectedDateASC ClusterOrderByInput = "disconnected_date_ASC"

	ClusterOrderByInputDisconnectedDateDESC ClusterOrderByInput = "disconnected_date_DESC"

	ClusterOrderByInputDisconnectedReasonASC ClusterOrderByInput = "disconnected_reason_ASC"

	ClusterOrderByInputDisconnectedReasonDESC ClusterOrderByInput = "disconnected_reason_DESC"

	ClusterOrderByInputEntityAsyncStatusASC ClusterOrderByInput = "entityAsyncStatus_ASC"

	ClusterOrderByInputEntityAsyncStatusDESC ClusterOrderByInput = "entityAsyncStatus_DESC"

	ClusterOrderByInputFailureDataSpaceASC ClusterOrderByInput = "failure_data_space_ASC"

	ClusterOrderByInputFailureDataSpaceDESC ClusterOrderByInput = "failure_data_space_DESC"

	ClusterOrderByInputHasMetroxASC ClusterOrderByInput = "has_metrox_ASC"

	ClusterOrderByInputHasMetroxDESC ClusterOrderByInput = "has_metrox_DESC"

	ClusterOrderByInputHasRemoteBackupASC ClusterOrderByInput = "has_remote_backup_ASC"

	ClusterOrderByInputHasRemoteBackupDESC ClusterOrderByInput = "has_remote_backup_DESC"

	ClusterOrderByInputHostNumASC ClusterOrderByInput = "host_num_ASC"

	ClusterOrderByInputHostNumDESC ClusterOrderByInput = "host_num_DESC"

	ClusterOrderByInputHypervisorASC ClusterOrderByInput = "hypervisor_ASC"

	ClusterOrderByInputHypervisorDESC ClusterOrderByInput = "hypervisor_DESC"

	ClusterOrderByInputIdASC ClusterOrderByInput = "id_ASC"

	ClusterOrderByInputIdDESC ClusterOrderByInput = "id_DESC"

	ClusterOrderByInputIpASC ClusterOrderByInput = "ip_ASC"

	ClusterOrderByInputIpDESC ClusterOrderByInput = "ip_DESC"

	ClusterOrderByInputIsAllFlashASC ClusterOrderByInput = "is_all_flash_ASC"

	ClusterOrderByInputIsAllFlashDESC ClusterOrderByInput = "is_all_flash_DESC"

	ClusterOrderByInputIscsiVipASC ClusterOrderByInput = "iscsi_vip_ASC"

	ClusterOrderByInputIscsiVipDESC ClusterOrderByInput = "iscsi_vip_DESC"

	ClusterOrderByInputLicenseExpireDateASC ClusterOrderByInput = "license_expire_date_ASC"

	ClusterOrderByInputLicenseExpireDateDESC ClusterOrderByInput = "license_expire_date_DESC"

	ClusterOrderByInputLicenseSerialASC ClusterOrderByInput = "license_serial_ASC"

	ClusterOrderByInputLicenseSerialDESC ClusterOrderByInput = "license_serial_DESC"

	ClusterOrderByInputLicenseSignDateASC ClusterOrderByInput = "license_sign_date_ASC"

	ClusterOrderByInputLicenseSignDateDESC ClusterOrderByInput = "license_sign_date_DESC"

	ClusterOrderByInputLicenseTypeASC ClusterOrderByInput = "license_type_ASC"

	ClusterOrderByInputLicenseTypeDESC ClusterOrderByInput = "license_type_DESC"

	ClusterOrderByInputLocalIdASC ClusterOrderByInput = "local_id_ASC"

	ClusterOrderByInputLocalIdDESC ClusterOrderByInput = "local_id_DESC"

	ClusterOrderByInputMaintenanceEndDateASC ClusterOrderByInput = "maintenance_end_date_ASC"

	ClusterOrderByInputMaintenanceEndDateDESC ClusterOrderByInput = "maintenance_end_date_DESC"

	ClusterOrderByInputMaintenanceStartDateASC ClusterOrderByInput = "maintenance_start_date_ASC"

	ClusterOrderByInputMaintenanceStartDateDESC ClusterOrderByInput = "maintenance_start_date_DESC"

	ClusterOrderByInputManagementVipASC ClusterOrderByInput = "management_vip_ASC"

	ClusterOrderByInputManagementVipDESC ClusterOrderByInput = "management_vip_DESC"

	ClusterOrderByInputMaxChunkNumASC ClusterOrderByInput = "max_chunk_num_ASC"

	ClusterOrderByInputMaxChunkNumDESC ClusterOrderByInput = "max_chunk_num_DESC"

	ClusterOrderByInputMaxPhysicalDataCapacityASC ClusterOrderByInput = "max_physical_data_capacity_ASC"

	ClusterOrderByInputMaxPhysicalDataCapacityDESC ClusterOrderByInput = "max_physical_data_capacity_DESC"

	ClusterOrderByInputMaxPhysicalDataCapacityPerNodeASC ClusterOrderByInput = "max_physical_data_capacity_per_node_ASC"

	ClusterOrderByInputMaxPhysicalDataCapacityPerNodeDESC ClusterOrderByInput = "max_physical_data_capacity_per_node_DESC"

	ClusterOrderByInputMetroAvailabilityChecklistASC ClusterOrderByInput = "metro_availability_checklist_ASC"

	ClusterOrderByInputMetroAvailabilityChecklistDESC ClusterOrderByInput = "metro_availability_checklist_DESC"

	ClusterOrderByInputMgtGatewayASC ClusterOrderByInput = "mgt_gateway_ASC"

	ClusterOrderByInputMgtGatewayDESC ClusterOrderByInput = "mgt_gateway_DESC"

	ClusterOrderByInputMgtNetmaskASC ClusterOrderByInput = "mgt_netmask_ASC"

	ClusterOrderByInputMgtNetmaskDESC ClusterOrderByInput = "mgt_netmask_DESC"

	ClusterOrderByInputMigrationDataSizeASC ClusterOrderByInput = "migration_data_size_ASC"

	ClusterOrderByInputMigrationDataSizeDESC ClusterOrderByInput = "migration_data_size_DESC"

	ClusterOrderByInputMigrationSpeedASC ClusterOrderByInput = "migration_speed_ASC"

	ClusterOrderByInputMigrationSpeedDESC ClusterOrderByInput = "migration_speed_DESC"

	ClusterOrderByInputNameASC ClusterOrderByInput = "name_ASC"

	ClusterOrderByInputNameDESC ClusterOrderByInput = "name_DESC"

	ClusterOrderByInputNtpModeASC ClusterOrderByInput = "ntp_mode_ASC"

	ClusterOrderByInputNtpModeDESC ClusterOrderByInput = "ntp_mode_DESC"

	ClusterOrderByInputNvmfEnabledASC ClusterOrderByInput = "nvmf_enabled_ASC"

	ClusterOrderByInputNvmfEnabledDESC ClusterOrderByInput = "nvmf_enabled_DESC"

	ClusterOrderByInputPasswordASC ClusterOrderByInput = "password_ASC"

	ClusterOrderByInputPasswordDESC ClusterOrderByInput = "password_DESC"

	ClusterOrderByInputPmemEnabledASC ClusterOrderByInput = "pmem_enabled_ASC"

	ClusterOrderByInputPmemEnabledDESC ClusterOrderByInput = "pmem_enabled_DESC"

	ClusterOrderByInputProvisionedCpuCoresASC ClusterOrderByInput = "provisioned_cpu_cores_ASC"

	ClusterOrderByInputProvisionedCpuCoresDESC ClusterOrderByInput = "provisioned_cpu_cores_DESC"

	ClusterOrderByInputProvisionedCpuCoresForActiveVmASC ClusterOrderByInput = "provisioned_cpu_cores_for_active_vm_ASC"

	ClusterOrderByInputProvisionedCpuCoresForActiveVmDESC ClusterOrderByInput = "provisioned_cpu_cores_for_active_vm_DESC"

	ClusterOrderByInputProvisionedForActiveVmRatioASC ClusterOrderByInput = "provisioned_for_active_vm_ratio_ASC"

	ClusterOrderByInputProvisionedForActiveVmRatioDESC ClusterOrderByInput = "provisioned_for_active_vm_ratio_DESC"

	ClusterOrderByInputProvisionedMemoryBytesASC ClusterOrderByInput = "provisioned_memory_bytes_ASC"

	ClusterOrderByInputProvisionedMemoryBytesDESC ClusterOrderByInput = "provisioned_memory_bytes_DESC"

	ClusterOrderByInputProvisionedRatioASC ClusterOrderByInput = "provisioned_ratio_ASC"

	ClusterOrderByInputProvisionedRatioDESC ClusterOrderByInput = "provisioned_ratio_DESC"

	ClusterOrderByInputRdmaEnabledASC ClusterOrderByInput = "rdma_enabled_ASC"

	ClusterOrderByInputRdmaEnabledDESC ClusterOrderByInput = "rdma_enabled_DESC"

	ClusterOrderByInputRecoverDataSizeASC ClusterOrderByInput = "recover_data_size_ASC"

	ClusterOrderByInputRecoverDataSizeDESC ClusterOrderByInput = "recover_data_size_DESC"

	ClusterOrderByInputRecoverSpeedASC ClusterOrderByInput = "recover_speed_ASC"

	ClusterOrderByInputRecoverSpeedDESC ClusterOrderByInput = "recover_speed_DESC"

	ClusterOrderByInputReservedCpuCoresForSystemServiceASC ClusterOrderByInput = "reserved_cpu_cores_for_system_service_ASC"

	ClusterOrderByInputReservedCpuCoresForSystemServiceDESC ClusterOrderByInput = "reserved_cpu_cores_for_system_service_DESC"

	ClusterOrderByInputRunningVmNumASC ClusterOrderByInput = "running_vm_num_ASC"

	ClusterOrderByInputRunningVmNumDESC ClusterOrderByInput = "running_vm_num_DESC"

	ClusterOrderByInputSoftwareEditionASC ClusterOrderByInput = "software_edition_ASC"

	ClusterOrderByInputSoftwareEditionDESC ClusterOrderByInput = "software_edition_DESC"

	ClusterOrderByInputStoppedVmNumASC ClusterOrderByInput = "stopped_vm_num_ASC"

	ClusterOrderByInputStoppedVmNumDESC ClusterOrderByInput = "stopped_vm_num_DESC"

	ClusterOrderByInputStretchASC ClusterOrderByInput = "stretch_ASC"

	ClusterOrderByInputStretchDESC ClusterOrderByInput = "stretch_DESC"

	ClusterOrderByInputSuspendedVmNumASC ClusterOrderByInput = "suspended_vm_num_ASC"

	ClusterOrderByInputSuspendedVmNumDESC ClusterOrderByInput = "suspended_vm_num_DESC"

	ClusterOrderByInputTotalCacheCapacityASC ClusterOrderByInput = "total_cache_capacity_ASC"

	ClusterOrderByInputTotalCacheCapacityDESC ClusterOrderByInput = "total_cache_capacity_DESC"

	ClusterOrderByInputTotalCpuCoresASC ClusterOrderByInput = "total_cpu_cores_ASC"

	ClusterOrderByInputTotalCpuCoresDESC ClusterOrderByInput = "total_cpu_cores_DESC"

	ClusterOrderByInputTotalCpuHzASC ClusterOrderByInput = "total_cpu_hz_ASC"

	ClusterOrderByInputTotalCpuHzDESC ClusterOrderByInput = "total_cpu_hz_DESC"

	ClusterOrderByInputTotalDataCapacityASC ClusterOrderByInput = "total_data_capacity_ASC"

	ClusterOrderByInputTotalDataCapacityDESC ClusterOrderByInput = "total_data_capacity_DESC"

	ClusterOrderByInputTotalMemoryBytesASC ClusterOrderByInput = "total_memory_bytes_ASC"

	ClusterOrderByInputTotalMemoryBytesDESC ClusterOrderByInput = "total_memory_bytes_DESC"

	ClusterOrderByInputTypeASC ClusterOrderByInput = "type_ASC"

	ClusterOrderByInputTypeDESC ClusterOrderByInput = "type_DESC"

	ClusterOrderByInputUpdatedAtASC ClusterOrderByInput = "updatedAt_ASC"

	ClusterOrderByInputUpdatedAtDESC ClusterOrderByInput = "updatedAt_DESC"

	ClusterOrderByInputUsedCpuHzASC ClusterOrderByInput = "used_cpu_hz_ASC"

	ClusterOrderByInputUsedCpuHzDESC ClusterOrderByInput = "used_cpu_hz_DESC"

	ClusterOrderByInputUsedDataSpaceASC ClusterOrderByInput = "used_data_space_ASC"

	ClusterOrderByInputUsedDataSpaceDESC ClusterOrderByInput = "used_data_space_DESC"

	ClusterOrderByInputUsedMemoryBytesASC ClusterOrderByInput = "used_memory_bytes_ASC"

	ClusterOrderByInputUsedMemoryBytesDESC ClusterOrderByInput = "used_memory_bytes_DESC"

	ClusterOrderByInputUsernameASC ClusterOrderByInput = "username_ASC"

	ClusterOrderByInputUsernameDESC ClusterOrderByInput = "username_DESC"

	ClusterOrderByInputValidDataSpaceASC ClusterOrderByInput = "valid_data_space_ASC"

	ClusterOrderByInputValidDataSpaceDESC ClusterOrderByInput = "valid_data_space_DESC"

	ClusterOrderByInputVersionASC ClusterOrderByInput = "version_ASC"

	ClusterOrderByInputVersionDESC ClusterOrderByInput = "version_DESC"

	ClusterOrderByInputVhostEnabledASC ClusterOrderByInput = "vhost_enabled_ASC"

	ClusterOrderByInputVhostEnabledDESC ClusterOrderByInput = "vhost_enabled_DESC"

	ClusterOrderByInputVmNumASC ClusterOrderByInput = "vm_num_ASC"

	ClusterOrderByInputVmNumDESC ClusterOrderByInput = "vm_num_DESC"
)

// Defines values for ClusterSettingsOrderByInput.
const (
	ClusterSettingsOrderByInputCreatedAtASC ClusterSettingsOrderByInput = "createdAt_ASC"

	ClusterSettingsOrderByInputCreatedAtDESC ClusterSettingsOrderByInput = "createdAt_DESC"

	ClusterSettingsOrderByInputIdASC ClusterSettingsOrderByInput = "id_ASC"

	ClusterSettingsOrderByInputIdDESC ClusterSettingsOrderByInput = "id_DESC"

	ClusterSettingsOrderByInputUpdatedAtASC ClusterSettingsOrderByInput = "updatedAt_ASC"

	ClusterSettingsOrderByInputUpdatedAtDESC ClusterSettingsOrderByInput = "updatedAt_DESC"

	ClusterSettingsOrderByInputVmRecycleBinASC ClusterSettingsOrderByInput = "vm_recycle_bin_ASC"

	ClusterSettingsOrderByInputVmRecycleBinDESC ClusterSettingsOrderByInput = "vm_recycle_bin_DESC"
)

// Defines values for ClusterTopoOrderByInput.
const (
	ClusterTopoOrderByInputCreatedAtASC ClusterTopoOrderByInput = "createdAt_ASC"

	ClusterTopoOrderByInputCreatedAtDESC ClusterTopoOrderByInput = "createdAt_DESC"

	ClusterTopoOrderByInputIdASC ClusterTopoOrderByInput = "id_ASC"

	ClusterTopoOrderByInputIdDESC ClusterTopoOrderByInput = "id_DESC"

	ClusterTopoOrderByInputLocalIdASC ClusterTopoOrderByInput = "local_id_ASC"

	ClusterTopoOrderByInputLocalIdDESC ClusterTopoOrderByInput = "local_id_DESC"

	ClusterTopoOrderByInputNameASC ClusterTopoOrderByInput = "name_ASC"

	ClusterTopoOrderByInputNameDESC ClusterTopoOrderByInput = "name_DESC"

	ClusterTopoOrderByInputUpdatedAtASC ClusterTopoOrderByInput = "updatedAt_ASC"

	ClusterTopoOrderByInputUpdatedAtDESC ClusterTopoOrderByInput = "updatedAt_DESC"
)

// Defines values for ClusterType.
const (
	ClusterTypeBLUESHARK ClusterType = "BLUESHARK"

	ClusterTypeSMTXOS ClusterType = "SMTX_OS"

	ClusterTypeSMTXZBS ClusterType = "SMTX_ZBS"
)

// Defines values for ClusterUpgradeHistoryOrderByInput.
const (
	ClusterUpgradeHistoryOrderByInputCreatedAtASC ClusterUpgradeHistoryOrderByInput = "createdAt_ASC"

	ClusterUpgradeHistoryOrderByInputCreatedAtDESC ClusterUpgradeHistoryOrderByInput = "createdAt_DESC"

	ClusterUpgradeHistoryOrderByInputDateASC ClusterUpgradeHistoryOrderByInput = "date_ASC"

	ClusterUpgradeHistoryOrderByInputDateDESC ClusterUpgradeHistoryOrderByInput = "date_DESC"

	ClusterUpgradeHistoryOrderByInputIdASC ClusterUpgradeHistoryOrderByInput = "id_ASC"

	ClusterUpgradeHistoryOrderByInputIdDESC ClusterUpgradeHistoryOrderByInput = "id_DESC"

	ClusterUpgradeHistoryOrderByInputLocalIdASC ClusterUpgradeHistoryOrderByInput = "local_id_ASC"

	ClusterUpgradeHistoryOrderByInputLocalIdDESC ClusterUpgradeHistoryOrderByInput = "local_id_DESC"

	ClusterUpgradeHistoryOrderByInputProgressASC ClusterUpgradeHistoryOrderByInput = "progress_ASC"

	ClusterUpgradeHistoryOrderByInputProgressDESC ClusterUpgradeHistoryOrderByInput = "progress_DESC"

	ClusterUpgradeHistoryOrderByInputResultASC ClusterUpgradeHistoryOrderByInput = "result_ASC"

	ClusterUpgradeHistoryOrderByInputResultDESC ClusterUpgradeHistoryOrderByInput = "result_DESC"

	ClusterUpgradeHistoryOrderByInputTaskUuidASC ClusterUpgradeHistoryOrderByInput = "task_uuid_ASC"

	ClusterUpgradeHistoryOrderByInputTaskUuidDESC ClusterUpgradeHistoryOrderByInput = "task_uuid_DESC"

	ClusterUpgradeHistoryOrderByInputUpdatedAtASC ClusterUpgradeHistoryOrderByInput = "updatedAt_ASC"

	ClusterUpgradeHistoryOrderByInputUpdatedAtDESC ClusterUpgradeHistoryOrderByInput = "updatedAt_DESC"

	ClusterUpgradeHistoryOrderByInputVersionASC ClusterUpgradeHistoryOrderByInput = "version_ASC"

	ClusterUpgradeHistoryOrderByInputVersionDESC ClusterUpgradeHistoryOrderByInput = "version_DESC"
)

// Defines values for ConnectState.
const (
	ConnectStateCONNECTED ConnectState = "CONNECTED"

	ConnectStateDISCONNECTED ConnectState = "DISCONNECTED"

	ConnectStateINITIALIZING ConnectState = "INITIALIZING"

	ConnectStateREMOVING ConnectState = "REMOVING"
)

// Defines values for ConsistencyGroupOrderByInput.
const (
	ConsistencyGroupOrderByInputCreatedAtASC ConsistencyGroupOrderByInput = "createdAt_ASC"

	ConsistencyGroupOrderByInputCreatedAtDESC ConsistencyGroupOrderByInput = "createdAt_DESC"

	ConsistencyGroupOrderByInputDescriptionASC ConsistencyGroupOrderByInput = "description_ASC"

	ConsistencyGroupOrderByInputDescriptionDESC ConsistencyGroupOrderByInput = "description_DESC"

	ConsistencyGroupOrderByInputEntityAsyncStatusASC ConsistencyGroupOrderByInput = "entityAsyncStatus_ASC"

	ConsistencyGroupOrderByInputEntityAsyncStatusDESC ConsistencyGroupOrderByInput = "entityAsyncStatus_DESC"

	ConsistencyGroupOrderByInputIdASC ConsistencyGroupOrderByInput = "id_ASC"

	ConsistencyGroupOrderByInputIdDESC ConsistencyGroupOrderByInput = "id_DESC"

	ConsistencyGroupOrderByInputLocalCreatedAtASC ConsistencyGroupOrderByInput = "local_created_at_ASC"

	ConsistencyGroupOrderByInputLocalCreatedAtDESC ConsistencyGroupOrderByInput = "local_created_at_DESC"

	ConsistencyGroupOrderByInputLocalIdASC ConsistencyGroupOrderByInput = "local_id_ASC"

	ConsistencyGroupOrderByInputLocalIdDESC ConsistencyGroupOrderByInput = "local_id_DESC"

	ConsistencyGroupOrderByInputNameASC ConsistencyGroupOrderByInput = "name_ASC"

	ConsistencyGroupOrderByInputNameDESC ConsistencyGroupOrderByInput = "name_DESC"

	ConsistencyGroupOrderByInputUniqueSizeASC ConsistencyGroupOrderByInput = "unique_size_ASC"

	ConsistencyGroupOrderByInputUniqueSizeDESC ConsistencyGroupOrderByInput = "unique_size_DESC"

	ConsistencyGroupOrderByInputUpdatedAtASC ConsistencyGroupOrderByInput = "updatedAt_ASC"

	ConsistencyGroupOrderByInputUpdatedAtDESC ConsistencyGroupOrderByInput = "updatedAt_DESC"
)

// Defines values for ConsistencyGroupSnapshotOrderByInput.
const (
	ConsistencyGroupSnapshotOrderByInputCreatedAtASC ConsistencyGroupSnapshotOrderByInput = "createdAt_ASC"

	ConsistencyGroupSnapshotOrderByInputCreatedAtDESC ConsistencyGroupSnapshotOrderByInput = "createdAt_DESC"

	ConsistencyGroupSnapshotOrderByInputEntityAsyncStatusASC ConsistencyGroupSnapshotOrderByInput = "entityAsyncStatus_ASC"

	ConsistencyGroupSnapshotOrderByInputEntityAsyncStatusDESC ConsistencyGroupSnapshotOrderByInput = "entityAsyncStatus_DESC"

	ConsistencyGroupSnapshotOrderByInputIdASC ConsistencyGroupSnapshotOrderByInput = "id_ASC"

	ConsistencyGroupSnapshotOrderByInputIdDESC ConsistencyGroupSnapshotOrderByInput = "id_DESC"

	ConsistencyGroupSnapshotOrderByInputLocalCreatedAtASC ConsistencyGroupSnapshotOrderByInput = "local_created_at_ASC"

	ConsistencyGroupSnapshotOrderByInputLocalCreatedAtDESC ConsistencyGroupSnapshotOrderByInput = "local_created_at_DESC"

	ConsistencyGroupSnapshotOrderByInputLocalIdASC ConsistencyGroupSnapshotOrderByInput = "local_id_ASC"

	ConsistencyGroupSnapshotOrderByInputLocalIdDESC ConsistencyGroupSnapshotOrderByInput = "local_id_DESC"

	ConsistencyGroupSnapshotOrderByInputNameASC ConsistencyGroupSnapshotOrderByInput = "name_ASC"

	ConsistencyGroupSnapshotOrderByInputNameDESC ConsistencyGroupSnapshotOrderByInput = "name_DESC"

	ConsistencyGroupSnapshotOrderByInputUniqueSizeASC ConsistencyGroupSnapshotOrderByInput = "unique_size_ASC"

	ConsistencyGroupSnapshotOrderByInputUniqueSizeDESC ConsistencyGroupSnapshotOrderByInput = "unique_size_DESC"

	ConsistencyGroupSnapshotOrderByInputUpdatedAtASC ConsistencyGroupSnapshotOrderByInput = "updatedAt_ASC"

	ConsistencyGroupSnapshotOrderByInputUpdatedAtDESC ConsistencyGroupSnapshotOrderByInput = "updatedAt_DESC"
)

// Defines values for ConsistentType.
const (
	ConsistentTypeCRASHCONSISTENT ConsistentType = "CRASH_CONSISTENT"

	ConsistentTypeFILESYSTEMCONSISTENT ConsistentType = "FILE_SYSTEM_CONSISTENT"
)

// Defines values for CpuFanSpeedUnit.
const (
	CpuFanSpeedUnitPERCENT CpuFanSpeedUnit = "PERCENT"

	CpuFanSpeedUnitRPM CpuFanSpeedUnit = "RPM"
)

// Defines values for DatacenterOrderByInput.
const (
	DatacenterOrderByInputClusterNumASC DatacenterOrderByInput = "cluster_num_ASC"

	DatacenterOrderByInputClusterNumDESC DatacenterOrderByInput = "cluster_num_DESC"

	DatacenterOrderByInputCreatedAtASC DatacenterOrderByInput = "createdAt_ASC"

	DatacenterOrderByInputCreatedAtDESC DatacenterOrderByInput = "createdAt_DESC"

	DatacenterOrderByInputFailureDataSpaceASC DatacenterOrderByInput = "failure_data_space_ASC"

	DatacenterOrderByInputFailureDataSpaceDESC DatacenterOrderByInput = "failure_data_space_DESC"

	DatacenterOrderByInputHostNumASC DatacenterOrderByInput = "host_num_ASC"

	DatacenterOrderByInputHostNumDESC DatacenterOrderByInput = "host_num_DESC"

	DatacenterOrderByInputIdASC DatacenterOrderByInput = "id_ASC"

	DatacenterOrderByInputIdDESC DatacenterOrderByInput = "id_DESC"

	DatacenterOrderByInputNameASC DatacenterOrderByInput = "name_ASC"

	DatacenterOrderByInputNameDESC DatacenterOrderByInput = "name_DESC"

	DatacenterOrderByInputTotalCpuHzASC DatacenterOrderByInput = "total_cpu_hz_ASC"

	DatacenterOrderByInputTotalCpuHzDESC DatacenterOrderByInput = "total_cpu_hz_DESC"

	DatacenterOrderByInputTotalDataCapacityASC DatacenterOrderByInput = "total_data_capacity_ASC"

	DatacenterOrderByInputTotalDataCapacityDESC DatacenterOrderByInput = "total_data_capacity_DESC"

	DatacenterOrderByInputTotalMemoryBytesASC DatacenterOrderByInput = "total_memory_bytes_ASC"

	DatacenterOrderByInputTotalMemoryBytesDESC DatacenterOrderByInput = "total_memory_bytes_DESC"

	DatacenterOrderByInputUpdatedAtASC DatacenterOrderByInput = "updatedAt_ASC"

	DatacenterOrderByInputUpdatedAtDESC DatacenterOrderByInput = "updatedAt_DESC"

	DatacenterOrderByInputUsedCpuHzASC DatacenterOrderByInput = "used_cpu_hz_ASC"

	DatacenterOrderByInputUsedCpuHzDESC DatacenterOrderByInput = "used_cpu_hz_DESC"

	DatacenterOrderByInputUsedDataSpaceASC DatacenterOrderByInput = "used_data_space_ASC"

	DatacenterOrderByInputUsedDataSpaceDESC DatacenterOrderByInput = "used_data_space_DESC"

	DatacenterOrderByInputUsedMemoryBytesASC DatacenterOrderByInput = "used_memory_bytes_ASC"

	DatacenterOrderByInputUsedMemoryBytesDESC DatacenterOrderByInput = "used_memory_bytes_DESC"

	DatacenterOrderByInputVmNumASC DatacenterOrderByInput = "vm_num_ASC"

	DatacenterOrderByInputVmNumDESC DatacenterOrderByInput = "vm_num_DESC"
)

// Defines values for DeployOrderByInput.
const (
	DeployOrderByInputCreatedAtASC DeployOrderByInput = "createdAt_ASC"

	DeployOrderByInputCreatedAtDESC DeployOrderByInput = "createdAt_DESC"

	DeployOrderByInputIdASC DeployOrderByInput = "id_ASC"

	DeployOrderByInputIdDESC DeployOrderByInput = "id_DESC"

	DeployOrderByInputUpdatedAtASC DeployOrderByInput = "updatedAt_ASC"

	DeployOrderByInputUpdatedAtDESC DeployOrderByInput = "updatedAt_DESC"

	DeployOrderByInputVersionASC DeployOrderByInput = "version_ASC"

	DeployOrderByInputVersionDESC DeployOrderByInput = "version_DESC"
)

// Defines values for Direction.
const (
	DirectionHORIZONTAL Direction = "HORIZONTAL"

	DirectionVERTICAL Direction = "VERTICAL"
)

// Defines values for DiskFunction.
const (
	DiskFunctionCACHE DiskFunction = "CACHE"

	DiskFunctionDATA DiskFunction = "DATA"

	DiskFunctionSMTXSYSTEM DiskFunction = "SMTX_SYSTEM"
)

// Defines values for DiskHealthStatus.
const (
	DiskHealthStatusHEALTHY DiskHealthStatus = "HEALTHY"

	DiskHealthStatusSMARTFAILED DiskHealthStatus = "SMART_FAILED"

	DiskHealthStatusSUBHEALTHY DiskHealthStatus = "SUBHEALTHY"

	DiskHealthStatusUNHEALTHY DiskHealthStatus = "UNHEALTHY"
)

// Defines values for DiskOrderByInput.
const (
	DiskOrderByInputCreatedAtASC DiskOrderByInput = "createdAt_ASC"

	DiskOrderByInputCreatedAtDESC DiskOrderByInput = "createdAt_DESC"

	DiskOrderByInputEntityAsyncStatusASC DiskOrderByInput = "entityAsyncStatus_ASC"

	DiskOrderByInputEntityAsyncStatusDESC DiskOrderByInput = "entityAsyncStatus_DESC"

	DiskOrderByInputFirmwareASC DiskOrderByInput = "firmware_ASC"

	DiskOrderByInputFirmwareDESC DiskOrderByInput = "firmware_DESC"

	DiskOrderByInputFunctionASC DiskOrderByInput = "function_ASC"

	DiskOrderByInputFunctionDESC DiskOrderByInput = "function_DESC"

	DiskOrderByInputHealthStatusASC DiskOrderByInput = "health_status_ASC"

	DiskOrderByInputHealthStatusDESC DiskOrderByInput = "health_status_DESC"

	DiskOrderByInputHealthyASC DiskOrderByInput = "healthy_ASC"

	DiskOrderByInputHealthyDESC DiskOrderByInput = "healthy_DESC"

	DiskOrderByInputIdASC DiskOrderByInput = "id_ASC"

	DiskOrderByInputIdDESC DiskOrderByInput = "id_DESC"

	DiskOrderByInputLocalIdASC DiskOrderByInput = "local_id_ASC"

	DiskOrderByInputLocalIdDESC DiskOrderByInput = "local_id_DESC"

	DiskOrderByInputModelASC DiskOrderByInput = "model_ASC"

	DiskOrderByInputModelDESC DiskOrderByInput = "model_DESC"

	DiskOrderByInputMountedASC DiskOrderByInput = "mounted_ASC"

	DiskOrderByInputMountedDESC DiskOrderByInput = "mounted_DESC"

	DiskOrderByInputNameASC DiskOrderByInput = "name_ASC"

	DiskOrderByInputNameDESC DiskOrderByInput = "name_DESC"

	DiskOrderByInputNumaNodeASC DiskOrderByInput = "numa_node_ASC"

	DiskOrderByInputNumaNodeDESC DiskOrderByInput = "numa_node_DESC"

	DiskOrderByInputOfflineASC DiskOrderByInput = "offline_ASC"

	DiskOrderByInputOfflineDESC DiskOrderByInput = "offline_DESC"

	DiskOrderByInputPartitionsASC DiskOrderByInput = "partitions_ASC"

	DiskOrderByInputPartitionsDESC DiskOrderByInput = "partitions_DESC"

	DiskOrderByInputPathASC DiskOrderByInput = "path_ASC"

	DiskOrderByInputPathDESC DiskOrderByInput = "path_DESC"

	DiskOrderByInputPersistentMemoryTypeASC DiskOrderByInput = "persistent_memory_type_ASC"

	DiskOrderByInputPersistentMemoryTypeDESC DiskOrderByInput = "persistent_memory_type_DESC"

	DiskOrderByInputPhysicalSlotOnBrickASC DiskOrderByInput = "physical_slot_on_brick_ASC"

	DiskOrderByInputPhysicalSlotOnBrickDESC DiskOrderByInput = "physical_slot_on_brick_DESC"

	DiskOrderByInputRecommendedUsageASC DiskOrderByInput = "recommended_usage_ASC"

	DiskOrderByInputRecommendedUsageDESC DiskOrderByInput = "recommended_usage_DESC"

	DiskOrderByInputRemainingLifePercentASC DiskOrderByInput = "remaining_life_percent_ASC"

	DiskOrderByInputRemainingLifePercentDESC DiskOrderByInput = "remaining_life_percent_DESC"

	DiskOrderByInputSerialASC DiskOrderByInput = "serial_ASC"

	DiskOrderByInputSerialDESC DiskOrderByInput = "serial_DESC"

	DiskOrderByInputSizeASC DiskOrderByInput = "size_ASC"

	DiskOrderByInputSizeDESC DiskOrderByInput = "size_DESC"

	DiskOrderByInputTypeASC DiskOrderByInput = "type_ASC"

	DiskOrderByInputTypeDESC DiskOrderByInput = "type_DESC"

	DiskOrderByInputUpdatedAtASC DiskOrderByInput = "updatedAt_ASC"

	DiskOrderByInputUpdatedAtDESC DiskOrderByInput = "updatedAt_DESC"

	DiskOrderByInputUsageASC DiskOrderByInput = "usage_ASC"

	DiskOrderByInputUsageDESC DiskOrderByInput = "usage_DESC"

	DiskOrderByInputUsageStatusASC DiskOrderByInput = "usage_status_ASC"

	DiskOrderByInputUsageStatusDESC DiskOrderByInput = "usage_status_DESC"
)

// Defines values for DiskType.
const (
	DiskTypeHDD DiskType = "HDD"

	DiskTypePMem DiskType = "PMem"

	DiskTypeSSD DiskType = "SSD"
)

// Defines values for DiskUsage.
const (
	DiskUsageBOOT DiskUsage = "BOOT"

	DiskUsageCACHE DiskUsage = "CACHE"

	DiskUsageCACHEANDMETA DiskUsage = "CACHE_AND_META"

	DiskUsageDATA DiskUsage = "DATA"

	DiskUsageDATAANDMETA DiskUsage = "DATA_AND_META"
)

// Defines values for DiskUsageStatus.
const (
	DiskUsageStatusISOLATED DiskUsageStatus = "ISOLATED"

	DiskUsageStatusMOUNTED DiskUsageStatus = "MOUNTED"

	DiskUsageStatusMOUNTING DiskUsageStatus = "MOUNTING"

	DiskUsageStatusPARTIALMOUNTED DiskUsageStatus = "PARTIAL_MOUNTED"

	DiskUsageStatusUNMOUNTED DiskUsageStatus = "UNMOUNTED"

	DiskUsageStatusUNMOUNTING DiskUsageStatus = "UNMOUNTING"
)

// Defines values for ElfDataStoreOrderByInput.
const (
	ElfDataStoreOrderByInputCreatedAtASC ElfDataStoreOrderByInput = "createdAt_ASC"

	ElfDataStoreOrderByInputCreatedAtDESC ElfDataStoreOrderByInput = "createdAt_DESC"

	ElfDataStoreOrderByInputDescriptionASC ElfDataStoreOrderByInput = "description_ASC"

	ElfDataStoreOrderByInputDescriptionDESC ElfDataStoreOrderByInput = "description_DESC"

	ElfDataStoreOrderByInputExternalUseASC ElfDataStoreOrderByInput = "external_use_ASC"

	ElfDataStoreOrderByInputExternalUseDESC ElfDataStoreOrderByInput = "external_use_DESC"

	ElfDataStoreOrderByInputIdASC ElfDataStoreOrderByInput = "id_ASC"

	ElfDataStoreOrderByInputIdDESC ElfDataStoreOrderByInput = "id_DESC"

	ElfDataStoreOrderByInputInternalASC ElfDataStoreOrderByInput = "internal_ASC"

	ElfDataStoreOrderByInputInternalDESC ElfDataStoreOrderByInput = "internal_DESC"

	ElfDataStoreOrderByInputIpWhitelistASC ElfDataStoreOrderByInput = "ip_whitelist_ASC"

	ElfDataStoreOrderByInputIpWhitelistDESC ElfDataStoreOrderByInput = "ip_whitelist_DESC"

	ElfDataStoreOrderByInputLocalIdASC ElfDataStoreOrderByInput = "local_id_ASC"

	ElfDataStoreOrderByInputLocalIdDESC ElfDataStoreOrderByInput = "local_id_DESC"

	ElfDataStoreOrderByInputNameASC ElfDataStoreOrderByInput = "name_ASC"

	ElfDataStoreOrderByInputNameDESC ElfDataStoreOrderByInput = "name_DESC"

	ElfDataStoreOrderByInputReplicaNumASC ElfDataStoreOrderByInput = "replica_num_ASC"

	ElfDataStoreOrderByInputReplicaNumDESC ElfDataStoreOrderByInput = "replica_num_DESC"

	ElfDataStoreOrderByInputThinProvisionASC ElfDataStoreOrderByInput = "thin_provision_ASC"

	ElfDataStoreOrderByInputThinProvisionDESC ElfDataStoreOrderByInput = "thin_provision_DESC"

	ElfDataStoreOrderByInputTypeASC ElfDataStoreOrderByInput = "type_ASC"

	ElfDataStoreOrderByInputTypeDESC ElfDataStoreOrderByInput = "type_DESC"

	ElfDataStoreOrderByInputUpdatedAtASC ElfDataStoreOrderByInput = "updatedAt_ASC"

	ElfDataStoreOrderByInputUpdatedAtDESC ElfDataStoreOrderByInput = "updatedAt_DESC"
)

// Defines values for ElfDataStoreType.
const (
	ElfDataStoreTypeISCSI ElfDataStoreType = "ISCSI"

	ElfDataStoreTypeNFS ElfDataStoreType = "NFS"

	ElfDataStoreTypeNVMe ElfDataStoreType = "NVMe"
)

// Defines values for ElfImageOrderByInput.
const (
	ElfImageOrderByInputCreatedAtASC ElfImageOrderByInput = "createdAt_ASC"

	ElfImageOrderByInputCreatedAtDESC ElfImageOrderByInput = "createdAt_DESC"

	ElfImageOrderByInputDescriptionASC ElfImageOrderByInput = "description_ASC"

	ElfImageOrderByInputDescriptionDESC ElfImageOrderByInput = "description_DESC"

	ElfImageOrderByInputEntityAsyncStatusASC ElfImageOrderByInput = "entityAsyncStatus_ASC"

	ElfImageOrderByInputEntityAsyncStatusDESC ElfImageOrderByInput = "entityAsyncStatus_DESC"

	ElfImageOrderByInputIdASC ElfImageOrderByInput = "id_ASC"

	ElfImageOrderByInputIdDESC ElfImageOrderByInput = "id_DESC"

	ElfImageOrderByInputLocalCreatedAtASC ElfImageOrderByInput = "local_created_at_ASC"

	ElfImageOrderByInputLocalCreatedAtDESC ElfImageOrderByInput = "local_created_at_DESC"

	ElfImageOrderByInputLocalIdASC ElfImageOrderByInput = "local_id_ASC"

	ElfImageOrderByInputLocalIdDESC ElfImageOrderByInput = "local_id_DESC"

	ElfImageOrderByInputNameASC ElfImageOrderByInput = "name_ASC"

	ElfImageOrderByInputNameDESC ElfImageOrderByInput = "name_DESC"

	ElfImageOrderByInputPathASC ElfImageOrderByInput = "path_ASC"

	ElfImageOrderByInputPathDESC ElfImageOrderByInput = "path_DESC"

	ElfImageOrderByInputSizeASC ElfImageOrderByInput = "size_ASC"

	ElfImageOrderByInputSizeDESC ElfImageOrderByInput = "size_DESC"

	ElfImageOrderByInputUpdatedAtASC ElfImageOrderByInput = "updatedAt_ASC"

	ElfImageOrderByInputUpdatedAtDESC ElfImageOrderByInput = "updatedAt_DESC"
)

// Defines values for ElfStoragePolicyOrderByInput.
const (
	ElfStoragePolicyOrderByInputCreatedAtASC ElfStoragePolicyOrderByInput = "createdAt_ASC"

	ElfStoragePolicyOrderByInputCreatedAtDESC ElfStoragePolicyOrderByInput = "createdAt_DESC"

	ElfStoragePolicyOrderByInputDescriptionASC ElfStoragePolicyOrderByInput = "description_ASC"

	ElfStoragePolicyOrderByInputDescriptionDESC ElfStoragePolicyOrderByInput = "description_DESC"

	ElfStoragePolicyOrderByInputEntityAsyncStatusASC ElfStoragePolicyOrderByInput = "entityAsyncStatus_ASC"

	ElfStoragePolicyOrderByInputEntityAsyncStatusDESC ElfStoragePolicyOrderByInput = "entityAsyncStatus_DESC"

	ElfStoragePolicyOrderByInputIdASC ElfStoragePolicyOrderByInput = "id_ASC"

	ElfStoragePolicyOrderByInputIdDESC ElfStoragePolicyOrderByInput = "id_DESC"

	ElfStoragePolicyOrderByInputLocalIdASC ElfStoragePolicyOrderByInput = "local_id_ASC"

	ElfStoragePolicyOrderByInputLocalIdDESC ElfStoragePolicyOrderByInput = "local_id_DESC"

	ElfStoragePolicyOrderByInputNameASC ElfStoragePolicyOrderByInput = "name_ASC"

	ElfStoragePolicyOrderByInputNameDESC ElfStoragePolicyOrderByInput = "name_DESC"

	ElfStoragePolicyOrderByInputReplicaNumASC ElfStoragePolicyOrderByInput = "replica_num_ASC"

	ElfStoragePolicyOrderByInputReplicaNumDESC ElfStoragePolicyOrderByInput = "replica_num_DESC"

	ElfStoragePolicyOrderByInputStripeNumASC ElfStoragePolicyOrderByInput = "stripe_num_ASC"

	ElfStoragePolicyOrderByInputStripeNumDESC ElfStoragePolicyOrderByInput = "stripe_num_DESC"

	ElfStoragePolicyOrderByInputStripeSizeASC ElfStoragePolicyOrderByInput = "stripe_size_ASC"

	ElfStoragePolicyOrderByInputStripeSizeDESC ElfStoragePolicyOrderByInput = "stripe_size_DESC"

	ElfStoragePolicyOrderByInputThinProvisionASC ElfStoragePolicyOrderByInput = "thin_provision_ASC"

	ElfStoragePolicyOrderByInputThinProvisionDESC ElfStoragePolicyOrderByInput = "thin_provision_DESC"

	ElfStoragePolicyOrderByInputUpdatedAtASC ElfStoragePolicyOrderByInput = "updatedAt_ASC"

	ElfStoragePolicyOrderByInputUpdatedAtDESC ElfStoragePolicyOrderByInput = "updatedAt_DESC"
)

// Defines values for EntityAsyncStatus.
const (
	EntityAsyncStatusCREATING EntityAsyncStatus = "CREATING"

	EntityAsyncStatusDELETING EntityAsyncStatus = "DELETING"

	EntityAsyncStatusUPDATING EntityAsyncStatus = "UPDATING"
)

// Defines values for EntityFilterOrderByInput.
const (
	EntityFilterOrderByInputApplyToAllClustersASC EntityFilterOrderByInput = "apply_to_all_clusters_ASC"

	EntityFilterOrderByInputApplyToAllClustersDESC EntityFilterOrderByInput = "apply_to_all_clusters_DESC"

	EntityFilterOrderByInputCreatedAtASC EntityFilterOrderByInput = "createdAt_ASC"

	EntityFilterOrderByInputCreatedAtDESC EntityFilterOrderByInput = "createdAt_DESC"

	EntityFilterOrderByInputEntityTypeASC EntityFilterOrderByInput = "entity_type_ASC"

	EntityFilterOrderByInputEntityTypeDESC EntityFilterOrderByInput = "entity_type_DESC"

	EntityFilterOrderByInputFilterStatusASC EntityFilterOrderByInput = "filter_status_ASC"

	EntityFilterOrderByInputFilterStatusDESC EntityFilterOrderByInput = "filter_status_DESC"

	EntityFilterOrderByInputIdASC EntityFilterOrderByInput = "id_ASC"

	EntityFilterOrderByInputIdDESC EntityFilterOrderByInput = "id_DESC"

	EntityFilterOrderByInputLastExecutedAtASC EntityFilterOrderByInput = "last_executed_at_ASC"

	EntityFilterOrderByInputLastExecutedAtDESC EntityFilterOrderByInput = "last_executed_at_DESC"

	EntityFilterOrderByInputNameASC EntityFilterOrderByInput = "name_ASC"

	EntityFilterOrderByInputNameDESC EntityFilterOrderByInput = "name_DESC"

	EntityFilterOrderByInputPresetASC EntityFilterOrderByInput = "preset_ASC"

	EntityFilterOrderByInputPresetDESC EntityFilterOrderByInput = "preset_DESC"

	EntityFilterOrderByInputRulesASC EntityFilterOrderByInput = "rules_ASC"

	EntityFilterOrderByInputRulesDESC EntityFilterOrderByInput = "rules_DESC"

	EntityFilterOrderByInputUpdatedAtASC EntityFilterOrderByInput = "updatedAt_ASC"

	EntityFilterOrderByInputUpdatedAtDESC EntityFilterOrderByInput = "updatedAt_DESC"
)

// Defines values for EntityType.
const (
	EntityTypeVM EntityType = "VM"
)

// Defines values for FilterRuleAggregationEnum.
const (
	FilterRuleAggregationEnumAVG FilterRuleAggregationEnum = "AVG"

	FilterRuleAggregationEnumMAX FilterRuleAggregationEnum = "MAX"

	FilterRuleAggregationEnumMIN FilterRuleAggregationEnum = "MIN"

	FilterRuleAggregationEnumQUANTILE FilterRuleAggregationEnum = "QUANTILE"

	FilterRuleAggregationEnumSUM FilterRuleAggregationEnum = "SUM"
)

// Defines values for FilterRuleMetricEnum.
const (
	FilterRuleMetricEnumVMCPUUSAGE FilterRuleMetricEnum = "VM_CPU_USAGE"

	FilterRuleMetricEnumVMMEMORYUSAGE FilterRuleMetricEnum = "VM_MEMORY_USAGE"

	FilterRuleMetricEnumVMPOWEROFFDAYS FilterRuleMetricEnum = "VM_POWEROFF_DAYS"

	FilterRuleMetricEnumVMPOWERONDAYS FilterRuleMetricEnum = "VM_POWERON_DAYS"

	FilterRuleMetricEnumVMREADWRITEIO FilterRuleMetricEnum = "VM_READWRITE_IO"
)

// Defines values for FilterRuleOpEnum.
const (
	FilterRuleOpEnumGT FilterRuleOpEnum = "GT"

	FilterRuleOpEnumGTE FilterRuleOpEnum = "GTE"

	FilterRuleOpEnumLT FilterRuleOpEnum = "LT"

	FilterRuleOpEnumLTE FilterRuleOpEnum = "LTE"
)

// Defines values for FilterStatus.
const (
	FilterStatusEXECUTING FilterStatus = "EXECUTING"

	FilterStatusFAILED FilterStatus = "FAILED"

	FilterStatusINITIALIZING FilterStatus = "INITIALIZING"

	FilterStatusPARTIALSUCCESSED FilterStatus = "PARTIAL_SUCCESSED"

	FilterStatusSUCCESSED FilterStatus = "SUCCESSED"
)

// Defines values for GlobalAlertRuleOrderByInput.
const (
	GlobalAlertRuleOrderByInputBooleanASC GlobalAlertRuleOrderByInput = "boolean_ASC"

	GlobalAlertRuleOrderByInputBooleanDESC GlobalAlertRuleOrderByInput = "boolean_DESC"

	GlobalAlertRuleOrderByInputCauseASC GlobalAlertRuleOrderByInput = "cause_ASC"

	GlobalAlertRuleOrderByInputCauseDESC GlobalAlertRuleOrderByInput = "cause_DESC"

	GlobalAlertRuleOrderByInputCreatedAtASC GlobalAlertRuleOrderByInput = "createdAt_ASC"

	GlobalAlertRuleOrderByInputCreatedAtDESC GlobalAlertRuleOrderByInput = "createdAt_DESC"

	GlobalAlertRuleOrderByInputDefaultThresholdsASC GlobalAlertRuleOrderByInput = "default_thresholds_ASC"

	GlobalAlertRuleOrderByInputDefaultThresholdsDESC GlobalAlertRuleOrderByInput = "default_thresholds_DESC"

	GlobalAlertRuleOrderByInputDisabledASC GlobalAlertRuleOrderByInput = "disabled_ASC"

	GlobalAlertRuleOrderByInputDisabledDESC GlobalAlertRuleOrderByInput = "disabled_DESC"

	GlobalAlertRuleOrderByInputIdASC GlobalAlertRuleOrderByInput = "id_ASC"

	GlobalAlertRuleOrderByInputIdDESC GlobalAlertRuleOrderByInput = "id_DESC"

	GlobalAlertRuleOrderByInputImpactASC GlobalAlertRuleOrderByInput = "impact_ASC"

	GlobalAlertRuleOrderByInputImpactDESC GlobalAlertRuleOrderByInput = "impact_DESC"

	GlobalAlertRuleOrderByInputMessageASC GlobalAlertRuleOrderByInput = "message_ASC"

	GlobalAlertRuleOrderByInputMessageDESC GlobalAlertRuleOrderByInput = "message_DESC"

	GlobalAlertRuleOrderByInputNameASC GlobalAlertRuleOrderByInput = "name_ASC"

	GlobalAlertRuleOrderByInputNameDESC GlobalAlertRuleOrderByInput = "name_DESC"

	GlobalAlertRuleOrderByInputObjectASC GlobalAlertRuleOrderByInput = "object_ASC"

	GlobalAlertRuleOrderByInputObjectDESC GlobalAlertRuleOrderByInput = "object_DESC"

	GlobalAlertRuleOrderByInputOperatorASC GlobalAlertRuleOrderByInput = "operator_ASC"

	GlobalAlertRuleOrderByInputOperatorDESC GlobalAlertRuleOrderByInput = "operator_DESC"

	GlobalAlertRuleOrderByInputSolutionASC GlobalAlertRuleOrderByInput = "solution_ASC"

	GlobalAlertRuleOrderByInputSolutionDESC GlobalAlertRuleOrderByInput = "solution_DESC"

	GlobalAlertRuleOrderByInputThresholdsASC GlobalAlertRuleOrderByInput = "thresholds_ASC"

	GlobalAlertRuleOrderByInputThresholdsDESC GlobalAlertRuleOrderByInput = "thresholds_DESC"

	GlobalAlertRuleOrderByInputUnitASC GlobalAlertRuleOrderByInput = "unit_ASC"

	GlobalAlertRuleOrderByInputUnitDESC GlobalAlertRuleOrderByInput = "unit_DESC"

	GlobalAlertRuleOrderByInputUpdatedAtASC GlobalAlertRuleOrderByInput = "updatedAt_ASC"

	GlobalAlertRuleOrderByInputUpdatedAtDESC GlobalAlertRuleOrderByInput = "updatedAt_DESC"
)

// Defines values for GlobalSettingsOrderByInput.
const (
	GlobalSettingsOrderByInputCreatedAtASC GlobalSettingsOrderByInput = "createdAt_ASC"

	GlobalSettingsOrderByInputCreatedAtDESC GlobalSettingsOrderByInput = "createdAt_DESC"

	GlobalSettingsOrderByInputIdASC GlobalSettingsOrderByInput = "id_ASC"

	GlobalSettingsOrderByInputIdDESC GlobalSettingsOrderByInput = "id_DESC"

	GlobalSettingsOrderByInputUpdatedAtASC GlobalSettingsOrderByInput = "updatedAt_ASC"

	GlobalSettingsOrderByInputUpdatedAtDESC GlobalSettingsOrderByInput = "updatedAt_DESC"

	GlobalSettingsOrderByInputVmRecycleBinASC GlobalSettingsOrderByInput = "vm_recycle_bin_ASC"

	GlobalSettingsOrderByInputVmRecycleBinDESC GlobalSettingsOrderByInput = "vm_recycle_bin_DESC"
)

// Defines values for GraphOrderByInput.
const (
	GraphOrderByInputCreatedAtASC GraphOrderByInput = "createdAt_ASC"

	GraphOrderByInputCreatedAtDESC GraphOrderByInput = "createdAt_DESC"

	GraphOrderByInputEntityAsyncStatusASC GraphOrderByInput = "entityAsyncStatus_ASC"

	GraphOrderByInputEntityAsyncStatusDESC GraphOrderByInput = "entityAsyncStatus_DESC"

	GraphOrderByInputIdASC GraphOrderByInput = "id_ASC"

	GraphOrderByInputIdDESC GraphOrderByInput = "id_DESC"

	GraphOrderByInputLocalIdASC GraphOrderByInput = "local_id_ASC"

	GraphOrderByInputLocalIdDESC GraphOrderByInput = "local_id_DESC"

	GraphOrderByInputMetricCountASC GraphOrderByInput = "metric_count_ASC"

	GraphOrderByInputMetricCountDESC GraphOrderByInput = "metric_count_DESC"

	GraphOrderByInputMetricNameASC GraphOrderByInput = "metric_name_ASC"

	GraphOrderByInputMetricNameDESC GraphOrderByInput = "metric_name_DESC"

	GraphOrderByInputMetricTypeASC GraphOrderByInput = "metric_type_ASC"

	GraphOrderByInputMetricTypeDESC GraphOrderByInput = "metric_type_DESC"

	GraphOrderByInputNetworkASC GraphOrderByInput = "network_ASC"

	GraphOrderByInputNetworkDESC GraphOrderByInput = "network_DESC"

	GraphOrderByInputResourceTypeASC GraphOrderByInput = "resource_type_ASC"

	GraphOrderByInputResourceTypeDESC GraphOrderByInput = "resource_type_DESC"

	GraphOrderByInputServiceASC GraphOrderByInput = "service_ASC"

	GraphOrderByInputServiceDESC GraphOrderByInput = "service_DESC"

	GraphOrderByInputTargetsASC GraphOrderByInput = "targets_ASC"

	GraphOrderByInputTargetsDESC GraphOrderByInput = "targets_DESC"

	GraphOrderByInputTitleASC GraphOrderByInput = "title_ASC"

	GraphOrderByInputTitleDESC GraphOrderByInput = "title_DESC"

	GraphOrderByInputTypeASC GraphOrderByInput = "type_ASC"

	GraphOrderByInputTypeDESC GraphOrderByInput = "type_DESC"

	GraphOrderByInputUpdatedAtASC GraphOrderByInput = "updatedAt_ASC"

	GraphOrderByInputUpdatedAtDESC GraphOrderByInput = "updatedAt_DESC"
)

// Defines values for GraphType.
const (
	GraphTypeAREA GraphType = "AREA"

	GraphTypeSTACK GraphType = "STACK"
)

// Defines values for HostBatchCreateIfaceFunction.
const (
	HostBatchCreateIfaceFunctionACCESS HostBatchCreateIfaceFunction = "ACCESS"

	HostBatchCreateIfaceFunctionMANAGEMENT HostBatchCreateIfaceFunction = "MANAGEMENT"

	HostBatchCreateIfaceFunctionSTORAGE HostBatchCreateIfaceFunction = "STORAGE"

	HostBatchCreateIfaceFunctionVMWAREACCESS HostBatchCreateIfaceFunction = "VMWARE_ACCESS"
)

// Defines values for HostOrderByInput.
const (
	HostOrderByInputAccessIpASC HostOrderByInput = "access_ip_ASC"

	HostOrderByInputAccessIpDESC HostOrderByInput = "access_ip_DESC"

	HostOrderByInputAllocatableMemoryBytesASC HostOrderByInput = "allocatable_memory_bytes_ASC"

	HostOrderByInputAllocatableMemoryBytesDESC HostOrderByInput = "allocatable_memory_bytes_DESC"

	HostOrderByInputChunkIdASC HostOrderByInput = "chunk_id_ASC"

	HostOrderByInputChunkIdDESC HostOrderByInput = "chunk_id_DESC"

	HostOrderByInputCpuBrandASC HostOrderByInput = "cpu_brand_ASC"

	HostOrderByInputCpuBrandDESC HostOrderByInput = "cpu_brand_DESC"

	HostOrderByInputCpuFanSpeedUnitASC HostOrderByInput = "cpu_fan_speed_unit_ASC"

	HostOrderByInputCpuFanSpeedUnitDESC HostOrderByInput = "cpu_fan_speed_unit_DESC"

	HostOrderByInputCpuHzPerCoreASC HostOrderByInput = "cpu_hz_per_core_ASC"

	HostOrderByInputCpuHzPerCoreDESC HostOrderByInput = "cpu_hz_per_core_DESC"

	HostOrderByInputCpuModelASC HostOrderByInput = "cpu_model_ASC"

	HostOrderByInputCpuModelDESC HostOrderByInput = "cpu_model_DESC"

	HostOrderByInputCreatedAtASC HostOrderByInput = "createdAt_ASC"

	HostOrderByInputCreatedAtDESC HostOrderByInput = "createdAt_DESC"

	HostOrderByInputDataIpASC HostOrderByInput = "data_ip_ASC"

	HostOrderByInputDataIpDESC HostOrderByInput = "data_ip_DESC"

	HostOrderByInputFailureDataSpaceASC HostOrderByInput = "failure_data_space_ASC"

	HostOrderByInputFailureDataSpaceDESC HostOrderByInput = "failure_data_space_DESC"

	HostOrderByInputHddDataCapacityASC HostOrderByInput = "hdd_data_capacity_ASC"

	HostOrderByInputHddDataCapacityDESC HostOrderByInput = "hdd_data_capacity_DESC"

	HostOrderByInputHddDiskCountASC HostOrderByInput = "hdd_disk_count_ASC"

	HostOrderByInputHddDiskCountDESC HostOrderByInput = "hdd_disk_count_DESC"

	HostOrderByInputIdASC HostOrderByInput = "id_ASC"

	HostOrderByInputIdDESC HostOrderByInput = "id_DESC"

	HostOrderByInputIsOsInRaid1ASC HostOrderByInput = "is_os_in_raid1_ASC"

	HostOrderByInputIsOsInRaid1DESC HostOrderByInput = "is_os_in_raid1_DESC"

	HostOrderByInputLocalIdASC HostOrderByInput = "local_id_ASC"

	HostOrderByInputLocalIdDESC HostOrderByInput = "local_id_DESC"

	HostOrderByInputLsmCapDiskSafeUmountASC HostOrderByInput = "lsm_cap_disk_safe_umount_ASC"

	HostOrderByInputLsmCapDiskSafeUmountDESC HostOrderByInput = "lsm_cap_disk_safe_umount_DESC"

	HostOrderByInputManagementIpASC HostOrderByInput = "management_ip_ASC"

	HostOrderByInputManagementIpDESC HostOrderByInput = "management_ip_DESC"

	HostOrderByInputModelASC HostOrderByInput = "model_ASC"

	HostOrderByInputModelDESC HostOrderByInput = "model_DESC"

	HostOrderByInputNameASC HostOrderByInput = "name_ASC"

	HostOrderByInputNameDESC HostOrderByInput = "name_DESC"

	HostOrderByInputNestedVirtualizationASC HostOrderByInput = "nested_virtualization_ASC"

	HostOrderByInputNestedVirtualizationDESC HostOrderByInput = "nested_virtualization_DESC"

	HostOrderByInputNicCountASC HostOrderByInput = "nic_count_ASC"

	HostOrderByInputNicCountDESC HostOrderByInput = "nic_count_DESC"

	HostOrderByInputNodeTopoLocalIdASC HostOrderByInput = "node_topo_local_id_ASC"

	HostOrderByInputNodeTopoLocalIdDESC HostOrderByInput = "node_topo_local_id_DESC"

	HostOrderByInputOsMemoryBytesASC HostOrderByInput = "os_memory_bytes_ASC"

	HostOrderByInputOsMemoryBytesDESC HostOrderByInput = "os_memory_bytes_DESC"

	HostOrderByInputOsVersionASC HostOrderByInput = "os_version_ASC"

	HostOrderByInputOsVersionDESC HostOrderByInput = "os_version_DESC"

	HostOrderByInputPmemDimmCapacityASC HostOrderByInput = "pmem_dimm_capacity_ASC"

	HostOrderByInputPmemDimmCapacityDESC HostOrderByInput = "pmem_dimm_capacity_DESC"

	HostOrderByInputPmemDimmCountASC HostOrderByInput = "pmem_dimm_count_ASC"

	HostOrderByInputPmemDimmCountDESC HostOrderByInput = "pmem_dimm_count_DESC"

	HostOrderByInputPmemDiskCountASC HostOrderByInput = "pmem_disk_count_ASC"

	HostOrderByInputPmemDiskCountDESC HostOrderByInput = "pmem_disk_count_DESC"

	HostOrderByInputProvisionedCpuCoresASC HostOrderByInput = "provisioned_cpu_cores_ASC"

	HostOrderByInputProvisionedCpuCoresDESC HostOrderByInput = "provisioned_cpu_cores_DESC"

	HostOrderByInputProvisionedMemoryBytesASC HostOrderByInput = "provisioned_memory_bytes_ASC"

	HostOrderByInputProvisionedMemoryBytesDESC HostOrderByInput = "provisioned_memory_bytes_DESC"

	HostOrderByInputRunningPauseVmMemoryBytesASC HostOrderByInput = "running_pause_vm_memory_bytes_ASC"

	HostOrderByInputRunningPauseVmMemoryBytesDESC HostOrderByInput = "running_pause_vm_memory_bytes_DESC"

	HostOrderByInputRunningVmNumASC HostOrderByInput = "running_vm_num_ASC"

	HostOrderByInputRunningVmNumDESC HostOrderByInput = "running_vm_num_DESC"

	HostOrderByInputScvmCpuASC HostOrderByInput = "scvm_cpu_ASC"

	HostOrderByInputScvmCpuDESC HostOrderByInput = "scvm_cpu_DESC"

	HostOrderByInputScvmMemoryASC HostOrderByInput = "scvm_memory_ASC"

	HostOrderByInputScvmMemoryDESC HostOrderByInput = "scvm_memory_DESC"

	HostOrderByInputScvmNameASC HostOrderByInput = "scvm_name_ASC"

	HostOrderByInputScvmNameDESC HostOrderByInput = "scvm_name_DESC"

	HostOrderByInputSerialASC HostOrderByInput = "serial_ASC"

	HostOrderByInputSerialDESC HostOrderByInput = "serial_DESC"

	HostOrderByInputSsdDataCapacityASC HostOrderByInput = "ssd_data_capacity_ASC"

	HostOrderByInputSsdDataCapacityDESC HostOrderByInput = "ssd_data_capacity_DESC"

	HostOrderByInputSsdDiskCountASC HostOrderByInput = "ssd_disk_count_ASC"

	HostOrderByInputSsdDiskCountDESC HostOrderByInput = "ssd_disk_count_DESC"

	HostOrderByInputStateASC HostOrderByInput = "state_ASC"

	HostOrderByInputStateDESC HostOrderByInput = "state_DESC"

	HostOrderByInputStatusASC HostOrderByInput = "status_ASC"

	HostOrderByInputStatusDESC HostOrderByInput = "status_DESC"

	HostOrderByInputStoppedVmNumASC HostOrderByInput = "stopped_vm_num_ASC"

	HostOrderByInputStoppedVmNumDESC HostOrderByInput = "stopped_vm_num_DESC"

	HostOrderByInputSuspendedVmNumASC HostOrderByInput = "suspended_vm_num_ASC"

	HostOrderByInputSuspendedVmNumDESC HostOrderByInput = "suspended_vm_num_DESC"

	HostOrderByInputTotalCacheCapacityASC HostOrderByInput = "total_cache_capacity_ASC"

	HostOrderByInputTotalCacheCapacityDESC HostOrderByInput = "total_cache_capacity_DESC"

	HostOrderByInputTotalCpuCoresASC HostOrderByInput = "total_cpu_cores_ASC"

	HostOrderByInputTotalCpuCoresDESC HostOrderByInput = "total_cpu_cores_DESC"

	HostOrderByInputTotalCpuHzASC HostOrderByInput = "total_cpu_hz_ASC"

	HostOrderByInputTotalCpuHzDESC HostOrderByInput = "total_cpu_hz_DESC"

	HostOrderByInputTotalDataCapacityASC HostOrderByInput = "total_data_capacity_ASC"

	HostOrderByInputTotalDataCapacityDESC HostOrderByInput = "total_data_capacity_DESC"

	HostOrderByInputTotalMemoryBytesASC HostOrderByInput = "total_memory_bytes_ASC"

	HostOrderByInputTotalMemoryBytesDESC HostOrderByInput = "total_memory_bytes_DESC"

	HostOrderByInputUpdatedAtASC HostOrderByInput = "updatedAt_ASC"

	HostOrderByInputUpdatedAtDESC HostOrderByInput = "updatedAt_DESC"

	HostOrderByInputUsedCpuHzASC HostOrderByInput = "used_cpu_hz_ASC"

	HostOrderByInputUsedCpuHzDESC HostOrderByInput = "used_cpu_hz_DESC"

	HostOrderByInputUsedDataSpaceASC HostOrderByInput = "used_data_space_ASC"

	HostOrderByInputUsedDataSpaceDESC HostOrderByInput = "used_data_space_DESC"

	HostOrderByInputUsedMemoryBytesASC HostOrderByInput = "used_memory_bytes_ASC"

	HostOrderByInputUsedMemoryBytesDESC HostOrderByInput = "used_memory_bytes_DESC"

	HostOrderByInputVmNumASC HostOrderByInput = "vm_num_ASC"

	HostOrderByInputVmNumDESC HostOrderByInput = "vm_num_DESC"

	HostOrderByInputVmotionIpASC HostOrderByInput = "vmotion_ip_ASC"

	HostOrderByInputVmotionIpDESC HostOrderByInput = "vmotion_ip_DESC"

	HostOrderByInputWithFasterSsdAsCacheASC HostOrderByInput = "with_faster_ssd_as_cache_ASC"

	HostOrderByInputWithFasterSsdAsCacheDESC HostOrderByInput = "with_faster_ssd_as_cache_DESC"
)

// Defines values for HostState.
const (
	HostStateIDLE HostState = "IDLE"

	HostStateINUSE HostState = "IN_USE"

	HostStateREMOVING HostState = "REMOVING"
)

// Defines values for HostStatus.
const (
	HostStatusCONNECTEDERROR HostStatus = "CONNECTED_ERROR"

	HostStatusCONNECTEDHEALTHY HostStatus = "CONNECTED_HEALTHY"

	HostStatusCONNECTEDWARNING HostStatus = "CONNECTED_WARNING"

	HostStatusCONNECTING HostStatus = "CONNECTING"

	HostStatusINITIALIZING HostStatus = "INITIALIZING"

	HostStatusSESSIONEXPIRED HostStatus = "SESSION_EXPIRED"
)

// Defines values for Hypervisor.
const (
	HypervisorBLUESHARK Hypervisor = "BLUESHARK"

	HypervisorELF Hypervisor = "ELF"

	HypervisorVMWARE Hypervisor = "VMWARE"

	HypervisorXENSERVER Hypervisor = "XENSERVER"
)

// Defines values for IpmiOrderByInput.
const (
	IpmiOrderByInputCreatedAtASC IpmiOrderByInput = "createdAt_ASC"

	IpmiOrderByInputCreatedAtDESC IpmiOrderByInput = "createdAt_DESC"

	IpmiOrderByInputIdASC IpmiOrderByInput = "id_ASC"

	IpmiOrderByInputIdDESC IpmiOrderByInput = "id_DESC"

	IpmiOrderByInputIpASC IpmiOrderByInput = "ip_ASC"

	IpmiOrderByInputIpDESC IpmiOrderByInput = "ip_DESC"

	IpmiOrderByInputLocalIdASC IpmiOrderByInput = "local_id_ASC"

	IpmiOrderByInputLocalIdDESC IpmiOrderByInput = "local_id_DESC"

	IpmiOrderByInputUpdatedAtASC IpmiOrderByInput = "updatedAt_ASC"

	IpmiOrderByInputUpdatedAtDESC IpmiOrderByInput = "updatedAt_DESC"

	IpmiOrderByInputUsernameASC IpmiOrderByInput = "username_ASC"

	IpmiOrderByInputUsernameDESC IpmiOrderByInput = "username_DESC"

	IpmiOrderByInputValidASC IpmiOrderByInput = "valid_ASC"

	IpmiOrderByInputValidDESC IpmiOrderByInput = "valid_DESC"
)

// Defines values for IscsiConnectionOrderByInput.
const (
	IscsiConnectionOrderByInputClientPortASC IscsiConnectionOrderByInput = "client_port_ASC"

	IscsiConnectionOrderByInputClientPortDESC IscsiConnectionOrderByInput = "client_port_DESC"

	IscsiConnectionOrderByInputCreatedAtASC IscsiConnectionOrderByInput = "createdAt_ASC"

	IscsiConnectionOrderByInputCreatedAtDESC IscsiConnectionOrderByInput = "createdAt_DESC"

	IscsiConnectionOrderByInputIdASC IscsiConnectionOrderByInput = "id_ASC"

	IscsiConnectionOrderByInputIdDESC IscsiConnectionOrderByInput = "id_DESC"

	IscsiConnectionOrderByInputInitiatorIpASC IscsiConnectionOrderByInput = "initiator_ip_ASC"

	IscsiConnectionOrderByInputInitiatorIpDESC IscsiConnectionOrderByInput = "initiator_ip_DESC"

	IscsiConnectionOrderByInputTypeASC IscsiConnectionOrderByInput = "type_ASC"

	IscsiConnectionOrderByInputTypeDESC IscsiConnectionOrderByInput = "type_DESC"

	IscsiConnectionOrderByInputUpdatedAtASC IscsiConnectionOrderByInput = "updatedAt_ASC"

	IscsiConnectionOrderByInputUpdatedAtDESC IscsiConnectionOrderByInput = "updatedAt_DESC"
)

// Defines values for IscsiLunOrderByInput.
const (
	IscsiLunOrderByInputAllowedInitiatorsASC IscsiLunOrderByInput = "allowed_initiators_ASC"

	IscsiLunOrderByInputAllowedInitiatorsDESC IscsiLunOrderByInput = "allowed_initiators_DESC"

	IscsiLunOrderByInputAssignedSizeASC IscsiLunOrderByInput = "assigned_size_ASC"

	IscsiLunOrderByInputAssignedSizeDESC IscsiLunOrderByInput = "assigned_size_DESC"

	IscsiLunOrderByInputBpsASC IscsiLunOrderByInput = "bps_ASC"

	IscsiLunOrderByInputBpsDESC IscsiLunOrderByInput = "bps_DESC"

	IscsiLunOrderByInputBpsMaxASC IscsiLunOrderByInput = "bps_max_ASC"

	IscsiLunOrderByInputBpsMaxDESC IscsiLunOrderByInput = "bps_max_DESC"

	IscsiLunOrderByInputBpsMaxLengthASC IscsiLunOrderByInput = "bps_max_length_ASC"

	IscsiLunOrderByInputBpsMaxLengthDESC IscsiLunOrderByInput = "bps_max_length_DESC"

	IscsiLunOrderByInputBpsRdASC IscsiLunOrderByInput = "bps_rd_ASC"

	IscsiLunOrderByInputBpsRdDESC IscsiLunOrderByInput = "bps_rd_DESC"

	IscsiLunOrderByInputBpsRdMaxASC IscsiLunOrderByInput = "bps_rd_max_ASC"

	IscsiLunOrderByInputBpsRdMaxDESC IscsiLunOrderByInput = "bps_rd_max_DESC"

	IscsiLunOrderByInputBpsRdMaxLengthASC IscsiLunOrderByInput = "bps_rd_max_length_ASC"

	IscsiLunOrderByInputBpsRdMaxLengthDESC IscsiLunOrderByInput = "bps_rd_max_length_DESC"

	IscsiLunOrderByInputBpsWrASC IscsiLunOrderByInput = "bps_wr_ASC"

	IscsiLunOrderByInputBpsWrDESC IscsiLunOrderByInput = "bps_wr_DESC"

	IscsiLunOrderByInputBpsWrMaxASC IscsiLunOrderByInput = "bps_wr_max_ASC"

	IscsiLunOrderByInputBpsWrMaxDESC IscsiLunOrderByInput = "bps_wr_max_DESC"

	IscsiLunOrderByInputBpsWrMaxLengthASC IscsiLunOrderByInput = "bps_wr_max_length_ASC"

	IscsiLunOrderByInputBpsWrMaxLengthDESC IscsiLunOrderByInput = "bps_wr_max_length_DESC"

	IscsiLunOrderByInputCreatedAtASC IscsiLunOrderByInput = "createdAt_ASC"

	IscsiLunOrderByInputCreatedAtDESC IscsiLunOrderByInput = "createdAt_DESC"

	IscsiLunOrderByInputEntityAsyncStatusASC IscsiLunOrderByInput = "entityAsyncStatus_ASC"

	IscsiLunOrderByInputEntityAsyncStatusDESC IscsiLunOrderByInput = "entityAsyncStatus_DESC"

	IscsiLunOrderByInputIdASC IscsiLunOrderByInput = "id_ASC"

	IscsiLunOrderByInputIdDESC IscsiLunOrderByInput = "id_DESC"

	IscsiLunOrderByInputIoSizeASC IscsiLunOrderByInput = "io_size_ASC"

	IscsiLunOrderByInputIoSizeDESC IscsiLunOrderByInput = "io_size_DESC"

	IscsiLunOrderByInputIopsASC IscsiLunOrderByInput = "iops_ASC"

	IscsiLunOrderByInputIopsDESC IscsiLunOrderByInput = "iops_DESC"

	IscsiLunOrderByInputIopsMaxASC IscsiLunOrderByInput = "iops_max_ASC"

	IscsiLunOrderByInputIopsMaxDESC IscsiLunOrderByInput = "iops_max_DESC"

	IscsiLunOrderByInputIopsMaxLengthASC IscsiLunOrderByInput = "iops_max_length_ASC"

	IscsiLunOrderByInputIopsMaxLengthDESC IscsiLunOrderByInput = "iops_max_length_DESC"

	IscsiLunOrderByInputIopsRdASC IscsiLunOrderByInput = "iops_rd_ASC"

	IscsiLunOrderByInputIopsRdDESC IscsiLunOrderByInput = "iops_rd_DESC"

	IscsiLunOrderByInputIopsRdMaxASC IscsiLunOrderByInput = "iops_rd_max_ASC"

	IscsiLunOrderByInputIopsRdMaxDESC IscsiLunOrderByInput = "iops_rd_max_DESC"

	IscsiLunOrderByInputIopsRdMaxLengthASC IscsiLunOrderByInput = "iops_rd_max_length_ASC"

	IscsiLunOrderByInputIopsRdMaxLengthDESC IscsiLunOrderByInput = "iops_rd_max_length_DESC"

	IscsiLunOrderByInputIopsWrASC IscsiLunOrderByInput = "iops_wr_ASC"

	IscsiLunOrderByInputIopsWrDESC IscsiLunOrderByInput = "iops_wr_DESC"

	IscsiLunOrderByInputIopsWrMaxASC IscsiLunOrderByInput = "iops_wr_max_ASC"

	IscsiLunOrderByInputIopsWrMaxDESC IscsiLunOrderByInput = "iops_wr_max_DESC"

	IscsiLunOrderByInputIopsWrMaxLengthASC IscsiLunOrderByInput = "iops_wr_max_length_ASC"

	IscsiLunOrderByInputIopsWrMaxLengthDESC IscsiLunOrderByInput = "iops_wr_max_length_DESC"

	IscsiLunOrderByInputLocalCreatedAtASC IscsiLunOrderByInput = "local_created_at_ASC"

	IscsiLunOrderByInputLocalCreatedAtDESC IscsiLunOrderByInput = "local_created_at_DESC"

	IscsiLunOrderByInputLocalIdASC IscsiLunOrderByInput = "local_id_ASC"

	IscsiLunOrderByInputLocalIdDESC IscsiLunOrderByInput = "local_id_DESC"

	IscsiLunOrderByInputLunIdASC IscsiLunOrderByInput = "lun_id_ASC"

	IscsiLunOrderByInputLunIdDESC IscsiLunOrderByInput = "lun_id_DESC"

	IscsiLunOrderByInputNameASC IscsiLunOrderByInput = "name_ASC"

	IscsiLunOrderByInputNameDESC IscsiLunOrderByInput = "name_DESC"

	IscsiLunOrderByInputReplicaNumASC IscsiLunOrderByInput = "replica_num_ASC"

	IscsiLunOrderByInputReplicaNumDESC IscsiLunOrderByInput = "replica_num_DESC"

	IscsiLunOrderByInputSharedSizeASC IscsiLunOrderByInput = "shared_size_ASC"

	IscsiLunOrderByInputSharedSizeDESC IscsiLunOrderByInput = "shared_size_DESC"

	IscsiLunOrderByInputSnapshotNumASC IscsiLunOrderByInput = "snapshot_num_ASC"

	IscsiLunOrderByInputSnapshotNumDESC IscsiLunOrderByInput = "snapshot_num_DESC"

	IscsiLunOrderByInputStripeNumASC IscsiLunOrderByInput = "stripe_num_ASC"

	IscsiLunOrderByInputStripeNumDESC IscsiLunOrderByInput = "stripe_num_DESC"

	IscsiLunOrderByInputStripeSizeASC IscsiLunOrderByInput = "stripe_size_ASC"

	IscsiLunOrderByInputStripeSizeDESC IscsiLunOrderByInput = "stripe_size_DESC"

	IscsiLunOrderByInputThinProvisionASC IscsiLunOrderByInput = "thin_provision_ASC"

	IscsiLunOrderByInputThinProvisionDESC IscsiLunOrderByInput = "thin_provision_DESC"

	IscsiLunOrderByInputUniqueSizeASC IscsiLunOrderByInput = "unique_size_ASC"

	IscsiLunOrderByInputUniqueSizeDESC IscsiLunOrderByInput = "unique_size_DESC"

	IscsiLunOrderByInputUpdatedAtASC IscsiLunOrderByInput = "updatedAt_ASC"

	IscsiLunOrderByInputUpdatedAtDESC IscsiLunOrderByInput = "updatedAt_DESC"

	IscsiLunOrderByInputZbsVolumeIdASC IscsiLunOrderByInput = "zbs_volume_id_ASC"

	IscsiLunOrderByInputZbsVolumeIdDESC IscsiLunOrderByInput = "zbs_volume_id_DESC"
)

// Defines values for IscsiLunSnapshotOrderByInput.
const (
	IscsiLunSnapshotOrderByInputCreatedAtASC IscsiLunSnapshotOrderByInput = "createdAt_ASC"

	IscsiLunSnapshotOrderByInputCreatedAtDESC IscsiLunSnapshotOrderByInput = "createdAt_DESC"

	IscsiLunSnapshotOrderByInputEntityAsyncStatusASC IscsiLunSnapshotOrderByInput = "entityAsyncStatus_ASC"

	IscsiLunSnapshotOrderByInputEntityAsyncStatusDESC IscsiLunSnapshotOrderByInput = "entityAsyncStatus_DESC"

	IscsiLunSnapshotOrderByInputIdASC IscsiLunSnapshotOrderByInput = "id_ASC"

	IscsiLunSnapshotOrderByInputIdDESC IscsiLunSnapshotOrderByInput = "id_DESC"

	IscsiLunSnapshotOrderByInputLocalCreatedAtASC IscsiLunSnapshotOrderByInput = "local_created_at_ASC"

	IscsiLunSnapshotOrderByInputLocalCreatedAtDESC IscsiLunSnapshotOrderByInput = "local_created_at_DESC"

	IscsiLunSnapshotOrderByInputLocalIdASC IscsiLunSnapshotOrderByInput = "local_id_ASC"

	IscsiLunSnapshotOrderByInputLocalIdDESC IscsiLunSnapshotOrderByInput = "local_id_DESC"

	IscsiLunSnapshotOrderByInputNameASC IscsiLunSnapshotOrderByInput = "name_ASC"

	IscsiLunSnapshotOrderByInputNameDESC IscsiLunSnapshotOrderByInput = "name_DESC"

	IscsiLunSnapshotOrderByInputUniqueSizeASC IscsiLunSnapshotOrderByInput = "unique_size_ASC"

	IscsiLunSnapshotOrderByInputUniqueSizeDESC IscsiLunSnapshotOrderByInput = "unique_size_DESC"

	IscsiLunSnapshotOrderByInputUpdatedAtASC IscsiLunSnapshotOrderByInput = "updatedAt_ASC"

	IscsiLunSnapshotOrderByInputUpdatedAtDESC IscsiLunSnapshotOrderByInput = "updatedAt_DESC"
)

// Defines values for IscsiTargetOrderByInput.
const (
	IscsiTargetOrderByInputBpsASC IscsiTargetOrderByInput = "bps_ASC"

	IscsiTargetOrderByInputBpsDESC IscsiTargetOrderByInput = "bps_DESC"

	IscsiTargetOrderByInputBpsMaxASC IscsiTargetOrderByInput = "bps_max_ASC"

	IscsiTargetOrderByInputBpsMaxDESC IscsiTargetOrderByInput = "bps_max_DESC"

	IscsiTargetOrderByInputBpsMaxLengthASC IscsiTargetOrderByInput = "bps_max_length_ASC"

	IscsiTargetOrderByInputBpsMaxLengthDESC IscsiTargetOrderByInput = "bps_max_length_DESC"

	IscsiTargetOrderByInputBpsRdASC IscsiTargetOrderByInput = "bps_rd_ASC"

	IscsiTargetOrderByInputBpsRdDESC IscsiTargetOrderByInput = "bps_rd_DESC"

	IscsiTargetOrderByInputBpsRdMaxASC IscsiTargetOrderByInput = "bps_rd_max_ASC"

	IscsiTargetOrderByInputBpsRdMaxDESC IscsiTargetOrderByInput = "bps_rd_max_DESC"

	IscsiTargetOrderByInputBpsRdMaxLengthASC IscsiTargetOrderByInput = "bps_rd_max_length_ASC"

	IscsiTargetOrderByInputBpsRdMaxLengthDESC IscsiTargetOrderByInput = "bps_rd_max_length_DESC"

	IscsiTargetOrderByInputBpsWrASC IscsiTargetOrderByInput = "bps_wr_ASC"

	IscsiTargetOrderByInputBpsWrDESC IscsiTargetOrderByInput = "bps_wr_DESC"

	IscsiTargetOrderByInputBpsWrMaxASC IscsiTargetOrderByInput = "bps_wr_max_ASC"

	IscsiTargetOrderByInputBpsWrMaxDESC IscsiTargetOrderByInput = "bps_wr_max_DESC"

	IscsiTargetOrderByInputBpsWrMaxLengthASC IscsiTargetOrderByInput = "bps_wr_max_length_ASC"

	IscsiTargetOrderByInputBpsWrMaxLengthDESC IscsiTargetOrderByInput = "bps_wr_max_length_DESC"

	IscsiTargetOrderByInputChapEnabledASC IscsiTargetOrderByInput = "chap_enabled_ASC"

	IscsiTargetOrderByInputChapEnabledDESC IscsiTargetOrderByInput = "chap_enabled_DESC"

	IscsiTargetOrderByInputChapNameASC IscsiTargetOrderByInput = "chap_name_ASC"

	IscsiTargetOrderByInputChapNameDESC IscsiTargetOrderByInput = "chap_name_DESC"

	IscsiTargetOrderByInputChapSecretASC IscsiTargetOrderByInput = "chap_secret_ASC"

	IscsiTargetOrderByInputChapSecretDESC IscsiTargetOrderByInput = "chap_secret_DESC"

	IscsiTargetOrderByInputCreatedAtASC IscsiTargetOrderByInput = "createdAt_ASC"

	IscsiTargetOrderByInputCreatedAtDESC IscsiTargetOrderByInput = "createdAt_DESC"

	IscsiTargetOrderByInputDescriptionASC IscsiTargetOrderByInput = "description_ASC"

	IscsiTargetOrderByInputDescriptionDESC IscsiTargetOrderByInput = "description_DESC"

	IscsiTargetOrderByInputEntityAsyncStatusASC IscsiTargetOrderByInput = "entityAsyncStatus_ASC"

	IscsiTargetOrderByInputEntityAsyncStatusDESC IscsiTargetOrderByInput = "entityAsyncStatus_DESC"

	IscsiTargetOrderByInputExternalUseASC IscsiTargetOrderByInput = "external_use_ASC"

	IscsiTargetOrderByInputExternalUseDESC IscsiTargetOrderByInput = "external_use_DESC"

	IscsiTargetOrderByInputIdASC IscsiTargetOrderByInput = "id_ASC"

	IscsiTargetOrderByInputIdDESC IscsiTargetOrderByInput = "id_DESC"

	IscsiTargetOrderByInputInitiatorChapsASC IscsiTargetOrderByInput = "initiator_chaps_ASC"

	IscsiTargetOrderByInputInitiatorChapsDESC IscsiTargetOrderByInput = "initiator_chaps_DESC"

	IscsiTargetOrderByInputInternalASC IscsiTargetOrderByInput = "internal_ASC"

	IscsiTargetOrderByInputInternalDESC IscsiTargetOrderByInput = "internal_DESC"

	IscsiTargetOrderByInputIoSizeASC IscsiTargetOrderByInput = "io_size_ASC"

	IscsiTargetOrderByInputIoSizeDESC IscsiTargetOrderByInput = "io_size_DESC"

	IscsiTargetOrderByInputIopsASC IscsiTargetOrderByInput = "iops_ASC"

	IscsiTargetOrderByInputIopsDESC IscsiTargetOrderByInput = "iops_DESC"

	IscsiTargetOrderByInputIopsMaxASC IscsiTargetOrderByInput = "iops_max_ASC"

	IscsiTargetOrderByInputIopsMaxDESC IscsiTargetOrderByInput = "iops_max_DESC"

	IscsiTargetOrderByInputIopsMaxLengthASC IscsiTargetOrderByInput = "iops_max_length_ASC"

	IscsiTargetOrderByInputIopsMaxLengthDESC IscsiTargetOrderByInput = "iops_max_length_DESC"

	IscsiTargetOrderByInputIopsRdASC IscsiTargetOrderByInput = "iops_rd_ASC"

	IscsiTargetOrderByInputIopsRdDESC IscsiTargetOrderByInput = "iops_rd_DESC"

	IscsiTargetOrderByInputIopsRdMaxASC IscsiTargetOrderByInput = "iops_rd_max_ASC"

	IscsiTargetOrderByInputIopsRdMaxDESC IscsiTargetOrderByInput = "iops_rd_max_DESC"

	IscsiTargetOrderByInputIopsRdMaxLengthASC IscsiTargetOrderByInput = "iops_rd_max_length_ASC"

	IscsiTargetOrderByInputIopsRdMaxLengthDESC IscsiTargetOrderByInput = "iops_rd_max_length_DESC"

	IscsiTargetOrderByInputIopsWrASC IscsiTargetOrderByInput = "iops_wr_ASC"

	IscsiTargetOrderByInputIopsWrDESC IscsiTargetOrderByInput = "iops_wr_DESC"

	IscsiTargetOrderByInputIopsWrMaxASC IscsiTargetOrderByInput = "iops_wr_max_ASC"

	IscsiTargetOrderByInputIopsWrMaxDESC IscsiTargetOrderByInput = "iops_wr_max_DESC"

	IscsiTargetOrderByInputIopsWrMaxLengthASC IscsiTargetOrderByInput = "iops_wr_max_length_ASC"

	IscsiTargetOrderByInputIopsWrMaxLengthDESC IscsiTargetOrderByInput = "iops_wr_max_length_DESC"

	IscsiTargetOrderByInputIpWhitelistASC IscsiTargetOrderByInput = "ip_whitelist_ASC"

	IscsiTargetOrderByInputIpWhitelistDESC IscsiTargetOrderByInput = "ip_whitelist_DESC"

	IscsiTargetOrderByInputIqnNameASC IscsiTargetOrderByInput = "iqn_name_ASC"

	IscsiTargetOrderByInputIqnNameDESC IscsiTargetOrderByInput = "iqn_name_DESC"

	IscsiTargetOrderByInputIqnWhitelistASC IscsiTargetOrderByInput = "iqn_whitelist_ASC"

	IscsiTargetOrderByInputIqnWhitelistDESC IscsiTargetOrderByInput = "iqn_whitelist_DESC"

	IscsiTargetOrderByInputLocalIdASC IscsiTargetOrderByInput = "local_id_ASC"

	IscsiTargetOrderByInputLocalIdDESC IscsiTargetOrderByInput = "local_id_DESC"

	IscsiTargetOrderByInputNameASC IscsiTargetOrderByInput = "name_ASC"

	IscsiTargetOrderByInputNameDESC IscsiTargetOrderByInput = "name_DESC"

	IscsiTargetOrderByInputReplicaNumASC IscsiTargetOrderByInput = "replica_num_ASC"

	IscsiTargetOrderByInputReplicaNumDESC IscsiTargetOrderByInput = "replica_num_DESC"

	IscsiTargetOrderByInputStripeNumASC IscsiTargetOrderByInput = "stripe_num_ASC"

	IscsiTargetOrderByInputStripeNumDESC IscsiTargetOrderByInput = "stripe_num_DESC"

	IscsiTargetOrderByInputStripeSizeASC IscsiTargetOrderByInput = "stripe_size_ASC"

	IscsiTargetOrderByInputStripeSizeDESC IscsiTargetOrderByInput = "stripe_size_DESC"

	IscsiTargetOrderByInputThinProvisionASC IscsiTargetOrderByInput = "thin_provision_ASC"

	IscsiTargetOrderByInputThinProvisionDESC IscsiTargetOrderByInput = "thin_provision_DESC"

	IscsiTargetOrderByInputUpdatedAtASC IscsiTargetOrderByInput = "updatedAt_ASC"

	IscsiTargetOrderByInputUpdatedAtDESC IscsiTargetOrderByInput = "updatedAt_DESC"
)

// Defines values for LabelOrderByInput.
const (
	LabelOrderByInputClusterNumASC LabelOrderByInput = "cluster_num_ASC"

	LabelOrderByInputClusterNumDESC LabelOrderByInput = "cluster_num_DESC"

	LabelOrderByInputConsistencyGroupNumASC LabelOrderByInput = "consistency_group_num_ASC"

	LabelOrderByInputConsistencyGroupNumDESC LabelOrderByInput = "consistency_group_num_DESC"

	LabelOrderByInputConsistencyGroupSnapshotNumASC LabelOrderByInput = "consistency_group_snapshot_num_ASC"

	LabelOrderByInputConsistencyGroupSnapshotNumDESC LabelOrderByInput = "consistency_group_snapshot_num_DESC"

	LabelOrderByInputCreatedAtASC LabelOrderByInput = "createdAt_ASC"

	LabelOrderByInputCreatedAtDESC LabelOrderByInput = "createdAt_DESC"

	LabelOrderByInputDatacenterNumASC LabelOrderByInput = "datacenter_num_ASC"

	LabelOrderByInputDatacenterNumDESC LabelOrderByInput = "datacenter_num_DESC"

	LabelOrderByInputDiskNumASC LabelOrderByInput = "disk_num_ASC"

	LabelOrderByInputDiskNumDESC LabelOrderByInput = "disk_num_DESC"

	LabelOrderByInputElfImageNumASC LabelOrderByInput = "elf_image_num_ASC"

	LabelOrderByInputElfImageNumDESC LabelOrderByInput = "elf_image_num_DESC"

	LabelOrderByInputHostNumASC LabelOrderByInput = "host_num_ASC"

	LabelOrderByInputHostNumDESC LabelOrderByInput = "host_num_DESC"

	LabelOrderByInputIdASC LabelOrderByInput = "id_ASC"

	LabelOrderByInputIdDESC LabelOrderByInput = "id_DESC"

	LabelOrderByInputIscsiLunNumASC LabelOrderByInput = "iscsi_lun_num_ASC"

	LabelOrderByInputIscsiLunNumDESC LabelOrderByInput = "iscsi_lun_num_DESC"

	LabelOrderByInputIscsiLunSnapshotNumASC LabelOrderByInput = "iscsi_lun_snapshot_num_ASC"

	LabelOrderByInputIscsiLunSnapshotNumDESC LabelOrderByInput = "iscsi_lun_snapshot_num_DESC"

	LabelOrderByInputIscsiTargetNumASC LabelOrderByInput = "iscsi_target_num_ASC"

	LabelOrderByInputIscsiTargetNumDESC LabelOrderByInput = "iscsi_target_num_DESC"

	LabelOrderByInputKeyASC LabelOrderByInput = "key_ASC"

	LabelOrderByInputKeyDESC LabelOrderByInput = "key_DESC"

	LabelOrderByInputNamespaceGroupNumASC LabelOrderByInput = "namespace_group_num_ASC"

	LabelOrderByInputNamespaceGroupNumDESC LabelOrderByInput = "namespace_group_num_DESC"

	LabelOrderByInputNfsExportNumASC LabelOrderByInput = "nfs_export_num_ASC"

	LabelOrderByInputNfsExportNumDESC LabelOrderByInput = "nfs_export_num_DESC"

	LabelOrderByInputNfsInodeNumASC LabelOrderByInput = "nfs_inode_num_ASC"

	LabelOrderByInputNfsInodeNumDESC LabelOrderByInput = "nfs_inode_num_DESC"

	LabelOrderByInputNicNumASC LabelOrderByInput = "nic_num_ASC"

	LabelOrderByInputNicNumDESC LabelOrderByInput = "nic_num_DESC"

	LabelOrderByInputNvmfNamespaceNumASC LabelOrderByInput = "nvmf_namespace_num_ASC"

	LabelOrderByInputNvmfNamespaceNumDESC LabelOrderByInput = "nvmf_namespace_num_DESC"

	LabelOrderByInputNvmfNamespaceSnapshotNumASC LabelOrderByInput = "nvmf_namespace_snapshot_num_ASC"

	LabelOrderByInputNvmfNamespaceSnapshotNumDESC LabelOrderByInput = "nvmf_namespace_snapshot_num_DESC"

	LabelOrderByInputNvmfSubsystemNumASC LabelOrderByInput = "nvmf_subsystem_num_ASC"

	LabelOrderByInputNvmfSubsystemNumDESC LabelOrderByInput = "nvmf_subsystem_num_DESC"

	LabelOrderByInputSystemVlanNumASC LabelOrderByInput = "system_vlan_num_ASC"

	LabelOrderByInputSystemVlanNumDESC LabelOrderByInput = "system_vlan_num_DESC"

	LabelOrderByInputTotalNumASC LabelOrderByInput = "total_num_ASC"

	LabelOrderByInputTotalNumDESC LabelOrderByInput = "total_num_DESC"

	LabelOrderByInputUpdatedAtASC LabelOrderByInput = "updatedAt_ASC"

	LabelOrderByInputUpdatedAtDESC LabelOrderByInput = "updatedAt_DESC"

	LabelOrderByInputValueASC LabelOrderByInput = "value_ASC"

	LabelOrderByInputValueDESC LabelOrderByInput = "value_DESC"

	LabelOrderByInputVdsNumASC LabelOrderByInput = "vds_num_ASC"

	LabelOrderByInputVdsNumDESC LabelOrderByInput = "vds_num_DESC"

	LabelOrderByInputVmNumASC LabelOrderByInput = "vm_num_ASC"

	LabelOrderByInputVmNumDESC LabelOrderByInput = "vm_num_DESC"

	LabelOrderByInputVmSnapshotNumASC LabelOrderByInput = "vm_snapshot_num_ASC"

	LabelOrderByInputVmSnapshotNumDESC LabelOrderByInput = "vm_snapshot_num_DESC"

	LabelOrderByInputVmTemplateNumASC LabelOrderByInput = "vm_template_num_ASC"

	LabelOrderByInputVmTemplateNumDESC LabelOrderByInput = "vm_template_num_DESC"

	LabelOrderByInputVmVlanNumASC LabelOrderByInput = "vm_vlan_num_ASC"

	LabelOrderByInputVmVlanNumDESC LabelOrderByInput = "vm_vlan_num_DESC"

	LabelOrderByInputVmVolumeNumASC LabelOrderByInput = "vm_volume_num_ASC"

	LabelOrderByInputVmVolumeNumDESC LabelOrderByInput = "vm_volume_num_DESC"
)

// Defines values for LicenseOrderByInput.
const (
	LicenseOrderByInputCreatedAtASC LicenseOrderByInput = "createdAt_ASC"

	LicenseOrderByInputCreatedAtDESC LicenseOrderByInput = "createdAt_DESC"

	LicenseOrderByInputExpireDateASC LicenseOrderByInput = "expire_date_ASC"

	LicenseOrderByInputExpireDateDESC LicenseOrderByInput = "expire_date_DESC"

	LicenseOrderByInputIdASC LicenseOrderByInput = "id_ASC"

	LicenseOrderByInputIdDESC LicenseOrderByInput = "id_DESC"

	LicenseOrderByInputLicenseSerialASC LicenseOrderByInput = "license_serial_ASC"

	LicenseOrderByInputLicenseSerialDESC LicenseOrderByInput = "license_serial_DESC"

	LicenseOrderByInputMaintenanceEndDateASC LicenseOrderByInput = "maintenance_end_date_ASC"

	LicenseOrderByInputMaintenanceEndDateDESC LicenseOrderByInput = "maintenance_end_date_DESC"

	LicenseOrderByInputMaintenanceStartDateASC LicenseOrderByInput = "maintenance_start_date_ASC"

	LicenseOrderByInputMaintenanceStartDateDESC LicenseOrderByInput = "maintenance_start_date_DESC"

	LicenseOrderByInputMaxChunkNumASC LicenseOrderByInput = "max_chunk_num_ASC"

	LicenseOrderByInputMaxChunkNumDESC LicenseOrderByInput = "max_chunk_num_DESC"

	LicenseOrderByInputMaxClusterNumASC LicenseOrderByInput = "max_cluster_num_ASC"

	LicenseOrderByInputMaxClusterNumDESC LicenseOrderByInput = "max_cluster_num_DESC"

	LicenseOrderByInputSignDateASC LicenseOrderByInput = "sign_date_ASC"

	LicenseOrderByInputSignDateDESC LicenseOrderByInput = "sign_date_DESC"

	LicenseOrderByInputSoftwareEditionASC LicenseOrderByInput = "software_edition_ASC"

	LicenseOrderByInputSoftwareEditionDESC LicenseOrderByInput = "software_edition_DESC"

	LicenseOrderByInputTypeASC LicenseOrderByInput = "type_ASC"

	LicenseOrderByInputTypeDESC LicenseOrderByInput = "type_DESC"

	LicenseOrderByInputUpdatedAtASC LicenseOrderByInput = "updatedAt_ASC"

	LicenseOrderByInputUpdatedAtDESC LicenseOrderByInput = "updatedAt_DESC"
)

// Defines values for LicenseType.
const (
	LicenseTypePERPETUAL LicenseType = "PERPETUAL"

	LicenseTypeSUBSCRIPTION LicenseType = "SUBSCRIPTION"

	LicenseTypeTRIAL LicenseType = "TRIAL"
)

// Defines values for LogCollectionOrderByInput.
const (
	LogCollectionOrderByInputCreatedAtASC LogCollectionOrderByInput = "createdAt_ASC"

	LogCollectionOrderByInputCreatedAtDESC LogCollectionOrderByInput = "createdAt_DESC"

	LogCollectionOrderByInputIdASC LogCollectionOrderByInput = "id_ASC"

	LogCollectionOrderByInputIdDESC LogCollectionOrderByInput = "id_DESC"

	LogCollectionOrderByInputLocalIdASC LogCollectionOrderByInput = "local_id_ASC"

	LogCollectionOrderByInputLocalIdDESC LogCollectionOrderByInput = "local_id_DESC"

	LogCollectionOrderByInputLogEndedAtASC LogCollectionOrderByInput = "log_ended_at_ASC"

	LogCollectionOrderByInputLogEndedAtDESC LogCollectionOrderByInput = "log_ended_at_DESC"

	LogCollectionOrderByInputLogStartedAtASC LogCollectionOrderByInput = "log_started_at_ASC"

	LogCollectionOrderByInputLogStartedAtDESC LogCollectionOrderByInput = "log_started_at_DESC"

	LogCollectionOrderByInputOwnerASC LogCollectionOrderByInput = "owner_ASC"

	LogCollectionOrderByInputOwnerDESC LogCollectionOrderByInput = "owner_DESC"

	LogCollectionOrderByInputPathASC LogCollectionOrderByInput = "path_ASC"

	LogCollectionOrderByInputPathDESC LogCollectionOrderByInput = "path_DESC"

	LogCollectionOrderByInputProgressASC LogCollectionOrderByInput = "progress_ASC"

	LogCollectionOrderByInputProgressDESC LogCollectionOrderByInput = "progress_DESC"

	LogCollectionOrderByInputSizeASC LogCollectionOrderByInput = "size_ASC"

	LogCollectionOrderByInputSizeDESC LogCollectionOrderByInput = "size_DESC"

	LogCollectionOrderByInputStartedAtASC LogCollectionOrderByInput = "started_at_ASC"

	LogCollectionOrderByInputStartedAtDESC LogCollectionOrderByInput = "started_at_DESC"

	LogCollectionOrderByInputStatusASC LogCollectionOrderByInput = "status_ASC"

	LogCollectionOrderByInputStatusDESC LogCollectionOrderByInput = "status_DESC"

	LogCollectionOrderByInputUpdatedAtASC LogCollectionOrderByInput = "updatedAt_ASC"

	LogCollectionOrderByInputUpdatedAtDESC LogCollectionOrderByInput = "updatedAt_DESC"
)

// Defines values for LogCollectionStatus.
const (
	LogCollectionStatusEXECUTING LogCollectionStatus = "EXECUTING"

	LogCollectionStatusFAILED LogCollectionStatus = "FAILED"

	LogCollectionStatusSTOPPING LogCollectionStatus = "STOPPING"

	LogCollectionStatusSUCCESSED LogCollectionStatus = "SUCCESSED"
)

// Defines values for MetricType.
const (
	MetricTypeBOTTOMK MetricType = "BOTTOMK"

	MetricTypeNORMAL MetricType = "NORMAL"

	MetricTypeTOPK MetricType = "TOPK"
)

// Defines values for MetroCheckStatusEnum.
const (
	MetroCheckStatusEnumCRITICAL MetroCheckStatusEnum = "CRITICAL"

	MetroCheckStatusEnumHEALTHY MetroCheckStatusEnum = "HEALTHY"

	MetroCheckStatusEnumINFO MetroCheckStatusEnum = "INFO"

	MetroCheckStatusEnumNOTICE MetroCheckStatusEnum = "NOTICE"
)

// Defines values for MigrateTransmitterOrderByInput.
const (
	MigrateTransmitterOrderByInputCreatedAtASC MigrateTransmitterOrderByInput = "createdAt_ASC"

	MigrateTransmitterOrderByInputCreatedAtDESC MigrateTransmitterOrderByInput = "createdAt_DESC"

	MigrateTransmitterOrderByInputEntityAsyncStatusASC MigrateTransmitterOrderByInput = "entityAsyncStatus_ASC"

	MigrateTransmitterOrderByInputEntityAsyncStatusDESC MigrateTransmitterOrderByInput = "entityAsyncStatus_DESC"

	MigrateTransmitterOrderByInputIdASC MigrateTransmitterOrderByInput = "id_ASC"

	MigrateTransmitterOrderByInputIdDESC MigrateTransmitterOrderByInput = "id_DESC"

	MigrateTransmitterOrderByInputIpASC MigrateTransmitterOrderByInput = "ip_ASC"

	MigrateTransmitterOrderByInputIpDESC MigrateTransmitterOrderByInput = "ip_DESC"

	MigrateTransmitterOrderByInputNameASC MigrateTransmitterOrderByInput = "name_ASC"

	MigrateTransmitterOrderByInputNameDESC MigrateTransmitterOrderByInput = "name_DESC"

	MigrateTransmitterOrderByInputPasswordASC MigrateTransmitterOrderByInput = "password_ASC"

	MigrateTransmitterOrderByInputPasswordDESC MigrateTransmitterOrderByInput = "password_DESC"

	MigrateTransmitterOrderByInputUpdatedAtASC MigrateTransmitterOrderByInput = "updatedAt_ASC"

	MigrateTransmitterOrderByInputUpdatedAtDESC MigrateTransmitterOrderByInput = "updatedAt_DESC"

	MigrateTransmitterOrderByInputUsernameASC MigrateTransmitterOrderByInput = "username_ASC"

	MigrateTransmitterOrderByInputUsernameDESC MigrateTransmitterOrderByInput = "username_DESC"
)

// Defines values for NamespaceGroupOrderByInput.
const (
	NamespaceGroupOrderByInputCreatedAtASC NamespaceGroupOrderByInput = "createdAt_ASC"

	NamespaceGroupOrderByInputCreatedAtDESC NamespaceGroupOrderByInput = "createdAt_DESC"

	NamespaceGroupOrderByInputEntityAsyncStatusASC NamespaceGroupOrderByInput = "entityAsyncStatus_ASC"

	NamespaceGroupOrderByInputEntityAsyncStatusDESC NamespaceGroupOrderByInput = "entityAsyncStatus_DESC"

	NamespaceGroupOrderByInputIdASC NamespaceGroupOrderByInput = "id_ASC"

	NamespaceGroupOrderByInputIdDESC NamespaceGroupOrderByInput = "id_DESC"

	NamespaceGroupOrderByInputLocalCreateTimeASC NamespaceGroupOrderByInput = "local_create_time_ASC"

	NamespaceGroupOrderByInputLocalCreateTimeDESC NamespaceGroupOrderByInput = "local_create_time_DESC"

	NamespaceGroupOrderByInputLocalIdASC NamespaceGroupOrderByInput = "local_id_ASC"

	NamespaceGroupOrderByInputLocalIdDESC NamespaceGroupOrderByInput = "local_id_DESC"

	NamespaceGroupOrderByInputNameASC NamespaceGroupOrderByInput = "name_ASC"

	NamespaceGroupOrderByInputNameDESC NamespaceGroupOrderByInput = "name_DESC"

	NamespaceGroupOrderByInputUpdatedAtASC NamespaceGroupOrderByInput = "updatedAt_ASC"

	NamespaceGroupOrderByInputUpdatedAtDESC NamespaceGroupOrderByInput = "updatedAt_DESC"
)

// Defines values for NetworkType.
const (
	NetworkTypeACCESS NetworkType = "ACCESS"

	NetworkTypeMANAGEMENT NetworkType = "MANAGEMENT"

	NetworkTypeMIGRATION NetworkType = "MIGRATION"

	NetworkTypeSTORAGE NetworkType = "STORAGE"

	NetworkTypeVM NetworkType = "VM"
)

// Defines values for NfsExportOrderByInput.
const (
	NfsExportOrderByInputCreatedAtASC NfsExportOrderByInput = "createdAt_ASC"

	NfsExportOrderByInputCreatedAtDESC NfsExportOrderByInput = "createdAt_DESC"

	NfsExportOrderByInputDescriptionASC NfsExportOrderByInput = "description_ASC"

	NfsExportOrderByInputDescriptionDESC NfsExportOrderByInput = "description_DESC"

	NfsExportOrderByInputEntityAsyncStatusASC NfsExportOrderByInput = "entityAsyncStatus_ASC"

	NfsExportOrderByInputEntityAsyncStatusDESC NfsExportOrderByInput = "entityAsyncStatus_DESC"

	NfsExportOrderByInputExportInodeIdASC NfsExportOrderByInput = "export_inode_id_ASC"

	NfsExportOrderByInputExportInodeIdDESC NfsExportOrderByInput = "export_inode_id_DESC"

	NfsExportOrderByInputIdASC NfsExportOrderByInput = "id_ASC"

	NfsExportOrderByInputIdDESC NfsExportOrderByInput = "id_DESC"

	NfsExportOrderByInputInternalASC NfsExportOrderByInput = "internal_ASC"

	NfsExportOrderByInputInternalDESC NfsExportOrderByInput = "internal_DESC"

	NfsExportOrderByInputIpWhitelistASC NfsExportOrderByInput = "ip_whitelist_ASC"

	NfsExportOrderByInputIpWhitelistDESC NfsExportOrderByInput = "ip_whitelist_DESC"

	NfsExportOrderByInputLocalIdASC NfsExportOrderByInput = "local_id_ASC"

	NfsExportOrderByInputLocalIdDESC NfsExportOrderByInput = "local_id_DESC"

	NfsExportOrderByInputNameASC NfsExportOrderByInput = "name_ASC"

	NfsExportOrderByInputNameDESC NfsExportOrderByInput = "name_DESC"

	NfsExportOrderByInputReplicaNumASC NfsExportOrderByInput = "replica_num_ASC"

	NfsExportOrderByInputReplicaNumDESC NfsExportOrderByInput = "replica_num_DESC"

	NfsExportOrderByInputThinProvisionASC NfsExportOrderByInput = "thin_provision_ASC"

	NfsExportOrderByInputThinProvisionDESC NfsExportOrderByInput = "thin_provision_DESC"

	NfsExportOrderByInputUpdatedAtASC NfsExportOrderByInput = "updatedAt_ASC"

	NfsExportOrderByInputUpdatedAtDESC NfsExportOrderByInput = "updatedAt_DESC"
)

// Defines values for NfsInodeOrderByInput.
const (
	NfsInodeOrderByInputAssignedSizeASC NfsInodeOrderByInput = "assigned_size_ASC"

	NfsInodeOrderByInputAssignedSizeDESC NfsInodeOrderByInput = "assigned_size_DESC"

	NfsInodeOrderByInputCreatedAtASC NfsInodeOrderByInput = "createdAt_ASC"

	NfsInodeOrderByInputCreatedAtDESC NfsInodeOrderByInput = "createdAt_DESC"

	NfsInodeOrderByInputEntityAsyncStatusASC NfsInodeOrderByInput = "entityAsyncStatus_ASC"

	NfsInodeOrderByInputEntityAsyncStatusDESC NfsInodeOrderByInput = "entityAsyncStatus_DESC"

	NfsInodeOrderByInputFileASC NfsInodeOrderByInput = "file_ASC"

	NfsInodeOrderByInputFileDESC NfsInodeOrderByInput = "file_DESC"

	NfsInodeOrderByInputIdASC NfsInodeOrderByInput = "id_ASC"

	NfsInodeOrderByInputIdDESC NfsInodeOrderByInput = "id_DESC"

	NfsInodeOrderByInputLocalIdASC NfsInodeOrderByInput = "local_id_ASC"

	NfsInodeOrderByInputLocalIdDESC NfsInodeOrderByInput = "local_id_DESC"

	NfsInodeOrderByInputLocalUpdatedAtASC NfsInodeOrderByInput = "local_updated_at_ASC"

	NfsInodeOrderByInputLocalUpdatedAtDESC NfsInodeOrderByInput = "local_updated_at_DESC"

	NfsInodeOrderByInputNameASC NfsInodeOrderByInput = "name_ASC"

	NfsInodeOrderByInputNameDESC NfsInodeOrderByInput = "name_DESC"

	NfsInodeOrderByInputParentIdASC NfsInodeOrderByInput = "parent_id_ASC"

	NfsInodeOrderByInputParentIdDESC NfsInodeOrderByInput = "parent_id_DESC"

	NfsInodeOrderByInputSharedSizeASC NfsInodeOrderByInput = "shared_size_ASC"

	NfsInodeOrderByInputSharedSizeDESC NfsInodeOrderByInput = "shared_size_DESC"

	NfsInodeOrderByInputSnapshotNumASC NfsInodeOrderByInput = "snapshot_num_ASC"

	NfsInodeOrderByInputSnapshotNumDESC NfsInodeOrderByInput = "snapshot_num_DESC"

	NfsInodeOrderByInputUniqueSizeASC NfsInodeOrderByInput = "unique_size_ASC"

	NfsInodeOrderByInputUniqueSizeDESC NfsInodeOrderByInput = "unique_size_DESC"

	NfsInodeOrderByInputUpdatedAtASC NfsInodeOrderByInput = "updatedAt_ASC"

	NfsInodeOrderByInputUpdatedAtDESC NfsInodeOrderByInput = "updatedAt_DESC"
)

// Defines values for NicDriverState.
const (
	NicDriverStateNEEDREBOOT NicDriverState = "NEED_REBOOT"

	NicDriverStateNODRIVER NicDriverState = "NO_DRIVER"

	NicDriverStateNOTREADY NicDriverState = "NOT_READY"

	NicDriverStateREADY NicDriverState = "READY"
)

// Defines values for NicOrderByInput.
const (
	NicOrderByInputCreatedAtASC NicOrderByInput = "createdAt_ASC"

	NicOrderByInputCreatedAtDESC NicOrderByInput = "createdAt_DESC"

	NicOrderByInputDriverASC NicOrderByInput = "driver_ASC"

	NicOrderByInputDriverDESC NicOrderByInput = "driver_DESC"

	NicOrderByInputDriverStateASC NicOrderByInput = "driver_state_ASC"

	NicOrderByInputDriverStateDESC NicOrderByInput = "driver_state_DESC"

	NicOrderByInputGatewayIpASC NicOrderByInput = "gateway_ip_ASC"

	NicOrderByInputGatewayIpDESC NicOrderByInput = "gateway_ip_DESC"

	NicOrderByInputIbdevASC NicOrderByInput = "ibdev_ASC"

	NicOrderByInputIbdevDESC NicOrderByInput = "ibdev_DESC"

	NicOrderByInputIdASC NicOrderByInput = "id_ASC"

	NicOrderByInputIdDESC NicOrderByInput = "id_DESC"

	NicOrderByInputIpAddressASC NicOrderByInput = "ip_address_ASC"

	NicOrderByInputIpAddressDESC NicOrderByInput = "ip_address_DESC"

	NicOrderByInputIsSriovASC NicOrderByInput = "is_sriov_ASC"

	NicOrderByInputIsSriovDESC NicOrderByInput = "is_sriov_DESC"

	NicOrderByInputLocalIdASC NicOrderByInput = "local_id_ASC"

	NicOrderByInputLocalIdDESC NicOrderByInput = "local_id_DESC"

	NicOrderByInputMacAddressASC NicOrderByInput = "mac_address_ASC"

	NicOrderByInputMacAddressDESC NicOrderByInput = "mac_address_DESC"

	NicOrderByInputMaxVfNumASC NicOrderByInput = "max_vf_num_ASC"

	NicOrderByInputMaxVfNumDESC NicOrderByInput = "max_vf_num_DESC"

	NicOrderByInputModelASC NicOrderByInput = "model_ASC"

	NicOrderByInputModelDESC NicOrderByInput = "model_DESC"

	NicOrderByInputMtuASC NicOrderByInput = "mtu_ASC"

	NicOrderByInputMtuDESC NicOrderByInput = "mtu_DESC"

	NicOrderByInputNameASC NicOrderByInput = "name_ASC"

	NicOrderByInputNameDESC NicOrderByInput = "name_DESC"

	NicOrderByInputNicUuidASC NicOrderByInput = "nic_uuid_ASC"

	NicOrderByInputNicUuidDESC NicOrderByInput = "nic_uuid_DESC"

	NicOrderByInputPhysicalASC NicOrderByInput = "physical_ASC"

	NicOrderByInputPhysicalDESC NicOrderByInput = "physical_DESC"

	NicOrderByInputRdmaEnabledASC NicOrderByInput = "rdma_enabled_ASC"

	NicOrderByInputRdmaEnabledDESC NicOrderByInput = "rdma_enabled_DESC"

	NicOrderByInputRunningASC NicOrderByInput = "running_ASC"

	NicOrderByInputRunningDESC NicOrderByInput = "running_DESC"

	NicOrderByInputSpeedASC NicOrderByInput = "speed_ASC"

	NicOrderByInputSpeedDESC NicOrderByInput = "speed_DESC"

	NicOrderByInputSubnetMaskASC NicOrderByInput = "subnet_mask_ASC"

	NicOrderByInputSubnetMaskDESC NicOrderByInput = "subnet_mask_DESC"

	NicOrderByInputTotalVfNumASC NicOrderByInput = "total_vf_num_ASC"

	NicOrderByInputTotalVfNumDESC NicOrderByInput = "total_vf_num_DESC"

	NicOrderByInputTypeASC NicOrderByInput = "type_ASC"

	NicOrderByInputTypeDESC NicOrderByInput = "type_DESC"

	NicOrderByInputUpASC NicOrderByInput = "up_ASC"

	NicOrderByInputUpDESC NicOrderByInput = "up_DESC"

	NicOrderByInputUpdatedAtASC NicOrderByInput = "updatedAt_ASC"

	NicOrderByInputUpdatedAtDESC NicOrderByInput = "updatedAt_DESC"

	NicOrderByInputUsedVfNumASC NicOrderByInput = "used_vf_num_ASC"

	NicOrderByInputUsedVfNumDESC NicOrderByInput = "used_vf_num_DESC"
)

// Defines values for NodeTopoOrderByInput.
const (
	NodeTopoOrderByInputCreatedAtASC NodeTopoOrderByInput = "createdAt_ASC"

	NodeTopoOrderByInputCreatedAtDESC NodeTopoOrderByInput = "createdAt_DESC"

	NodeTopoOrderByInputIdASC NodeTopoOrderByInput = "id_ASC"

	NodeTopoOrderByInputIdDESC NodeTopoOrderByInput = "id_DESC"

	NodeTopoOrderByInputLocalIdASC NodeTopoOrderByInput = "local_id_ASC"

	NodeTopoOrderByInputLocalIdDESC NodeTopoOrderByInput = "local_id_DESC"

	NodeTopoOrderByInputNameASC NodeTopoOrderByInput = "name_ASC"

	NodeTopoOrderByInputNameDESC NodeTopoOrderByInput = "name_DESC"

	NodeTopoOrderByInputPositionASC NodeTopoOrderByInput = "position_ASC"

	NodeTopoOrderByInputPositionDESC NodeTopoOrderByInput = "position_DESC"

	NodeTopoOrderByInputUpdatedAtASC NodeTopoOrderByInput = "updatedAt_ASC"

	NodeTopoOrderByInputUpdatedAtDESC NodeTopoOrderByInput = "updatedAt_DESC"
)

// Defines values for NotifierLanguageCode.
const (
	NotifierLanguageCodeENUS NotifierLanguageCode = "EN_US"

	NotifierLanguageCodeZHCN NotifierLanguageCode = "ZH_CN"
)

// Defines values for NotifierSecurityMode.
const (
	NotifierSecurityModeSSL NotifierSecurityMode = "SSL"

	NotifierSecurityModeSTARTTLS NotifierSecurityMode = "STARTTLS"

	NotifierSecurityModeUNSPECIFIED NotifierSecurityMode = "UNSPECIFIED"
)

// Defines values for NtpMode.
const (
	NtpModeEXTERNAL NtpMode = "EXTERNAL"

	NtpModeINTERNAL NtpMode = "INTERNAL"
)

// Defines values for NvmfNamespaceOrderByInput.
const (
	NvmfNamespaceOrderByInputAssignedSizeASC NvmfNamespaceOrderByInput = "assigned_size_ASC"

	NvmfNamespaceOrderByInputAssignedSizeDESC NvmfNamespaceOrderByInput = "assigned_size_DESC"

	NvmfNamespaceOrderByInputBpsASC NvmfNamespaceOrderByInput = "bps_ASC"

	NvmfNamespaceOrderByInputBpsDESC NvmfNamespaceOrderByInput = "bps_DESC"

	NvmfNamespaceOrderByInputBpsMaxASC NvmfNamespaceOrderByInput = "bps_max_ASC"

	NvmfNamespaceOrderByInputBpsMaxDESC NvmfNamespaceOrderByInput = "bps_max_DESC"

	NvmfNamespaceOrderByInputBpsMaxLengthASC NvmfNamespaceOrderByInput = "bps_max_length_ASC"

	NvmfNamespaceOrderByInputBpsMaxLengthDESC NvmfNamespaceOrderByInput = "bps_max_length_DESC"

	NvmfNamespaceOrderByInputBpsRdASC NvmfNamespaceOrderByInput = "bps_rd_ASC"

	NvmfNamespaceOrderByInputBpsRdDESC NvmfNamespaceOrderByInput = "bps_rd_DESC"

	NvmfNamespaceOrderByInputBpsRdMaxASC NvmfNamespaceOrderByInput = "bps_rd_max_ASC"

	NvmfNamespaceOrderByInputBpsRdMaxDESC NvmfNamespaceOrderByInput = "bps_rd_max_DESC"

	NvmfNamespaceOrderByInputBpsRdMaxLengthASC NvmfNamespaceOrderByInput = "bps_rd_max_length_ASC"

	NvmfNamespaceOrderByInputBpsRdMaxLengthDESC NvmfNamespaceOrderByInput = "bps_rd_max_length_DESC"

	NvmfNamespaceOrderByInputBpsWrASC NvmfNamespaceOrderByInput = "bps_wr_ASC"

	NvmfNamespaceOrderByInputBpsWrDESC NvmfNamespaceOrderByInput = "bps_wr_DESC"

	NvmfNamespaceOrderByInputBpsWrMaxASC NvmfNamespaceOrderByInput = "bps_wr_max_ASC"

	NvmfNamespaceOrderByInputBpsWrMaxDESC NvmfNamespaceOrderByInput = "bps_wr_max_DESC"

	NvmfNamespaceOrderByInputBpsWrMaxLengthASC NvmfNamespaceOrderByInput = "bps_wr_max_length_ASC"

	NvmfNamespaceOrderByInputBpsWrMaxLengthDESC NvmfNamespaceOrderByInput = "bps_wr_max_length_DESC"

	NvmfNamespaceOrderByInputCreatedAtASC NvmfNamespaceOrderByInput = "createdAt_ASC"

	NvmfNamespaceOrderByInputCreatedAtDESC NvmfNamespaceOrderByInput = "createdAt_DESC"

	NvmfNamespaceOrderByInputEntityAsyncStatusASC NvmfNamespaceOrderByInput = "entityAsyncStatus_ASC"

	NvmfNamespaceOrderByInputEntityAsyncStatusDESC NvmfNamespaceOrderByInput = "entityAsyncStatus_DESC"

	NvmfNamespaceOrderByInputIdASC NvmfNamespaceOrderByInput = "id_ASC"

	NvmfNamespaceOrderByInputIdDESC NvmfNamespaceOrderByInput = "id_DESC"

	NvmfNamespaceOrderByInputIoSizeASC NvmfNamespaceOrderByInput = "io_size_ASC"

	NvmfNamespaceOrderByInputIoSizeDESC NvmfNamespaceOrderByInput = "io_size_DESC"

	NvmfNamespaceOrderByInputIopsASC NvmfNamespaceOrderByInput = "iops_ASC"

	NvmfNamespaceOrderByInputIopsDESC NvmfNamespaceOrderByInput = "iops_DESC"

	NvmfNamespaceOrderByInputIopsMaxASC NvmfNamespaceOrderByInput = "iops_max_ASC"

	NvmfNamespaceOrderByInputIopsMaxDESC NvmfNamespaceOrderByInput = "iops_max_DESC"

	NvmfNamespaceOrderByInputIopsMaxLengthASC NvmfNamespaceOrderByInput = "iops_max_length_ASC"

	NvmfNamespaceOrderByInputIopsMaxLengthDESC NvmfNamespaceOrderByInput = "iops_max_length_DESC"

	NvmfNamespaceOrderByInputIopsRdASC NvmfNamespaceOrderByInput = "iops_rd_ASC"

	NvmfNamespaceOrderByInputIopsRdDESC NvmfNamespaceOrderByInput = "iops_rd_DESC"

	NvmfNamespaceOrderByInputIopsRdMaxASC NvmfNamespaceOrderByInput = "iops_rd_max_ASC"

	NvmfNamespaceOrderByInputIopsRdMaxDESC NvmfNamespaceOrderByInput = "iops_rd_max_DESC"

	NvmfNamespaceOrderByInputIopsRdMaxLengthASC NvmfNamespaceOrderByInput = "iops_rd_max_length_ASC"

	NvmfNamespaceOrderByInputIopsRdMaxLengthDESC NvmfNamespaceOrderByInput = "iops_rd_max_length_DESC"

	NvmfNamespaceOrderByInputIopsWrASC NvmfNamespaceOrderByInput = "iops_wr_ASC"

	NvmfNamespaceOrderByInputIopsWrDESC NvmfNamespaceOrderByInput = "iops_wr_DESC"

	NvmfNamespaceOrderByInputIopsWrMaxASC NvmfNamespaceOrderByInput = "iops_wr_max_ASC"

	NvmfNamespaceOrderByInputIopsWrMaxDESC NvmfNamespaceOrderByInput = "iops_wr_max_DESC"

	NvmfNamespaceOrderByInputIopsWrMaxLengthASC NvmfNamespaceOrderByInput = "iops_wr_max_length_ASC"

	NvmfNamespaceOrderByInputIopsWrMaxLengthDESC NvmfNamespaceOrderByInput = "iops_wr_max_length_DESC"

	NvmfNamespaceOrderByInputIsSharedASC NvmfNamespaceOrderByInput = "is_shared_ASC"

	NvmfNamespaceOrderByInputIsSharedDESC NvmfNamespaceOrderByInput = "is_shared_DESC"

	NvmfNamespaceOrderByInputLocalCreatedAtASC NvmfNamespaceOrderByInput = "local_created_at_ASC"

	NvmfNamespaceOrderByInputLocalCreatedAtDESC NvmfNamespaceOrderByInput = "local_created_at_DESC"

	NvmfNamespaceOrderByInputLocalIdASC NvmfNamespaceOrderByInput = "local_id_ASC"

	NvmfNamespaceOrderByInputLocalIdDESC NvmfNamespaceOrderByInput = "local_id_DESC"

	NvmfNamespaceOrderByInputNameASC NvmfNamespaceOrderByInput = "name_ASC"

	NvmfNamespaceOrderByInputNameDESC NvmfNamespaceOrderByInput = "name_DESC"

	NvmfNamespaceOrderByInputNamespaceIdASC NvmfNamespaceOrderByInput = "namespace_id_ASC"

	NvmfNamespaceOrderByInputNamespaceIdDESC NvmfNamespaceOrderByInput = "namespace_id_DESC"

	NvmfNamespaceOrderByInputNqnWhitelistASC NvmfNamespaceOrderByInput = "nqn_whitelist_ASC"

	NvmfNamespaceOrderByInputNqnWhitelistDESC NvmfNamespaceOrderByInput = "nqn_whitelist_DESC"

	NvmfNamespaceOrderByInputReplicaNumASC NvmfNamespaceOrderByInput = "replica_num_ASC"

	NvmfNamespaceOrderByInputReplicaNumDESC NvmfNamespaceOrderByInput = "replica_num_DESC"

	NvmfNamespaceOrderByInputSharedSizeASC NvmfNamespaceOrderByInput = "shared_size_ASC"

	NvmfNamespaceOrderByInputSharedSizeDESC NvmfNamespaceOrderByInput = "shared_size_DESC"

	NvmfNamespaceOrderByInputSnapshotNumASC NvmfNamespaceOrderByInput = "snapshot_num_ASC"

	NvmfNamespaceOrderByInputSnapshotNumDESC NvmfNamespaceOrderByInput = "snapshot_num_DESC"

	NvmfNamespaceOrderByInputStripeNumASC NvmfNamespaceOrderByInput = "stripe_num_ASC"

	NvmfNamespaceOrderByInputStripeNumDESC NvmfNamespaceOrderByInput = "stripe_num_DESC"

	NvmfNamespaceOrderByInputStripeSizeASC NvmfNamespaceOrderByInput = "stripe_size_ASC"

	NvmfNamespaceOrderByInputStripeSizeDESC NvmfNamespaceOrderByInput = "stripe_size_DESC"

	NvmfNamespaceOrderByInputThinProvisionASC NvmfNamespaceOrderByInput = "thin_provision_ASC"

	NvmfNamespaceOrderByInputThinProvisionDESC NvmfNamespaceOrderByInput = "thin_provision_DESC"

	NvmfNamespaceOrderByInputUniqueSizeASC NvmfNamespaceOrderByInput = "unique_size_ASC"

	NvmfNamespaceOrderByInputUniqueSizeDESC NvmfNamespaceOrderByInput = "unique_size_DESC"

	NvmfNamespaceOrderByInputUpdatedAtASC NvmfNamespaceOrderByInput = "updatedAt_ASC"

	NvmfNamespaceOrderByInputUpdatedAtDESC NvmfNamespaceOrderByInput = "updatedAt_DESC"

	NvmfNamespaceOrderByInputZbsVolumeIdASC NvmfNamespaceOrderByInput = "zbs_volume_id_ASC"

	NvmfNamespaceOrderByInputZbsVolumeIdDESC NvmfNamespaceOrderByInput = "zbs_volume_id_DESC"
)

// Defines values for NvmfNamespaceSnapshotOrderByInput.
const (
	NvmfNamespaceSnapshotOrderByInputCreatedAtASC NvmfNamespaceSnapshotOrderByInput = "createdAt_ASC"

	NvmfNamespaceSnapshotOrderByInputCreatedAtDESC NvmfNamespaceSnapshotOrderByInput = "createdAt_DESC"

	NvmfNamespaceSnapshotOrderByInputEntityAsyncStatusASC NvmfNamespaceSnapshotOrderByInput = "entityAsyncStatus_ASC"

	NvmfNamespaceSnapshotOrderByInputEntityAsyncStatusDESC NvmfNamespaceSnapshotOrderByInput = "entityAsyncStatus_DESC"

	NvmfNamespaceSnapshotOrderByInputIdASC NvmfNamespaceSnapshotOrderByInput = "id_ASC"

	NvmfNamespaceSnapshotOrderByInputIdDESC NvmfNamespaceSnapshotOrderByInput = "id_DESC"

	NvmfNamespaceSnapshotOrderByInputLocalCreatedAtASC NvmfNamespaceSnapshotOrderByInput = "local_created_at_ASC"

	NvmfNamespaceSnapshotOrderByInputLocalCreatedAtDESC NvmfNamespaceSnapshotOrderByInput = "local_created_at_DESC"

	NvmfNamespaceSnapshotOrderByInputLocalIdASC NvmfNamespaceSnapshotOrderByInput = "local_id_ASC"

	NvmfNamespaceSnapshotOrderByInputLocalIdDESC NvmfNamespaceSnapshotOrderByInput = "local_id_DESC"

	NvmfNamespaceSnapshotOrderByInputNameASC NvmfNamespaceSnapshotOrderByInput = "name_ASC"

	NvmfNamespaceSnapshotOrderByInputNameDESC NvmfNamespaceSnapshotOrderByInput = "name_DESC"

	NvmfNamespaceSnapshotOrderByInputUniqueSizeASC NvmfNamespaceSnapshotOrderByInput = "unique_size_ASC"

	NvmfNamespaceSnapshotOrderByInputUniqueSizeDESC NvmfNamespaceSnapshotOrderByInput = "unique_size_DESC"

	NvmfNamespaceSnapshotOrderByInputUpdatedAtASC NvmfNamespaceSnapshotOrderByInput = "updatedAt_ASC"

	NvmfNamespaceSnapshotOrderByInputUpdatedAtDESC NvmfNamespaceSnapshotOrderByInput = "updatedAt_DESC"
)

// Defines values for NvmfSubsystemOrderByInput.
const (
	NvmfSubsystemOrderByInputBpsASC NvmfSubsystemOrderByInput = "bps_ASC"

	NvmfSubsystemOrderByInputBpsDESC NvmfSubsystemOrderByInput = "bps_DESC"

	NvmfSubsystemOrderByInputBpsMaxASC NvmfSubsystemOrderByInput = "bps_max_ASC"

	NvmfSubsystemOrderByInputBpsMaxDESC NvmfSubsystemOrderByInput = "bps_max_DESC"

	NvmfSubsystemOrderByInputBpsMaxLengthASC NvmfSubsystemOrderByInput = "bps_max_length_ASC"

	NvmfSubsystemOrderByInputBpsMaxLengthDESC NvmfSubsystemOrderByInput = "bps_max_length_DESC"

	NvmfSubsystemOrderByInputBpsRdASC NvmfSubsystemOrderByInput = "bps_rd_ASC"

	NvmfSubsystemOrderByInputBpsRdDESC NvmfSubsystemOrderByInput = "bps_rd_DESC"

	NvmfSubsystemOrderByInputBpsRdMaxASC NvmfSubsystemOrderByInput = "bps_rd_max_ASC"

	NvmfSubsystemOrderByInputBpsRdMaxDESC NvmfSubsystemOrderByInput = "bps_rd_max_DESC"

	NvmfSubsystemOrderByInputBpsRdMaxLengthASC NvmfSubsystemOrderByInput = "bps_rd_max_length_ASC"

	NvmfSubsystemOrderByInputBpsRdMaxLengthDESC NvmfSubsystemOrderByInput = "bps_rd_max_length_DESC"

	NvmfSubsystemOrderByInputBpsWrASC NvmfSubsystemOrderByInput = "bps_wr_ASC"

	NvmfSubsystemOrderByInputBpsWrDESC NvmfSubsystemOrderByInput = "bps_wr_DESC"

	NvmfSubsystemOrderByInputBpsWrMaxASC NvmfSubsystemOrderByInput = "bps_wr_max_ASC"

	NvmfSubsystemOrderByInputBpsWrMaxDESC NvmfSubsystemOrderByInput = "bps_wr_max_DESC"

	NvmfSubsystemOrderByInputBpsWrMaxLengthASC NvmfSubsystemOrderByInput = "bps_wr_max_length_ASC"

	NvmfSubsystemOrderByInputBpsWrMaxLengthDESC NvmfSubsystemOrderByInput = "bps_wr_max_length_DESC"

	NvmfSubsystemOrderByInputCreatedAtASC NvmfSubsystemOrderByInput = "createdAt_ASC"

	NvmfSubsystemOrderByInputCreatedAtDESC NvmfSubsystemOrderByInput = "createdAt_DESC"

	NvmfSubsystemOrderByInputDescriptionASC NvmfSubsystemOrderByInput = "description_ASC"

	NvmfSubsystemOrderByInputDescriptionDESC NvmfSubsystemOrderByInput = "description_DESC"

	NvmfSubsystemOrderByInputEntityAsyncStatusASC NvmfSubsystemOrderByInput = "entityAsyncStatus_ASC"

	NvmfSubsystemOrderByInputEntityAsyncStatusDESC NvmfSubsystemOrderByInput = "entityAsyncStatus_DESC"

	NvmfSubsystemOrderByInputExternalUseASC NvmfSubsystemOrderByInput = "external_use_ASC"

	NvmfSubsystemOrderByInputExternalUseDESC NvmfSubsystemOrderByInput = "external_use_DESC"

	NvmfSubsystemOrderByInputIdASC NvmfSubsystemOrderByInput = "id_ASC"

	NvmfSubsystemOrderByInputIdDESC NvmfSubsystemOrderByInput = "id_DESC"

	NvmfSubsystemOrderByInputInternalASC NvmfSubsystemOrderByInput = "internal_ASC"

	NvmfSubsystemOrderByInputInternalDESC NvmfSubsystemOrderByInput = "internal_DESC"

	NvmfSubsystemOrderByInputIoSizeASC NvmfSubsystemOrderByInput = "io_size_ASC"

	NvmfSubsystemOrderByInputIoSizeDESC NvmfSubsystemOrderByInput = "io_size_DESC"

	NvmfSubsystemOrderByInputIopsASC NvmfSubsystemOrderByInput = "iops_ASC"

	NvmfSubsystemOrderByInputIopsDESC NvmfSubsystemOrderByInput = "iops_DESC"

	NvmfSubsystemOrderByInputIopsMaxASC NvmfSubsystemOrderByInput = "iops_max_ASC"

	NvmfSubsystemOrderByInputIopsMaxDESC NvmfSubsystemOrderByInput = "iops_max_DESC"

	NvmfSubsystemOrderByInputIopsMaxLengthASC NvmfSubsystemOrderByInput = "iops_max_length_ASC"

	NvmfSubsystemOrderByInputIopsMaxLengthDESC NvmfSubsystemOrderByInput = "iops_max_length_DESC"

	NvmfSubsystemOrderByInputIopsRdASC NvmfSubsystemOrderByInput = "iops_rd_ASC"

	NvmfSubsystemOrderByInputIopsRdDESC NvmfSubsystemOrderByInput = "iops_rd_DESC"

	NvmfSubsystemOrderByInputIopsRdMaxASC NvmfSubsystemOrderByInput = "iops_rd_max_ASC"

	NvmfSubsystemOrderByInputIopsRdMaxDESC NvmfSubsystemOrderByInput = "iops_rd_max_DESC"

	NvmfSubsystemOrderByInputIopsRdMaxLengthASC NvmfSubsystemOrderByInput = "iops_rd_max_length_ASC"

	NvmfSubsystemOrderByInputIopsRdMaxLengthDESC NvmfSubsystemOrderByInput = "iops_rd_max_length_DESC"

	NvmfSubsystemOrderByInputIopsWrASC NvmfSubsystemOrderByInput = "iops_wr_ASC"

	NvmfSubsystemOrderByInputIopsWrDESC NvmfSubsystemOrderByInput = "iops_wr_DESC"

	NvmfSubsystemOrderByInputIopsWrMaxASC NvmfSubsystemOrderByInput = "iops_wr_max_ASC"

	NvmfSubsystemOrderByInputIopsWrMaxDESC NvmfSubsystemOrderByInput = "iops_wr_max_DESC"

	NvmfSubsystemOrderByInputIopsWrMaxLengthASC NvmfSubsystemOrderByInput = "iops_wr_max_length_ASC"

	NvmfSubsystemOrderByInputIopsWrMaxLengthDESC NvmfSubsystemOrderByInput = "iops_wr_max_length_DESC"

	NvmfSubsystemOrderByInputIpWhitelistASC NvmfSubsystemOrderByInput = "ip_whitelist_ASC"

	NvmfSubsystemOrderByInputIpWhitelistDESC NvmfSubsystemOrderByInput = "ip_whitelist_DESC"

	NvmfSubsystemOrderByInputLocalIdASC NvmfSubsystemOrderByInput = "local_id_ASC"

	NvmfSubsystemOrderByInputLocalIdDESC NvmfSubsystemOrderByInput = "local_id_DESC"

	NvmfSubsystemOrderByInputNameASC NvmfSubsystemOrderByInput = "name_ASC"

	NvmfSubsystemOrderByInputNameDESC NvmfSubsystemOrderByInput = "name_DESC"

	NvmfSubsystemOrderByInputNqnNameASC NvmfSubsystemOrderByInput = "nqn_name_ASC"

	NvmfSubsystemOrderByInputNqnNameDESC NvmfSubsystemOrderByInput = "nqn_name_DESC"

	NvmfSubsystemOrderByInputNqnWhitelistASC NvmfSubsystemOrderByInput = "nqn_whitelist_ASC"

	NvmfSubsystemOrderByInputNqnWhitelistDESC NvmfSubsystemOrderByInput = "nqn_whitelist_DESC"

	NvmfSubsystemOrderByInputPolicyASC NvmfSubsystemOrderByInput = "policy_ASC"

	NvmfSubsystemOrderByInputPolicyDESC NvmfSubsystemOrderByInput = "policy_DESC"

	NvmfSubsystemOrderByInputReplicaNumASC NvmfSubsystemOrderByInput = "replica_num_ASC"

	NvmfSubsystemOrderByInputReplicaNumDESC NvmfSubsystemOrderByInput = "replica_num_DESC"

	NvmfSubsystemOrderByInputStripeNumASC NvmfSubsystemOrderByInput = "stripe_num_ASC"

	NvmfSubsystemOrderByInputStripeNumDESC NvmfSubsystemOrderByInput = "stripe_num_DESC"

	NvmfSubsystemOrderByInputStripeSizeASC NvmfSubsystemOrderByInput = "stripe_size_ASC"

	NvmfSubsystemOrderByInputStripeSizeDESC NvmfSubsystemOrderByInput = "stripe_size_DESC"

	NvmfSubsystemOrderByInputThinProvisionASC NvmfSubsystemOrderByInput = "thin_provision_ASC"

	NvmfSubsystemOrderByInputThinProvisionDESC NvmfSubsystemOrderByInput = "thin_provision_DESC"

	NvmfSubsystemOrderByInputUpdatedAtASC NvmfSubsystemOrderByInput = "updatedAt_ASC"

	NvmfSubsystemOrderByInputUpdatedAtDESC NvmfSubsystemOrderByInput = "updatedAt_DESC"
)

// Defines values for NvmfSubsystemPolicyType.
const (
	NvmfSubsystemPolicyTypeBALANCE NvmfSubsystemPolicyType = "BALANCE"

	NvmfSubsystemPolicyTypeINHERIT NvmfSubsystemPolicyType = "INHERIT"
)

// Defines values for OrganizationOrderByInput.
const (
	OrganizationOrderByInputCreatedAtASC OrganizationOrderByInput = "createdAt_ASC"

	OrganizationOrderByInputCreatedAtDESC OrganizationOrderByInput = "createdAt_DESC"

	OrganizationOrderByInputIdASC OrganizationOrderByInput = "id_ASC"

	OrganizationOrderByInputIdDESC OrganizationOrderByInput = "id_DESC"

	OrganizationOrderByInputNameASC OrganizationOrderByInput = "name_ASC"

	OrganizationOrderByInputNameDESC OrganizationOrderByInput = "name_DESC"

	OrganizationOrderByInputUpdatedAtASC OrganizationOrderByInput = "updatedAt_ASC"

	OrganizationOrderByInputUpdatedAtDESC OrganizationOrderByInput = "updatedAt_DESC"
)

// Defines values for PartitionUsage.
const (
	PartitionUsageBOOT PartitionUsage = "BOOT"

	PartitionUsageCACHE PartitionUsage = "CACHE"

	PartitionUsageJOURNAL PartitionUsage = "JOURNAL"

	PartitionUsageMETAD PartitionUsage = "METAD"

	PartitionUsagePARTITION PartitionUsage = "PARTITION"

	PartitionUsageSWAP PartitionUsage = "SWAP"

	PartitionUsageSYSTEM PartitionUsage = "SYSTEM"

	PartitionUsageUNMOUNTED PartitionUsage = "UNMOUNTED"

	PartitionUsageUNPARTED PartitionUsage = "UNPARTED"

	PartitionUsageZOOKEEPER PartitionUsage = "ZOOKEEPER"
)

// Defines values for PmemDimmOrderByInput.
const (
	PmemDimmOrderByInputCapacityASC PmemDimmOrderByInput = "capacity_ASC"

	PmemDimmOrderByInputCapacityDESC PmemDimmOrderByInput = "capacity_DESC"

	PmemDimmOrderByInputCreatedAtASC PmemDimmOrderByInput = "createdAt_ASC"

	PmemDimmOrderByInputCreatedAtDESC PmemDimmOrderByInput = "createdAt_DESC"

	PmemDimmOrderByInputDeviceLocatorASC PmemDimmOrderByInput = "device_locator_ASC"

	PmemDimmOrderByInputDeviceLocatorDESC PmemDimmOrderByInput = "device_locator_DESC"

	PmemDimmOrderByInputHealthStatusASC PmemDimmOrderByInput = "health_status_ASC"

	PmemDimmOrderByInputHealthStatusDESC PmemDimmOrderByInput = "health_status_DESC"

	PmemDimmOrderByInputIdASC PmemDimmOrderByInput = "id_ASC"

	PmemDimmOrderByInputIdDESC PmemDimmOrderByInput = "id_DESC"

	PmemDimmOrderByInputLocalIdASC PmemDimmOrderByInput = "local_id_ASC"

	PmemDimmOrderByInputLocalIdDESC PmemDimmOrderByInput = "local_id_DESC"

	PmemDimmOrderByInputNameASC PmemDimmOrderByInput = "name_ASC"

	PmemDimmOrderByInputNameDESC PmemDimmOrderByInput = "name_DESC"

	PmemDimmOrderByInputNumaNodeASC PmemDimmOrderByInput = "numa_node_ASC"

	PmemDimmOrderByInputNumaNodeDESC PmemDimmOrderByInput = "numa_node_DESC"

	PmemDimmOrderByInputPartNumberASC PmemDimmOrderByInput = "part_number_ASC"

	PmemDimmOrderByInputPartNumberDESC PmemDimmOrderByInput = "part_number_DESC"

	PmemDimmOrderByInputRemainingLifePercentASC PmemDimmOrderByInput = "remaining_life_percent_ASC"

	PmemDimmOrderByInputRemainingLifePercentDESC PmemDimmOrderByInput = "remaining_life_percent_DESC"

	PmemDimmOrderByInputUpdatedAtASC PmemDimmOrderByInput = "updatedAt_ASC"

	PmemDimmOrderByInputUpdatedAtDESC PmemDimmOrderByInput = "updatedAt_DESC"

	PmemDimmOrderByInputVersionASC PmemDimmOrderByInput = "version_ASC"

	PmemDimmOrderByInputVersionDESC PmemDimmOrderByInput = "version_DESC"
)

// Defines values for PositionTypename.
const (
	PositionTypenamePosition PositionTypename = "position"
)

// Defines values for PowerPosition.
const (
	PowerPositionLEFT PowerPosition = "LEFT"

	PowerPositionMIDDLE PowerPosition = "MIDDLE"

	PowerPositionRIGHT PowerPosition = "RIGHT"
)

// Defines values for ProtectSnapshotStatus.
const (
	ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSCREATED ProtectSnapshotStatus = "PROTECT_SNAPSHOT_STATUS_CREATED"

	ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSCREATING ProtectSnapshotStatus = "PROTECT_SNAPSHOT_STATUS_CREATING"

	ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSDELETED ProtectSnapshotStatus = "PROTECT_SNAPSHOT_STATUS_DELETED"

	ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSFAILED ProtectSnapshotStatus = "PROTECT_SNAPSHOT_STATUS_FAILED"
)

// Defines values for RackTopoOrderByInput.
const (
	RackTopoOrderByInputCreatedAtASC RackTopoOrderByInput = "createdAt_ASC"

	RackTopoOrderByInputCreatedAtDESC RackTopoOrderByInput = "createdAt_DESC"

	RackTopoOrderByInputHeightASC RackTopoOrderByInput = "height_ASC"

	RackTopoOrderByInputHeightDESC RackTopoOrderByInput = "height_DESC"

	RackTopoOrderByInputIdASC RackTopoOrderByInput = "id_ASC"

	RackTopoOrderByInputIdDESC RackTopoOrderByInput = "id_DESC"

	RackTopoOrderByInputLocalIdASC RackTopoOrderByInput = "local_id_ASC"

	RackTopoOrderByInputLocalIdDESC RackTopoOrderByInput = "local_id_DESC"

	RackTopoOrderByInputNameASC RackTopoOrderByInput = "name_ASC"

	RackTopoOrderByInputNameDESC RackTopoOrderByInput = "name_DESC"

	RackTopoOrderByInputUpdatedAtASC RackTopoOrderByInput = "updatedAt_ASC"

	RackTopoOrderByInputUpdatedAtDESC RackTopoOrderByInput = "updatedAt_DESC"
)

// Defines values for ReportResourceInputEnum.
const (
	ReportResourceInputEnumALERT ReportResourceInputEnum = "ALERT"

	ReportResourceInputEnumALL ReportResourceInputEnum = "ALL"

	ReportResourceInputEnumCLUSTER ReportResourceInputEnum = "CLUSTER"

	ReportResourceInputEnumDATACENTER ReportResourceInputEnum = "DATA_CENTER"

	ReportResourceInputEnumDISK ReportResourceInputEnum = "DISK"

	ReportResourceInputEnumELFIMAGE ReportResourceInputEnum = "ELF_IMAGE"

	ReportResourceInputEnumENTITYFILTERS ReportResourceInputEnum = "ENTITY_FILTERS"

	ReportResourceInputEnumGLOBALALERTRULE ReportResourceInputEnum = "GLOBAL_ALERT_RULE"

	ReportResourceInputEnumHOST ReportResourceInputEnum = "HOST"

	ReportResourceInputEnumTASK ReportResourceInputEnum = "TASK"

	ReportResourceInputEnumVDS ReportResourceInputEnum = "VDS"

	ReportResourceInputEnumVLAN ReportResourceInputEnum = "VLAN"

	ReportResourceInputEnumVM ReportResourceInputEnum = "VM"

	ReportResourceInputEnumVMTEMPLATE ReportResourceInputEnum = "VM_TEMPLATE"
)

// Defines values for ReportTaskOrderByInput.
const (
	ReportTaskOrderByInputCreatedAtASC ReportTaskOrderByInput = "createdAt_ASC"

	ReportTaskOrderByInputCreatedAtDESC ReportTaskOrderByInput = "createdAt_DESC"

	ReportTaskOrderByInputIdASC ReportTaskOrderByInput = "id_ASC"

	ReportTaskOrderByInputIdDESC ReportTaskOrderByInput = "id_DESC"

	ReportTaskOrderByInputInternalASC ReportTaskOrderByInput = "internal_ASC"

	ReportTaskOrderByInputInternalDESC ReportTaskOrderByInput = "internal_DESC"

	ReportTaskOrderByInputNameASC ReportTaskOrderByInput = "name_ASC"

	ReportTaskOrderByInputNameDESC ReportTaskOrderByInput = "name_DESC"

	ReportTaskOrderByInputPlanIdASC ReportTaskOrderByInput = "plan_id_ASC"

	ReportTaskOrderByInputPlanIdDESC ReportTaskOrderByInput = "plan_id_DESC"

	ReportTaskOrderByInputStatusASC ReportTaskOrderByInput = "status_ASC"

	ReportTaskOrderByInputStatusDESC ReportTaskOrderByInput = "status_DESC"

	ReportTaskOrderByInputUpdatedAtASC ReportTaskOrderByInput = "updatedAt_ASC"

	ReportTaskOrderByInputUpdatedAtDESC ReportTaskOrderByInput = "updatedAt_DESC"
)

// Defines values for ReportTemplateOrderByInput.
const (
	ReportTemplateOrderByInputCreatedAtASC ReportTemplateOrderByInput = "createdAt_ASC"

	ReportTemplateOrderByInputCreatedAtDESC ReportTemplateOrderByInput = "createdAt_DESC"

	ReportTemplateOrderByInputDescriptionASC ReportTemplateOrderByInput = "description_ASC"

	ReportTemplateOrderByInputDescriptionDESC ReportTemplateOrderByInput = "description_DESC"

	ReportTemplateOrderByInputExecutePlanASC ReportTemplateOrderByInput = "execute_plan_ASC"

	ReportTemplateOrderByInputExecutePlanDESC ReportTemplateOrderByInput = "execute_plan_DESC"

	ReportTemplateOrderByInputIdASC ReportTemplateOrderByInput = "id_ASC"

	ReportTemplateOrderByInputIdDESC ReportTemplateOrderByInput = "id_DESC"

	ReportTemplateOrderByInputNameASC ReportTemplateOrderByInput = "name_ASC"

	ReportTemplateOrderByInputNameDESC ReportTemplateOrderByInput = "name_DESC"

	ReportTemplateOrderByInputPresetASC ReportTemplateOrderByInput = "preset_ASC"

	ReportTemplateOrderByInputPresetDESC ReportTemplateOrderByInput = "preset_DESC"

	ReportTemplateOrderByInputResourceMetaASC ReportTemplateOrderByInput = "resource_meta_ASC"

	ReportTemplateOrderByInputResourceMetaDESC ReportTemplateOrderByInput = "resource_meta_DESC"

	ReportTemplateOrderByInputTaskNumASC ReportTemplateOrderByInput = "task_num_ASC"

	ReportTemplateOrderByInputTaskNumDESC ReportTemplateOrderByInput = "task_num_DESC"

	ReportTemplateOrderByInputUpdatedAtASC ReportTemplateOrderByInput = "updatedAt_ASC"

	ReportTemplateOrderByInputUpdatedAtDESC ReportTemplateOrderByInput = "updatedAt_DESC"
)

// Defines values for SeverityEnum.
const (
	SeverityEnumCRITICAL SeverityEnum = "CRITICAL"

	SeverityEnumINFO SeverityEnum = "INFO"

	SeverityEnumNOTICE SeverityEnum = "NOTICE"

	SeverityEnumSEVERITYUNSPECIFIED SeverityEnum = "SEVERITY_UNSPECIFIED"
)

// Defines values for SnapshotGroupOrderByInput.
const (
	SnapshotGroupOrderByInputCreatedAtASC SnapshotGroupOrderByInput = "createdAt_ASC"

	SnapshotGroupOrderByInputCreatedAtDESC SnapshotGroupOrderByInput = "createdAt_DESC"

	SnapshotGroupOrderByInputDeletedASC SnapshotGroupOrderByInput = "deleted_ASC"

	SnapshotGroupOrderByInputDeletedDESC SnapshotGroupOrderByInput = "deleted_DESC"

	SnapshotGroupOrderByInputEntityAsyncStatusASC SnapshotGroupOrderByInput = "entityAsyncStatus_ASC"

	SnapshotGroupOrderByInputEntityAsyncStatusDESC SnapshotGroupOrderByInput = "entityAsyncStatus_DESC"

	SnapshotGroupOrderByInputEstimatedRecyclingTimeASC SnapshotGroupOrderByInput = "estimated_recycling_time_ASC"

	SnapshotGroupOrderByInputEstimatedRecyclingTimeDESC SnapshotGroupOrderByInput = "estimated_recycling_time_DESC"

	SnapshotGroupOrderByInputIdASC SnapshotGroupOrderByInput = "id_ASC"

	SnapshotGroupOrderByInputIdDESC SnapshotGroupOrderByInput = "id_DESC"

	SnapshotGroupOrderByInputInternalASC SnapshotGroupOrderByInput = "internal_ASC"

	SnapshotGroupOrderByInputInternalDESC SnapshotGroupOrderByInput = "internal_DESC"

	SnapshotGroupOrderByInputKeepASC SnapshotGroupOrderByInput = "keep_ASC"

	SnapshotGroupOrderByInputKeepDESC SnapshotGroupOrderByInput = "keep_DESC"

	SnapshotGroupOrderByInputLocalCreatedAtASC SnapshotGroupOrderByInput = "local_created_at_ASC"

	SnapshotGroupOrderByInputLocalCreatedAtDESC SnapshotGroupOrderByInput = "local_created_at_DESC"

	SnapshotGroupOrderByInputLocalIdASC SnapshotGroupOrderByInput = "local_id_ASC"

	SnapshotGroupOrderByInputLocalIdDESC SnapshotGroupOrderByInput = "local_id_DESC"

	SnapshotGroupOrderByInputLogicalSizeBytesASC SnapshotGroupOrderByInput = "logical_size_bytes_ASC"

	SnapshotGroupOrderByInputLogicalSizeBytesDESC SnapshotGroupOrderByInput = "logical_size_bytes_DESC"

	SnapshotGroupOrderByInputNameASC SnapshotGroupOrderByInput = "name_ASC"

	SnapshotGroupOrderByInputNameDESC SnapshotGroupOrderByInput = "name_DESC"

	SnapshotGroupOrderByInputObjectNumASC SnapshotGroupOrderByInput = "object_num_ASC"

	SnapshotGroupOrderByInputObjectNumDESC SnapshotGroupOrderByInput = "object_num_DESC"

	SnapshotGroupOrderByInputUpdatedAtASC SnapshotGroupOrderByInput = "updatedAt_ASC"

	SnapshotGroupOrderByInputUpdatedAtDESC SnapshotGroupOrderByInput = "updatedAt_DESC"

	SnapshotGroupOrderByInputVmInfoASC SnapshotGroupOrderByInput = "vm_info_ASC"

	SnapshotGroupOrderByInputVmInfoDESC SnapshotGroupOrderByInput = "vm_info_DESC"
)

// Defines values for SnapshotPlanExecuteStatus.
const (
	SnapshotPlanExecuteStatusCREATED SnapshotPlanExecuteStatus = "CREATED"

	SnapshotPlanExecuteStatusFAILED SnapshotPlanExecuteStatus = "FAILED"

	SnapshotPlanExecuteStatusINPROGRESS SnapshotPlanExecuteStatus = "IN_PROGRESS"

	SnapshotPlanExecuteStatusSUCCEED SnapshotPlanExecuteStatus = "SUCCEED"

	SnapshotPlanExecuteStatusUNSPECIFIED SnapshotPlanExecuteStatus = "UNSPECIFIED"
)

// Defines values for SnapshotPlanExecuteType.
const (
	SnapshotPlanExecuteTypeDAY SnapshotPlanExecuteType = "DAY"

	SnapshotPlanExecuteTypeHOUR SnapshotPlanExecuteType = "HOUR"

	SnapshotPlanExecuteTypeMONTH SnapshotPlanExecuteType = "MONTH"

	SnapshotPlanExecuteTypeWEEK SnapshotPlanExecuteType = "WEEK"
)

// Defines values for SnapshotPlanOrderByInput.
const (
	SnapshotPlanOrderByInputAutoDeleteNumASC SnapshotPlanOrderByInput = "auto_delete_num_ASC"

	SnapshotPlanOrderByInputAutoDeleteNumDESC SnapshotPlanOrderByInput = "auto_delete_num_DESC"

	SnapshotPlanOrderByInputAutoExecuteNumASC SnapshotPlanOrderByInput = "auto_execute_num_ASC"

	SnapshotPlanOrderByInputAutoExecuteNumDESC SnapshotPlanOrderByInput = "auto_execute_num_DESC"

	SnapshotPlanOrderByInputCreatedAtASC SnapshotPlanOrderByInput = "createdAt_ASC"

	SnapshotPlanOrderByInputCreatedAtDESC SnapshotPlanOrderByInput = "createdAt_DESC"

	SnapshotPlanOrderByInputDescriptionASC SnapshotPlanOrderByInput = "description_ASC"

	SnapshotPlanOrderByInputDescriptionDESC SnapshotPlanOrderByInput = "description_DESC"

	SnapshotPlanOrderByInputEndTimeASC SnapshotPlanOrderByInput = "end_time_ASC"

	SnapshotPlanOrderByInputEndTimeDESC SnapshotPlanOrderByInput = "end_time_DESC"

	SnapshotPlanOrderByInputEntityAsyncStatusASC SnapshotPlanOrderByInput = "entityAsyncStatus_ASC"

	SnapshotPlanOrderByInputEntityAsyncStatusDESC SnapshotPlanOrderByInput = "entityAsyncStatus_DESC"

	SnapshotPlanOrderByInputExecHMASC SnapshotPlanOrderByInput = "exec_h_m_ASC"

	SnapshotPlanOrderByInputExecHMDESC SnapshotPlanOrderByInput = "exec_h_m_DESC"

	SnapshotPlanOrderByInputExecutePlanTypeASC SnapshotPlanOrderByInput = "execute_plan_type_ASC"

	SnapshotPlanOrderByInputExecutePlanTypeDESC SnapshotPlanOrderByInput = "execute_plan_type_DESC"

	SnapshotPlanOrderByInputHealthyASC SnapshotPlanOrderByInput = "healthy_ASC"

	SnapshotPlanOrderByInputHealthyDESC SnapshotPlanOrderByInput = "healthy_DESC"

	SnapshotPlanOrderByInputIdASC SnapshotPlanOrderByInput = "id_ASC"

	SnapshotPlanOrderByInputIdDESC SnapshotPlanOrderByInput = "id_DESC"

	SnapshotPlanOrderByInputLastExecuteEndTimeASC SnapshotPlanOrderByInput = "last_execute_end_time_ASC"

	SnapshotPlanOrderByInputLastExecuteEndTimeDESC SnapshotPlanOrderByInput = "last_execute_end_time_DESC"

	SnapshotPlanOrderByInputLastExecuteStatusASC SnapshotPlanOrderByInput = "last_execute_status_ASC"

	SnapshotPlanOrderByInputLastExecuteStatusDESC SnapshotPlanOrderByInput = "last_execute_status_DESC"

	SnapshotPlanOrderByInputLastExecuteTimeASC SnapshotPlanOrderByInput = "last_execute_time_ASC"

	SnapshotPlanOrderByInputLastExecuteTimeDESC SnapshotPlanOrderByInput = "last_execute_time_DESC"

	SnapshotPlanOrderByInputLocalIdASC SnapshotPlanOrderByInput = "local_id_ASC"

	SnapshotPlanOrderByInputLocalIdDESC SnapshotPlanOrderByInput = "local_id_DESC"

	SnapshotPlanOrderByInputLogicalSizeBytesASC SnapshotPlanOrderByInput = "logical_size_bytes_ASC"

	SnapshotPlanOrderByInputLogicalSizeBytesDESC SnapshotPlanOrderByInput = "logical_size_bytes_DESC"

	SnapshotPlanOrderByInputManualDeleteNumASC SnapshotPlanOrderByInput = "manual_delete_num_ASC"

	SnapshotPlanOrderByInputManualDeleteNumDESC SnapshotPlanOrderByInput = "manual_delete_num_DESC"

	SnapshotPlanOrderByInputManualExecuteNumASC SnapshotPlanOrderByInput = "manual_execute_num_ASC"

	SnapshotPlanOrderByInputManualExecuteNumDESC SnapshotPlanOrderByInput = "manual_execute_num_DESC"

	SnapshotPlanOrderByInputMirrorASC SnapshotPlanOrderByInput = "mirror_ASC"

	SnapshotPlanOrderByInputMirrorDESC SnapshotPlanOrderByInput = "mirror_DESC"

	SnapshotPlanOrderByInputNameASC SnapshotPlanOrderByInput = "name_ASC"

	SnapshotPlanOrderByInputNameDESC SnapshotPlanOrderByInput = "name_DESC"

	SnapshotPlanOrderByInputNextExecuteTimeASC SnapshotPlanOrderByInput = "next_execute_time_ASC"

	SnapshotPlanOrderByInputNextExecuteTimeDESC SnapshotPlanOrderByInput = "next_execute_time_DESC"

	SnapshotPlanOrderByInputObjectNumASC SnapshotPlanOrderByInput = "object_num_ASC"

	SnapshotPlanOrderByInputObjectNumDESC SnapshotPlanOrderByInput = "object_num_DESC"

	SnapshotPlanOrderByInputPhysicalSizeBytesASC SnapshotPlanOrderByInput = "physical_size_bytes_ASC"

	SnapshotPlanOrderByInputPhysicalSizeBytesDESC SnapshotPlanOrderByInput = "physical_size_bytes_DESC"

	SnapshotPlanOrderByInputRemainSnapshotNumASC SnapshotPlanOrderByInput = "remain_snapshot_num_ASC"

	SnapshotPlanOrderByInputRemainSnapshotNumDESC SnapshotPlanOrderByInput = "remain_snapshot_num_DESC"

	SnapshotPlanOrderByInputSnapshotGroupNumASC SnapshotPlanOrderByInput = "snapshot_group_num_ASC"

	SnapshotPlanOrderByInputSnapshotGroupNumDESC SnapshotPlanOrderByInput = "snapshot_group_num_DESC"

	SnapshotPlanOrderByInputStartTimeASC SnapshotPlanOrderByInput = "start_time_ASC"

	SnapshotPlanOrderByInputStartTimeDESC SnapshotPlanOrderByInput = "start_time_DESC"

	SnapshotPlanOrderByInputStatusASC SnapshotPlanOrderByInput = "status_ASC"

	SnapshotPlanOrderByInputStatusDESC SnapshotPlanOrderByInput = "status_DESC"

	SnapshotPlanOrderByInputUpdatedAtASC SnapshotPlanOrderByInput = "updatedAt_ASC"

	SnapshotPlanOrderByInputUpdatedAtDESC SnapshotPlanOrderByInput = "updatedAt_DESC"
)

// Defines values for SnapshotPlanStatus.
const (
	SnapshotPlanStatusNORMAL SnapshotPlanStatus = "NORMAL"

	SnapshotPlanStatusSTOPPED SnapshotPlanStatus = "STOPPED"

	SnapshotPlanStatusSUSPENDED SnapshotPlanStatus = "SUSPENDED"
)

// Defines values for SnapshotPlanTaskOrderByInput.
const (
	SnapshotPlanTaskOrderByInputCreatedAtASC SnapshotPlanTaskOrderByInput = "createdAt_ASC"

	SnapshotPlanTaskOrderByInputCreatedAtDESC SnapshotPlanTaskOrderByInput = "createdAt_DESC"

	SnapshotPlanTaskOrderByInputEndTimeASC SnapshotPlanTaskOrderByInput = "end_time_ASC"

	SnapshotPlanTaskOrderByInputEndTimeDESC SnapshotPlanTaskOrderByInput = "end_time_DESC"

	SnapshotPlanTaskOrderByInputEntityAsyncStatusASC SnapshotPlanTaskOrderByInput = "entityAsyncStatus_ASC"

	SnapshotPlanTaskOrderByInputEntityAsyncStatusDESC SnapshotPlanTaskOrderByInput = "entityAsyncStatus_DESC"

	SnapshotPlanTaskOrderByInputIdASC SnapshotPlanTaskOrderByInput = "id_ASC"

	SnapshotPlanTaskOrderByInputIdDESC SnapshotPlanTaskOrderByInput = "id_DESC"

	SnapshotPlanTaskOrderByInputInternalASC SnapshotPlanTaskOrderByInput = "internal_ASC"

	SnapshotPlanTaskOrderByInputInternalDESC SnapshotPlanTaskOrderByInput = "internal_DESC"

	SnapshotPlanTaskOrderByInputLocalIdASC SnapshotPlanTaskOrderByInput = "local_id_ASC"

	SnapshotPlanTaskOrderByInputLocalIdDESC SnapshotPlanTaskOrderByInput = "local_id_DESC"

	SnapshotPlanTaskOrderByInputStartTimeASC SnapshotPlanTaskOrderByInput = "start_time_ASC"

	SnapshotPlanTaskOrderByInputStartTimeDESC SnapshotPlanTaskOrderByInput = "start_time_DESC"

	SnapshotPlanTaskOrderByInputStatusASC SnapshotPlanTaskOrderByInput = "status_ASC"

	SnapshotPlanTaskOrderByInputStatusDESC SnapshotPlanTaskOrderByInput = "status_DESC"

	SnapshotPlanTaskOrderByInputTypeASC SnapshotPlanTaskOrderByInput = "type_ASC"

	SnapshotPlanTaskOrderByInputTypeDESC SnapshotPlanTaskOrderByInput = "type_DESC"

	SnapshotPlanTaskOrderByInputUpdatedAtASC SnapshotPlanTaskOrderByInput = "updatedAt_ASC"

	SnapshotPlanTaskOrderByInputUpdatedAtDESC SnapshotPlanTaskOrderByInput = "updatedAt_DESC"
)

// Defines values for SnapshotPlanTaskType.
const (
	SnapshotPlanTaskTypeTASKTYPECLONE SnapshotPlanTaskType = "TASK_TYPE_CLONE"

	SnapshotPlanTaskTypeTASKTYPEPROTECT SnapshotPlanTaskType = "TASK_TYPE_PROTECT"

	SnapshotPlanTaskTypeTASKTYPEROLLBACK SnapshotPlanTaskType = "TASK_TYPE_ROLLBACK"
)

// Defines values for SnmpAuthProtocol.
const (
	SnmpAuthProtocolMD5 SnmpAuthProtocol = "MD5"

	SnmpAuthProtocolSHA SnmpAuthProtocol = "SHA"
)

// Defines values for SnmpLanguageCode.
const (
	SnmpLanguageCodeENUS SnmpLanguageCode = "EN_US"

	SnmpLanguageCodeZHCN SnmpLanguageCode = "ZH_CN"
)

// Defines values for SnmpPrivacyProtocol.
const (
	SnmpPrivacyProtocolAES SnmpPrivacyProtocol = "AES"

	SnmpPrivacyProtocolDES SnmpPrivacyProtocol = "DES"
)

// Defines values for SnmpProtocol.
const (
	SnmpProtocolTCP SnmpProtocol = "TCP"

	SnmpProtocolUDP SnmpProtocol = "UDP"
)

// Defines values for SnmpTransportOrderByInput.
const (
	SnmpTransportOrderByInputAuthPassPhraseASC SnmpTransportOrderByInput = "auth_pass_phrase_ASC"

	SnmpTransportOrderByInputAuthPassPhraseDESC SnmpTransportOrderByInput = "auth_pass_phrase_DESC"

	SnmpTransportOrderByInputAuthProtocolASC SnmpTransportOrderByInput = "auth_protocol_ASC"

	SnmpTransportOrderByInputAuthProtocolDESC SnmpTransportOrderByInput = "auth_protocol_DESC"

	SnmpTransportOrderByInputCommunityASC SnmpTransportOrderByInput = "community_ASC"

	SnmpTransportOrderByInputCommunityDESC SnmpTransportOrderByInput = "community_DESC"

	SnmpTransportOrderByInputCreatedAtASC SnmpTransportOrderByInput = "createdAt_ASC"

	SnmpTransportOrderByInputCreatedAtDESC SnmpTransportOrderByInput = "createdAt_DESC"

	SnmpTransportOrderByInputDisabledASC SnmpTransportOrderByInput = "disabled_ASC"

	SnmpTransportOrderByInputDisabledDESC SnmpTransportOrderByInput = "disabled_DESC"

	SnmpTransportOrderByInputEntityAsyncStatusASC SnmpTransportOrderByInput = "entityAsyncStatus_ASC"

	SnmpTransportOrderByInputEntityAsyncStatusDESC SnmpTransportOrderByInput = "entityAsyncStatus_DESC"

	SnmpTransportOrderByInputIdASC SnmpTransportOrderByInput = "id_ASC"

	SnmpTransportOrderByInputIdDESC SnmpTransportOrderByInput = "id_DESC"

	SnmpTransportOrderByInputLocalIdASC SnmpTransportOrderByInput = "local_id_ASC"

	SnmpTransportOrderByInputLocalIdDESC SnmpTransportOrderByInput = "local_id_DESC"

	SnmpTransportOrderByInputNameASC SnmpTransportOrderByInput = "name_ASC"

	SnmpTransportOrderByInputNameDESC SnmpTransportOrderByInput = "name_DESC"

	SnmpTransportOrderByInputPortASC SnmpTransportOrderByInput = "port_ASC"

	SnmpTransportOrderByInputPortDESC SnmpTransportOrderByInput = "port_DESC"

	SnmpTransportOrderByInputPrivacyPassPhraseASC SnmpTransportOrderByInput = "privacy_pass_phrase_ASC"

	SnmpTransportOrderByInputPrivacyPassPhraseDESC SnmpTransportOrderByInput = "privacy_pass_phrase_DESC"

	SnmpTransportOrderByInputPrivacyProtocolASC SnmpTransportOrderByInput = "privacy_protocol_ASC"

	SnmpTransportOrderByInputPrivacyProtocolDESC SnmpTransportOrderByInput = "privacy_protocol_DESC"

	SnmpTransportOrderByInputProtocolASC SnmpTransportOrderByInput = "protocol_ASC"

	SnmpTransportOrderByInputProtocolDESC SnmpTransportOrderByInput = "protocol_DESC"

	SnmpTransportOrderByInputUpdatedAtASC SnmpTransportOrderByInput = "updatedAt_ASC"

	SnmpTransportOrderByInputUpdatedAtDESC SnmpTransportOrderByInput = "updatedAt_DESC"

	SnmpTransportOrderByInputUsernameASC SnmpTransportOrderByInput = "username_ASC"

	SnmpTransportOrderByInputUsernameDESC SnmpTransportOrderByInput = "username_DESC"

	SnmpTransportOrderByInputVersionASC SnmpTransportOrderByInput = "version_ASC"

	SnmpTransportOrderByInputVersionDESC SnmpTransportOrderByInput = "version_DESC"
)

// Defines values for SnmpTrapReceiverOrderByInput.
const (
	SnmpTrapReceiverOrderByInputAuthPassPhraseASC SnmpTrapReceiverOrderByInput = "auth_pass_phrase_ASC"

	SnmpTrapReceiverOrderByInputAuthPassPhraseDESC SnmpTrapReceiverOrderByInput = "auth_pass_phrase_DESC"

	SnmpTrapReceiverOrderByInputAuthProtocolASC SnmpTrapReceiverOrderByInput = "auth_protocol_ASC"

	SnmpTrapReceiverOrderByInputAuthProtocolDESC SnmpTrapReceiverOrderByInput = "auth_protocol_DESC"

	SnmpTrapReceiverOrderByInputCommunityASC SnmpTrapReceiverOrderByInput = "community_ASC"

	SnmpTrapReceiverOrderByInputCommunityDESC SnmpTrapReceiverOrderByInput = "community_DESC"

	SnmpTrapReceiverOrderByInputCreatedAtASC SnmpTrapReceiverOrderByInput = "createdAt_ASC"

	SnmpTrapReceiverOrderByInputCreatedAtDESC SnmpTrapReceiverOrderByInput = "createdAt_DESC"

	SnmpTrapReceiverOrderByInputDisabledASC SnmpTrapReceiverOrderByInput = "disabled_ASC"

	SnmpTrapReceiverOrderByInputDisabledDESC SnmpTrapReceiverOrderByInput = "disabled_DESC"

	SnmpTrapReceiverOrderByInputEngineIdASC SnmpTrapReceiverOrderByInput = "engine_id_ASC"

	SnmpTrapReceiverOrderByInputEngineIdDESC SnmpTrapReceiverOrderByInput = "engine_id_DESC"

	SnmpTrapReceiverOrderByInputEntityAsyncStatusASC SnmpTrapReceiverOrderByInput = "entityAsyncStatus_ASC"

	SnmpTrapReceiverOrderByInputEntityAsyncStatusDESC SnmpTrapReceiverOrderByInput = "entityAsyncStatus_DESC"

	SnmpTrapReceiverOrderByInputHostASC SnmpTrapReceiverOrderByInput = "host_ASC"

	SnmpTrapReceiverOrderByInputHostDESC SnmpTrapReceiverOrderByInput = "host_DESC"

	SnmpTrapReceiverOrderByInputIdASC SnmpTrapReceiverOrderByInput = "id_ASC"

	SnmpTrapReceiverOrderByInputIdDESC SnmpTrapReceiverOrderByInput = "id_DESC"

	SnmpTrapReceiverOrderByInputInformASC SnmpTrapReceiverOrderByInput = "inform_ASC"

	SnmpTrapReceiverOrderByInputInformDESC SnmpTrapReceiverOrderByInput = "inform_DESC"

	SnmpTrapReceiverOrderByInputLanguageCodeASC SnmpTrapReceiverOrderByInput = "language_code_ASC"

	SnmpTrapReceiverOrderByInputLanguageCodeDESC SnmpTrapReceiverOrderByInput = "language_code_DESC"

	SnmpTrapReceiverOrderByInputLocalIdASC SnmpTrapReceiverOrderByInput = "local_id_ASC"

	SnmpTrapReceiverOrderByInputLocalIdDESC SnmpTrapReceiverOrderByInput = "local_id_DESC"

	SnmpTrapReceiverOrderByInputNameASC SnmpTrapReceiverOrderByInput = "name_ASC"

	SnmpTrapReceiverOrderByInputNameDESC SnmpTrapReceiverOrderByInput = "name_DESC"

	SnmpTrapReceiverOrderByInputPortASC SnmpTrapReceiverOrderByInput = "port_ASC"

	SnmpTrapReceiverOrderByInputPortDESC SnmpTrapReceiverOrderByInput = "port_DESC"

	SnmpTrapReceiverOrderByInputPrivacyPassPhraseASC SnmpTrapReceiverOrderByInput = "privacy_pass_phrase_ASC"

	SnmpTrapReceiverOrderByInputPrivacyPassPhraseDESC SnmpTrapReceiverOrderByInput = "privacy_pass_phrase_DESC"

	SnmpTrapReceiverOrderByInputPrivacyProtocolASC SnmpTrapReceiverOrderByInput = "privacy_protocol_ASC"

	SnmpTrapReceiverOrderByInputPrivacyProtocolDESC SnmpTrapReceiverOrderByInput = "privacy_protocol_DESC"

	SnmpTrapReceiverOrderByInputProtocolASC SnmpTrapReceiverOrderByInput = "protocol_ASC"

	SnmpTrapReceiverOrderByInputProtocolDESC SnmpTrapReceiverOrderByInput = "protocol_DESC"

	SnmpTrapReceiverOrderByInputUpdatedAtASC SnmpTrapReceiverOrderByInput = "updatedAt_ASC"

	SnmpTrapReceiverOrderByInputUpdatedAtDESC SnmpTrapReceiverOrderByInput = "updatedAt_DESC"

	SnmpTrapReceiverOrderByInputUsernameASC SnmpTrapReceiverOrderByInput = "username_ASC"

	SnmpTrapReceiverOrderByInputUsernameDESC SnmpTrapReceiverOrderByInput = "username_DESC"

	SnmpTrapReceiverOrderByInputVersionASC SnmpTrapReceiverOrderByInput = "version_ASC"

	SnmpTrapReceiverOrderByInputVersionDESC SnmpTrapReceiverOrderByInput = "version_DESC"
)

// Defines values for SnmpVersion.
const (
	SnmpVersionV2C SnmpVersion = "V2C"

	SnmpVersionV3 SnmpVersion = "V3"
)

// Defines values for SoftwareEdition.
const (
	SoftwareEditionCOMMUNITY SoftwareEdition = "COMMUNITY"

	SoftwareEditionENTERPRISE SoftwareEdition = "ENTERPRISE"

	SoftwareEditionESSENTIAL SoftwareEdition = "ESSENTIAL"

	SoftwareEditionSTANDARD SoftwareEdition = "STANDARD"

	SoftwareEditionTRIAL SoftwareEdition = "TRIAL"
)

// Defines values for StepUnit.
const (
	StepUnitBIT StepUnit = "BIT"

	StepUnitBYTE StepUnit = "BYTE"

	StepUnitCOUNT StepUnit = "COUNT"

	StepUnitPERCENT StepUnit = "PERCENT"
)

// Defines values for StoreConnectionType.
const (
	StoreConnectionTypeISCSI StoreConnectionType = "ISCSI"

	StoreConnectionTypeNVMe StoreConnectionType = "NVMe"
)

// Defines values for SvtImageOrderByInput.
const (
	SvtImageOrderByInputCreatedAtASC SvtImageOrderByInput = "createdAt_ASC"

	SvtImageOrderByInputCreatedAtDESC SvtImageOrderByInput = "createdAt_DESC"

	SvtImageOrderByInputEntityAsyncStatusASC SvtImageOrderByInput = "entityAsyncStatus_ASC"

	SvtImageOrderByInputEntityAsyncStatusDESC SvtImageOrderByInput = "entityAsyncStatus_DESC"

	SvtImageOrderByInputIdASC SvtImageOrderByInput = "id_ASC"

	SvtImageOrderByInputIdDESC SvtImageOrderByInput = "id_DESC"

	SvtImageOrderByInputLocalCreatedAtASC SvtImageOrderByInput = "local_created_at_ASC"

	SvtImageOrderByInputLocalCreatedAtDESC SvtImageOrderByInput = "local_created_at_DESC"

	SvtImageOrderByInputLocalIdASC SvtImageOrderByInput = "local_id_ASC"

	SvtImageOrderByInputLocalIdDESC SvtImageOrderByInput = "local_id_DESC"

	SvtImageOrderByInputNameASC SvtImageOrderByInput = "name_ASC"

	SvtImageOrderByInputNameDESC SvtImageOrderByInput = "name_DESC"

	SvtImageOrderByInputPathASC SvtImageOrderByInput = "path_ASC"

	SvtImageOrderByInputPathDESC SvtImageOrderByInput = "path_DESC"

	SvtImageOrderByInputSizeASC SvtImageOrderByInput = "size_ASC"

	SvtImageOrderByInputSizeDESC SvtImageOrderByInput = "size_DESC"

	SvtImageOrderByInputUpdatedAtASC SvtImageOrderByInput = "updatedAt_ASC"

	SvtImageOrderByInputUpdatedAtDESC SvtImageOrderByInput = "updatedAt_DESC"

	SvtImageOrderByInputVersionASC SvtImageOrderByInput = "version_ASC"

	SvtImageOrderByInputVersionDESC SvtImageOrderByInput = "version_DESC"
)

// Defines values for SystemAuditLogOrderByInput.
const (
	SystemAuditLogOrderByInputActionASC SystemAuditLogOrderByInput = "action_ASC"

	SystemAuditLogOrderByInputActionDESC SystemAuditLogOrderByInput = "action_DESC"

	SystemAuditLogOrderByInputCreatedAtASC SystemAuditLogOrderByInput = "createdAt_ASC"

	SystemAuditLogOrderByInputCreatedAtDESC SystemAuditLogOrderByInput = "createdAt_DESC"

	SystemAuditLogOrderByInputFinishedAtASC SystemAuditLogOrderByInput = "finished_at_ASC"

	SystemAuditLogOrderByInputFinishedAtDESC SystemAuditLogOrderByInput = "finished_at_DESC"

	SystemAuditLogOrderByInputIdASC SystemAuditLogOrderByInput = "id_ASC"

	SystemAuditLogOrderByInputIdDESC SystemAuditLogOrderByInput = "id_DESC"

	SystemAuditLogOrderByInputLocalCreatedAtASC SystemAuditLogOrderByInput = "local_created_at_ASC"

	SystemAuditLogOrderByInputLocalCreatedAtDESC SystemAuditLogOrderByInput = "local_created_at_DESC"

	SystemAuditLogOrderByInputLocalIdASC SystemAuditLogOrderByInput = "local_id_ASC"

	SystemAuditLogOrderByInputLocalIdDESC SystemAuditLogOrderByInput = "local_id_DESC"

	SystemAuditLogOrderByInputMessageASC SystemAuditLogOrderByInput = "message_ASC"

	SystemAuditLogOrderByInputMessageDESC SystemAuditLogOrderByInput = "message_DESC"

	SystemAuditLogOrderByInputResourceIdASC SystemAuditLogOrderByInput = "resource_id_ASC"

	SystemAuditLogOrderByInputResourceIdDESC SystemAuditLogOrderByInput = "resource_id_DESC"

	SystemAuditLogOrderByInputStatusASC SystemAuditLogOrderByInput = "status_ASC"

	SystemAuditLogOrderByInputStatusDESC SystemAuditLogOrderByInput = "status_DESC"

	SystemAuditLogOrderByInputUpdatedAtASC SystemAuditLogOrderByInput = "updatedAt_ASC"

	SystemAuditLogOrderByInputUpdatedAtDESC SystemAuditLogOrderByInput = "updatedAt_DESC"
)

// Defines values for TaskOrderByInput.
const (
	TaskOrderByInputArgsASC TaskOrderByInput = "args_ASC"

	TaskOrderByInputArgsDESC TaskOrderByInput = "args_DESC"

	TaskOrderByInputCreatedAtASC TaskOrderByInput = "createdAt_ASC"

	TaskOrderByInputCreatedAtDESC TaskOrderByInput = "createdAt_DESC"

	TaskOrderByInputDescriptionASC TaskOrderByInput = "description_ASC"

	TaskOrderByInputDescriptionDESC TaskOrderByInput = "description_DESC"

	TaskOrderByInputErrorCodeASC TaskOrderByInput = "error_code_ASC"

	TaskOrderByInputErrorCodeDESC TaskOrderByInput = "error_code_DESC"

	TaskOrderByInputErrorMessageASC TaskOrderByInput = "error_message_ASC"

	TaskOrderByInputErrorMessageDESC TaskOrderByInput = "error_message_DESC"

	TaskOrderByInputFinishedAtASC TaskOrderByInput = "finished_at_ASC"

	TaskOrderByInputFinishedAtDESC TaskOrderByInput = "finished_at_DESC"

	TaskOrderByInputIdASC TaskOrderByInput = "id_ASC"

	TaskOrderByInputIdDESC TaskOrderByInput = "id_DESC"

	TaskOrderByInputInternalASC TaskOrderByInput = "internal_ASC"

	TaskOrderByInputInternalDESC TaskOrderByInput = "internal_DESC"

	TaskOrderByInputLocalCreatedAtASC TaskOrderByInput = "local_created_at_ASC"

	TaskOrderByInputLocalCreatedAtDESC TaskOrderByInput = "local_created_at_DESC"

	TaskOrderByInputProgressASC TaskOrderByInput = "progress_ASC"

	TaskOrderByInputProgressDESC TaskOrderByInput = "progress_DESC"

	TaskOrderByInputResourceIdASC TaskOrderByInput = "resource_id_ASC"

	TaskOrderByInputResourceIdDESC TaskOrderByInput = "resource_id_DESC"

	TaskOrderByInputResourceMutationASC TaskOrderByInput = "resource_mutation_ASC"

	TaskOrderByInputResourceMutationDESC TaskOrderByInput = "resource_mutation_DESC"

	TaskOrderByInputResourceRollbackErrorASC TaskOrderByInput = "resource_rollback_error_ASC"

	TaskOrderByInputResourceRollbackErrorDESC TaskOrderByInput = "resource_rollback_error_DESC"

	TaskOrderByInputResourceRollbackedASC TaskOrderByInput = "resource_rollbacked_ASC"

	TaskOrderByInputResourceRollbackedDESC TaskOrderByInput = "resource_rollbacked_DESC"

	TaskOrderByInputResourceTypeASC TaskOrderByInput = "resource_type_ASC"

	TaskOrderByInputResourceTypeDESC TaskOrderByInput = "resource_type_DESC"

	TaskOrderByInputSnapshotASC TaskOrderByInput = "snapshot_ASC"

	TaskOrderByInputSnapshotDESC TaskOrderByInput = "snapshot_DESC"

	TaskOrderByInputStartedAtASC TaskOrderByInput = "started_at_ASC"

	TaskOrderByInputStartedAtDESC TaskOrderByInput = "started_at_DESC"

	TaskOrderByInputStatusASC TaskOrderByInput = "status_ASC"

	TaskOrderByInputStatusDESC TaskOrderByInput = "status_DESC"

	TaskOrderByInputStepsASC TaskOrderByInput = "steps_ASC"

	TaskOrderByInputStepsDESC TaskOrderByInput = "steps_DESC"

	TaskOrderByInputUpdatedAtASC TaskOrderByInput = "updatedAt_ASC"

	TaskOrderByInputUpdatedAtDESC TaskOrderByInput = "updatedAt_DESC"
)

// Defines values for TaskStatus.
const (
	TaskStatusEXECUTING TaskStatus = "EXECUTING"

	TaskStatusFAILED TaskStatus = "FAILED"

	TaskStatusPENDING TaskStatus = "PENDING"

	TaskStatusSUCCESSED TaskStatus = "SUCCESSED"
)

// Defines values for TimeUnit.
const (
	TimeUnitDAY TimeUnit = "DAY"

	TimeUnitHOUR TimeUnit = "HOUR"

	TimeUnitMONTH TimeUnit = "MONTH"
)

// Defines values for TriggerDiskBlinkParamsLedStatus.
const (
	TriggerDiskBlinkParamsLedStatusOff TriggerDiskBlinkParamsLedStatus = "off"

	TriggerDiskBlinkParamsLedStatusOn TriggerDiskBlinkParamsLedStatus = "on"
)

// Defines values for UploadResourceType.
const (
	UploadResourceTypeCLUSTERIMAGE UploadResourceType = "CLUSTER_IMAGE"

	UploadResourceTypeCLUSTERIMAGEMETA UploadResourceType = "CLUSTER_IMAGE_META"

	UploadResourceTypeELFIMAGE UploadResourceType = "ELF_IMAGE"

	UploadResourceTypeMONITORIMAGE UploadResourceType = "MONITOR_IMAGE"

	UploadResourceTypeSVTIMAGE UploadResourceType = "SVT_IMAGE"
)

// Defines values for UploadTaskOrderByInput.
const (
	UploadTaskOrderByInputArgsASC UploadTaskOrderByInput = "args_ASC"

	UploadTaskOrderByInputArgsDESC UploadTaskOrderByInput = "args_DESC"

	UploadTaskOrderByInputChunkSizeASC UploadTaskOrderByInput = "chunk_size_ASC"

	UploadTaskOrderByInputChunkSizeDESC UploadTaskOrderByInput = "chunk_size_DESC"

	UploadTaskOrderByInputCreatedAtASC UploadTaskOrderByInput = "createdAt_ASC"

	UploadTaskOrderByInputCreatedAtDESC UploadTaskOrderByInput = "createdAt_DESC"

	UploadTaskOrderByInputCurrentChunkASC UploadTaskOrderByInput = "current_chunk_ASC"

	UploadTaskOrderByInputCurrentChunkDESC UploadTaskOrderByInput = "current_chunk_DESC"

	UploadTaskOrderByInputFinishedAtASC UploadTaskOrderByInput = "finished_at_ASC"

	UploadTaskOrderByInputFinishedAtDESC UploadTaskOrderByInput = "finished_at_DESC"

	UploadTaskOrderByInputIdASC UploadTaskOrderByInput = "id_ASC"

	UploadTaskOrderByInputIdDESC UploadTaskOrderByInput = "id_DESC"

	UploadTaskOrderByInputResourceTypeASC UploadTaskOrderByInput = "resource_type_ASC"

	UploadTaskOrderByInputResourceTypeDESC UploadTaskOrderByInput = "resource_type_DESC"

	UploadTaskOrderByInputSizeASC UploadTaskOrderByInput = "size_ASC"

	UploadTaskOrderByInputSizeDESC UploadTaskOrderByInput = "size_DESC"

	UploadTaskOrderByInputStartedAtASC UploadTaskOrderByInput = "started_at_ASC"

	UploadTaskOrderByInputStartedAtDESC UploadTaskOrderByInput = "started_at_DESC"

	UploadTaskOrderByInputStatusASC UploadTaskOrderByInput = "status_ASC"

	UploadTaskOrderByInputStatusDESC UploadTaskOrderByInput = "status_DESC"

	UploadTaskOrderByInputUpdatedAtASC UploadTaskOrderByInput = "updatedAt_ASC"

	UploadTaskOrderByInputUpdatedAtDESC UploadTaskOrderByInput = "updatedAt_DESC"
)

// Defines values for UploadTaskStatus.
const (
	UploadTaskStatusFAILED UploadTaskStatus = "FAILED"

	UploadTaskStatusINITIALIZING UploadTaskStatus = "INITIALIZING"

	UploadTaskStatusPAUSED UploadTaskStatus = "PAUSED"

	UploadTaskStatusSUCCESSED UploadTaskStatus = "SUCCESSED"

	UploadTaskStatusUPLOADING UploadTaskStatus = "UPLOADING"
)

// Defines values for UsbDeviceOrderByInput.
const (
	UsbDeviceOrderByInputBindedASC UsbDeviceOrderByInput = "binded_ASC"

	UsbDeviceOrderByInputBindedDESC UsbDeviceOrderByInput = "binded_DESC"

	UsbDeviceOrderByInputCreatedAtASC UsbDeviceOrderByInput = "createdAt_ASC"

	UsbDeviceOrderByInputCreatedAtDESC UsbDeviceOrderByInput = "createdAt_DESC"

	UsbDeviceOrderByInputDescriptionASC UsbDeviceOrderByInput = "description_ASC"

	UsbDeviceOrderByInputDescriptionDESC UsbDeviceOrderByInput = "description_DESC"

	UsbDeviceOrderByInputIdASC UsbDeviceOrderByInput = "id_ASC"

	UsbDeviceOrderByInputIdDESC UsbDeviceOrderByInput = "id_DESC"

	UsbDeviceOrderByInputLocalCreatedAtASC UsbDeviceOrderByInput = "local_created_at_ASC"

	UsbDeviceOrderByInputLocalCreatedAtDESC UsbDeviceOrderByInput = "local_created_at_DESC"

	UsbDeviceOrderByInputLocalIdASC UsbDeviceOrderByInput = "local_id_ASC"

	UsbDeviceOrderByInputLocalIdDESC UsbDeviceOrderByInput = "local_id_DESC"

	UsbDeviceOrderByInputManufacturerASC UsbDeviceOrderByInput = "manufacturer_ASC"

	UsbDeviceOrderByInputManufacturerDESC UsbDeviceOrderByInput = "manufacturer_DESC"

	UsbDeviceOrderByInputNameASC UsbDeviceOrderByInput = "name_ASC"

	UsbDeviceOrderByInputNameDESC UsbDeviceOrderByInput = "name_DESC"

	UsbDeviceOrderByInputSizeASC UsbDeviceOrderByInput = "size_ASC"

	UsbDeviceOrderByInputSizeDESC UsbDeviceOrderByInput = "size_DESC"

	UsbDeviceOrderByInputStatusASC UsbDeviceOrderByInput = "status_ASC"

	UsbDeviceOrderByInputStatusDESC UsbDeviceOrderByInput = "status_DESC"

	UsbDeviceOrderByInputUpdatedAtASC UsbDeviceOrderByInput = "updatedAt_ASC"

	UsbDeviceOrderByInputUpdatedAtDESC UsbDeviceOrderByInput = "updatedAt_DESC"

	UsbDeviceOrderByInputUsbTypeASC UsbDeviceOrderByInput = "usb_type_ASC"

	UsbDeviceOrderByInputUsbTypeDESC UsbDeviceOrderByInput = "usb_type_DESC"
)

// Defines values for UsbDeviceStatus.
const (
	UsbDeviceStatusEJECTED UsbDeviceStatus = "EJECTED"

	UsbDeviceStatusNORMAL UsbDeviceStatus = "NORMAL"
)

// Defines values for UserAuditLogOrderByInput.
const (
	UserAuditLogOrderByInputActionASC UserAuditLogOrderByInput = "action_ASC"

	UserAuditLogOrderByInputActionDESC UserAuditLogOrderByInput = "action_DESC"

	UserAuditLogOrderByInputCreatedAtASC UserAuditLogOrderByInput = "createdAt_ASC"

	UserAuditLogOrderByInputCreatedAtDESC UserAuditLogOrderByInput = "createdAt_DESC"

	UserAuditLogOrderByInputFinishedAtASC UserAuditLogOrderByInput = "finished_at_ASC"

	UserAuditLogOrderByInputFinishedAtDESC UserAuditLogOrderByInput = "finished_at_DESC"

	UserAuditLogOrderByInputIdASC UserAuditLogOrderByInput = "id_ASC"

	UserAuditLogOrderByInputIdDESC UserAuditLogOrderByInput = "id_DESC"

	UserAuditLogOrderByInputIpAddressASC UserAuditLogOrderByInput = "ip_address_ASC"

	UserAuditLogOrderByInputIpAddressDESC UserAuditLogOrderByInput = "ip_address_DESC"

	UserAuditLogOrderByInputMessageASC UserAuditLogOrderByInput = "message_ASC"

	UserAuditLogOrderByInputMessageDESC UserAuditLogOrderByInput = "message_DESC"

	UserAuditLogOrderByInputResourceIdASC UserAuditLogOrderByInput = "resource_id_ASC"

	UserAuditLogOrderByInputResourceIdDESC UserAuditLogOrderByInput = "resource_id_DESC"

	UserAuditLogOrderByInputResourceTypeASC UserAuditLogOrderByInput = "resource_type_ASC"

	UserAuditLogOrderByInputResourceTypeDESC UserAuditLogOrderByInput = "resource_type_DESC"

	UserAuditLogOrderByInputStatusASC UserAuditLogOrderByInput = "status_ASC"

	UserAuditLogOrderByInputStatusDESC UserAuditLogOrderByInput = "status_DESC"

	UserAuditLogOrderByInputUpdatedAtASC UserAuditLogOrderByInput = "updatedAt_ASC"

	UserAuditLogOrderByInputUpdatedAtDESC UserAuditLogOrderByInput = "updatedAt_DESC"
)

// Defines values for UserAuditLogStatus.
const (
	UserAuditLogStatusFAILED UserAuditLogStatus = "FAILED"

	UserAuditLogStatusSUCCESSED UserAuditLogStatus = "SUCCESSED"
)

// Defines values for UserOrderByInput.
const (
	UserOrderByInputCreatedAtASC UserOrderByInput = "createdAt_ASC"

	UserOrderByInputCreatedAtDESC UserOrderByInput = "createdAt_DESC"

	UserOrderByInputEmailAddressASC UserOrderByInput = "email_address_ASC"

	UserOrderByInputEmailAddressDESC UserOrderByInput = "email_address_DESC"

	UserOrderByInputIdASC UserOrderByInput = "id_ASC"

	UserOrderByInputIdDESC UserOrderByInput = "id_DESC"

	UserOrderByInputLdapDnASC UserOrderByInput = "ldap_dn_ASC"

	UserOrderByInputLdapDnDESC UserOrderByInput = "ldap_dn_DESC"

	UserOrderByInputMobilePhoneASC UserOrderByInput = "mobile_phone_ASC"

	UserOrderByInputMobilePhoneDESC UserOrderByInput = "mobile_phone_DESC"

	UserOrderByInputNameASC UserOrderByInput = "name_ASC"

	UserOrderByInputNameDESC UserOrderByInput = "name_DESC"

	UserOrderByInputPasswordASC UserOrderByInput = "password_ASC"

	UserOrderByInputPasswordDESC UserOrderByInput = "password_DESC"

	UserOrderByInputRoleASC UserOrderByInput = "role_ASC"

	UserOrderByInputRoleDESC UserOrderByInput = "role_DESC"

	UserOrderByInputSourceASC UserOrderByInput = "source_ASC"

	UserOrderByInputSourceDESC UserOrderByInput = "source_DESC"

	UserOrderByInputUpdatedAtASC UserOrderByInput = "updatedAt_ASC"

	UserOrderByInputUpdatedAtDESC UserOrderByInput = "updatedAt_DESC"

	UserOrderByInputUsernameASC UserOrderByInput = "username_ASC"

	UserOrderByInputUsernameDESC UserOrderByInput = "username_DESC"
)

// Defines values for UserRole.
const (
	UserRoleADMIN UserRole = "ADMIN"

	UserRoleREADONLY UserRole = "READ_ONLY"

	UserRoleROOT UserRole = "ROOT"
)

// Defines values for UserRoleNextOrderByInput.
const (
	UserRoleNextOrderByInputCreatedAtASC UserRoleNextOrderByInput = "createdAt_ASC"

	UserRoleNextOrderByInputCreatedAtDESC UserRoleNextOrderByInput = "createdAt_DESC"

	UserRoleNextOrderByInputIdASC UserRoleNextOrderByInput = "id_ASC"

	UserRoleNextOrderByInputIdDESC UserRoleNextOrderByInput = "id_DESC"

	UserRoleNextOrderByInputNameASC UserRoleNextOrderByInput = "name_ASC"

	UserRoleNextOrderByInputNameDESC UserRoleNextOrderByInput = "name_DESC"

	UserRoleNextOrderByInputPlatformASC UserRoleNextOrderByInput = "platform_ASC"

	UserRoleNextOrderByInputPlatformDESC UserRoleNextOrderByInput = "platform_DESC"

	UserRoleNextOrderByInputPresetASC UserRoleNextOrderByInput = "preset_ASC"

	UserRoleNextOrderByInputPresetDESC UserRoleNextOrderByInput = "preset_DESC"

	UserRoleNextOrderByInputUpdatedAtASC UserRoleNextOrderByInput = "updatedAt_ASC"

	UserRoleNextOrderByInputUpdatedAtDESC UserRoleNextOrderByInput = "updatedAt_DESC"
)

// Defines values for UserRolePlatform.
const (
	UserRolePlatformMANAGEMENT UserRolePlatform = "MANAGEMENT"

	UserRolePlatformSELFSERVICE UserRolePlatform = "SELF_SERVICE"
)

// Defines values for UserRolePreset.
const (
	UserRolePresetADMIN UserRolePreset = "ADMIN"

	UserRolePresetAUDITOR UserRolePreset = "AUDITOR"

	UserRolePresetREADONLY UserRolePreset = "READ_ONLY"

	UserRolePresetROOT UserRolePreset = "ROOT"

	UserRolePresetUSERADMIN UserRolePreset = "USER_ADMIN"
)

// Defines values for UserSource.
const (
	UserSourceLDAP UserSource = "LDAP"

	UserSourceLOCAL UserSource = "LOCAL"
)

// Defines values for VcenterAccountOrderByInput.
const (
	VcenterAccountOrderByInputCreatedAtASC VcenterAccountOrderByInput = "createdAt_ASC"

	VcenterAccountOrderByInputCreatedAtDESC VcenterAccountOrderByInput = "createdAt_DESC"

	VcenterAccountOrderByInputIdASC VcenterAccountOrderByInput = "id_ASC"

	VcenterAccountOrderByInputIdDESC VcenterAccountOrderByInput = "id_DESC"

	VcenterAccountOrderByInputIpASC VcenterAccountOrderByInput = "ip_ASC"

	VcenterAccountOrderByInputIpDESC VcenterAccountOrderByInput = "ip_DESC"

	VcenterAccountOrderByInputIsValidASC VcenterAccountOrderByInput = "is_valid_ASC"

	VcenterAccountOrderByInputIsValidDESC VcenterAccountOrderByInput = "is_valid_DESC"

	VcenterAccountOrderByInputLocalIdASC VcenterAccountOrderByInput = "local_id_ASC"

	VcenterAccountOrderByInputLocalIdDESC VcenterAccountOrderByInput = "local_id_DESC"

	VcenterAccountOrderByInputPasswordASC VcenterAccountOrderByInput = "password_ASC"

	VcenterAccountOrderByInputPasswordDESC VcenterAccountOrderByInput = "password_DESC"

	VcenterAccountOrderByInputPortASC VcenterAccountOrderByInput = "port_ASC"

	VcenterAccountOrderByInputPortDESC VcenterAccountOrderByInput = "port_DESC"

	VcenterAccountOrderByInputUpdatedAtASC VcenterAccountOrderByInput = "updatedAt_ASC"

	VcenterAccountOrderByInputUpdatedAtDESC VcenterAccountOrderByInput = "updatedAt_DESC"

	VcenterAccountOrderByInputUsernameASC VcenterAccountOrderByInput = "username_ASC"

	VcenterAccountOrderByInputUsernameDESC VcenterAccountOrderByInput = "username_DESC"
)

// Defines values for VdsOrderByInput.
const (
	VdsOrderByInputBondModeASC VdsOrderByInput = "bond_mode_ASC"

	VdsOrderByInputBondModeDESC VdsOrderByInput = "bond_mode_DESC"

	VdsOrderByInputCreatedAtASC VdsOrderByInput = "createdAt_ASC"

	VdsOrderByInputCreatedAtDESC VdsOrderByInput = "createdAt_DESC"

	VdsOrderByInputEntityAsyncStatusASC VdsOrderByInput = "entityAsyncStatus_ASC"

	VdsOrderByInputEntityAsyncStatusDESC VdsOrderByInput = "entityAsyncStatus_DESC"

	VdsOrderByInputIdASC VdsOrderByInput = "id_ASC"

	VdsOrderByInputIdDESC VdsOrderByInput = "id_DESC"

	VdsOrderByInputInternalASC VdsOrderByInput = "internal_ASC"

	VdsOrderByInputInternalDESC VdsOrderByInput = "internal_DESC"

	VdsOrderByInputLocalIdASC VdsOrderByInput = "local_id_ASC"

	VdsOrderByInputLocalIdDESC VdsOrderByInput = "local_id_DESC"

	VdsOrderByInputNameASC VdsOrderByInput = "name_ASC"

	VdsOrderByInputNameDESC VdsOrderByInput = "name_DESC"

	VdsOrderByInputOvsbrNameASC VdsOrderByInput = "ovsbr_name_ASC"

	VdsOrderByInputOvsbrNameDESC VdsOrderByInput = "ovsbr_name_DESC"

	VdsOrderByInputTypeASC VdsOrderByInput = "type_ASC"

	VdsOrderByInputTypeDESC VdsOrderByInput = "type_DESC"

	VdsOrderByInputUpdatedAtASC VdsOrderByInput = "updatedAt_ASC"

	VdsOrderByInputUpdatedAtDESC VdsOrderByInput = "updatedAt_DESC"

	VdsOrderByInputVlansNumASC VdsOrderByInput = "vlans_num_ASC"

	VdsOrderByInputVlansNumDESC VdsOrderByInput = "vlans_num_DESC"
)

// Defines values for ViewOrderByInput.
const (
	ViewOrderByInputCreatedAtASC ViewOrderByInput = "createdAt_ASC"

	ViewOrderByInputCreatedAtDESC ViewOrderByInput = "createdAt_DESC"

	ViewOrderByInputEntityAsyncStatusASC ViewOrderByInput = "entityAsyncStatus_ASC"

	ViewOrderByInputEntityAsyncStatusDESC ViewOrderByInput = "entityAsyncStatus_DESC"

	ViewOrderByInputIdASC ViewOrderByInput = "id_ASC"

	ViewOrderByInputIdDESC ViewOrderByInput = "id_DESC"

	ViewOrderByInputLocalIdASC ViewOrderByInput = "local_id_ASC"

	ViewOrderByInputLocalIdDESC ViewOrderByInput = "local_id_DESC"

	ViewOrderByInputNameASC ViewOrderByInput = "name_ASC"

	ViewOrderByInputNameDESC ViewOrderByInput = "name_DESC"

	ViewOrderByInputTimeSpanASC ViewOrderByInput = "time_span_ASC"

	ViewOrderByInputTimeSpanDESC ViewOrderByInput = "time_span_DESC"

	ViewOrderByInputTimeUnitASC ViewOrderByInput = "time_unit_ASC"

	ViewOrderByInputTimeUnitDESC ViewOrderByInput = "time_unit_DESC"

	ViewOrderByInputUpdatedAtASC ViewOrderByInput = "updatedAt_ASC"

	ViewOrderByInputUpdatedAtDESC ViewOrderByInput = "updatedAt_DESC"
)

// Defines values for VlanOrderByInput.
const (
	VlanOrderByInputCreatedAtASC VlanOrderByInput = "createdAt_ASC"

	VlanOrderByInputCreatedAtDESC VlanOrderByInput = "createdAt_DESC"

	VlanOrderByInputEntityAsyncStatusASC VlanOrderByInput = "entityAsyncStatus_ASC"

	VlanOrderByInputEntityAsyncStatusDESC VlanOrderByInput = "entityAsyncStatus_DESC"

	VlanOrderByInputGatewayIpASC VlanOrderByInput = "gateway_ip_ASC"

	VlanOrderByInputGatewayIpDESC VlanOrderByInput = "gateway_ip_DESC"

	VlanOrderByInputGatewaySubnetmaskASC VlanOrderByInput = "gateway_subnetmask_ASC"

	VlanOrderByInputGatewaySubnetmaskDESC VlanOrderByInput = "gateway_subnetmask_DESC"

	VlanOrderByInputIdASC VlanOrderByInput = "id_ASC"

	VlanOrderByInputIdDESC VlanOrderByInput = "id_DESC"

	VlanOrderByInputLocalIdASC VlanOrderByInput = "local_id_ASC"

	VlanOrderByInputLocalIdDESC VlanOrderByInput = "local_id_DESC"

	VlanOrderByInputNameASC VlanOrderByInput = "name_ASC"

	VlanOrderByInputNameDESC VlanOrderByInput = "name_DESC"

	VlanOrderByInputSubnetmaskASC VlanOrderByInput = "subnetmask_ASC"

	VlanOrderByInputSubnetmaskDESC VlanOrderByInput = "subnetmask_DESC"

	VlanOrderByInputTypeASC VlanOrderByInput = "type_ASC"

	VlanOrderByInputTypeDESC VlanOrderByInput = "type_DESC"

	VlanOrderByInputUpdatedAtASC VlanOrderByInput = "updatedAt_ASC"

	VlanOrderByInputUpdatedAtDESC VlanOrderByInput = "updatedAt_DESC"

	VlanOrderByInputVlanIdASC VlanOrderByInput = "vlan_id_ASC"

	VlanOrderByInputVlanIdDESC VlanOrderByInput = "vlan_id_DESC"
)

// Defines values for VmClockOffset.
const (
	VmClockOffsetLOCALTIME VmClockOffset = "LOCALTIME"

	VmClockOffsetUTC VmClockOffset = "UTC"
)

// Defines values for VmDiskIoPolicy.
const (
	VmDiskIoPolicyRESTRICTEACHDISK VmDiskIoPolicy = "RESTRICT_EACH_DISK"

	VmDiskIoPolicyRESTRICTWHOLEVM VmDiskIoPolicy = "RESTRICT_WHOLE_VM"
)

// Defines values for VmDiskIoRestrictType.
const (
	VmDiskIoRestrictTypeDYNAMIC VmDiskIoRestrictType = "DYNAMIC"

	VmDiskIoRestrictTypeFORCED VmDiskIoRestrictType = "FORCED"
)

// Defines values for VmDiskOrderByInput.
const (
	VmDiskOrderByInputBootASC VmDiskOrderByInput = "boot_ASC"

	VmDiskOrderByInputBootDESC VmDiskOrderByInput = "boot_DESC"

	VmDiskOrderByInputBusASC VmDiskOrderByInput = "bus_ASC"

	VmDiskOrderByInputBusDESC VmDiskOrderByInput = "bus_DESC"

	VmDiskOrderByInputCloudInitImageNameASC VmDiskOrderByInput = "cloud_init_image_name_ASC"

	VmDiskOrderByInputCloudInitImageNameDESC VmDiskOrderByInput = "cloud_init_image_name_DESC"

	VmDiskOrderByInputCloudInitImagePathASC VmDiskOrderByInput = "cloud_init_image_path_ASC"

	VmDiskOrderByInputCloudInitImagePathDESC VmDiskOrderByInput = "cloud_init_image_path_DESC"

	VmDiskOrderByInputCreatedAtASC VmDiskOrderByInput = "createdAt_ASC"

	VmDiskOrderByInputCreatedAtDESC VmDiskOrderByInput = "createdAt_DESC"

	VmDiskOrderByInputDeviceASC VmDiskOrderByInput = "device_ASC"

	VmDiskOrderByInputDeviceDESC VmDiskOrderByInput = "device_DESC"

	VmDiskOrderByInputDisabledASC VmDiskOrderByInput = "disabled_ASC"

	VmDiskOrderByInputDisabledDESC VmDiskOrderByInput = "disabled_DESC"

	VmDiskOrderByInputIdASC VmDiskOrderByInput = "id_ASC"

	VmDiskOrderByInputIdDESC VmDiskOrderByInput = "id_DESC"

	VmDiskOrderByInputKeyASC VmDiskOrderByInput = "key_ASC"

	VmDiskOrderByInputKeyDESC VmDiskOrderByInput = "key_DESC"

	VmDiskOrderByInputMaxBandwidthASC VmDiskOrderByInput = "max_bandwidth_ASC"

	VmDiskOrderByInputMaxBandwidthDESC VmDiskOrderByInput = "max_bandwidth_DESC"

	VmDiskOrderByInputMaxBandwidthPolicyASC VmDiskOrderByInput = "max_bandwidth_policy_ASC"

	VmDiskOrderByInputMaxBandwidthPolicyDESC VmDiskOrderByInput = "max_bandwidth_policy_DESC"

	VmDiskOrderByInputMaxIopsASC VmDiskOrderByInput = "max_iops_ASC"

	VmDiskOrderByInputMaxIopsDESC VmDiskOrderByInput = "max_iops_DESC"

	VmDiskOrderByInputMaxIopsPolicyASC VmDiskOrderByInput = "max_iops_policy_ASC"

	VmDiskOrderByInputMaxIopsPolicyDESC VmDiskOrderByInput = "max_iops_policy_DESC"

	VmDiskOrderByInputSerialASC VmDiskOrderByInput = "serial_ASC"

	VmDiskOrderByInputSerialDESC VmDiskOrderByInput = "serial_DESC"

	VmDiskOrderByInputTypeASC VmDiskOrderByInput = "type_ASC"

	VmDiskOrderByInputTypeDESC VmDiskOrderByInput = "type_DESC"

	VmDiskOrderByInputUnsafeImagePathASC VmDiskOrderByInput = "unsafe_image_path_ASC"

	VmDiskOrderByInputUnsafeImagePathDESC VmDiskOrderByInput = "unsafe_image_path_DESC"

	VmDiskOrderByInputUnsafeImageUuidASC VmDiskOrderByInput = "unsafe_image_uuid_ASC"

	VmDiskOrderByInputUnsafeImageUuidDESC VmDiskOrderByInput = "unsafe_image_uuid_DESC"

	VmDiskOrderByInputUnsafeProvisionASC VmDiskOrderByInput = "unsafe_provision_ASC"

	VmDiskOrderByInputUnsafeProvisionDESC VmDiskOrderByInput = "unsafe_provision_DESC"

	VmDiskOrderByInputUpdatedAtASC VmDiskOrderByInput = "updatedAt_ASC"

	VmDiskOrderByInputUpdatedAtDESC VmDiskOrderByInput = "updatedAt_DESC"
)

// Defines values for VmDiskType.
const (
	VmDiskTypeCDROM VmDiskType = "CD_ROM"

	VmDiskTypeDISK VmDiskType = "DISK"
)

// Defines values for VmEntityFilterResultOrderByInput.
const (
	VmEntityFilterResultOrderByInputCreatedAtASC VmEntityFilterResultOrderByInput = "createdAt_ASC"

	VmEntityFilterResultOrderByInputCreatedAtDESC VmEntityFilterResultOrderByInput = "createdAt_DESC"

	VmEntityFilterResultOrderByInputIdASC VmEntityFilterResultOrderByInput = "id_ASC"

	VmEntityFilterResultOrderByInputIdDESC VmEntityFilterResultOrderByInput = "id_DESC"

	VmEntityFilterResultOrderByInputUpdatedAtASC VmEntityFilterResultOrderByInput = "updatedAt_ASC"

	VmEntityFilterResultOrderByInputUpdatedAtDESC VmEntityFilterResultOrderByInput = "updatedAt_DESC"
)

// Defines values for VmFirmware.
const (
	VmFirmwareBIOS VmFirmware = "BIOS"

	VmFirmwareUEFI VmFirmware = "UEFI"
)

// Defines values for VmFolderOrderByInput.
const (
	VmFolderOrderByInputCreatedAtASC VmFolderOrderByInput = "createdAt_ASC"

	VmFolderOrderByInputCreatedAtDESC VmFolderOrderByInput = "createdAt_DESC"

	VmFolderOrderByInputIdASC VmFolderOrderByInput = "id_ASC"

	VmFolderOrderByInputIdDESC VmFolderOrderByInput = "id_DESC"

	VmFolderOrderByInputLocalIdASC VmFolderOrderByInput = "local_id_ASC"

	VmFolderOrderByInputLocalIdDESC VmFolderOrderByInput = "local_id_DESC"

	VmFolderOrderByInputNameASC VmFolderOrderByInput = "name_ASC"

	VmFolderOrderByInputNameDESC VmFolderOrderByInput = "name_DESC"

	VmFolderOrderByInputUpdatedAtASC VmFolderOrderByInput = "updatedAt_ASC"

	VmFolderOrderByInputUpdatedAtDESC VmFolderOrderByInput = "updatedAt_DESC"

	VmFolderOrderByInputVmNumASC VmFolderOrderByInput = "vm_num_ASC"

	VmFolderOrderByInputVmNumDESC VmFolderOrderByInput = "vm_num_DESC"
)

// Defines values for VmGuestsOperationSystem.
const (
	VmGuestsOperationSystemLINUX VmGuestsOperationSystem = "LINUX"

	VmGuestsOperationSystemUNKNOWN VmGuestsOperationSystem = "UNKNOWN"

	VmGuestsOperationSystemWINDOWS VmGuestsOperationSystem = "WINDOWS"
)

// Defines values for VmNicModel.
const (
	VmNicModelE1000 VmNicModel = "E1000"

	VmNicModelSRIOV VmNicModel = "SRIOV"

	VmNicModelVIRTIO VmNicModel = "VIRTIO"
)

// Defines values for VmNicOrderByInput.
const (
	VmNicOrderByInputCreatedAtASC VmNicOrderByInput = "createdAt_ASC"

	VmNicOrderByInputCreatedAtDESC VmNicOrderByInput = "createdAt_DESC"

	VmNicOrderByInputEnabledASC VmNicOrderByInput = "enabled_ASC"

	VmNicOrderByInputEnabledDESC VmNicOrderByInput = "enabled_DESC"

	VmNicOrderByInputGatewayASC VmNicOrderByInput = "gateway_ASC"

	VmNicOrderByInputGatewayDESC VmNicOrderByInput = "gateway_DESC"

	VmNicOrderByInputIdASC VmNicOrderByInput = "id_ASC"

	VmNicOrderByInputIdDESC VmNicOrderByInput = "id_DESC"

	VmNicOrderByInputInterfaceIdASC VmNicOrderByInput = "interface_id_ASC"

	VmNicOrderByInputInterfaceIdDESC VmNicOrderByInput = "interface_id_DESC"

	VmNicOrderByInputIpAddressASC VmNicOrderByInput = "ip_address_ASC"

	VmNicOrderByInputIpAddressDESC VmNicOrderByInput = "ip_address_DESC"

	VmNicOrderByInputLocalIdASC VmNicOrderByInput = "local_id_ASC"

	VmNicOrderByInputLocalIdDESC VmNicOrderByInput = "local_id_DESC"

	VmNicOrderByInputMacAddressASC VmNicOrderByInput = "mac_address_ASC"

	VmNicOrderByInputMacAddressDESC VmNicOrderByInput = "mac_address_DESC"

	VmNicOrderByInputMirrorASC VmNicOrderByInput = "mirror_ASC"

	VmNicOrderByInputMirrorDESC VmNicOrderByInput = "mirror_DESC"

	VmNicOrderByInputModelASC VmNicOrderByInput = "model_ASC"

	VmNicOrderByInputModelDESC VmNicOrderByInput = "model_DESC"

	VmNicOrderByInputOrderASC VmNicOrderByInput = "order_ASC"

	VmNicOrderByInputOrderDESC VmNicOrderByInput = "order_DESC"

	VmNicOrderByInputSubnetMaskASC VmNicOrderByInput = "subnet_mask_ASC"

	VmNicOrderByInputSubnetMaskDESC VmNicOrderByInput = "subnet_mask_DESC"

	VmNicOrderByInputUpdatedAtASC VmNicOrderByInput = "updatedAt_ASC"

	VmNicOrderByInputUpdatedAtDESC VmNicOrderByInput = "updatedAt_DESC"
)

// Defines values for VmOrderByInput.
const (
	VmOrderByInputClockOffsetASC VmOrderByInput = "clock_offset_ASC"

	VmOrderByInputClockOffsetDESC VmOrderByInput = "clock_offset_DESC"

	VmOrderByInputCpuASC VmOrderByInput = "cpu_ASC"

	VmOrderByInputCpuDESC VmOrderByInput = "cpu_DESC"

	VmOrderByInputCpuModelASC VmOrderByInput = "cpu_model_ASC"

	VmOrderByInputCpuModelDESC VmOrderByInput = "cpu_model_DESC"

	VmOrderByInputCpuUsageASC VmOrderByInput = "cpu_usage_ASC"

	VmOrderByInputCpuUsageDESC VmOrderByInput = "cpu_usage_DESC"

	VmOrderByInputCreatedAtASC VmOrderByInput = "createdAt_ASC"

	VmOrderByInputCreatedAtDESC VmOrderByInput = "createdAt_DESC"

	VmOrderByInputDeletedAtASC VmOrderByInput = "deleted_at_ASC"

	VmOrderByInputDeletedAtDESC VmOrderByInput = "deleted_at_DESC"

	VmOrderByInputDescriptionASC VmOrderByInput = "description_ASC"

	VmOrderByInputDescriptionDESC VmOrderByInput = "description_DESC"

	VmOrderByInputDnsServersASC VmOrderByInput = "dns_servers_ASC"

	VmOrderByInputDnsServersDESC VmOrderByInput = "dns_servers_DESC"

	VmOrderByInputEntityAsyncStatusASC VmOrderByInput = "entityAsyncStatus_ASC"

	VmOrderByInputEntityAsyncStatusDESC VmOrderByInput = "entityAsyncStatus_DESC"

	VmOrderByInputFirmwareASC VmOrderByInput = "firmware_ASC"

	VmOrderByInputFirmwareDESC VmOrderByInput = "firmware_DESC"

	VmOrderByInputGuestCpuModelASC VmOrderByInput = "guest_cpu_model_ASC"

	VmOrderByInputGuestCpuModelDESC VmOrderByInput = "guest_cpu_model_DESC"

	VmOrderByInputGuestOsTypeASC VmOrderByInput = "guest_os_type_ASC"

	VmOrderByInputGuestOsTypeDESC VmOrderByInput = "guest_os_type_DESC"

	VmOrderByInputGuestSizeUsageASC VmOrderByInput = "guest_size_usage_ASC"

	VmOrderByInputGuestSizeUsageDESC VmOrderByInput = "guest_size_usage_DESC"

	VmOrderByInputGuestUsedSizeASC VmOrderByInput = "guest_used_size_ASC"

	VmOrderByInputGuestUsedSizeDESC VmOrderByInput = "guest_used_size_DESC"

	VmOrderByInputHaASC VmOrderByInput = "ha_ASC"

	VmOrderByInputHaDESC VmOrderByInput = "ha_DESC"

	VmOrderByInputHostnameASC VmOrderByInput = "hostname_ASC"

	VmOrderByInputHostnameDESC VmOrderByInput = "hostname_DESC"

	VmOrderByInputIdASC VmOrderByInput = "id_ASC"

	VmOrderByInputIdDESC VmOrderByInput = "id_DESC"

	VmOrderByInputInRecycleBinASC VmOrderByInput = "in_recycle_bin_ASC"

	VmOrderByInputInRecycleBinDESC VmOrderByInput = "in_recycle_bin_DESC"

	VmOrderByInputInternalASC VmOrderByInput = "internal_ASC"

	VmOrderByInputInternalDESC VmOrderByInput = "internal_DESC"

	VmOrderByInputIoPolicyASC VmOrderByInput = "io_policy_ASC"

	VmOrderByInputIoPolicyDESC VmOrderByInput = "io_policy_DESC"

	VmOrderByInputIpsASC VmOrderByInput = "ips_ASC"

	VmOrderByInputIpsDESC VmOrderByInput = "ips_DESC"

	VmOrderByInputKernelInfoASC VmOrderByInput = "kernel_info_ASC"

	VmOrderByInputKernelInfoDESC VmOrderByInput = "kernel_info_DESC"

	VmOrderByInputLastShutdownTimeASC VmOrderByInput = "last_shutdown_time_ASC"

	VmOrderByInputLastShutdownTimeDESC VmOrderByInput = "last_shutdown_time_DESC"

	VmOrderByInputLocalCreatedAtASC VmOrderByInput = "local_created_at_ASC"

	VmOrderByInputLocalCreatedAtDESC VmOrderByInput = "local_created_at_DESC"

	VmOrderByInputLocalIdASC VmOrderByInput = "local_id_ASC"

	VmOrderByInputLocalIdDESC VmOrderByInput = "local_id_DESC"

	VmOrderByInputLogicalSizeBytesASC VmOrderByInput = "logical_size_bytes_ASC"

	VmOrderByInputLogicalSizeBytesDESC VmOrderByInput = "logical_size_bytes_DESC"

	VmOrderByInputMaxBandwidthASC VmOrderByInput = "max_bandwidth_ASC"

	VmOrderByInputMaxBandwidthDESC VmOrderByInput = "max_bandwidth_DESC"

	VmOrderByInputMaxBandwidthPolicyASC VmOrderByInput = "max_bandwidth_policy_ASC"

	VmOrderByInputMaxBandwidthPolicyDESC VmOrderByInput = "max_bandwidth_policy_DESC"

	VmOrderByInputMaxIopsASC VmOrderByInput = "max_iops_ASC"

	VmOrderByInputMaxIopsDESC VmOrderByInput = "max_iops_DESC"

	VmOrderByInputMaxIopsPolicyASC VmOrderByInput = "max_iops_policy_ASC"

	VmOrderByInputMaxIopsPolicyDESC VmOrderByInput = "max_iops_policy_DESC"

	VmOrderByInputMemoryASC VmOrderByInput = "memory_ASC"

	VmOrderByInputMemoryDESC VmOrderByInput = "memory_DESC"

	VmOrderByInputMemoryUsageASC VmOrderByInput = "memory_usage_ASC"

	VmOrderByInputMemoryUsageDESC VmOrderByInput = "memory_usage_DESC"

	VmOrderByInputNameASC VmOrderByInput = "name_ASC"

	VmOrderByInputNameDESC VmOrderByInput = "name_DESC"

	VmOrderByInputNestedVirtualizationASC VmOrderByInput = "nested_virtualization_ASC"

	VmOrderByInputNestedVirtualizationDESC VmOrderByInput = "nested_virtualization_DESC"

	VmOrderByInputNodeIpASC VmOrderByInput = "node_ip_ASC"

	VmOrderByInputNodeIpDESC VmOrderByInput = "node_ip_DESC"

	VmOrderByInputOriginalNameASC VmOrderByInput = "original_name_ASC"

	VmOrderByInputOriginalNameDESC VmOrderByInput = "original_name_DESC"

	VmOrderByInputOsASC VmOrderByInput = "os_ASC"

	VmOrderByInputOsDESC VmOrderByInput = "os_DESC"

	VmOrderByInputProtectedASC VmOrderByInput = "protected_ASC"

	VmOrderByInputProtectedDESC VmOrderByInput = "protected_DESC"

	VmOrderByInputProvisionedSizeASC VmOrderByInput = "provisioned_size_ASC"

	VmOrderByInputProvisionedSizeDESC VmOrderByInput = "provisioned_size_DESC"

	VmOrderByInputSizeASC VmOrderByInput = "size_ASC"

	VmOrderByInputSizeDESC VmOrderByInput = "size_DESC"

	VmOrderByInputStatusASC VmOrderByInput = "status_ASC"

	VmOrderByInputStatusDESC VmOrderByInput = "status_DESC"

	VmOrderByInputUniqueSizeASC VmOrderByInput = "unique_size_ASC"

	VmOrderByInputUniqueSizeDESC VmOrderByInput = "unique_size_DESC"

	VmOrderByInputUpdatedAtASC VmOrderByInput = "updatedAt_ASC"

	VmOrderByInputUpdatedAtDESC VmOrderByInput = "updatedAt_DESC"

	VmOrderByInputVcpuASC VmOrderByInput = "vcpu_ASC"

	VmOrderByInputVcpuDESC VmOrderByInput = "vcpu_DESC"

	VmOrderByInputVideoTypeASC VmOrderByInput = "video_type_ASC"

	VmOrderByInputVideoTypeDESC VmOrderByInput = "video_type_DESC"

	VmOrderByInputVmToolsStatusASC VmOrderByInput = "vm_tools_status_ASC"

	VmOrderByInputVmToolsStatusDESC VmOrderByInput = "vm_tools_status_DESC"

	VmOrderByInputVmToolsVersionASC VmOrderByInput = "vm_tools_version_ASC"

	VmOrderByInputVmToolsVersionDESC VmOrderByInput = "vm_tools_version_DESC"

	VmOrderByInputWinOptASC VmOrderByInput = "win_opt_ASC"

	VmOrderByInputWinOptDESC VmOrderByInput = "win_opt_DESC"
)

// Defines values for VmPlacementGroupOrderByInput.
const (
	VmPlacementGroupOrderByInputCreatedAtASC VmPlacementGroupOrderByInput = "createdAt_ASC"

	VmPlacementGroupOrderByInputCreatedAtDESC VmPlacementGroupOrderByInput = "createdAt_DESC"

	VmPlacementGroupOrderByInputDescriptionASC VmPlacementGroupOrderByInput = "description_ASC"

	VmPlacementGroupOrderByInputDescriptionDESC VmPlacementGroupOrderByInput = "description_DESC"

	VmPlacementGroupOrderByInputEnabledASC VmPlacementGroupOrderByInput = "enabled_ASC"

	VmPlacementGroupOrderByInputEnabledDESC VmPlacementGroupOrderByInput = "enabled_DESC"

	VmPlacementGroupOrderByInputEntityAsyncStatusASC VmPlacementGroupOrderByInput = "entityAsyncStatus_ASC"

	VmPlacementGroupOrderByInputEntityAsyncStatusDESC VmPlacementGroupOrderByInput = "entityAsyncStatus_DESC"

	VmPlacementGroupOrderByInputIdASC VmPlacementGroupOrderByInput = "id_ASC"

	VmPlacementGroupOrderByInputIdDESC VmPlacementGroupOrderByInput = "id_DESC"

	VmPlacementGroupOrderByInputLocalCreatedAtASC VmPlacementGroupOrderByInput = "local_created_at_ASC"

	VmPlacementGroupOrderByInputLocalCreatedAtDESC VmPlacementGroupOrderByInput = "local_created_at_DESC"

	VmPlacementGroupOrderByInputLocalIdASC VmPlacementGroupOrderByInput = "local_id_ASC"

	VmPlacementGroupOrderByInputLocalIdDESC VmPlacementGroupOrderByInput = "local_id_DESC"

	VmPlacementGroupOrderByInputLocalUpdatedAtASC VmPlacementGroupOrderByInput = "local_updated_at_ASC"

	VmPlacementGroupOrderByInputLocalUpdatedAtDESC VmPlacementGroupOrderByInput = "local_updated_at_DESC"

	VmPlacementGroupOrderByInputNameASC VmPlacementGroupOrderByInput = "name_ASC"

	VmPlacementGroupOrderByInputNameDESC VmPlacementGroupOrderByInput = "name_DESC"

	VmPlacementGroupOrderByInputUpdatedAtASC VmPlacementGroupOrderByInput = "updatedAt_ASC"

	VmPlacementGroupOrderByInputUpdatedAtDESC VmPlacementGroupOrderByInput = "updatedAt_DESC"

	VmPlacementGroupOrderByInputVmHostMustEnabledASC VmPlacementGroupOrderByInput = "vm_host_must_enabled_ASC"

	VmPlacementGroupOrderByInputVmHostMustEnabledDESC VmPlacementGroupOrderByInput = "vm_host_must_enabled_DESC"

	VmPlacementGroupOrderByInputVmHostMustPolicyASC VmPlacementGroupOrderByInput = "vm_host_must_policy_ASC"

	VmPlacementGroupOrderByInputVmHostMustPolicyDESC VmPlacementGroupOrderByInput = "vm_host_must_policy_DESC"

	VmPlacementGroupOrderByInputVmHostPreferEnabledASC VmPlacementGroupOrderByInput = "vm_host_prefer_enabled_ASC"

	VmPlacementGroupOrderByInputVmHostPreferEnabledDESC VmPlacementGroupOrderByInput = "vm_host_prefer_enabled_DESC"

	VmPlacementGroupOrderByInputVmHostPreferPolicyASC VmPlacementGroupOrderByInput = "vm_host_prefer_policy_ASC"

	VmPlacementGroupOrderByInputVmHostPreferPolicyDESC VmPlacementGroupOrderByInput = "vm_host_prefer_policy_DESC"

	VmPlacementGroupOrderByInputVmVmPolicyASC VmPlacementGroupOrderByInput = "vm_vm_policy_ASC"

	VmPlacementGroupOrderByInputVmVmPolicyDESC VmPlacementGroupOrderByInput = "vm_vm_policy_DESC"

	VmPlacementGroupOrderByInputVmVmPolicyEnabledASC VmPlacementGroupOrderByInput = "vm_vm_policy_enabled_ASC"

	VmPlacementGroupOrderByInputVmVmPolicyEnabledDESC VmPlacementGroupOrderByInput = "vm_vm_policy_enabled_DESC"
)

// Defines values for VmSnapshotOrderByInput.
const (
	VmSnapshotOrderByInputClockOffsetASC VmSnapshotOrderByInput = "clock_offset_ASC"

	VmSnapshotOrderByInputClockOffsetDESC VmSnapshotOrderByInput = "clock_offset_DESC"

	VmSnapshotOrderByInputConsistentTypeASC VmSnapshotOrderByInput = "consistent_type_ASC"

	VmSnapshotOrderByInputConsistentTypeDESC VmSnapshotOrderByInput = "consistent_type_DESC"

	VmSnapshotOrderByInputCpuASC VmSnapshotOrderByInput = "cpu_ASC"

	VmSnapshotOrderByInputCpuDESC VmSnapshotOrderByInput = "cpu_DESC"

	VmSnapshotOrderByInputCpuModelASC VmSnapshotOrderByInput = "cpu_model_ASC"

	VmSnapshotOrderByInputCpuModelDESC VmSnapshotOrderByInput = "cpu_model_DESC"

	VmSnapshotOrderByInputCreatedAtASC VmSnapshotOrderByInput = "createdAt_ASC"

	VmSnapshotOrderByInputCreatedAtDESC VmSnapshotOrderByInput = "createdAt_DESC"

	VmSnapshotOrderByInputDescriptionASC VmSnapshotOrderByInput = "description_ASC"

	VmSnapshotOrderByInputDescriptionDESC VmSnapshotOrderByInput = "description_DESC"

	VmSnapshotOrderByInputEntityAsyncStatusASC VmSnapshotOrderByInput = "entityAsyncStatus_ASC"

	VmSnapshotOrderByInputEntityAsyncStatusDESC VmSnapshotOrderByInput = "entityAsyncStatus_DESC"

	VmSnapshotOrderByInputFirmwareASC VmSnapshotOrderByInput = "firmware_ASC"

	VmSnapshotOrderByInputFirmwareDESC VmSnapshotOrderByInput = "firmware_DESC"

	VmSnapshotOrderByInputHaASC VmSnapshotOrderByInput = "ha_ASC"

	VmSnapshotOrderByInputHaDESC VmSnapshotOrderByInput = "ha_DESC"

	VmSnapshotOrderByInputIdASC VmSnapshotOrderByInput = "id_ASC"

	VmSnapshotOrderByInputIdDESC VmSnapshotOrderByInput = "id_DESC"

	VmSnapshotOrderByInputIoPolicyASC VmSnapshotOrderByInput = "io_policy_ASC"

	VmSnapshotOrderByInputIoPolicyDESC VmSnapshotOrderByInput = "io_policy_DESC"

	VmSnapshotOrderByInputLocalCreatedAtASC VmSnapshotOrderByInput = "local_created_at_ASC"

	VmSnapshotOrderByInputLocalCreatedAtDESC VmSnapshotOrderByInput = "local_created_at_DESC"

	VmSnapshotOrderByInputLocalIdASC VmSnapshotOrderByInput = "local_id_ASC"

	VmSnapshotOrderByInputLocalIdDESC VmSnapshotOrderByInput = "local_id_DESC"

	VmSnapshotOrderByInputMaxBandwidthASC VmSnapshotOrderByInput = "max_bandwidth_ASC"

	VmSnapshotOrderByInputMaxBandwidthDESC VmSnapshotOrderByInput = "max_bandwidth_DESC"

	VmSnapshotOrderByInputMaxBandwidthPolicyASC VmSnapshotOrderByInput = "max_bandwidth_policy_ASC"

	VmSnapshotOrderByInputMaxBandwidthPolicyDESC VmSnapshotOrderByInput = "max_bandwidth_policy_DESC"

	VmSnapshotOrderByInputMaxIopsASC VmSnapshotOrderByInput = "max_iops_ASC"

	VmSnapshotOrderByInputMaxIopsDESC VmSnapshotOrderByInput = "max_iops_DESC"

	VmSnapshotOrderByInputMaxIopsPolicyASC VmSnapshotOrderByInput = "max_iops_policy_ASC"

	VmSnapshotOrderByInputMaxIopsPolicyDESC VmSnapshotOrderByInput = "max_iops_policy_DESC"

	VmSnapshotOrderByInputMemoryASC VmSnapshotOrderByInput = "memory_ASC"

	VmSnapshotOrderByInputMemoryDESC VmSnapshotOrderByInput = "memory_DESC"

	VmSnapshotOrderByInputNameASC VmSnapshotOrderByInput = "name_ASC"

	VmSnapshotOrderByInputNameDESC VmSnapshotOrderByInput = "name_DESC"

	VmSnapshotOrderByInputSizeASC VmSnapshotOrderByInput = "size_ASC"

	VmSnapshotOrderByInputSizeDESC VmSnapshotOrderByInput = "size_DESC"

	VmSnapshotOrderByInputUpdatedAtASC VmSnapshotOrderByInput = "updatedAt_ASC"

	VmSnapshotOrderByInputUpdatedAtDESC VmSnapshotOrderByInput = "updatedAt_DESC"

	VmSnapshotOrderByInputVcpuASC VmSnapshotOrderByInput = "vcpu_ASC"

	VmSnapshotOrderByInputVcpuDESC VmSnapshotOrderByInput = "vcpu_DESC"

	VmSnapshotOrderByInputVmDisksASC VmSnapshotOrderByInput = "vm_disks_ASC"

	VmSnapshotOrderByInputVmDisksDESC VmSnapshotOrderByInput = "vm_disks_DESC"

	VmSnapshotOrderByInputVmNicsASC VmSnapshotOrderByInput = "vm_nics_ASC"

	VmSnapshotOrderByInputVmNicsDESC VmSnapshotOrderByInput = "vm_nics_DESC"

	VmSnapshotOrderByInputWinOptASC VmSnapshotOrderByInput = "win_opt_ASC"

	VmSnapshotOrderByInputWinOptDESC VmSnapshotOrderByInput = "win_opt_DESC"
)

// Defines values for VmStatus.
const (
	VmStatusDELETED VmStatus = "DELETED"

	VmStatusRUNNING VmStatus = "RUNNING"

	VmStatusSTOPPED VmStatus = "STOPPED"

	VmStatusSUSPENDED VmStatus = "SUSPENDED"

	VmStatusUNKNOWN VmStatus = "UNKNOWN"
)

// Defines values for VmTemplateOrderByInput.
const (
	VmTemplateOrderByInputClockOffsetASC VmTemplateOrderByInput = "clock_offset_ASC"

	VmTemplateOrderByInputClockOffsetDESC VmTemplateOrderByInput = "clock_offset_DESC"

	VmTemplateOrderByInputCloudInitSupportedASC VmTemplateOrderByInput = "cloud_init_supported_ASC"

	VmTemplateOrderByInputCloudInitSupportedDESC VmTemplateOrderByInput = "cloud_init_supported_DESC"

	VmTemplateOrderByInputCpuASC VmTemplateOrderByInput = "cpu_ASC"

	VmTemplateOrderByInputCpuDESC VmTemplateOrderByInput = "cpu_DESC"

	VmTemplateOrderByInputCpuModelASC VmTemplateOrderByInput = "cpu_model_ASC"

	VmTemplateOrderByInputCpuModelDESC VmTemplateOrderByInput = "cpu_model_DESC"

	VmTemplateOrderByInputCreatedAtASC VmTemplateOrderByInput = "createdAt_ASC"

	VmTemplateOrderByInputCreatedAtDESC VmTemplateOrderByInput = "createdAt_DESC"

	VmTemplateOrderByInputDescriptionASC VmTemplateOrderByInput = "description_ASC"

	VmTemplateOrderByInputDescriptionDESC VmTemplateOrderByInput = "description_DESC"

	VmTemplateOrderByInputEntityAsyncStatusASC VmTemplateOrderByInput = "entityAsyncStatus_ASC"

	VmTemplateOrderByInputEntityAsyncStatusDESC VmTemplateOrderByInput = "entityAsyncStatus_DESC"

	VmTemplateOrderByInputFirmwareASC VmTemplateOrderByInput = "firmware_ASC"

	VmTemplateOrderByInputFirmwareDESC VmTemplateOrderByInput = "firmware_DESC"

	VmTemplateOrderByInputHaASC VmTemplateOrderByInput = "ha_ASC"

	VmTemplateOrderByInputHaDESC VmTemplateOrderByInput = "ha_DESC"

	VmTemplateOrderByInputIdASC VmTemplateOrderByInput = "id_ASC"

	VmTemplateOrderByInputIdDESC VmTemplateOrderByInput = "id_DESC"

	VmTemplateOrderByInputIoPolicyASC VmTemplateOrderByInput = "io_policy_ASC"

	VmTemplateOrderByInputIoPolicyDESC VmTemplateOrderByInput = "io_policy_DESC"

	VmTemplateOrderByInputLocalCreatedAtASC VmTemplateOrderByInput = "local_created_at_ASC"

	VmTemplateOrderByInputLocalCreatedAtDESC VmTemplateOrderByInput = "local_created_at_DESC"

	VmTemplateOrderByInputLocalIdASC VmTemplateOrderByInput = "local_id_ASC"

	VmTemplateOrderByInputLocalIdDESC VmTemplateOrderByInput = "local_id_DESC"

	VmTemplateOrderByInputMaxBandwidthASC VmTemplateOrderByInput = "max_bandwidth_ASC"

	VmTemplateOrderByInputMaxBandwidthDESC VmTemplateOrderByInput = "max_bandwidth_DESC"

	VmTemplateOrderByInputMaxBandwidthPolicyASC VmTemplateOrderByInput = "max_bandwidth_policy_ASC"

	VmTemplateOrderByInputMaxBandwidthPolicyDESC VmTemplateOrderByInput = "max_bandwidth_policy_DESC"

	VmTemplateOrderByInputMaxIopsASC VmTemplateOrderByInput = "max_iops_ASC"

	VmTemplateOrderByInputMaxIopsDESC VmTemplateOrderByInput = "max_iops_DESC"

	VmTemplateOrderByInputMaxIopsPolicyASC VmTemplateOrderByInput = "max_iops_policy_ASC"

	VmTemplateOrderByInputMaxIopsPolicyDESC VmTemplateOrderByInput = "max_iops_policy_DESC"

	VmTemplateOrderByInputMemoryASC VmTemplateOrderByInput = "memory_ASC"

	VmTemplateOrderByInputMemoryDESC VmTemplateOrderByInput = "memory_DESC"

	VmTemplateOrderByInputNameASC VmTemplateOrderByInput = "name_ASC"

	VmTemplateOrderByInputNameDESC VmTemplateOrderByInput = "name_DESC"

	VmTemplateOrderByInputSizeASC VmTemplateOrderByInput = "size_ASC"

	VmTemplateOrderByInputSizeDESC VmTemplateOrderByInput = "size_DESC"

	VmTemplateOrderByInputUpdatedAtASC VmTemplateOrderByInput = "updatedAt_ASC"

	VmTemplateOrderByInputUpdatedAtDESC VmTemplateOrderByInput = "updatedAt_DESC"

	VmTemplateOrderByInputVcpuASC VmTemplateOrderByInput = "vcpu_ASC"

	VmTemplateOrderByInputVcpuDESC VmTemplateOrderByInput = "vcpu_DESC"

	VmTemplateOrderByInputVideoTypeASC VmTemplateOrderByInput = "video_type_ASC"

	VmTemplateOrderByInputVideoTypeDESC VmTemplateOrderByInput = "video_type_DESC"

	VmTemplateOrderByInputVmDisksASC VmTemplateOrderByInput = "vm_disks_ASC"

	VmTemplateOrderByInputVmDisksDESC VmTemplateOrderByInput = "vm_disks_DESC"

	VmTemplateOrderByInputVmNicsASC VmTemplateOrderByInput = "vm_nics_ASC"

	VmTemplateOrderByInputVmNicsDESC VmTemplateOrderByInput = "vm_nics_DESC"

	VmTemplateOrderByInputWinOptASC VmTemplateOrderByInput = "win_opt_ASC"

	VmTemplateOrderByInputWinOptDESC VmTemplateOrderByInput = "win_opt_DESC"
)

// Defines values for VmToolsStatus.
const (
	VmToolsStatusNOTINSTALLED VmToolsStatus = "NOT_INSTALLED"

	VmToolsStatusNOTRUNNING VmToolsStatus = "NOT_RUNNING"

	VmToolsStatusRESTRICTION VmToolsStatus = "RESTRICTION"

	VmToolsStatusRUNNING VmToolsStatus = "RUNNING"
)

// Defines values for VmVideoType.
const (
	VmVideoTypeCIRRUS VmVideoType = "CIRRUS"

	VmVideoTypeQXL VmVideoType = "QXL"

	VmVideoTypeVGA VmVideoType = "VGA"

	VmVideoTypeVIRTIO VmVideoType = "VIRTIO"
)

// Defines values for VmVmPolicy.
const (
	VmVmPolicyMUSTDIFFERENT VmVmPolicy = "MUST_DIFFERENT"

	VmVmPolicyMUSTSAME VmVmPolicy = "MUST_SAME"

	VmVmPolicyPREFERDIFFERENT VmVmPolicy = "PREFER_DIFFERENT"

	VmVmPolicyPREFERSAME VmVmPolicy = "PREFER_SAME"
)

// Defines values for VmVolumeElfStoragePolicyType.
const (
	VmVolumeElfStoragePolicyTypeREPLICA1THICKPROVISION VmVolumeElfStoragePolicyType = "REPLICA_1_THICK_PROVISION"

	VmVolumeElfStoragePolicyTypeREPLICA1THINPROVISION VmVolumeElfStoragePolicyType = "REPLICA_1_THIN_PROVISION"

	VmVolumeElfStoragePolicyTypeREPLICA2THICKPROVISION VmVolumeElfStoragePolicyType = "REPLICA_2_THICK_PROVISION"

	VmVolumeElfStoragePolicyTypeREPLICA2THINPROVISION VmVolumeElfStoragePolicyType = "REPLICA_2_THIN_PROVISION"

	VmVolumeElfStoragePolicyTypeREPLICA3THICKPROVISION VmVolumeElfStoragePolicyType = "REPLICA_3_THICK_PROVISION"

	VmVolumeElfStoragePolicyTypeREPLICA3THINPROVISION VmVolumeElfStoragePolicyType = "REPLICA_3_THIN_PROVISION"
)

// Defines values for VmVolumeOrderByInput.
const (
	VmVolumeOrderByInputCreatedAtASC VmVolumeOrderByInput = "createdAt_ASC"

	VmVolumeOrderByInputCreatedAtDESC VmVolumeOrderByInput = "createdAt_DESC"

	VmVolumeOrderByInputDescriptionASC VmVolumeOrderByInput = "description_ASC"

	VmVolumeOrderByInputDescriptionDESC VmVolumeOrderByInput = "description_DESC"

	VmVolumeOrderByInputElfStoragePolicyASC VmVolumeOrderByInput = "elf_storage_policy_ASC"

	VmVolumeOrderByInputElfStoragePolicyDESC VmVolumeOrderByInput = "elf_storage_policy_DESC"

	VmVolumeOrderByInputGuestSizeUsageASC VmVolumeOrderByInput = "guest_size_usage_ASC"

	VmVolumeOrderByInputGuestSizeUsageDESC VmVolumeOrderByInput = "guest_size_usage_DESC"

	VmVolumeOrderByInputGuestUsedSizeASC VmVolumeOrderByInput = "guest_used_size_ASC"

	VmVolumeOrderByInputGuestUsedSizeDESC VmVolumeOrderByInput = "guest_used_size_DESC"

	VmVolumeOrderByInputIdASC VmVolumeOrderByInput = "id_ASC"

	VmVolumeOrderByInputIdDESC VmVolumeOrderByInput = "id_DESC"

	VmVolumeOrderByInputLocalCreatedAtASC VmVolumeOrderByInput = "local_created_at_ASC"

	VmVolumeOrderByInputLocalCreatedAtDESC VmVolumeOrderByInput = "local_created_at_DESC"

	VmVolumeOrderByInputLocalIdASC VmVolumeOrderByInput = "local_id_ASC"

	VmVolumeOrderByInputLocalIdDESC VmVolumeOrderByInput = "local_id_DESC"

	VmVolumeOrderByInputMountingASC VmVolumeOrderByInput = "mounting_ASC"

	VmVolumeOrderByInputMountingDESC VmVolumeOrderByInput = "mounting_DESC"

	VmVolumeOrderByInputNameASC VmVolumeOrderByInput = "name_ASC"

	VmVolumeOrderByInputNameDESC VmVolumeOrderByInput = "name_DESC"

	VmVolumeOrderByInputPathASC VmVolumeOrderByInput = "path_ASC"

	VmVolumeOrderByInputPathDESC VmVolumeOrderByInput = "path_DESC"

	VmVolumeOrderByInputSharingASC VmVolumeOrderByInput = "sharing_ASC"

	VmVolumeOrderByInputSharingDESC VmVolumeOrderByInput = "sharing_DESC"

	VmVolumeOrderByInputSizeASC VmVolumeOrderByInput = "size_ASC"

	VmVolumeOrderByInputSizeDESC VmVolumeOrderByInput = "size_DESC"

	VmVolumeOrderByInputUniqueSizeASC VmVolumeOrderByInput = "unique_size_ASC"

	VmVolumeOrderByInputUniqueSizeDESC VmVolumeOrderByInput = "unique_size_DESC"

	VmVolumeOrderByInputUpdatedAtASC VmVolumeOrderByInput = "updatedAt_ASC"

	VmVolumeOrderByInputUpdatedAtDESC VmVolumeOrderByInput = "updatedAt_DESC"
)

// Defines values for VsphereEsxiAccountOrderByInput.
const (
	VsphereEsxiAccountOrderByInputCreatedAtASC VsphereEsxiAccountOrderByInput = "createdAt_ASC"

	VsphereEsxiAccountOrderByInputCreatedAtDESC VsphereEsxiAccountOrderByInput = "createdAt_DESC"

	VsphereEsxiAccountOrderByInputIdASC VsphereEsxiAccountOrderByInput = "id_ASC"

	VsphereEsxiAccountOrderByInputIdDESC VsphereEsxiAccountOrderByInput = "id_DESC"

	VsphereEsxiAccountOrderByInputIpASC VsphereEsxiAccountOrderByInput = "ip_ASC"

	VsphereEsxiAccountOrderByInputIpDESC VsphereEsxiAccountOrderByInput = "ip_DESC"

	VsphereEsxiAccountOrderByInputIsValidASC VsphereEsxiAccountOrderByInput = "is_valid_ASC"

	VsphereEsxiAccountOrderByInputIsValidDESC VsphereEsxiAccountOrderByInput = "is_valid_DESC"

	VsphereEsxiAccountOrderByInputLocalIdASC VsphereEsxiAccountOrderByInput = "local_id_ASC"

	VsphereEsxiAccountOrderByInputLocalIdDESC VsphereEsxiAccountOrderByInput = "local_id_DESC"

	VsphereEsxiAccountOrderByInputPasswordASC VsphereEsxiAccountOrderByInput = "password_ASC"

	VsphereEsxiAccountOrderByInputPasswordDESC VsphereEsxiAccountOrderByInput = "password_DESC"

	VsphereEsxiAccountOrderByInputPortASC VsphereEsxiAccountOrderByInput = "port_ASC"

	VsphereEsxiAccountOrderByInputPortDESC VsphereEsxiAccountOrderByInput = "port_DESC"

	VsphereEsxiAccountOrderByInputUpdatedAtASC VsphereEsxiAccountOrderByInput = "updatedAt_ASC"

	VsphereEsxiAccountOrderByInputUpdatedAtDESC VsphereEsxiAccountOrderByInput = "updatedAt_DESC"

	VsphereEsxiAccountOrderByInputUsernameASC VsphereEsxiAccountOrderByInput = "username_ASC"

	VsphereEsxiAccountOrderByInputUsernameDESC VsphereEsxiAccountOrderByInput = "username_DESC"
)

// Defines values for WitnessOrderByInput.
const (
	WitnessOrderByInputCpuHzPerCoreASC WitnessOrderByInput = "cpu_hz_per_core_ASC"

	WitnessOrderByInputCpuHzPerCoreDESC WitnessOrderByInput = "cpu_hz_per_core_DESC"

	WitnessOrderByInputCreatedAtASC WitnessOrderByInput = "createdAt_ASC"

	WitnessOrderByInputCreatedAtDESC WitnessOrderByInput = "createdAt_DESC"

	WitnessOrderByInputDataIpASC WitnessOrderByInput = "data_ip_ASC"

	WitnessOrderByInputDataIpDESC WitnessOrderByInput = "data_ip_DESC"

	WitnessOrderByInputIdASC WitnessOrderByInput = "id_ASC"

	WitnessOrderByInputIdDESC WitnessOrderByInput = "id_DESC"

	WitnessOrderByInputLocalIdASC WitnessOrderByInput = "local_id_ASC"

	WitnessOrderByInputLocalIdDESC WitnessOrderByInput = "local_id_DESC"

	WitnessOrderByInputNameASC WitnessOrderByInput = "name_ASC"

	WitnessOrderByInputNameDESC WitnessOrderByInput = "name_DESC"

	WitnessOrderByInputSystemDataCapacityASC WitnessOrderByInput = "system_data_capacity_ASC"

	WitnessOrderByInputSystemDataCapacityDESC WitnessOrderByInput = "system_data_capacity_DESC"

	WitnessOrderByInputSystemUsedDataSpaceASC WitnessOrderByInput = "system_used_data_space_ASC"

	WitnessOrderByInputSystemUsedDataSpaceDESC WitnessOrderByInput = "system_used_data_space_DESC"

	WitnessOrderByInputTotalCpuCoresASC WitnessOrderByInput = "total_cpu_cores_ASC"

	WitnessOrderByInputTotalCpuCoresDESC WitnessOrderByInput = "total_cpu_cores_DESC"

	WitnessOrderByInputTotalCpuHzASC WitnessOrderByInput = "total_cpu_hz_ASC"

	WitnessOrderByInputTotalCpuHzDESC WitnessOrderByInput = "total_cpu_hz_DESC"

	WitnessOrderByInputTotalMemoryBytesASC WitnessOrderByInput = "total_memory_bytes_ASC"

	WitnessOrderByInputTotalMemoryBytesDESC WitnessOrderByInput = "total_memory_bytes_DESC"

	WitnessOrderByInputUpdatedAtASC WitnessOrderByInput = "updatedAt_ASC"

	WitnessOrderByInputUpdatedAtDESC WitnessOrderByInput = "updatedAt_DESC"
)

// Defines values for ZoneOrderByInput.
const (
	ZoneOrderByInputCreatedAtASC ZoneOrderByInput = "createdAt_ASC"

	ZoneOrderByInputCreatedAtDESC ZoneOrderByInput = "createdAt_DESC"

	ZoneOrderByInputFailureDataSpaceASC ZoneOrderByInput = "failure_data_space_ASC"

	ZoneOrderByInputFailureDataSpaceDESC ZoneOrderByInput = "failure_data_space_DESC"

	ZoneOrderByInputHostNumASC ZoneOrderByInput = "host_num_ASC"

	ZoneOrderByInputHostNumDESC ZoneOrderByInput = "host_num_DESC"

	ZoneOrderByInputIdASC ZoneOrderByInput = "id_ASC"

	ZoneOrderByInputIdDESC ZoneOrderByInput = "id_DESC"

	ZoneOrderByInputIsPreferredASC ZoneOrderByInput = "is_preferred_ASC"

	ZoneOrderByInputIsPreferredDESC ZoneOrderByInput = "is_preferred_DESC"

	ZoneOrderByInputLocalIdASC ZoneOrderByInput = "local_id_ASC"

	ZoneOrderByInputLocalIdDESC ZoneOrderByInput = "local_id_DESC"

	ZoneOrderByInputProvisionedCpuCoresASC ZoneOrderByInput = "provisioned_cpu_cores_ASC"

	ZoneOrderByInputProvisionedCpuCoresDESC ZoneOrderByInput = "provisioned_cpu_cores_DESC"

	ZoneOrderByInputProvisionedCpuCoresForActiveVmASC ZoneOrderByInput = "provisioned_cpu_cores_for_active_vm_ASC"

	ZoneOrderByInputProvisionedCpuCoresForActiveVmDESC ZoneOrderByInput = "provisioned_cpu_cores_for_active_vm_DESC"

	ZoneOrderByInputProvisionedDataSpaceASC ZoneOrderByInput = "provisioned_data_space_ASC"

	ZoneOrderByInputProvisionedDataSpaceDESC ZoneOrderByInput = "provisioned_data_space_DESC"

	ZoneOrderByInputProvisionedMemoryBytesASC ZoneOrderByInput = "provisioned_memory_bytes_ASC"

	ZoneOrderByInputProvisionedMemoryBytesDESC ZoneOrderByInput = "provisioned_memory_bytes_DESC"

	ZoneOrderByInputRunningVmNumASC ZoneOrderByInput = "running_vm_num_ASC"

	ZoneOrderByInputRunningVmNumDESC ZoneOrderByInput = "running_vm_num_DESC"

	ZoneOrderByInputStoppedVmNumASC ZoneOrderByInput = "stopped_vm_num_ASC"

	ZoneOrderByInputStoppedVmNumDESC ZoneOrderByInput = "stopped_vm_num_DESC"

	ZoneOrderByInputSuspendedVmNumASC ZoneOrderByInput = "suspended_vm_num_ASC"

	ZoneOrderByInputSuspendedVmNumDESC ZoneOrderByInput = "suspended_vm_num_DESC"

	ZoneOrderByInputTotalCacheCapacityASC ZoneOrderByInput = "total_cache_capacity_ASC"

	ZoneOrderByInputTotalCacheCapacityDESC ZoneOrderByInput = "total_cache_capacity_DESC"

	ZoneOrderByInputTotalCpuCoresASC ZoneOrderByInput = "total_cpu_cores_ASC"

	ZoneOrderByInputTotalCpuCoresDESC ZoneOrderByInput = "total_cpu_cores_DESC"

	ZoneOrderByInputTotalCpuHzASC ZoneOrderByInput = "total_cpu_hz_ASC"

	ZoneOrderByInputTotalCpuHzDESC ZoneOrderByInput = "total_cpu_hz_DESC"

	ZoneOrderByInputTotalDataCapacityASC ZoneOrderByInput = "total_data_capacity_ASC"

	ZoneOrderByInputTotalDataCapacityDESC ZoneOrderByInput = "total_data_capacity_DESC"

	ZoneOrderByInputTotalMemoryBytesASC ZoneOrderByInput = "total_memory_bytes_ASC"

	ZoneOrderByInputTotalMemoryBytesDESC ZoneOrderByInput = "total_memory_bytes_DESC"

	ZoneOrderByInputUpdatedAtASC ZoneOrderByInput = "updatedAt_ASC"

	ZoneOrderByInputUpdatedAtDESC ZoneOrderByInput = "updatedAt_DESC"

	ZoneOrderByInputUsedDataSpaceASC ZoneOrderByInput = "used_data_space_ASC"

	ZoneOrderByInputUsedDataSpaceDESC ZoneOrderByInput = "used_data_space_DESC"

	ZoneOrderByInputValidDataSpaceASC ZoneOrderByInput = "valid_data_space_ASC"

	ZoneOrderByInputValidDataSpaceDESC ZoneOrderByInput = "valid_data_space_DESC"

	ZoneOrderByInputVmNumASC ZoneOrderByInput = "vm_num_ASC"

	ZoneOrderByInputVmNumDESC ZoneOrderByInput = "vm_num_DESC"
)

// Defines values for ZoneTopoOrderByInput.
const (
	ZoneTopoOrderByInputCreatedAtASC ZoneTopoOrderByInput = "createdAt_ASC"

	ZoneTopoOrderByInputCreatedAtDESC ZoneTopoOrderByInput = "createdAt_DESC"

	ZoneTopoOrderByInputIdASC ZoneTopoOrderByInput = "id_ASC"

	ZoneTopoOrderByInputIdDESC ZoneTopoOrderByInput = "id_DESC"

	ZoneTopoOrderByInputLocalIdASC ZoneTopoOrderByInput = "local_id_ASC"

	ZoneTopoOrderByInputLocalIdDESC ZoneTopoOrderByInput = "local_id_DESC"

	ZoneTopoOrderByInputUpdatedAtASC ZoneTopoOrderByInput = "updatedAt_ASC"

	ZoneTopoOrderByInputUpdatedAtDESC ZoneTopoOrderByInput = "updatedAt_DESC"
)

// AddLabelsToResourcesParams defines model for AddLabelsToResourcesParams.
type AddLabelsToResourcesParams struct {
	Data struct {
		Clusters                  *ClusterWhereInput                  `json:"clusters,omitempty"`
		ConsistencyGroupSnapshots *ConsistencyGroupSnapshotWhereInput `json:"consistency_group_snapshots,omitempty"`
		ConsistencyGroups         *ConsistencyGroupWhereInput         `json:"consistency_groups,omitempty"`
		Datacenters               *DatacenterWhereInput               `json:"datacenters,omitempty"`
		Disks                     *DiskWhereInput                     `json:"disks,omitempty"`
		ElfImages                 *ElfImageWhereInput                 `json:"elf_images,omitempty"`
		Hosts                     *HostWhereInput                     `json:"hosts,omitempty"`
		IscsiLunSnapshots         *IscsiLunSnapshotWhereInput         `json:"iscsi_lun_snapshots,omitempty"`
		IscsiLuns                 *IscsiLunWhereInput                 `json:"iscsi_luns,omitempty"`
		IscsiTargets              *IscsiTargetWhereInput              `json:"iscsi_targets,omitempty"`
		NamespaceGroups           *NamespaceGroupWhereInput           `json:"namespace_groups,omitempty"`
		NfsExports                *NfsExportWhereInput                `json:"nfs_exports,omitempty"`
		NfsInodes                 *NfsInodeWhereInput                 `json:"nfs_inodes,omitempty"`
		Nics                      *NicWhereInput                      `json:"nics,omitempty"`
		NvmfNamespaceSnapshots    *NvmfNamespaceSnapshotWhereInput    `json:"nvmf_namespace_snapshots,omitempty"`
		NvmfNamespaces            *NvmfNamespaceWhereInput            `json:"nvmf_namespaces,omitempty"`
		NvmfSubsystems            *NvmfSubsystemWhereInput            `json:"nvmf_subsystems,omitempty"`
		Vdses                     *VdsWhereInput                      `json:"vdses,omitempty"`
		Vlans                     *VlanWhereInput                     `json:"vlans,omitempty"`
		VmSnapshots               *VmSnapshotWhereInput               `json:"vm_snapshots,omitempty"`
		VmTemplates               *VmTemplateWhereInput               `json:"vm_templates,omitempty"`
		VmVolumes                 *VmVolumeWhereInput                 `json:"vm_volumes,omitempty"`
		Vms                       *VmWhereInput                       `json:"vms,omitempty"`
	} `json:"data"`
	Where LabelWhereInput `json:"where"`
}

// Alert defines model for Alert.
type Alert struct {
	AlertRule *struct {
		Id string `json:"id"`
	} `json:"alert_rule"`
	Cause   string `json:"cause"`
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Disk *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"disk"`
	Ended bool `json:"ended"`
	Host  *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Id              string                 `json:"id"`
	Impact          string                 `json:"impact"`
	Labels          map[string]interface{} `json:"labels"`
	LocalCreateTime string                 `json:"local_create_time"`
	LocalEndTime    string                 `json:"local_end_time"`
	LocalId         string                 `json:"local_id"`
	LocalStartTime  string                 `json:"local_start_time"`
	LocalUpdateTime string                 `json:"local_update_time"`
	Message         string                 `json:"message"`
	Severity        string                 `json:"severity"`
	Solution        string                 `json:"solution"`
	Threshold       float64                `json:"threshold"`
	Value           float64                `json:"value"`
	Vms             *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vms"`
}

// AlertConnection defines model for AlertConnection.
type AlertConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// AlertNotifier defines model for AlertNotifier.
type AlertNotifier struct {
	Disabled     bool     `json:"disabled"`
	EmailFrom    *string  `json:"email_from"`
	EmailTos     []string `json:"email_tos"`
	Id           string   `json:"id"`
	LanguageCode *struct {
		// Embedded struct due to allOf(#/components/schemas/NotifierLanguageCode)
		NotifierLanguageCode `yaml:",inline"`
	} `json:"language_code"`
	NoticeSeverities []string `json:"notice_severities"`
	SecurityMode     *struct {
		// Embedded struct due to allOf(#/components/schemas/NotifierSecurityMode)
		NotifierSecurityMode `yaml:",inline"`
	} `json:"security_mode"`
	SmtpServerHost *string  `json:"smtp_server_host"`
	SmtpServerPort *float64 `json:"smtp_server_port"`
	Username       *string  `json:"username"`
}

// AlertNotifierConnection defines model for AlertNotifierConnection.
type AlertNotifierConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// AlertNotifierOrderByInput defines model for AlertNotifierOrderByInput.
type AlertNotifierOrderByInput string

// AlertNotifierWhereInput defines model for AlertNotifierWhereInput.
type AlertNotifierWhereInput struct {
	AND                    *[]AlertNotifierWhereInput `json:"AND"`
	NOT                    *[]AlertNotifierWhereInput `json:"NOT"`
	OR                     *[]AlertNotifierWhereInput `json:"OR"`
	Disabled               *bool                      `json:"disabled"`
	DisabledNot            *bool                      `json:"disabled_not"`
	EmailFrom              *string                    `json:"email_from"`
	EmailFromContains      *string                    `json:"email_from_contains"`
	EmailFromEndsWith      *string                    `json:"email_from_ends_with"`
	EmailFromGt            *string                    `json:"email_from_gt"`
	EmailFromGte           *string                    `json:"email_from_gte"`
	EmailFromIn            *[]string                  `json:"email_from_in"`
	EmailFromLt            *string                    `json:"email_from_lt"`
	EmailFromLte           *string                    `json:"email_from_lte"`
	EmailFromNot           *string                    `json:"email_from_not"`
	EmailFromNotContains   *string                    `json:"email_from_not_contains"`
	EmailFromNotEndsWith   *string                    `json:"email_from_not_ends_with"`
	EmailFromNotIn         *[]string                  `json:"email_from_not_in"`
	EmailFromNotStartsWith *string                    `json:"email_from_not_starts_with"`
	EmailFromStartsWith    *string                    `json:"email_from_starts_with"`
	Id                     *string                    `json:"id"`
	IdContains             *string                    `json:"id_contains"`
	IdEndsWith             *string                    `json:"id_ends_with"`
	IdGt                   *string                    `json:"id_gt"`
	IdGte                  *string                    `json:"id_gte"`
	IdIn                   *[]string                  `json:"id_in"`
	IdLt                   *string                    `json:"id_lt"`
	IdLte                  *string                    `json:"id_lte"`
	IdNot                  *string                    `json:"id_not"`
	IdNotContains          *string                    `json:"id_not_contains"`
	IdNotEndsWith          *string                    `json:"id_not_ends_with"`
	IdNotIn                *[]string                  `json:"id_not_in"`
	IdNotStartsWith        *string                    `json:"id_not_starts_with"`
	IdStartsWith           *string                    `json:"id_starts_with"`
	LanguageCode           *struct {
		// Embedded struct due to allOf(#/components/schemas/NotifierLanguageCode)
		NotifierLanguageCode `yaml:",inline"`
	} `json:"language_code"`
	LanguageCodeIn  *[]NotifierLanguageCode `json:"language_code_in"`
	LanguageCodeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NotifierLanguageCode)
		NotifierLanguageCode `yaml:",inline"`
	} `json:"language_code_not"`
	LanguageCodeNotIn     *[]NotifierLanguageCode `json:"language_code_not_in"`
	Password              *string                 `json:"password"`
	PasswordContains      *string                 `json:"password_contains"`
	PasswordEndsWith      *string                 `json:"password_ends_with"`
	PasswordGt            *string                 `json:"password_gt"`
	PasswordGte           *string                 `json:"password_gte"`
	PasswordIn            *[]string               `json:"password_in"`
	PasswordLt            *string                 `json:"password_lt"`
	PasswordLte           *string                 `json:"password_lte"`
	PasswordNot           *string                 `json:"password_not"`
	PasswordNotContains   *string                 `json:"password_not_contains"`
	PasswordNotEndsWith   *string                 `json:"password_not_ends_with"`
	PasswordNotIn         *[]string               `json:"password_not_in"`
	PasswordNotStartsWith *string                 `json:"password_not_starts_with"`
	PasswordStartsWith    *string                 `json:"password_starts_with"`
	SecurityMode          *struct {
		// Embedded struct due to allOf(#/components/schemas/NotifierSecurityMode)
		NotifierSecurityMode `yaml:",inline"`
	} `json:"security_mode"`
	SecurityModeIn  *[]NotifierSecurityMode `json:"security_mode_in"`
	SecurityModeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NotifierSecurityMode)
		NotifierSecurityMode `yaml:",inline"`
	} `json:"security_mode_not"`
	SecurityModeNotIn           *[]NotifierSecurityMode `json:"security_mode_not_in"`
	SmtpServerHost              *string                 `json:"smtp_server_host"`
	SmtpServerHostContains      *string                 `json:"smtp_server_host_contains"`
	SmtpServerHostEndsWith      *string                 `json:"smtp_server_host_ends_with"`
	SmtpServerHostGt            *string                 `json:"smtp_server_host_gt"`
	SmtpServerHostGte           *string                 `json:"smtp_server_host_gte"`
	SmtpServerHostIn            *[]string               `json:"smtp_server_host_in"`
	SmtpServerHostLt            *string                 `json:"smtp_server_host_lt"`
	SmtpServerHostLte           *string                 `json:"smtp_server_host_lte"`
	SmtpServerHostNot           *string                 `json:"smtp_server_host_not"`
	SmtpServerHostNotContains   *string                 `json:"smtp_server_host_not_contains"`
	SmtpServerHostNotEndsWith   *string                 `json:"smtp_server_host_not_ends_with"`
	SmtpServerHostNotIn         *[]string               `json:"smtp_server_host_not_in"`
	SmtpServerHostNotStartsWith *string                 `json:"smtp_server_host_not_starts_with"`
	SmtpServerHostStartsWith    *string                 `json:"smtp_server_host_starts_with"`
	SmtpServerPort              *float64                `json:"smtp_server_port"`
	SmtpServerPortGt            *float64                `json:"smtp_server_port_gt"`
	SmtpServerPortGte           *float64                `json:"smtp_server_port_gte"`
	SmtpServerPortIn            *[]float64              `json:"smtp_server_port_in"`
	SmtpServerPortLt            *float64                `json:"smtp_server_port_lt"`
	SmtpServerPortLte           *float64                `json:"smtp_server_port_lte"`
	SmtpServerPortNot           *float64                `json:"smtp_server_port_not"`
	SmtpServerPortNotIn         *[]float64              `json:"smtp_server_port_not_in"`
	Username                    *string                 `json:"username"`
	UsernameContains            *string                 `json:"username_contains"`
	UsernameEndsWith            *string                 `json:"username_ends_with"`
	UsernameGt                  *string                 `json:"username_gt"`
	UsernameGte                 *string                 `json:"username_gte"`
	UsernameIn                  *[]string               `json:"username_in"`
	UsernameLt                  *string                 `json:"username_lt"`
	UsernameLte                 *string                 `json:"username_lte"`
	UsernameNot                 *string                 `json:"username_not"`
	UsernameNotContains         *string                 `json:"username_not_contains"`
	UsernameNotEndsWith         *string                 `json:"username_not_ends_with"`
	UsernameNotIn               *[]string               `json:"username_not_in"`
	UsernameNotStartsWith       *string                 `json:"username_not_starts_with"`
	UsernameStartsWith          *string                 `json:"username_starts_with"`
}

// AlertOrderByInput defines model for AlertOrderByInput.
type AlertOrderByInput string

// AlertRule defines model for AlertRule.
type AlertRule struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Customized      bool `json:"customized"`
	Disabled        bool `json:"disabled"`
	GlobalAlertRule struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"global_alert_rule"`
	Id         string `json:"id"`
	LocalId    string `json:"local_id"`
	Thresholds []struct {
		Quantile *float64 `json:"quantile"`
		Severity *struct {
			// Embedded struct due to allOf(#/components/schemas/SeverityEnum)
			SeverityEnum `yaml:",inline"`
		} `json:"severity"`
		Value *float64 `json:"value"`
	} `json:"thresholds"`
}

// AlertRuleConnection defines model for AlertRuleConnection.
type AlertRuleConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// AlertRuleObject defines model for AlertRuleObject.
type AlertRuleObject string

// AlertRuleOrderByInput defines model for AlertRuleOrderByInput.
type AlertRuleOrderByInput string

// AlertRuleThresholds defines model for AlertRuleThresholds.
type AlertRuleThresholds struct {
	Severity SeverityEnum `json:"severity"`
	Value    float64      `json:"value"`
}

// AlertRuleUnit defines model for AlertRuleUnit.
type AlertRuleUnit string

// AlertRuleWhereInput defines model for AlertRuleWhereInput.
type AlertRuleWhereInput struct {
	AND     *[]AlertRuleWhereInput `json:"AND"`
	NOT     *[]AlertRuleWhereInput `json:"NOT"`
	OR      *[]AlertRuleWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Customized      *bool `json:"customized"`
	CustomizedNot   *bool `json:"customized_not"`
	Disabled        *bool `json:"disabled"`
	DisabledNot     *bool `json:"disabled_not"`
	GlobalAlertRule *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalAlertRuleWhereInput)
		GlobalAlertRuleWhereInput `yaml:",inline"`
	} `json:"global_alert_rule"`
	Id                   *string   `json:"id"`
	IdContains           *string   `json:"id_contains"`
	IdEndsWith           *string   `json:"id_ends_with"`
	IdGt                 *string   `json:"id_gt"`
	IdGte                *string   `json:"id_gte"`
	IdIn                 *[]string `json:"id_in"`
	IdLt                 *string   `json:"id_lt"`
	IdLte                *string   `json:"id_lte"`
	IdNot                *string   `json:"id_not"`
	IdNotContains        *string   `json:"id_not_contains"`
	IdNotEndsWith        *string   `json:"id_not_ends_with"`
	IdNotIn              *[]string `json:"id_not_in"`
	IdNotStartsWith      *string   `json:"id_not_starts_with"`
	IdStartsWith         *string   `json:"id_starts_with"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
}

// AlertWhereInput defines model for AlertWhereInput.
type AlertWhereInput struct {
	AND       *[]AlertWhereInput `json:"AND"`
	NOT       *[]AlertWhereInput `json:"NOT"`
	OR        *[]AlertWhereInput `json:"OR"`
	AlertRule *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleWhereInput)
		AlertRuleWhereInput `yaml:",inline"`
	} `json:"alert_rule"`
	Cause              *string   `json:"cause"`
	CauseContains      *string   `json:"cause_contains"`
	CauseEndsWith      *string   `json:"cause_ends_with"`
	CauseGt            *string   `json:"cause_gt"`
	CauseGte           *string   `json:"cause_gte"`
	CauseIn            *[]string `json:"cause_in"`
	CauseLt            *string   `json:"cause_lt"`
	CauseLte           *string   `json:"cause_lte"`
	CauseNot           *string   `json:"cause_not"`
	CauseNotContains   *string   `json:"cause_not_contains"`
	CauseNotEndsWith   *string   `json:"cause_not_ends_with"`
	CauseNotIn         *[]string `json:"cause_not_in"`
	CauseNotStartsWith *string   `json:"cause_not_starts_with"`
	CauseStartsWith    *string   `json:"cause_starts_with"`
	Cluster            *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Disk *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disk"`
	Ended    *bool `json:"ended"`
	EndedNot *bool `json:"ended_not"`
	Host     *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Id                           *string    `json:"id"`
	IdContains                   *string    `json:"id_contains"`
	IdEndsWith                   *string    `json:"id_ends_with"`
	IdGt                         *string    `json:"id_gt"`
	IdGte                        *string    `json:"id_gte"`
	IdIn                         *[]string  `json:"id_in"`
	IdLt                         *string    `json:"id_lt"`
	IdLte                        *string    `json:"id_lte"`
	IdNot                        *string    `json:"id_not"`
	IdNotContains                *string    `json:"id_not_contains"`
	IdNotEndsWith                *string    `json:"id_not_ends_with"`
	IdNotIn                      *[]string  `json:"id_not_in"`
	IdNotStartsWith              *string    `json:"id_not_starts_with"`
	IdStartsWith                 *string    `json:"id_starts_with"`
	Impact                       *string    `json:"impact"`
	ImpactContains               *string    `json:"impact_contains"`
	ImpactEndsWith               *string    `json:"impact_ends_with"`
	ImpactGt                     *string    `json:"impact_gt"`
	ImpactGte                    *string    `json:"impact_gte"`
	ImpactIn                     *[]string  `json:"impact_in"`
	ImpactLt                     *string    `json:"impact_lt"`
	ImpactLte                    *string    `json:"impact_lte"`
	ImpactNot                    *string    `json:"impact_not"`
	ImpactNotContains            *string    `json:"impact_not_contains"`
	ImpactNotEndsWith            *string    `json:"impact_not_ends_with"`
	ImpactNotIn                  *[]string  `json:"impact_not_in"`
	ImpactNotStartsWith          *string    `json:"impact_not_starts_with"`
	ImpactStartsWith             *string    `json:"impact_starts_with"`
	LocalCreateTime              *string    `json:"local_create_time"`
	LocalCreateTimeGt            *string    `json:"local_create_time_gt"`
	LocalCreateTimeGte           *string    `json:"local_create_time_gte"`
	LocalCreateTimeIn            *[]string  `json:"local_create_time_in"`
	LocalCreateTimeLt            *string    `json:"local_create_time_lt"`
	LocalCreateTimeLte           *string    `json:"local_create_time_lte"`
	LocalCreateTimeNot           *string    `json:"local_create_time_not"`
	LocalCreateTimeNotIn         *[]string  `json:"local_create_time_not_in"`
	LocalEndTime                 *string    `json:"local_end_time"`
	LocalEndTimeContains         *string    `json:"local_end_time_contains"`
	LocalEndTimeEndsWith         *string    `json:"local_end_time_ends_with"`
	LocalEndTimeGt               *string    `json:"local_end_time_gt"`
	LocalEndTimeGte              *string    `json:"local_end_time_gte"`
	LocalEndTimeIn               *[]string  `json:"local_end_time_in"`
	LocalEndTimeLt               *string    `json:"local_end_time_lt"`
	LocalEndTimeLte              *string    `json:"local_end_time_lte"`
	LocalEndTimeNot              *string    `json:"local_end_time_not"`
	LocalEndTimeNotContains      *string    `json:"local_end_time_not_contains"`
	LocalEndTimeNotEndsWith      *string    `json:"local_end_time_not_ends_with"`
	LocalEndTimeNotIn            *[]string  `json:"local_end_time_not_in"`
	LocalEndTimeNotStartsWith    *string    `json:"local_end_time_not_starts_with"`
	LocalEndTimeStartsWith       *string    `json:"local_end_time_starts_with"`
	LocalId                      *string    `json:"local_id"`
	LocalIdContains              *string    `json:"local_id_contains"`
	LocalIdEndsWith              *string    `json:"local_id_ends_with"`
	LocalIdGt                    *string    `json:"local_id_gt"`
	LocalIdGte                   *string    `json:"local_id_gte"`
	LocalIdIn                    *[]string  `json:"local_id_in"`
	LocalIdLt                    *string    `json:"local_id_lt"`
	LocalIdLte                   *string    `json:"local_id_lte"`
	LocalIdNot                   *string    `json:"local_id_not"`
	LocalIdNotContains           *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith           *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn                 *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith         *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith            *string    `json:"local_id_starts_with"`
	LocalStartTime               *string    `json:"local_start_time"`
	LocalStartTimeContains       *string    `json:"local_start_time_contains"`
	LocalStartTimeEndsWith       *string    `json:"local_start_time_ends_with"`
	LocalStartTimeGt             *string    `json:"local_start_time_gt"`
	LocalStartTimeGte            *string    `json:"local_start_time_gte"`
	LocalStartTimeIn             *[]string  `json:"local_start_time_in"`
	LocalStartTimeLt             *string    `json:"local_start_time_lt"`
	LocalStartTimeLte            *string    `json:"local_start_time_lte"`
	LocalStartTimeNot            *string    `json:"local_start_time_not"`
	LocalStartTimeNotContains    *string    `json:"local_start_time_not_contains"`
	LocalStartTimeNotEndsWith    *string    `json:"local_start_time_not_ends_with"`
	LocalStartTimeNotIn          *[]string  `json:"local_start_time_not_in"`
	LocalStartTimeNotStartsWith  *string    `json:"local_start_time_not_starts_with"`
	LocalStartTimeStartsWith     *string    `json:"local_start_time_starts_with"`
	LocalUpdateTime              *string    `json:"local_update_time"`
	LocalUpdateTimeContains      *string    `json:"local_update_time_contains"`
	LocalUpdateTimeEndsWith      *string    `json:"local_update_time_ends_with"`
	LocalUpdateTimeGt            *string    `json:"local_update_time_gt"`
	LocalUpdateTimeGte           *string    `json:"local_update_time_gte"`
	LocalUpdateTimeIn            *[]string  `json:"local_update_time_in"`
	LocalUpdateTimeLt            *string    `json:"local_update_time_lt"`
	LocalUpdateTimeLte           *string    `json:"local_update_time_lte"`
	LocalUpdateTimeNot           *string    `json:"local_update_time_not"`
	LocalUpdateTimeNotContains   *string    `json:"local_update_time_not_contains"`
	LocalUpdateTimeNotEndsWith   *string    `json:"local_update_time_not_ends_with"`
	LocalUpdateTimeNotIn         *[]string  `json:"local_update_time_not_in"`
	LocalUpdateTimeNotStartsWith *string    `json:"local_update_time_not_starts_with"`
	LocalUpdateTimeStartsWith    *string    `json:"local_update_time_starts_with"`
	Message                      *string    `json:"message"`
	MessageContains              *string    `json:"message_contains"`
	MessageEndsWith              *string    `json:"message_ends_with"`
	MessageGt                    *string    `json:"message_gt"`
	MessageGte                   *string    `json:"message_gte"`
	MessageIn                    *[]string  `json:"message_in"`
	MessageLt                    *string    `json:"message_lt"`
	MessageLte                   *string    `json:"message_lte"`
	MessageNot                   *string    `json:"message_not"`
	MessageNotContains           *string    `json:"message_not_contains"`
	MessageNotEndsWith           *string    `json:"message_not_ends_with"`
	MessageNotIn                 *[]string  `json:"message_not_in"`
	MessageNotStartsWith         *string    `json:"message_not_starts_with"`
	MessageStartsWith            *string    `json:"message_starts_with"`
	Severity                     *string    `json:"severity"`
	SeverityContains             *string    `json:"severity_contains"`
	SeverityEndsWith             *string    `json:"severity_ends_with"`
	SeverityGt                   *string    `json:"severity_gt"`
	SeverityGte                  *string    `json:"severity_gte"`
	SeverityIn                   *[]string  `json:"severity_in"`
	SeverityLt                   *string    `json:"severity_lt"`
	SeverityLte                  *string    `json:"severity_lte"`
	SeverityNot                  *string    `json:"severity_not"`
	SeverityNotContains          *string    `json:"severity_not_contains"`
	SeverityNotEndsWith          *string    `json:"severity_not_ends_with"`
	SeverityNotIn                *[]string  `json:"severity_not_in"`
	SeverityNotStartsWith        *string    `json:"severity_not_starts_with"`
	SeverityStartsWith           *string    `json:"severity_starts_with"`
	Solution                     *string    `json:"solution"`
	SolutionContains             *string    `json:"solution_contains"`
	SolutionEndsWith             *string    `json:"solution_ends_with"`
	SolutionGt                   *string    `json:"solution_gt"`
	SolutionGte                  *string    `json:"solution_gte"`
	SolutionIn                   *[]string  `json:"solution_in"`
	SolutionLt                   *string    `json:"solution_lt"`
	SolutionLte                  *string    `json:"solution_lte"`
	SolutionNot                  *string    `json:"solution_not"`
	SolutionNotContains          *string    `json:"solution_not_contains"`
	SolutionNotEndsWith          *string    `json:"solution_not_ends_with"`
	SolutionNotIn                *[]string  `json:"solution_not_in"`
	SolutionNotStartsWith        *string    `json:"solution_not_starts_with"`
	SolutionStartsWith           *string    `json:"solution_starts_with"`
	Threshold                    *float64   `json:"threshold"`
	ThresholdGt                  *float64   `json:"threshold_gt"`
	ThresholdGte                 *float64   `json:"threshold_gte"`
	ThresholdIn                  *[]float64 `json:"threshold_in"`
	ThresholdLt                  *float64   `json:"threshold_lt"`
	ThresholdLte                 *float64   `json:"threshold_lte"`
	ThresholdNot                 *float64   `json:"threshold_not"`
	ThresholdNotIn               *[]float64 `json:"threshold_not_in"`
	Value                        *float64   `json:"value"`
	ValueGt                      *float64   `json:"value_gt"`
	ValueGte                     *float64   `json:"value_gte"`
	ValueIn                      *[]float64 `json:"value_in"`
	ValueLt                      *float64   `json:"value_lt"`
	ValueLte                     *float64   `json:"value_lte"`
	ValueNot                     *float64   `json:"value_not"`
	ValueNotIn                   *[]float64 `json:"value_not_in"`
	VmsEvery                     *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_every"`
	VmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_none"`
	VmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_some"`
}

// Application defines model for Application.
type Application struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	ErrorMessage *string          `json:"error_message"`
	Id           string           `json:"id"`
	ImageName    *string          `json:"image_name"`
	LocalId      string           `json:"local_id"`
	Memory       float64          `json:"memory"`
	State        ApplicationState `json:"state"`
	StorageIp    string           `json:"storage_ip"`
	Type         ApplicationType  `json:"type"`
	UpdateTime   *string          `json:"update_time"`
	Vcpu         float64          `json:"vcpu"`
	Version      string           `json:"version"`
	VolumeSize   float64          `json:"volume_size"`
}

// ApplicationConnection defines model for ApplicationConnection.
type ApplicationConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ApplicationOrderByInput defines model for ApplicationOrderByInput.
type ApplicationOrderByInput string

// ApplicationState defines model for ApplicationState.
type ApplicationState string

// ApplicationType defines model for ApplicationType.
type ApplicationType string

// ApplicationWhereInput defines model for ApplicationWhereInput.
type ApplicationWhereInput struct {
	AND     *[]ApplicationWhereInput `json:"AND"`
	NOT     *[]ApplicationWhereInput `json:"NOT"`
	OR      *[]ApplicationWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	ErrorMessage              *string    `json:"error_message"`
	ErrorMessageContains      *string    `json:"error_message_contains"`
	ErrorMessageEndsWith      *string    `json:"error_message_ends_with"`
	ErrorMessageGt            *string    `json:"error_message_gt"`
	ErrorMessageGte           *string    `json:"error_message_gte"`
	ErrorMessageIn            *[]string  `json:"error_message_in"`
	ErrorMessageLt            *string    `json:"error_message_lt"`
	ErrorMessageLte           *string    `json:"error_message_lte"`
	ErrorMessageNot           *string    `json:"error_message_not"`
	ErrorMessageNotContains   *string    `json:"error_message_not_contains"`
	ErrorMessageNotEndsWith   *string    `json:"error_message_not_ends_with"`
	ErrorMessageNotIn         *[]string  `json:"error_message_not_in"`
	ErrorMessageNotStartsWith *string    `json:"error_message_not_starts_with"`
	ErrorMessageStartsWith    *string    `json:"error_message_starts_with"`
	Id                        *string    `json:"id"`
	IdContains                *string    `json:"id_contains"`
	IdEndsWith                *string    `json:"id_ends_with"`
	IdGt                      *string    `json:"id_gt"`
	IdGte                     *string    `json:"id_gte"`
	IdIn                      *[]string  `json:"id_in"`
	IdLt                      *string    `json:"id_lt"`
	IdLte                     *string    `json:"id_lte"`
	IdNot                     *string    `json:"id_not"`
	IdNotContains             *string    `json:"id_not_contains"`
	IdNotEndsWith             *string    `json:"id_not_ends_with"`
	IdNotIn                   *[]string  `json:"id_not_in"`
	IdNotStartsWith           *string    `json:"id_not_starts_with"`
	IdStartsWith              *string    `json:"id_starts_with"`
	ImageName                 *string    `json:"image_name"`
	ImageNameContains         *string    `json:"image_name_contains"`
	ImageNameEndsWith         *string    `json:"image_name_ends_with"`
	ImageNameGt               *string    `json:"image_name_gt"`
	ImageNameGte              *string    `json:"image_name_gte"`
	ImageNameIn               *[]string  `json:"image_name_in"`
	ImageNameLt               *string    `json:"image_name_lt"`
	ImageNameLte              *string    `json:"image_name_lte"`
	ImageNameNot              *string    `json:"image_name_not"`
	ImageNameNotContains      *string    `json:"image_name_not_contains"`
	ImageNameNotEndsWith      *string    `json:"image_name_not_ends_with"`
	ImageNameNotIn            *[]string  `json:"image_name_not_in"`
	ImageNameNotStartsWith    *string    `json:"image_name_not_starts_with"`
	ImageNameStartsWith       *string    `json:"image_name_starts_with"`
	LocalId                   *string    `json:"local_id"`
	LocalIdContains           *string    `json:"local_id_contains"`
	LocalIdEndsWith           *string    `json:"local_id_ends_with"`
	LocalIdGt                 *string    `json:"local_id_gt"`
	LocalIdGte                *string    `json:"local_id_gte"`
	LocalIdIn                 *[]string  `json:"local_id_in"`
	LocalIdLt                 *string    `json:"local_id_lt"`
	LocalIdLte                *string    `json:"local_id_lte"`
	LocalIdNot                *string    `json:"local_id_not"`
	LocalIdNotContains        *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith        *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn              *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith      *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith         *string    `json:"local_id_starts_with"`
	Memory                    *float64   `json:"memory"`
	MemoryGt                  *float64   `json:"memory_gt"`
	MemoryGte                 *float64   `json:"memory_gte"`
	MemoryIn                  *[]float64 `json:"memory_in"`
	MemoryLt                  *float64   `json:"memory_lt"`
	MemoryLte                 *float64   `json:"memory_lte"`
	MemoryNot                 *float64   `json:"memory_not"`
	MemoryNotIn               *[]float64 `json:"memory_not_in"`
	State                     *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationState)
		ApplicationState `yaml:",inline"`
	} `json:"state"`
	StateIn  *[]ApplicationState `json:"state_in"`
	StateNot *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationState)
		ApplicationState `yaml:",inline"`
	} `json:"state_not"`
	StateNotIn             *[]ApplicationState `json:"state_not_in"`
	StorageIp              *string             `json:"storage_ip"`
	StorageIpContains      *string             `json:"storage_ip_contains"`
	StorageIpEndsWith      *string             `json:"storage_ip_ends_with"`
	StorageIpGt            *string             `json:"storage_ip_gt"`
	StorageIpGte           *string             `json:"storage_ip_gte"`
	StorageIpIn            *[]string           `json:"storage_ip_in"`
	StorageIpLt            *string             `json:"storage_ip_lt"`
	StorageIpLte           *string             `json:"storage_ip_lte"`
	StorageIpNot           *string             `json:"storage_ip_not"`
	StorageIpNotContains   *string             `json:"storage_ip_not_contains"`
	StorageIpNotEndsWith   *string             `json:"storage_ip_not_ends_with"`
	StorageIpNotIn         *[]string           `json:"storage_ip_not_in"`
	StorageIpNotStartsWith *string             `json:"storage_ip_not_starts_with"`
	StorageIpStartsWith    *string             `json:"storage_ip_starts_with"`
	Type                   *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationType)
		ApplicationType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]ApplicationType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationType)
		ApplicationType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn            *[]ApplicationType `json:"type_not_in"`
	UpdateTime           *string            `json:"update_time"`
	UpdateTimeGt         *string            `json:"update_time_gt"`
	UpdateTimeGte        *string            `json:"update_time_gte"`
	UpdateTimeIn         *[]string          `json:"update_time_in"`
	UpdateTimeLt         *string            `json:"update_time_lt"`
	UpdateTimeLte        *string            `json:"update_time_lte"`
	UpdateTimeNot        *string            `json:"update_time_not"`
	UpdateTimeNotIn      *[]string          `json:"update_time_not_in"`
	Vcpu                 *float64           `json:"vcpu"`
	VcpuGt               *float64           `json:"vcpu_gt"`
	VcpuGte              *float64           `json:"vcpu_gte"`
	VcpuIn               *[]float64         `json:"vcpu_in"`
	VcpuLt               *float64           `json:"vcpu_lt"`
	VcpuLte              *float64           `json:"vcpu_lte"`
	VcpuNot              *float64           `json:"vcpu_not"`
	VcpuNotIn            *[]float64         `json:"vcpu_not_in"`
	Version              *string            `json:"version"`
	VersionContains      *string            `json:"version_contains"`
	VersionEndsWith      *string            `json:"version_ends_with"`
	VersionGt            *string            `json:"version_gt"`
	VersionGte           *string            `json:"version_gte"`
	VersionIn            *[]string          `json:"version_in"`
	VersionLt            *string            `json:"version_lt"`
	VersionLte           *string            `json:"version_lte"`
	VersionNot           *string            `json:"version_not"`
	VersionNotContains   *string            `json:"version_not_contains"`
	VersionNotEndsWith   *string            `json:"version_not_ends_with"`
	VersionNotIn         *[]string          `json:"version_not_in"`
	VersionNotStartsWith *string            `json:"version_not_starts_with"`
	VersionStartsWith    *string            `json:"version_starts_with"`
	VolumeSize           *float64           `json:"volume_size"`
	VolumeSizeGt         *float64           `json:"volume_size_gt"`
	VolumeSizeGte        *float64           `json:"volume_size_gte"`
	VolumeSizeIn         *[]float64         `json:"volume_size_in"`
	VolumeSizeLt         *float64           `json:"volume_size_lt"`
	VolumeSizeLte        *float64           `json:"volume_size_lte"`
	VolumeSizeNot        *float64           `json:"volume_size_not"`
	VolumeSizeNotIn      *[]float64         `json:"volume_size_not_in"`
}

// Architecture defines model for Architecture.
type Architecture string

// BatchHosts defines model for BatchHosts.
type BatchHosts struct {
	Typename *BatchHostsTypename `json:"__typename,omitempty"`
	Task     Task                `json:"task"`
}

// BatchHostsTypename defines model for BatchHosts.Typename.
type BatchHostsTypename string

// BrickPhaseEnum defines model for BrickPhaseEnum.
type BrickPhaseEnum string

// BrickTopo defines model for BrickTopo.
type BrickTopo struct {
	Capacity struct {
		Column *float64 `json:"column"`
		Row    *float64 `json:"row"`
	} `json:"capacity"`
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	ClusterTopo *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster_topo"`
	DiskLayout *struct {
		Column    float64        `json:"column"`
		Direction Direction      `json:"direction"`
		Phase     BrickPhaseEnum `json:"phase"`
		Row       float64        `json:"row"`
	} `json:"disk_layout"`
	Height     float64 `json:"height"`
	Id         string  `json:"id"`
	LocalId    string  `json:"local_id"`
	Model      *string `json:"model"`
	Name       string  `json:"name"`
	NodeTopoes *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"node_topoes"`
	Position    float64 `json:"position"`
	PowerLayout *struct {
		// Embedded struct due to allOf(#/components/schemas/Direction)
		Direction `yaml:",inline"`
	} `json:"power_layout"`
	PowerPosition *struct {
		// Embedded struct due to allOf(#/components/schemas/PowerPosition)
		PowerPosition `yaml:",inline"`
	} `json:"power_position"`
	Powers *[]struct {
		Id string `json:"id"`
	} `json:"powers"`
	RackTopo *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"rack_topo"`
	TagPositionInBrick *[]struct {
		Column float64 `json:"column"`
		Row    float64 `json:"row"`
		Tag    string  `json:"tag"`
	} `json:"tag_position_in_brick"`
}

// BrickTopoConnection defines model for BrickTopoConnection.
type BrickTopoConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// BrickTopoCreationParams defines model for BrickTopoCreationParams.
type BrickTopoCreationParams struct {
	Capacity *struct {
		Column *float64 `json:"column"`
		Row    *float64 `json:"row"`
	} `json:"capacity,omitempty"`
	ClusterId          string              `json:"cluster_id"`
	Height             float64             `json:"height"`
	Name               string              `json:"name"`
	NodeTopoes         *NodeTopoWhereInput `json:"node_topoes,omitempty"`
	Position           float64             `json:"position"`
	RackTopoId         *string             `json:"rack_topo_id,omitempty"`
	TagPositionInBrick *[]struct {
		Column float64 `json:"column"`
		Row    float64 `json:"row"`
		Tag    string  `json:"tag"`
	} `json:"tag_position_in_brick"`
}

// BrickTopoDeletionParams defines model for BrickTopoDeletionParams.
type BrickTopoDeletionParams struct {
	Where BrickTopoWhereInput `json:"where"`
}

// BrickTopoMoveParams defines model for BrickTopoMoveParams.
type BrickTopoMoveParams struct {
	Data struct {
		Position   float64 `json:"position"`
		RackTopoId *string `json:"rack_topo_id,omitempty"`
	} `json:"data"`
	Where BrickTopoWhereInput `json:"where"`
}

// BrickTopoOrderByInput defines model for BrickTopoOrderByInput.
type BrickTopoOrderByInput string

// BrickTopoUpdationParams defines model for BrickTopoUpdationParams.
type BrickTopoUpdationParams struct {
	Data struct {
		Capacity *struct {
			Column *float64 `json:"column"`
			Row    *float64 `json:"row"`
		} `json:"capacity,omitempty"`
		Height             *float64            `json:"height,omitempty"`
		Name               *string             `json:"name,omitempty"`
		NodeTopoes         *NodeTopoWhereInput `json:"node_topoes,omitempty"`
		Position           *float64            `json:"position,omitempty"`
		TagPositionInBrick *[]struct {
			Column float64 `json:"column"`
			Row    float64 `json:"row"`
			Tag    string  `json:"tag"`
		} `json:"tag_position_in_brick"`
	} `json:"data"`
	Where BrickTopoWhereInput `json:"where"`
}

// BrickTopoWhereInput defines model for BrickTopoWhereInput.
type BrickTopoWhereInput struct {
	AND     *[]BrickTopoWhereInput `json:"AND"`
	NOT     *[]BrickTopoWhereInput `json:"NOT"`
	OR      *[]BrickTopoWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	ClusterTopo *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterTopoWhereInput)
		ClusterTopoWhereInput `yaml:",inline"`
	} `json:"cluster_topo"`
	Height               *float64   `json:"height"`
	HeightGt             *float64   `json:"height_gt"`
	HeightGte            *float64   `json:"height_gte"`
	HeightIn             *[]float64 `json:"height_in"`
	HeightLt             *float64   `json:"height_lt"`
	HeightLte            *float64   `json:"height_lte"`
	HeightNot            *float64   `json:"height_not"`
	HeightNotIn          *[]float64 `json:"height_not_in"`
	Id                   *string    `json:"id"`
	IdContains           *string    `json:"id_contains"`
	IdEndsWith           *string    `json:"id_ends_with"`
	IdGt                 *string    `json:"id_gt"`
	IdGte                *string    `json:"id_gte"`
	IdIn                 *[]string  `json:"id_in"`
	IdLt                 *string    `json:"id_lt"`
	IdLte                *string    `json:"id_lte"`
	IdNot                *string    `json:"id_not"`
	IdNotContains        *string    `json:"id_not_contains"`
	IdNotEndsWith        *string    `json:"id_not_ends_with"`
	IdNotIn              *[]string  `json:"id_not_in"`
	IdNotStartsWith      *string    `json:"id_not_starts_with"`
	IdStartsWith         *string    `json:"id_starts_with"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	Model                *string    `json:"model"`
	ModelContains        *string    `json:"model_contains"`
	ModelEndsWith        *string    `json:"model_ends_with"`
	ModelGt              *string    `json:"model_gt"`
	ModelGte             *string    `json:"model_gte"`
	ModelIn              *[]string  `json:"model_in"`
	ModelLt              *string    `json:"model_lt"`
	ModelLte             *string    `json:"model_lte"`
	ModelNot             *string    `json:"model_not"`
	ModelNotContains     *string    `json:"model_not_contains"`
	ModelNotEndsWith     *string    `json:"model_not_ends_with"`
	ModelNotIn           *[]string  `json:"model_not_in"`
	ModelNotStartsWith   *string    `json:"model_not_starts_with"`
	ModelStartsWith      *string    `json:"model_starts_with"`
	Name                 *string    `json:"name"`
	NameContains         *string    `json:"name_contains"`
	NameEndsWith         *string    `json:"name_ends_with"`
	NameGt               *string    `json:"name_gt"`
	NameGte              *string    `json:"name_gte"`
	NameIn               *[]string  `json:"name_in"`
	NameLt               *string    `json:"name_lt"`
	NameLte              *string    `json:"name_lte"`
	NameNot              *string    `json:"name_not"`
	NameNotContains      *string    `json:"name_not_contains"`
	NameNotEndsWith      *string    `json:"name_not_ends_with"`
	NameNotIn            *[]string  `json:"name_not_in"`
	NameNotStartsWith    *string    `json:"name_not_starts_with"`
	NameStartsWith       *string    `json:"name_starts_with"`
	NodeTopoesEvery      *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoWhereInput)
		NodeTopoWhereInput `yaml:",inline"`
	} `json:"node_topoes_every"`
	NodeTopoesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoWhereInput)
		NodeTopoWhereInput `yaml:",inline"`
	} `json:"node_topoes_none"`
	NodeTopoesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoWhereInput)
		NodeTopoWhereInput `yaml:",inline"`
	} `json:"node_topoes_some"`
	Position      *float64   `json:"position"`
	PositionGt    *float64   `json:"position_gt"`
	PositionGte   *float64   `json:"position_gte"`
	PositionIn    *[]float64 `json:"position_in"`
	PositionLt    *float64   `json:"position_lt"`
	PositionLte   *float64   `json:"position_lte"`
	PositionNot   *float64   `json:"position_not"`
	PositionNotIn *[]float64 `json:"position_not_in"`
	PowerLayout   *struct {
		// Embedded struct due to allOf(#/components/schemas/Direction)
		Direction `yaml:",inline"`
	} `json:"power_layout"`
	PowerLayoutIn  *[]Direction `json:"power_layout_in"`
	PowerLayoutNot *struct {
		// Embedded struct due to allOf(#/components/schemas/Direction)
		Direction `yaml:",inline"`
	} `json:"power_layout_not"`
	PowerLayoutNotIn *[]Direction `json:"power_layout_not_in"`
	PowerPosition    *struct {
		// Embedded struct due to allOf(#/components/schemas/PowerPosition)
		PowerPosition `yaml:",inline"`
	} `json:"power_position"`
	PowerPositionIn  *[]PowerPosition `json:"power_position_in"`
	PowerPositionNot *struct {
		// Embedded struct due to allOf(#/components/schemas/PowerPosition)
		PowerPosition `yaml:",inline"`
	} `json:"power_position_not"`
	PowerPositionNotIn *[]PowerPosition `json:"power_position_not_in"`
	RackTopo           *struct {
		// Embedded struct due to allOf(#/components/schemas/RackTopoWhereInput)
		RackTopoWhereInput `yaml:",inline"`
	} `json:"rack_topo"`
}

// Bus defines model for Bus.
type Bus string

// CloudInitNetworkTypeEnum defines model for CloudInitNetworkTypeEnum.
type CloudInitNetworkTypeEnum string

// Cluster defines model for Cluster.
type Cluster struct {
	Applications *[]struct {
		Id string `json:"id"`
	} `json:"applications"`
	Architecture      Architecture `json:"architecture"`
	AutoConverge      *bool        `json:"auto_converge"`
	ConnectState      ConnectState `json:"connect_state"`
	ConsistencyGroups *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_groups"`
	CurrentCpuModel *string `json:"current_cpu_model"`
	Datacenters     *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"datacenters"`
	DisconnectedDate   *string `json:"disconnected_date"`
	DisconnectedReason *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterConnectorErrorCode)
		ClusterConnectorErrorCode `yaml:",inline"`
	} `json:"disconnected_reason"`
	Dns               []string `json:"dns"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	FailureDataSpace *float64 `json:"failure_data_space"`
	HasMetrox        *bool    `json:"has_metrox"`
	HasRemoteBackup  *bool    `json:"has_remote_backup"`
	HostNum          *float64 `json:"host_num"`
	Hosts            *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"hosts"`
	Hypervisor *struct {
		// Embedded struct due to allOf(#/components/schemas/Hypervisor)
		Hypervisor `yaml:",inline"`
	} `json:"hypervisor"`
	Id         string  `json:"id"`
	Ip         string  `json:"ip"`
	IsAllFlash *bool   `json:"is_all_flash"`
	IscsiVip   *string `json:"iscsi_vip"`
	Labels     *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LicenseExpireDate *string `json:"license_expire_date"`
	LicenseSerial     *string `json:"license_serial"`
	LicenseSignDate   *string `json:"license_sign_date"`
	LicenseType       *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseType)
		LicenseType `yaml:",inline"`
	} `json:"license_type"`
	LocalId                        *string  `json:"local_id"`
	MaintenanceEndDate             *string  `json:"maintenance_end_date"`
	MaintenanceStartDate           *string  `json:"maintenance_start_date"`
	ManagementVip                  *string  `json:"management_vip"`
	MaxChunkNum                    *float64 `json:"max_chunk_num"`
	MaxPhysicalDataCapacity        *float64 `json:"max_physical_data_capacity"`
	MaxPhysicalDataCapacityPerNode *float64 `json:"max_physical_data_capacity_per_node"`
	MetroAvailabilityChecklist     *struct {
		PrimaryZone struct {
			Critical float64 `json:"critical"`
			Info     float64 `json:"info"`
			Items    []struct {
				Critical []string               `json:"critical"`
				Info     []string               `json:"info"`
				Key      string                 `json:"key"`
				Labels   map[string]interface{} `json:"labels"`
				Notice   []string               `json:"notice"`
				Status   MetroCheckStatusEnum   `json:"status"`
			} `json:"items"`
			Notice float64              `json:"notice"`
			Status MetroCheckStatusEnum `json:"status"`
		} `json:"primaryZone"`
		PrimaryZoneAndWitness struct {
			Critical float64 `json:"critical"`
			Info     float64 `json:"info"`
			Items    []struct {
				Critical []string               `json:"critical"`
				Info     []string               `json:"info"`
				Key      string                 `json:"key"`
				Labels   map[string]interface{} `json:"labels"`
				Notice   []string               `json:"notice"`
				Status   MetroCheckStatusEnum   `json:"status"`
			} `json:"items"`
			Notice float64              `json:"notice"`
			Status MetroCheckStatusEnum `json:"status"`
		} `json:"primaryZoneAndWitness"`
		SecondaryZone struct {
			Critical float64 `json:"critical"`
			Info     float64 `json:"info"`
			Items    []struct {
				Critical []string               `json:"critical"`
				Info     []string               `json:"info"`
				Key      string                 `json:"key"`
				Labels   map[string]interface{} `json:"labels"`
				Notice   []string               `json:"notice"`
				Status   MetroCheckStatusEnum   `json:"status"`
			} `json:"items"`
			Notice float64              `json:"notice"`
			Status MetroCheckStatusEnum `json:"status"`
		} `json:"secondaryZone"`
		SecondaryZoneAndWitness struct {
			Critical float64 `json:"critical"`
			Info     float64 `json:"info"`
			Items    []struct {
				Critical []string               `json:"critical"`
				Info     []string               `json:"info"`
				Key      string                 `json:"key"`
				Labels   map[string]interface{} `json:"labels"`
				Notice   []string               `json:"notice"`
				Status   MetroCheckStatusEnum   `json:"status"`
			} `json:"items"`
			Notice float64              `json:"notice"`
			Status MetroCheckStatusEnum `json:"status"`
		} `json:"secondaryZoneAndWitness"`
		Witness struct {
			Critical float64 `json:"critical"`
			Info     float64 `json:"info"`
			Items    []struct {
				Critical []string               `json:"critical"`
				Info     []string               `json:"info"`
				Key      string                 `json:"key"`
				Labels   map[string]interface{} `json:"labels"`
				Notice   []string               `json:"notice"`
				Status   MetroCheckStatusEnum   `json:"status"`
			} `json:"items"`
			Notice float64              `json:"notice"`
			Status MetroCheckStatusEnum `json:"status"`
		} `json:"witness"`
		ZoneAndZone struct {
			Critical float64 `json:"critical"`
			Info     float64 `json:"info"`
			Items    []struct {
				Critical []string               `json:"critical"`
				Info     []string               `json:"info"`
				Key      string                 `json:"key"`
				Labels   map[string]interface{} `json:"labels"`
				Notice   []string               `json:"notice"`
				Status   MetroCheckStatusEnum   `json:"status"`
			} `json:"items"`
			Notice float64              `json:"notice"`
			Status MetroCheckStatusEnum `json:"status"`
		} `json:"zoneAndZone"`
	} `json:"metro_availability_checklist"`
	MgtGateway        *string  `json:"mgt_gateway"`
	MgtNetmask        *string  `json:"mgt_netmask"`
	MigrationDataSize *float64 `json:"migration_data_size"`
	MigrationSpeed    *float64 `json:"migration_speed"`
	Name              string   `json:"name"`
	NtpMode           *struct {
		// Embedded struct due to allOf(#/components/schemas/NtpMode)
		NtpMode `yaml:",inline"`
	} `json:"ntp_mode"`
	NtpServers                       []string `json:"ntp_servers"`
	NvmfEnabled                      *bool    `json:"nvmf_enabled"`
	PmemEnabled                      *bool    `json:"pmem_enabled"`
	ProvisionedCpuCores              *float64 `json:"provisioned_cpu_cores"`
	ProvisionedCpuCoresForActiveVm   *float64 `json:"provisioned_cpu_cores_for_active_vm"`
	ProvisionedForActiveVmRatio      *float64 `json:"provisioned_for_active_vm_ratio"`
	ProvisionedMemoryBytes           *float64 `json:"provisioned_memory_bytes"`
	ProvisionedRatio                 *float64 `json:"provisioned_ratio"`
	RdmaEnabled                      *bool    `json:"rdma_enabled"`
	RecommendedCpuModels             []string `json:"recommended_cpu_models"`
	RecoverDataSize                  *float64 `json:"recover_data_size"`
	RecoverSpeed                     *float64 `json:"recover_speed"`
	ReservedCpuCoresForSystemService *float64 `json:"reserved_cpu_cores_for_system_service"`
	RunningVmNum                     *float64 `json:"running_vm_num"`
	Settings                         *struct {
		Id string `json:"id"`
	} `json:"settings"`
	SoftwareEdition *struct {
		// Embedded struct due to allOf(#/components/schemas/SoftwareEdition)
		SoftwareEdition `yaml:",inline"`
	} `json:"software_edition"`
	StoppedVmNum       *float64    `json:"stopped_vm_num"`
	Stretch            *bool       `json:"stretch"`
	SuspendedVmNum     *float64    `json:"suspended_vm_num"`
	TotalCacheCapacity *float64    `json:"total_cache_capacity"`
	TotalCpuCores      *float64    `json:"total_cpu_cores"`
	TotalCpuHz         *float64    `json:"total_cpu_hz"`
	TotalCpuModels     []string    `json:"total_cpu_models"`
	TotalDataCapacity  *float64    `json:"total_data_capacity"`
	TotalMemoryBytes   *float64    `json:"total_memory_bytes"`
	Type               ClusterType `json:"type"`
	UsedCpuHz          *float64    `json:"used_cpu_hz"`
	UsedDataSpace      *float64    `json:"used_data_space"`
	UsedMemoryBytes    *float64    `json:"used_memory_bytes"`
	ValidDataSpace     *float64    `json:"valid_data_space"`
	VcenterAccount     *struct {
		Id string `json:"id"`
	} `json:"vcenterAccount"`
	Vdses *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vdses"`
	Version      string `json:"version"`
	VhostEnabled *bool  `json:"vhost_enabled"`
	VmFolders    *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_folders"`
	VmNum       *float64 `json:"vm_num"`
	VmTemplates *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_templates"`
	Vms *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vms"`
	Witness *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"witness"`
	Zones *[]struct {
		Id string `json:"id"`
	} `json:"zones"`
}

// ClusterConnection defines model for ClusterConnection.
type ClusterConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ClusterConnectorErrorCode defines model for ClusterConnectorErrorCode.
type ClusterConnectorErrorCode string

// ClusterCreationParams defines model for ClusterCreationParams.
type ClusterCreationParams struct {
	DatacenterId              *string `json:"datacenter_id,omitempty"`
	Ip                        string  `json:"ip"`
	Password                  string  `json:"password"`
	PrimaryZoneDatacenterId   *string `json:"primary_zone_datacenter_id,omitempty"`
	SecondaryZoneDatacenterId *string `json:"secondary_zone_datacenter_id,omitempty"`
	Username                  string  `json:"username"`
}

// ClusterDeletionParams defines model for ClusterDeletionParams.
type ClusterDeletionParams struct {
	Where ClusterWhereInput `json:"where"`
}

// ClusterImage defines model for ClusterImage.
type ClusterImage struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id       string  `json:"id"`
	MetaName string  `json:"meta_name"`
	MetaSize float64 `json:"meta_size"`
	Name     string  `json:"name"`
	Size     float64 `json:"size"`
	Version  string  `json:"version"`
}

// ClusterImageConnection defines model for ClusterImageConnection.
type ClusterImageConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ClusterImageOrderByInput defines model for ClusterImageOrderByInput.
type ClusterImageOrderByInput string

// ClusterImageWhereInput defines model for ClusterImageWhereInput.
type ClusterImageWhereInput struct {
	AND     *[]ClusterImageWhereInput `json:"AND"`
	NOT     *[]ClusterImageWhereInput `json:"NOT"`
	OR      *[]ClusterImageWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	MetaName               *string              `json:"meta_name"`
	MetaNameContains       *string              `json:"meta_name_contains"`
	MetaNameEndsWith       *string              `json:"meta_name_ends_with"`
	MetaNameGt             *string              `json:"meta_name_gt"`
	MetaNameGte            *string              `json:"meta_name_gte"`
	MetaNameIn             *[]string            `json:"meta_name_in"`
	MetaNameLt             *string              `json:"meta_name_lt"`
	MetaNameLte            *string              `json:"meta_name_lte"`
	MetaNameNot            *string              `json:"meta_name_not"`
	MetaNameNotContains    *string              `json:"meta_name_not_contains"`
	MetaNameNotEndsWith    *string              `json:"meta_name_not_ends_with"`
	MetaNameNotIn          *[]string            `json:"meta_name_not_in"`
	MetaNameNotStartsWith  *string              `json:"meta_name_not_starts_with"`
	MetaNameStartsWith     *string              `json:"meta_name_starts_with"`
	MetaSize               *float64             `json:"meta_size"`
	MetaSizeGt             *float64             `json:"meta_size_gt"`
	MetaSizeGte            *float64             `json:"meta_size_gte"`
	MetaSizeIn             *[]float64           `json:"meta_size_in"`
	MetaSizeLt             *float64             `json:"meta_size_lt"`
	MetaSizeLte            *float64             `json:"meta_size_lte"`
	MetaSizeNot            *float64             `json:"meta_size_not"`
	MetaSizeNotIn          *[]float64           `json:"meta_size_not_in"`
	Name                   *string              `json:"name"`
	NameContains           *string              `json:"name_contains"`
	NameEndsWith           *string              `json:"name_ends_with"`
	NameGt                 *string              `json:"name_gt"`
	NameGte                *string              `json:"name_gte"`
	NameIn                 *[]string            `json:"name_in"`
	NameLt                 *string              `json:"name_lt"`
	NameLte                *string              `json:"name_lte"`
	NameNot                *string              `json:"name_not"`
	NameNotContains        *string              `json:"name_not_contains"`
	NameNotEndsWith        *string              `json:"name_not_ends_with"`
	NameNotIn              *[]string            `json:"name_not_in"`
	NameNotStartsWith      *string              `json:"name_not_starts_with"`
	NameStartsWith         *string              `json:"name_starts_with"`
	Size                   *float64             `json:"size"`
	SizeGt                 *float64             `json:"size_gt"`
	SizeGte                *float64             `json:"size_gte"`
	SizeIn                 *[]float64           `json:"size_in"`
	SizeLt                 *float64             `json:"size_lt"`
	SizeLte                *float64             `json:"size_lte"`
	SizeNot                *float64             `json:"size_not"`
	SizeNotIn              *[]float64           `json:"size_not_in"`
	Version                *string              `json:"version"`
	VersionContains        *string              `json:"version_contains"`
	VersionEndsWith        *string              `json:"version_ends_with"`
	VersionGt              *string              `json:"version_gt"`
	VersionGte             *string              `json:"version_gte"`
	VersionIn              *[]string            `json:"version_in"`
	VersionLt              *string              `json:"version_lt"`
	VersionLte             *string              `json:"version_lte"`
	VersionNot             *string              `json:"version_not"`
	VersionNotContains     *string              `json:"version_not_contains"`
	VersionNotEndsWith     *string              `json:"version_not_ends_with"`
	VersionNotIn           *[]string            `json:"version_not_in"`
	VersionNotStartsWith   *string              `json:"version_not_starts_with"`
	VersionSemanticGt      *string              `json:"version_semantic_gt"`
	VersionSemanticGte     *string              `json:"version_semantic_gte"`
	VersionSemanticLt      *string              `json:"version_semantic_lt"`
	VersionSemanticLte     *string              `json:"version_semantic_lte"`
	VersionStartsWith      *string              `json:"version_starts_with"`
}

// ClusterLicenseUpdationParams defines model for ClusterLicenseUpdationParams.
type ClusterLicenseUpdationParams struct {
	Data struct {
		License string `json:"license"`
	} `json:"data"`
	Where ClusterWhereInput `json:"where"`
}

// ClusterOrderByInput defines model for ClusterOrderByInput.
type ClusterOrderByInput string

// ClusterRecycleBinCreationParams defines model for ClusterRecycleBinCreationParams.
type ClusterRecycleBinCreationParams struct {
	Data struct {
		Enaled bool    `json:"enaled"`
		Retain float64 `json:"retain"`
	} `json:"data"`
	Where ClusterWhereInput `json:"where"`
}

// ClusterRecycleBinDeletionParams defines model for ClusterRecycleBinDeletionParams.
type ClusterRecycleBinDeletionParams struct {
	Where ClusterWhereInput `json:"where"`
}

// ClusterRecycleBinUpdationParams defines model for ClusterRecycleBinUpdationParams.
type ClusterRecycleBinUpdationParams struct {
	Data struct {
		Enaled bool    `json:"enaled"`
		Retain float64 `json:"retain"`
	} `json:"data"`
	Where ClusterWhereInput `json:"where"`
}

// ClusterSettings defines model for ClusterSettings.
type ClusterSettings struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Id           string `json:"id"`
	VmRecycleBin *struct {
		Enabled bool    `json:"enabled"`
		Retain  float64 `json:"retain"`
	} `json:"vm_recycle_bin"`
}

// ClusterSettingsConnection defines model for ClusterSettingsConnection.
type ClusterSettingsConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ClusterSettingsOrderByInput defines model for ClusterSettingsOrderByInput.
type ClusterSettingsOrderByInput string

// ClusterSettingsWhereInput defines model for ClusterSettingsWhereInput.
type ClusterSettingsWhereInput struct {
	AND     *[]ClusterSettingsWhereInput `json:"AND"`
	NOT     *[]ClusterSettingsWhereInput `json:"NOT"`
	OR      *[]ClusterSettingsWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Id              *string   `json:"id"`
	IdContains      *string   `json:"id_contains"`
	IdEndsWith      *string   `json:"id_ends_with"`
	IdGt            *string   `json:"id_gt"`
	IdGte           *string   `json:"id_gte"`
	IdIn            *[]string `json:"id_in"`
	IdLt            *string   `json:"id_lt"`
	IdLte           *string   `json:"id_lte"`
	IdNot           *string   `json:"id_not"`
	IdNotContains   *string   `json:"id_not_contains"`
	IdNotEndsWith   *string   `json:"id_not_ends_with"`
	IdNotIn         *[]string `json:"id_not_in"`
	IdNotStartsWith *string   `json:"id_not_starts_with"`
	IdStartsWith    *string   `json:"id_starts_with"`
}

// ClusterTopo defines model for ClusterTopo.
type ClusterTopo struct {
	BrickTopoes *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"brick_topoes"`
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Id         string `json:"id"`
	LocalId    string `json:"local_id"`
	Name       string `json:"name"`
	NodeTopoes *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"node_topoes"`
	ZoneTopoes *[]struct {
		Id string `json:"id"`
	} `json:"zone_topoes"`
}

// ClusterTopoConnection defines model for ClusterTopoConnection.
type ClusterTopoConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ClusterTopoOrderByInput defines model for ClusterTopoOrderByInput.
type ClusterTopoOrderByInput string

// ClusterTopoWhereInput defines model for ClusterTopoWhereInput.
type ClusterTopoWhereInput struct {
	AND              *[]ClusterTopoWhereInput `json:"AND"`
	NOT              *[]ClusterTopoWhereInput `json:"NOT"`
	OR               *[]ClusterTopoWhereInput `json:"OR"`
	BrickTopoesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"brick_topoes_every"`
	BrickTopoesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"brick_topoes_none"`
	BrickTopoesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"brick_topoes_some"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Id                   *string   `json:"id"`
	IdContains           *string   `json:"id_contains"`
	IdEndsWith           *string   `json:"id_ends_with"`
	IdGt                 *string   `json:"id_gt"`
	IdGte                *string   `json:"id_gte"`
	IdIn                 *[]string `json:"id_in"`
	IdLt                 *string   `json:"id_lt"`
	IdLte                *string   `json:"id_lte"`
	IdNot                *string   `json:"id_not"`
	IdNotContains        *string   `json:"id_not_contains"`
	IdNotEndsWith        *string   `json:"id_not_ends_with"`
	IdNotIn              *[]string `json:"id_not_in"`
	IdNotStartsWith      *string   `json:"id_not_starts_with"`
	IdStartsWith         *string   `json:"id_starts_with"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NodeTopoesEvery      *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoWhereInput)
		NodeTopoWhereInput `yaml:",inline"`
	} `json:"node_topoes_every"`
	NodeTopoesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoWhereInput)
		NodeTopoWhereInput `yaml:",inline"`
	} `json:"node_topoes_none"`
	NodeTopoesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoWhereInput)
		NodeTopoWhereInput `yaml:",inline"`
	} `json:"node_topoes_some"`
	ZoneTopoesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneTopoWhereInput)
		ZoneTopoWhereInput `yaml:",inline"`
	} `json:"zone_topoes_every"`
	ZoneTopoesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneTopoWhereInput)
		ZoneTopoWhereInput `yaml:",inline"`
	} `json:"zone_topoes_none"`
	ZoneTopoesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneTopoWhereInput)
		ZoneTopoWhereInput `yaml:",inline"`
	} `json:"zone_topoes_some"`
}

// ClusterType defines model for ClusterType.
type ClusterType string

// ClusterUpdationParams defines model for ClusterUpdationParams.
type ClusterUpdationParams struct {
	Data struct {
		DatacenterId              *string `json:"datacenter_id,omitempty"`
		Ip                        *string `json:"ip,omitempty"`
		Password                  *string `json:"password,omitempty"`
		PrimaryZoneDatacenterId   *string `json:"primary_zone_datacenter_id,omitempty"`
		PrimaryZoneId             *string `json:"primary_zone_id,omitempty"`
		SecondaryZoneDatacenterId *string `json:"secondary_zone_datacenter_id,omitempty"`
		SecondaryZoneId           *string `json:"secondary_zone_id,omitempty"`
		Username                  *string `json:"username,omitempty"`
	} `json:"data"`
	Where ClusterWhereInput `json:"where"`
}

// ClusterUpgradeHistory defines model for ClusterUpgradeHistory.
type ClusterUpgradeHistory struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Date     string                 `json:"date"`
	Id       string                 `json:"id"`
	LocalId  string                 `json:"local_id"`
	Progress map[string]interface{} `json:"progress"`
	Result   string                 `json:"result"`
	TaskUuid string                 `json:"task_uuid"`
	Version  string                 `json:"version"`
}

// ClusterUpgradeHistoryConnection defines model for ClusterUpgradeHistoryConnection.
type ClusterUpgradeHistoryConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ClusterUpgradeHistoryOrderByInput defines model for ClusterUpgradeHistoryOrderByInput.
type ClusterUpgradeHistoryOrderByInput string

// ClusterUpgradeHistoryWhereInput defines model for ClusterUpgradeHistoryWhereInput.
type ClusterUpgradeHistoryWhereInput struct {
	AND     *[]ClusterUpgradeHistoryWhereInput `json:"AND"`
	NOT     *[]ClusterUpgradeHistoryWhereInput `json:"NOT"`
	OR      *[]ClusterUpgradeHistoryWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Date                  *string   `json:"date"`
	DateGt                *string   `json:"date_gt"`
	DateGte               *string   `json:"date_gte"`
	DateIn                *[]string `json:"date_in"`
	DateLt                *string   `json:"date_lt"`
	DateLte               *string   `json:"date_lte"`
	DateNot               *string   `json:"date_not"`
	DateNotIn             *[]string `json:"date_not_in"`
	Id                    *string   `json:"id"`
	IdContains            *string   `json:"id_contains"`
	IdEndsWith            *string   `json:"id_ends_with"`
	IdGt                  *string   `json:"id_gt"`
	IdGte                 *string   `json:"id_gte"`
	IdIn                  *[]string `json:"id_in"`
	IdLt                  *string   `json:"id_lt"`
	IdLte                 *string   `json:"id_lte"`
	IdNot                 *string   `json:"id_not"`
	IdNotContains         *string   `json:"id_not_contains"`
	IdNotEndsWith         *string   `json:"id_not_ends_with"`
	IdNotIn               *[]string `json:"id_not_in"`
	IdNotStartsWith       *string   `json:"id_not_starts_with"`
	IdStartsWith          *string   `json:"id_starts_with"`
	LocalId               *string   `json:"local_id"`
	LocalIdContains       *string   `json:"local_id_contains"`
	LocalIdEndsWith       *string   `json:"local_id_ends_with"`
	LocalIdGt             *string   `json:"local_id_gt"`
	LocalIdGte            *string   `json:"local_id_gte"`
	LocalIdIn             *[]string `json:"local_id_in"`
	LocalIdLt             *string   `json:"local_id_lt"`
	LocalIdLte            *string   `json:"local_id_lte"`
	LocalIdNot            *string   `json:"local_id_not"`
	LocalIdNotContains    *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith    *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn          *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith  *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith     *string   `json:"local_id_starts_with"`
	Result                *string   `json:"result"`
	ResultContains        *string   `json:"result_contains"`
	ResultEndsWith        *string   `json:"result_ends_with"`
	ResultGt              *string   `json:"result_gt"`
	ResultGte             *string   `json:"result_gte"`
	ResultIn              *[]string `json:"result_in"`
	ResultLt              *string   `json:"result_lt"`
	ResultLte             *string   `json:"result_lte"`
	ResultNot             *string   `json:"result_not"`
	ResultNotContains     *string   `json:"result_not_contains"`
	ResultNotEndsWith     *string   `json:"result_not_ends_with"`
	ResultNotIn           *[]string `json:"result_not_in"`
	ResultNotStartsWith   *string   `json:"result_not_starts_with"`
	ResultStartsWith      *string   `json:"result_starts_with"`
	TaskUuid              *string   `json:"task_uuid"`
	TaskUuidContains      *string   `json:"task_uuid_contains"`
	TaskUuidEndsWith      *string   `json:"task_uuid_ends_with"`
	TaskUuidGt            *string   `json:"task_uuid_gt"`
	TaskUuidGte           *string   `json:"task_uuid_gte"`
	TaskUuidIn            *[]string `json:"task_uuid_in"`
	TaskUuidLt            *string   `json:"task_uuid_lt"`
	TaskUuidLte           *string   `json:"task_uuid_lte"`
	TaskUuidNot           *string   `json:"task_uuid_not"`
	TaskUuidNotContains   *string   `json:"task_uuid_not_contains"`
	TaskUuidNotEndsWith   *string   `json:"task_uuid_not_ends_with"`
	TaskUuidNotIn         *[]string `json:"task_uuid_not_in"`
	TaskUuidNotStartsWith *string   `json:"task_uuid_not_starts_with"`
	TaskUuidStartsWith    *string   `json:"task_uuid_starts_with"`
	Version               *string   `json:"version"`
	VersionContains       *string   `json:"version_contains"`
	VersionEndsWith       *string   `json:"version_ends_with"`
	VersionGt             *string   `json:"version_gt"`
	VersionGte            *string   `json:"version_gte"`
	VersionIn             *[]string `json:"version_in"`
	VersionLt             *string   `json:"version_lt"`
	VersionLte            *string   `json:"version_lte"`
	VersionNot            *string   `json:"version_not"`
	VersionNotContains    *string   `json:"version_not_contains"`
	VersionNotEndsWith    *string   `json:"version_not_ends_with"`
	VersionNotIn          *[]string `json:"version_not_in"`
	VersionNotStartsWith  *string   `json:"version_not_starts_with"`
	VersionStartsWith     *string   `json:"version_starts_with"`
}

// ClusterWhereInput defines model for ClusterWhereInput.
type ClusterWhereInput struct {
	AND               *[]ClusterWhereInput `json:"AND"`
	NOT               *[]ClusterWhereInput `json:"NOT"`
	OR                *[]ClusterWhereInput `json:"OR"`
	ApplicationsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationWhereInput)
		ApplicationWhereInput `yaml:",inline"`
	} `json:"applications_every"`
	ApplicationsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationWhereInput)
		ApplicationWhereInput `yaml:",inline"`
	} `json:"applications_none"`
	ApplicationsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationWhereInput)
		ApplicationWhereInput `yaml:",inline"`
	} `json:"applications_some"`
	Architecture *struct {
		// Embedded struct due to allOf(#/components/schemas/Architecture)
		Architecture `yaml:",inline"`
	} `json:"architecture"`
	ArchitectureIn  *[]Architecture `json:"architecture_in"`
	ArchitectureNot *struct {
		// Embedded struct due to allOf(#/components/schemas/Architecture)
		Architecture `yaml:",inline"`
	} `json:"architecture_not"`
	ArchitectureNotIn *[]Architecture `json:"architecture_not_in"`
	AutoConverge      *bool           `json:"auto_converge"`
	AutoConvergeNot   *bool           `json:"auto_converge_not"`
	ConnectState      *struct {
		// Embedded struct due to allOf(#/components/schemas/ConnectState)
		ConnectState `yaml:",inline"`
	} `json:"connect_state"`
	ConnectStateIn  *[]ConnectState `json:"connect_state_in"`
	ConnectStateNot *struct {
		// Embedded struct due to allOf(#/components/schemas/ConnectState)
		ConnectState `yaml:",inline"`
	} `json:"connect_state_not"`
	ConnectStateNotIn      *[]ConnectState `json:"connect_state_not_in"`
	ConsistencyGroupsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_groups_every"`
	ConsistencyGroupsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_groups_none"`
	ConsistencyGroupsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_groups_some"`
	CurrentCpuModel              *string   `json:"current_cpu_model"`
	CurrentCpuModelContains      *string   `json:"current_cpu_model_contains"`
	CurrentCpuModelEndsWith      *string   `json:"current_cpu_model_ends_with"`
	CurrentCpuModelGt            *string   `json:"current_cpu_model_gt"`
	CurrentCpuModelGte           *string   `json:"current_cpu_model_gte"`
	CurrentCpuModelIn            *[]string `json:"current_cpu_model_in"`
	CurrentCpuModelLt            *string   `json:"current_cpu_model_lt"`
	CurrentCpuModelLte           *string   `json:"current_cpu_model_lte"`
	CurrentCpuModelNot           *string   `json:"current_cpu_model_not"`
	CurrentCpuModelNotContains   *string   `json:"current_cpu_model_not_contains"`
	CurrentCpuModelNotEndsWith   *string   `json:"current_cpu_model_not_ends_with"`
	CurrentCpuModelNotIn         *[]string `json:"current_cpu_model_not_in"`
	CurrentCpuModelNotStartsWith *string   `json:"current_cpu_model_not_starts_with"`
	CurrentCpuModelStartsWith    *string   `json:"current_cpu_model_starts_with"`
	DatacentersEvery             *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_every"`
	DatacentersNone *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_none"`
	DatacentersSome *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_some"`
	DisconnectedDate      *string   `json:"disconnected_date"`
	DisconnectedDateGt    *string   `json:"disconnected_date_gt"`
	DisconnectedDateGte   *string   `json:"disconnected_date_gte"`
	DisconnectedDateIn    *[]string `json:"disconnected_date_in"`
	DisconnectedDateLt    *string   `json:"disconnected_date_lt"`
	DisconnectedDateLte   *string   `json:"disconnected_date_lte"`
	DisconnectedDateNot   *string   `json:"disconnected_date_not"`
	DisconnectedDateNotIn *[]string `json:"disconnected_date_not_in"`
	DisconnectedReason    *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterConnectorErrorCode)
		ClusterConnectorErrorCode `yaml:",inline"`
	} `json:"disconnected_reason"`
	DisconnectedReasonIn  *[]ClusterConnectorErrorCode `json:"disconnected_reason_in"`
	DisconnectedReasonNot *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterConnectorErrorCode)
		ClusterConnectorErrorCode `yaml:",inline"`
	} `json:"disconnected_reason_not"`
	DisconnectedReasonNotIn *[]ClusterConnectorErrorCode `json:"disconnected_reason_not_in"`
	EntityAsyncStatus       *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	FailureDataSpace       *float64             `json:"failure_data_space"`
	FailureDataSpaceGt     *float64             `json:"failure_data_space_gt"`
	FailureDataSpaceGte    *float64             `json:"failure_data_space_gte"`
	FailureDataSpaceIn     *[]float64           `json:"failure_data_space_in"`
	FailureDataSpaceLt     *float64             `json:"failure_data_space_lt"`
	FailureDataSpaceLte    *float64             `json:"failure_data_space_lte"`
	FailureDataSpaceNot    *float64             `json:"failure_data_space_not"`
	FailureDataSpaceNotIn  *[]float64           `json:"failure_data_space_not_in"`
	HasMetrox              *bool                `json:"has_metrox"`
	HasMetroxNot           *bool                `json:"has_metrox_not"`
	HasRemoteBackup        *bool                `json:"has_remote_backup"`
	HasRemoteBackupNot     *bool                `json:"has_remote_backup_not"`
	HostNum                *float64             `json:"host_num"`
	HostNumGt              *float64             `json:"host_num_gt"`
	HostNumGte             *float64             `json:"host_num_gte"`
	HostNumIn              *[]float64           `json:"host_num_in"`
	HostNumLt              *float64             `json:"host_num_lt"`
	HostNumLte             *float64             `json:"host_num_lte"`
	HostNumNot             *float64             `json:"host_num_not"`
	HostNumNotIn           *[]float64           `json:"host_num_not_in"`
	HostsEvery             *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_every"`
	HostsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_none"`
	HostsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_some"`
	Hypervisor *struct {
		// Embedded struct due to allOf(#/components/schemas/Hypervisor)
		Hypervisor `yaml:",inline"`
	} `json:"hypervisor"`
	HypervisorIn  *[]Hypervisor `json:"hypervisor_in"`
	HypervisorNot *struct {
		// Embedded struct due to allOf(#/components/schemas/Hypervisor)
		Hypervisor `yaml:",inline"`
	} `json:"hypervisor_not"`
	HypervisorNotIn       *[]Hypervisor `json:"hypervisor_not_in"`
	Id                    *string       `json:"id"`
	IdContains            *string       `json:"id_contains"`
	IdEndsWith            *string       `json:"id_ends_with"`
	IdGt                  *string       `json:"id_gt"`
	IdGte                 *string       `json:"id_gte"`
	IdIn                  *[]string     `json:"id_in"`
	IdLt                  *string       `json:"id_lt"`
	IdLte                 *string       `json:"id_lte"`
	IdNot                 *string       `json:"id_not"`
	IdNotContains         *string       `json:"id_not_contains"`
	IdNotEndsWith         *string       `json:"id_not_ends_with"`
	IdNotIn               *[]string     `json:"id_not_in"`
	IdNotStartsWith       *string       `json:"id_not_starts_with"`
	IdStartsWith          *string       `json:"id_starts_with"`
	Ip                    *string       `json:"ip"`
	IpContains            *string       `json:"ip_contains"`
	IpEndsWith            *string       `json:"ip_ends_with"`
	IpGt                  *string       `json:"ip_gt"`
	IpGte                 *string       `json:"ip_gte"`
	IpIn                  *[]string     `json:"ip_in"`
	IpLt                  *string       `json:"ip_lt"`
	IpLte                 *string       `json:"ip_lte"`
	IpNot                 *string       `json:"ip_not"`
	IpNotContains         *string       `json:"ip_not_contains"`
	IpNotEndsWith         *string       `json:"ip_not_ends_with"`
	IpNotIn               *[]string     `json:"ip_not_in"`
	IpNotStartsWith       *string       `json:"ip_not_starts_with"`
	IpStartsWith          *string       `json:"ip_starts_with"`
	IsAllFlash            *bool         `json:"is_all_flash"`
	IsAllFlashNot         *bool         `json:"is_all_flash_not"`
	IscsiVip              *string       `json:"iscsi_vip"`
	IscsiVipContains      *string       `json:"iscsi_vip_contains"`
	IscsiVipEndsWith      *string       `json:"iscsi_vip_ends_with"`
	IscsiVipGt            *string       `json:"iscsi_vip_gt"`
	IscsiVipGte           *string       `json:"iscsi_vip_gte"`
	IscsiVipIn            *[]string     `json:"iscsi_vip_in"`
	IscsiVipLt            *string       `json:"iscsi_vip_lt"`
	IscsiVipLte           *string       `json:"iscsi_vip_lte"`
	IscsiVipNot           *string       `json:"iscsi_vip_not"`
	IscsiVipNotContains   *string       `json:"iscsi_vip_not_contains"`
	IscsiVipNotEndsWith   *string       `json:"iscsi_vip_not_ends_with"`
	IscsiVipNotIn         *[]string     `json:"iscsi_vip_not_in"`
	IscsiVipNotStartsWith *string       `json:"iscsi_vip_not_starts_with"`
	IscsiVipStartsWith    *string       `json:"iscsi_vip_starts_with"`
	LabelsEvery           *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LicenseExpireDate          *string   `json:"license_expire_date"`
	LicenseExpireDateGt        *string   `json:"license_expire_date_gt"`
	LicenseExpireDateGte       *string   `json:"license_expire_date_gte"`
	LicenseExpireDateIn        *[]string `json:"license_expire_date_in"`
	LicenseExpireDateLt        *string   `json:"license_expire_date_lt"`
	LicenseExpireDateLte       *string   `json:"license_expire_date_lte"`
	LicenseExpireDateNot       *string   `json:"license_expire_date_not"`
	LicenseExpireDateNotIn     *[]string `json:"license_expire_date_not_in"`
	LicenseSerial              *string   `json:"license_serial"`
	LicenseSerialContains      *string   `json:"license_serial_contains"`
	LicenseSerialEndsWith      *string   `json:"license_serial_ends_with"`
	LicenseSerialGt            *string   `json:"license_serial_gt"`
	LicenseSerialGte           *string   `json:"license_serial_gte"`
	LicenseSerialIn            *[]string `json:"license_serial_in"`
	LicenseSerialLt            *string   `json:"license_serial_lt"`
	LicenseSerialLte           *string   `json:"license_serial_lte"`
	LicenseSerialNot           *string   `json:"license_serial_not"`
	LicenseSerialNotContains   *string   `json:"license_serial_not_contains"`
	LicenseSerialNotEndsWith   *string   `json:"license_serial_not_ends_with"`
	LicenseSerialNotIn         *[]string `json:"license_serial_not_in"`
	LicenseSerialNotStartsWith *string   `json:"license_serial_not_starts_with"`
	LicenseSerialStartsWith    *string   `json:"license_serial_starts_with"`
	LicenseSignDate            *string   `json:"license_sign_date"`
	LicenseSignDateGt          *string   `json:"license_sign_date_gt"`
	LicenseSignDateGte         *string   `json:"license_sign_date_gte"`
	LicenseSignDateIn          *[]string `json:"license_sign_date_in"`
	LicenseSignDateLt          *string   `json:"license_sign_date_lt"`
	LicenseSignDateLte         *string   `json:"license_sign_date_lte"`
	LicenseSignDateNot         *string   `json:"license_sign_date_not"`
	LicenseSignDateNotIn       *[]string `json:"license_sign_date_not_in"`
	LicenseType                *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseType)
		LicenseType `yaml:",inline"`
	} `json:"license_type"`
	LicenseTypeIn  *[]LicenseType `json:"license_type_in"`
	LicenseTypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseType)
		LicenseType `yaml:",inline"`
	} `json:"license_type_not"`
	LicenseTypeNotIn                    *[]LicenseType `json:"license_type_not_in"`
	LocalId                             *string        `json:"local_id"`
	LocalIdContains                     *string        `json:"local_id_contains"`
	LocalIdEndsWith                     *string        `json:"local_id_ends_with"`
	LocalIdGt                           *string        `json:"local_id_gt"`
	LocalIdGte                          *string        `json:"local_id_gte"`
	LocalIdIn                           *[]string      `json:"local_id_in"`
	LocalIdLt                           *string        `json:"local_id_lt"`
	LocalIdLte                          *string        `json:"local_id_lte"`
	LocalIdNot                          *string        `json:"local_id_not"`
	LocalIdNotContains                  *string        `json:"local_id_not_contains"`
	LocalIdNotEndsWith                  *string        `json:"local_id_not_ends_with"`
	LocalIdNotIn                        *[]string      `json:"local_id_not_in"`
	LocalIdNotStartsWith                *string        `json:"local_id_not_starts_with"`
	LocalIdStartsWith                   *string        `json:"local_id_starts_with"`
	MaintenanceEndDate                  *string        `json:"maintenance_end_date"`
	MaintenanceEndDateGt                *string        `json:"maintenance_end_date_gt"`
	MaintenanceEndDateGte               *string        `json:"maintenance_end_date_gte"`
	MaintenanceEndDateIn                *[]string      `json:"maintenance_end_date_in"`
	MaintenanceEndDateLt                *string        `json:"maintenance_end_date_lt"`
	MaintenanceEndDateLte               *string        `json:"maintenance_end_date_lte"`
	MaintenanceEndDateNot               *string        `json:"maintenance_end_date_not"`
	MaintenanceEndDateNotIn             *[]string      `json:"maintenance_end_date_not_in"`
	MaintenanceStartDate                *string        `json:"maintenance_start_date"`
	MaintenanceStartDateGt              *string        `json:"maintenance_start_date_gt"`
	MaintenanceStartDateGte             *string        `json:"maintenance_start_date_gte"`
	MaintenanceStartDateIn              *[]string      `json:"maintenance_start_date_in"`
	MaintenanceStartDateLt              *string        `json:"maintenance_start_date_lt"`
	MaintenanceStartDateLte             *string        `json:"maintenance_start_date_lte"`
	MaintenanceStartDateNot             *string        `json:"maintenance_start_date_not"`
	MaintenanceStartDateNotIn           *[]string      `json:"maintenance_start_date_not_in"`
	ManagementVip                       *string        `json:"management_vip"`
	ManagementVipContains               *string        `json:"management_vip_contains"`
	ManagementVipEndsWith               *string        `json:"management_vip_ends_with"`
	ManagementVipGt                     *string        `json:"management_vip_gt"`
	ManagementVipGte                    *string        `json:"management_vip_gte"`
	ManagementVipIn                     *[]string      `json:"management_vip_in"`
	ManagementVipLt                     *string        `json:"management_vip_lt"`
	ManagementVipLte                    *string        `json:"management_vip_lte"`
	ManagementVipNot                    *string        `json:"management_vip_not"`
	ManagementVipNotContains            *string        `json:"management_vip_not_contains"`
	ManagementVipNotEndsWith            *string        `json:"management_vip_not_ends_with"`
	ManagementVipNotIn                  *[]string      `json:"management_vip_not_in"`
	ManagementVipNotStartsWith          *string        `json:"management_vip_not_starts_with"`
	ManagementVipStartsWith             *string        `json:"management_vip_starts_with"`
	MaxChunkNum                         *float64       `json:"max_chunk_num"`
	MaxChunkNumGt                       *float64       `json:"max_chunk_num_gt"`
	MaxChunkNumGte                      *float64       `json:"max_chunk_num_gte"`
	MaxChunkNumIn                       *[]float64     `json:"max_chunk_num_in"`
	MaxChunkNumLt                       *float64       `json:"max_chunk_num_lt"`
	MaxChunkNumLte                      *float64       `json:"max_chunk_num_lte"`
	MaxChunkNumNot                      *float64       `json:"max_chunk_num_not"`
	MaxChunkNumNotIn                    *[]float64     `json:"max_chunk_num_not_in"`
	MaxPhysicalDataCapacity             *float64       `json:"max_physical_data_capacity"`
	MaxPhysicalDataCapacityGt           *float64       `json:"max_physical_data_capacity_gt"`
	MaxPhysicalDataCapacityGte          *float64       `json:"max_physical_data_capacity_gte"`
	MaxPhysicalDataCapacityIn           *[]float64     `json:"max_physical_data_capacity_in"`
	MaxPhysicalDataCapacityLt           *float64       `json:"max_physical_data_capacity_lt"`
	MaxPhysicalDataCapacityLte          *float64       `json:"max_physical_data_capacity_lte"`
	MaxPhysicalDataCapacityNot          *float64       `json:"max_physical_data_capacity_not"`
	MaxPhysicalDataCapacityNotIn        *[]float64     `json:"max_physical_data_capacity_not_in"`
	MaxPhysicalDataCapacityPerNode      *float64       `json:"max_physical_data_capacity_per_node"`
	MaxPhysicalDataCapacityPerNodeGt    *float64       `json:"max_physical_data_capacity_per_node_gt"`
	MaxPhysicalDataCapacityPerNodeGte   *float64       `json:"max_physical_data_capacity_per_node_gte"`
	MaxPhysicalDataCapacityPerNodeIn    *[]float64     `json:"max_physical_data_capacity_per_node_in"`
	MaxPhysicalDataCapacityPerNodeLt    *float64       `json:"max_physical_data_capacity_per_node_lt"`
	MaxPhysicalDataCapacityPerNodeLte   *float64       `json:"max_physical_data_capacity_per_node_lte"`
	MaxPhysicalDataCapacityPerNodeNot   *float64       `json:"max_physical_data_capacity_per_node_not"`
	MaxPhysicalDataCapacityPerNodeNotIn *[]float64     `json:"max_physical_data_capacity_per_node_not_in"`
	MgtGateway                          *string        `json:"mgt_gateway"`
	MgtGatewayContains                  *string        `json:"mgt_gateway_contains"`
	MgtGatewayEndsWith                  *string        `json:"mgt_gateway_ends_with"`
	MgtGatewayGt                        *string        `json:"mgt_gateway_gt"`
	MgtGatewayGte                       *string        `json:"mgt_gateway_gte"`
	MgtGatewayIn                        *[]string      `json:"mgt_gateway_in"`
	MgtGatewayLt                        *string        `json:"mgt_gateway_lt"`
	MgtGatewayLte                       *string        `json:"mgt_gateway_lte"`
	MgtGatewayNot                       *string        `json:"mgt_gateway_not"`
	MgtGatewayNotContains               *string        `json:"mgt_gateway_not_contains"`
	MgtGatewayNotEndsWith               *string        `json:"mgt_gateway_not_ends_with"`
	MgtGatewayNotIn                     *[]string      `json:"mgt_gateway_not_in"`
	MgtGatewayNotStartsWith             *string        `json:"mgt_gateway_not_starts_with"`
	MgtGatewayStartsWith                *string        `json:"mgt_gateway_starts_with"`
	MgtNetmask                          *string        `json:"mgt_netmask"`
	MgtNetmaskContains                  *string        `json:"mgt_netmask_contains"`
	MgtNetmaskEndsWith                  *string        `json:"mgt_netmask_ends_with"`
	MgtNetmaskGt                        *string        `json:"mgt_netmask_gt"`
	MgtNetmaskGte                       *string        `json:"mgt_netmask_gte"`
	MgtNetmaskIn                        *[]string      `json:"mgt_netmask_in"`
	MgtNetmaskLt                        *string        `json:"mgt_netmask_lt"`
	MgtNetmaskLte                       *string        `json:"mgt_netmask_lte"`
	MgtNetmaskNot                       *string        `json:"mgt_netmask_not"`
	MgtNetmaskNotContains               *string        `json:"mgt_netmask_not_contains"`
	MgtNetmaskNotEndsWith               *string        `json:"mgt_netmask_not_ends_with"`
	MgtNetmaskNotIn                     *[]string      `json:"mgt_netmask_not_in"`
	MgtNetmaskNotStartsWith             *string        `json:"mgt_netmask_not_starts_with"`
	MgtNetmaskStartsWith                *string        `json:"mgt_netmask_starts_with"`
	MigrationDataSize                   *float64       `json:"migration_data_size"`
	MigrationDataSizeGt                 *float64       `json:"migration_data_size_gt"`
	MigrationDataSizeGte                *float64       `json:"migration_data_size_gte"`
	MigrationDataSizeIn                 *[]float64     `json:"migration_data_size_in"`
	MigrationDataSizeLt                 *float64       `json:"migration_data_size_lt"`
	MigrationDataSizeLte                *float64       `json:"migration_data_size_lte"`
	MigrationDataSizeNot                *float64       `json:"migration_data_size_not"`
	MigrationDataSizeNotIn              *[]float64     `json:"migration_data_size_not_in"`
	MigrationSpeed                      *float64       `json:"migration_speed"`
	MigrationSpeedGt                    *float64       `json:"migration_speed_gt"`
	MigrationSpeedGte                   *float64       `json:"migration_speed_gte"`
	MigrationSpeedIn                    *[]float64     `json:"migration_speed_in"`
	MigrationSpeedLt                    *float64       `json:"migration_speed_lt"`
	MigrationSpeedLte                   *float64       `json:"migration_speed_lte"`
	MigrationSpeedNot                   *float64       `json:"migration_speed_not"`
	MigrationSpeedNotIn                 *[]float64     `json:"migration_speed_not_in"`
	Name                                *string        `json:"name"`
	NameContains                        *string        `json:"name_contains"`
	NameEndsWith                        *string        `json:"name_ends_with"`
	NameGt                              *string        `json:"name_gt"`
	NameGte                             *string        `json:"name_gte"`
	NameIn                              *[]string      `json:"name_in"`
	NameLt                              *string        `json:"name_lt"`
	NameLte                             *string        `json:"name_lte"`
	NameNot                             *string        `json:"name_not"`
	NameNotContains                     *string        `json:"name_not_contains"`
	NameNotEndsWith                     *string        `json:"name_not_ends_with"`
	NameNotIn                           *[]string      `json:"name_not_in"`
	NameNotStartsWith                   *string        `json:"name_not_starts_with"`
	NameStartsWith                      *string        `json:"name_starts_with"`
	NtpMode                             *struct {
		// Embedded struct due to allOf(#/components/schemas/NtpMode)
		NtpMode `yaml:",inline"`
	} `json:"ntp_mode"`
	NtpModeIn  *[]NtpMode `json:"ntp_mode_in"`
	NtpModeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NtpMode)
		NtpMode `yaml:",inline"`
	} `json:"ntp_mode_not"`
	NtpModeNotIn                          *[]NtpMode `json:"ntp_mode_not_in"`
	NvmfEnabled                           *bool      `json:"nvmf_enabled"`
	NvmfEnabledNot                        *bool      `json:"nvmf_enabled_not"`
	Password                              *string    `json:"password"`
	PasswordContains                      *string    `json:"password_contains"`
	PasswordEndsWith                      *string    `json:"password_ends_with"`
	PasswordGt                            *string    `json:"password_gt"`
	PasswordGte                           *string    `json:"password_gte"`
	PasswordIn                            *[]string  `json:"password_in"`
	PasswordLt                            *string    `json:"password_lt"`
	PasswordLte                           *string    `json:"password_lte"`
	PasswordNot                           *string    `json:"password_not"`
	PasswordNotContains                   *string    `json:"password_not_contains"`
	PasswordNotEndsWith                   *string    `json:"password_not_ends_with"`
	PasswordNotIn                         *[]string  `json:"password_not_in"`
	PasswordNotStartsWith                 *string    `json:"password_not_starts_with"`
	PasswordStartsWith                    *string    `json:"password_starts_with"`
	PmemEnabled                           *bool      `json:"pmem_enabled"`
	PmemEnabledNot                        *bool      `json:"pmem_enabled_not"`
	ProvisionedCpuCores                   *float64   `json:"provisioned_cpu_cores"`
	ProvisionedCpuCoresForActiveVm        *float64   `json:"provisioned_cpu_cores_for_active_vm"`
	ProvisionedCpuCoresForActiveVmGt      *float64   `json:"provisioned_cpu_cores_for_active_vm_gt"`
	ProvisionedCpuCoresForActiveVmGte     *float64   `json:"provisioned_cpu_cores_for_active_vm_gte"`
	ProvisionedCpuCoresForActiveVmIn      *[]float64 `json:"provisioned_cpu_cores_for_active_vm_in"`
	ProvisionedCpuCoresForActiveVmLt      *float64   `json:"provisioned_cpu_cores_for_active_vm_lt"`
	ProvisionedCpuCoresForActiveVmLte     *float64   `json:"provisioned_cpu_cores_for_active_vm_lte"`
	ProvisionedCpuCoresForActiveVmNot     *float64   `json:"provisioned_cpu_cores_for_active_vm_not"`
	ProvisionedCpuCoresForActiveVmNotIn   *[]float64 `json:"provisioned_cpu_cores_for_active_vm_not_in"`
	ProvisionedCpuCoresGt                 *float64   `json:"provisioned_cpu_cores_gt"`
	ProvisionedCpuCoresGte                *float64   `json:"provisioned_cpu_cores_gte"`
	ProvisionedCpuCoresIn                 *[]float64 `json:"provisioned_cpu_cores_in"`
	ProvisionedCpuCoresLt                 *float64   `json:"provisioned_cpu_cores_lt"`
	ProvisionedCpuCoresLte                *float64   `json:"provisioned_cpu_cores_lte"`
	ProvisionedCpuCoresNot                *float64   `json:"provisioned_cpu_cores_not"`
	ProvisionedCpuCoresNotIn              *[]float64 `json:"provisioned_cpu_cores_not_in"`
	ProvisionedForActiveVmRatio           *float64   `json:"provisioned_for_active_vm_ratio"`
	ProvisionedForActiveVmRatioGt         *float64   `json:"provisioned_for_active_vm_ratio_gt"`
	ProvisionedForActiveVmRatioGte        *float64   `json:"provisioned_for_active_vm_ratio_gte"`
	ProvisionedForActiveVmRatioIn         *[]float64 `json:"provisioned_for_active_vm_ratio_in"`
	ProvisionedForActiveVmRatioLt         *float64   `json:"provisioned_for_active_vm_ratio_lt"`
	ProvisionedForActiveVmRatioLte        *float64   `json:"provisioned_for_active_vm_ratio_lte"`
	ProvisionedForActiveVmRatioNot        *float64   `json:"provisioned_for_active_vm_ratio_not"`
	ProvisionedForActiveVmRatioNotIn      *[]float64 `json:"provisioned_for_active_vm_ratio_not_in"`
	ProvisionedMemoryBytes                *float64   `json:"provisioned_memory_bytes"`
	ProvisionedMemoryBytesGt              *float64   `json:"provisioned_memory_bytes_gt"`
	ProvisionedMemoryBytesGte             *float64   `json:"provisioned_memory_bytes_gte"`
	ProvisionedMemoryBytesIn              *[]float64 `json:"provisioned_memory_bytes_in"`
	ProvisionedMemoryBytesLt              *float64   `json:"provisioned_memory_bytes_lt"`
	ProvisionedMemoryBytesLte             *float64   `json:"provisioned_memory_bytes_lte"`
	ProvisionedMemoryBytesNot             *float64   `json:"provisioned_memory_bytes_not"`
	ProvisionedMemoryBytesNotIn           *[]float64 `json:"provisioned_memory_bytes_not_in"`
	ProvisionedRatio                      *float64   `json:"provisioned_ratio"`
	ProvisionedRatioGt                    *float64   `json:"provisioned_ratio_gt"`
	ProvisionedRatioGte                   *float64   `json:"provisioned_ratio_gte"`
	ProvisionedRatioIn                    *[]float64 `json:"provisioned_ratio_in"`
	ProvisionedRatioLt                    *float64   `json:"provisioned_ratio_lt"`
	ProvisionedRatioLte                   *float64   `json:"provisioned_ratio_lte"`
	ProvisionedRatioNot                   *float64   `json:"provisioned_ratio_not"`
	ProvisionedRatioNotIn                 *[]float64 `json:"provisioned_ratio_not_in"`
	RdmaEnabled                           *bool      `json:"rdma_enabled"`
	RdmaEnabledNot                        *bool      `json:"rdma_enabled_not"`
	RecoverDataSize                       *float64   `json:"recover_data_size"`
	RecoverDataSizeGt                     *float64   `json:"recover_data_size_gt"`
	RecoverDataSizeGte                    *float64   `json:"recover_data_size_gte"`
	RecoverDataSizeIn                     *[]float64 `json:"recover_data_size_in"`
	RecoverDataSizeLt                     *float64   `json:"recover_data_size_lt"`
	RecoverDataSizeLte                    *float64   `json:"recover_data_size_lte"`
	RecoverDataSizeNot                    *float64   `json:"recover_data_size_not"`
	RecoverDataSizeNotIn                  *[]float64 `json:"recover_data_size_not_in"`
	RecoverSpeed                          *float64   `json:"recover_speed"`
	RecoverSpeedGt                        *float64   `json:"recover_speed_gt"`
	RecoverSpeedGte                       *float64   `json:"recover_speed_gte"`
	RecoverSpeedIn                        *[]float64 `json:"recover_speed_in"`
	RecoverSpeedLt                        *float64   `json:"recover_speed_lt"`
	RecoverSpeedLte                       *float64   `json:"recover_speed_lte"`
	RecoverSpeedNot                       *float64   `json:"recover_speed_not"`
	RecoverSpeedNotIn                     *[]float64 `json:"recover_speed_not_in"`
	ReservedCpuCoresForSystemService      *float64   `json:"reserved_cpu_cores_for_system_service"`
	ReservedCpuCoresForSystemServiceGt    *float64   `json:"reserved_cpu_cores_for_system_service_gt"`
	ReservedCpuCoresForSystemServiceGte   *float64   `json:"reserved_cpu_cores_for_system_service_gte"`
	ReservedCpuCoresForSystemServiceIn    *[]float64 `json:"reserved_cpu_cores_for_system_service_in"`
	ReservedCpuCoresForSystemServiceLt    *float64   `json:"reserved_cpu_cores_for_system_service_lt"`
	ReservedCpuCoresForSystemServiceLte   *float64   `json:"reserved_cpu_cores_for_system_service_lte"`
	ReservedCpuCoresForSystemServiceNot   *float64   `json:"reserved_cpu_cores_for_system_service_not"`
	ReservedCpuCoresForSystemServiceNotIn *[]float64 `json:"reserved_cpu_cores_for_system_service_not_in"`
	RunningVmNum                          *float64   `json:"running_vm_num"`
	RunningVmNumGt                        *float64   `json:"running_vm_num_gt"`
	RunningVmNumGte                       *float64   `json:"running_vm_num_gte"`
	RunningVmNumIn                        *[]float64 `json:"running_vm_num_in"`
	RunningVmNumLt                        *float64   `json:"running_vm_num_lt"`
	RunningVmNumLte                       *float64   `json:"running_vm_num_lte"`
	RunningVmNumNot                       *float64   `json:"running_vm_num_not"`
	RunningVmNumNotIn                     *[]float64 `json:"running_vm_num_not_in"`
	Settings                              *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterSettingsWhereInput)
		ClusterSettingsWhereInput `yaml:",inline"`
	} `json:"settings"`
	SoftwareEdition *struct {
		// Embedded struct due to allOf(#/components/schemas/SoftwareEdition)
		SoftwareEdition `yaml:",inline"`
	} `json:"software_edition"`
	SoftwareEditionIn  *[]SoftwareEdition `json:"software_edition_in"`
	SoftwareEditionNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SoftwareEdition)
		SoftwareEdition `yaml:",inline"`
	} `json:"software_edition_not"`
	SoftwareEditionNotIn    *[]SoftwareEdition `json:"software_edition_not_in"`
	StoppedVmNum            *float64           `json:"stopped_vm_num"`
	StoppedVmNumGt          *float64           `json:"stopped_vm_num_gt"`
	StoppedVmNumGte         *float64           `json:"stopped_vm_num_gte"`
	StoppedVmNumIn          *[]float64         `json:"stopped_vm_num_in"`
	StoppedVmNumLt          *float64           `json:"stopped_vm_num_lt"`
	StoppedVmNumLte         *float64           `json:"stopped_vm_num_lte"`
	StoppedVmNumNot         *float64           `json:"stopped_vm_num_not"`
	StoppedVmNumNotIn       *[]float64         `json:"stopped_vm_num_not_in"`
	Stretch                 *bool              `json:"stretch"`
	StretchNot              *bool              `json:"stretch_not"`
	SuspendedVmNum          *float64           `json:"suspended_vm_num"`
	SuspendedVmNumGt        *float64           `json:"suspended_vm_num_gt"`
	SuspendedVmNumGte       *float64           `json:"suspended_vm_num_gte"`
	SuspendedVmNumIn        *[]float64         `json:"suspended_vm_num_in"`
	SuspendedVmNumLt        *float64           `json:"suspended_vm_num_lt"`
	SuspendedVmNumLte       *float64           `json:"suspended_vm_num_lte"`
	SuspendedVmNumNot       *float64           `json:"suspended_vm_num_not"`
	SuspendedVmNumNotIn     *[]float64         `json:"suspended_vm_num_not_in"`
	TotalCacheCapacity      *float64           `json:"total_cache_capacity"`
	TotalCacheCapacityGt    *float64           `json:"total_cache_capacity_gt"`
	TotalCacheCapacityGte   *float64           `json:"total_cache_capacity_gte"`
	TotalCacheCapacityIn    *[]float64         `json:"total_cache_capacity_in"`
	TotalCacheCapacityLt    *float64           `json:"total_cache_capacity_lt"`
	TotalCacheCapacityLte   *float64           `json:"total_cache_capacity_lte"`
	TotalCacheCapacityNot   *float64           `json:"total_cache_capacity_not"`
	TotalCacheCapacityNotIn *[]float64         `json:"total_cache_capacity_not_in"`
	TotalCpuCores           *float64           `json:"total_cpu_cores"`
	TotalCpuCoresGt         *float64           `json:"total_cpu_cores_gt"`
	TotalCpuCoresGte        *float64           `json:"total_cpu_cores_gte"`
	TotalCpuCoresIn         *[]float64         `json:"total_cpu_cores_in"`
	TotalCpuCoresLt         *float64           `json:"total_cpu_cores_lt"`
	TotalCpuCoresLte        *float64           `json:"total_cpu_cores_lte"`
	TotalCpuCoresNot        *float64           `json:"total_cpu_cores_not"`
	TotalCpuCoresNotIn      *[]float64         `json:"total_cpu_cores_not_in"`
	TotalCpuHz              *float64           `json:"total_cpu_hz"`
	TotalCpuHzGt            *float64           `json:"total_cpu_hz_gt"`
	TotalCpuHzGte           *float64           `json:"total_cpu_hz_gte"`
	TotalCpuHzIn            *[]float64         `json:"total_cpu_hz_in"`
	TotalCpuHzLt            *float64           `json:"total_cpu_hz_lt"`
	TotalCpuHzLte           *float64           `json:"total_cpu_hz_lte"`
	TotalCpuHzNot           *float64           `json:"total_cpu_hz_not"`
	TotalCpuHzNotIn         *[]float64         `json:"total_cpu_hz_not_in"`
	TotalDataCapacity       *float64           `json:"total_data_capacity"`
	TotalDataCapacityGt     *float64           `json:"total_data_capacity_gt"`
	TotalDataCapacityGte    *float64           `json:"total_data_capacity_gte"`
	TotalDataCapacityIn     *[]float64         `json:"total_data_capacity_in"`
	TotalDataCapacityLt     *float64           `json:"total_data_capacity_lt"`
	TotalDataCapacityLte    *float64           `json:"total_data_capacity_lte"`
	TotalDataCapacityNot    *float64           `json:"total_data_capacity_not"`
	TotalDataCapacityNotIn  *[]float64         `json:"total_data_capacity_not_in"`
	TotalMemoryBytes        *float64           `json:"total_memory_bytes"`
	TotalMemoryBytesGt      *float64           `json:"total_memory_bytes_gt"`
	TotalMemoryBytesGte     *float64           `json:"total_memory_bytes_gte"`
	TotalMemoryBytesIn      *[]float64         `json:"total_memory_bytes_in"`
	TotalMemoryBytesLt      *float64           `json:"total_memory_bytes_lt"`
	TotalMemoryBytesLte     *float64           `json:"total_memory_bytes_lte"`
	TotalMemoryBytesNot     *float64           `json:"total_memory_bytes_not"`
	TotalMemoryBytesNotIn   *[]float64         `json:"total_memory_bytes_not_in"`
	Type                    *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterType)
		ClusterType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]ClusterType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterType)
		ClusterType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn             *[]ClusterType `json:"type_not_in"`
	UsedCpuHz             *float64       `json:"used_cpu_hz"`
	UsedCpuHzGt           *float64       `json:"used_cpu_hz_gt"`
	UsedCpuHzGte          *float64       `json:"used_cpu_hz_gte"`
	UsedCpuHzIn           *[]float64     `json:"used_cpu_hz_in"`
	UsedCpuHzLt           *float64       `json:"used_cpu_hz_lt"`
	UsedCpuHzLte          *float64       `json:"used_cpu_hz_lte"`
	UsedCpuHzNot          *float64       `json:"used_cpu_hz_not"`
	UsedCpuHzNotIn        *[]float64     `json:"used_cpu_hz_not_in"`
	UsedDataSpace         *float64       `json:"used_data_space"`
	UsedDataSpaceGt       *float64       `json:"used_data_space_gt"`
	UsedDataSpaceGte      *float64       `json:"used_data_space_gte"`
	UsedDataSpaceIn       *[]float64     `json:"used_data_space_in"`
	UsedDataSpaceLt       *float64       `json:"used_data_space_lt"`
	UsedDataSpaceLte      *float64       `json:"used_data_space_lte"`
	UsedDataSpaceNot      *float64       `json:"used_data_space_not"`
	UsedDataSpaceNotIn    *[]float64     `json:"used_data_space_not_in"`
	UsedMemoryBytes       *float64       `json:"used_memory_bytes"`
	UsedMemoryBytesGt     *float64       `json:"used_memory_bytes_gt"`
	UsedMemoryBytesGte    *float64       `json:"used_memory_bytes_gte"`
	UsedMemoryBytesIn     *[]float64     `json:"used_memory_bytes_in"`
	UsedMemoryBytesLt     *float64       `json:"used_memory_bytes_lt"`
	UsedMemoryBytesLte    *float64       `json:"used_memory_bytes_lte"`
	UsedMemoryBytesNot    *float64       `json:"used_memory_bytes_not"`
	UsedMemoryBytesNotIn  *[]float64     `json:"used_memory_bytes_not_in"`
	Username              *string        `json:"username"`
	UsernameContains      *string        `json:"username_contains"`
	UsernameEndsWith      *string        `json:"username_ends_with"`
	UsernameGt            *string        `json:"username_gt"`
	UsernameGte           *string        `json:"username_gte"`
	UsernameIn            *[]string      `json:"username_in"`
	UsernameLt            *string        `json:"username_lt"`
	UsernameLte           *string        `json:"username_lte"`
	UsernameNot           *string        `json:"username_not"`
	UsernameNotContains   *string        `json:"username_not_contains"`
	UsernameNotEndsWith   *string        `json:"username_not_ends_with"`
	UsernameNotIn         *[]string      `json:"username_not_in"`
	UsernameNotStartsWith *string        `json:"username_not_starts_with"`
	UsernameStartsWith    *string        `json:"username_starts_with"`
	ValidDataSpace        *float64       `json:"valid_data_space"`
	ValidDataSpaceGt      *float64       `json:"valid_data_space_gt"`
	ValidDataSpaceGte     *float64       `json:"valid_data_space_gte"`
	ValidDataSpaceIn      *[]float64     `json:"valid_data_space_in"`
	ValidDataSpaceLt      *float64       `json:"valid_data_space_lt"`
	ValidDataSpaceLte     *float64       `json:"valid_data_space_lte"`
	ValidDataSpaceNot     *float64       `json:"valid_data_space_not"`
	ValidDataSpaceNotIn   *[]float64     `json:"valid_data_space_not_in"`
	VcenterAccount        *struct {
		// Embedded struct due to allOf(#/components/schemas/VcenterAccountWhereInput)
		VcenterAccountWhereInput `yaml:",inline"`
	} `json:"vcenterAccount"`
	VdsesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"vdses_every"`
	VdsesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"vdses_none"`
	VdsesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"vdses_some"`
	Version              *string   `json:"version"`
	VersionContains      *string   `json:"version_contains"`
	VersionEndsWith      *string   `json:"version_ends_with"`
	VersionGt            *string   `json:"version_gt"`
	VersionGte           *string   `json:"version_gte"`
	VersionIn            *[]string `json:"version_in"`
	VersionLt            *string   `json:"version_lt"`
	VersionLte           *string   `json:"version_lte"`
	VersionNot           *string   `json:"version_not"`
	VersionNotContains   *string   `json:"version_not_contains"`
	VersionNotEndsWith   *string   `json:"version_not_ends_with"`
	VersionNotIn         *[]string `json:"version_not_in"`
	VersionNotStartsWith *string   `json:"version_not_starts_with"`
	VersionSemanticGt    *string   `json:"version_semantic_gt"`
	VersionSemanticGte   *string   `json:"version_semantic_gte"`
	VersionSemanticLt    *string   `json:"version_semantic_lt"`
	VersionSemanticLte   *string   `json:"version_semantic_lte"`
	VersionStartsWith    *string   `json:"version_starts_with"`
	VhostEnabled         *bool     `json:"vhost_enabled"`
	VhostEnabledNot      *bool     `json:"vhost_enabled_not"`
	VmFoldersEvery       *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFolderWhereInput)
		VmFolderWhereInput `yaml:",inline"`
	} `json:"vm_folders_every"`
	VmFoldersNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFolderWhereInput)
		VmFolderWhereInput `yaml:",inline"`
	} `json:"vm_folders_none"`
	VmFoldersSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFolderWhereInput)
		VmFolderWhereInput `yaml:",inline"`
	} `json:"vm_folders_some"`
	VmNum            *float64   `json:"vm_num"`
	VmNumGt          *float64   `json:"vm_num_gt"`
	VmNumGte         *float64   `json:"vm_num_gte"`
	VmNumIn          *[]float64 `json:"vm_num_in"`
	VmNumLt          *float64   `json:"vm_num_lt"`
	VmNumLte         *float64   `json:"vm_num_lte"`
	VmNumNot         *float64   `json:"vm_num_not"`
	VmNumNotIn       *[]float64 `json:"vm_num_not_in"`
	VmTemplatesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_every"`
	VmTemplatesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_none"`
	VmTemplatesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_some"`
	VmsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_every"`
	VmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_none"`
	VmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_some"`
	Witness *struct {
		// Embedded struct due to allOf(#/components/schemas/WitnessWhereInput)
		WitnessWhereInput `yaml:",inline"`
	} `json:"witness"`
	ZonesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"zones_every"`
	ZonesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"zones_none"`
	ZonesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"zones_some"`
}

// ClusterWhereUniqueInput defines model for ClusterWhereUniqueInput.
type ClusterWhereUniqueInput struct {
	Id      *string `json:"id"`
	LocalId *string `json:"local_id"`
}

// ConnectState defines model for ConnectState.
type ConnectState string

// ConsistencyGroup defines model for ConsistencyGroup.
type ConsistencyGroup struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	ConsistencyGroupSnapshots *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_group_snapshots"`
	Description       string `json:"description"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id        string `json:"id"`
	IscsiLuns *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_luns"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt string `json:"local_created_at"`
	LocalId        string `json:"local_id"`
	Name           string `json:"name"`
	Namespaces     *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"namespaces"`
	UniqueSize float64 `json:"unique_size"`
}

// ConsistencyGroupConnection defines model for ConsistencyGroupConnection.
type ConsistencyGroupConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ConsistencyGroupCreationParams defines model for ConsistencyGroupCreationParams.
type ConsistencyGroupCreationParams struct {
	ClusterId     string   `json:"cluster_id"`
	Description   *string  `json:"description,omitempty"`
	IscsiLunsIds  []string `json:"iscsi_luns_ids"`
	Name          string   `json:"name"`
	NamespacesIds []string `json:"namespaces_ids"`
}

// ConsistencyGroupDeletionParams defines model for ConsistencyGroupDeletionParams.
type ConsistencyGroupDeletionParams struct {
	Data struct {
		RemainVolumeSnapshot *bool `json:"remain_volume_snapshot,omitempty"`
	} `json:"data"`
	Where ConsistencyGroupWhereInput `json:"where"`
}

// ConsistencyGroupOrderByInput defines model for ConsistencyGroupOrderByInput.
type ConsistencyGroupOrderByInput string

// ConsistencyGroupSnapshot defines model for ConsistencyGroupSnapshot.
type ConsistencyGroupSnapshot struct {
	IscsiLunSnapshots *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"Iscsi_lun_snapshots"`
	ConsistencyGroup *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_group"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id     string `json:"id"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt         string `json:"local_created_at"`
	LocalId                string `json:"local_id"`
	Name                   string `json:"name"`
	NvmfNamespaceSnapshots *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_namespace_snapshots"`
	UniqueSize float64 `json:"unique_size"`
}

// ConsistencyGroupSnapshotConnection defines model for ConsistencyGroupSnapshotConnection.
type ConsistencyGroupSnapshotConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ConsistencyGroupSnapshotCreationParams defines model for ConsistencyGroupSnapshotCreationParams.
type ConsistencyGroupSnapshotCreationParams struct {
	ConsistencyGroupId string `json:"consistency_group_id"`
	Name               string `json:"name"`
}

// ConsistencyGroupSnapshotDeletionParams defines model for ConsistencyGroupSnapshotDeletionParams.
type ConsistencyGroupSnapshotDeletionParams struct {
	Data struct {
		RemainVolumeSnapshot bool `json:"remain_volume_snapshot"`
	} `json:"data"`
	Where ConsistencyGroupSnapshotWhereInput `json:"where"`
}

// ConsistencyGroupSnapshotOrderByInput defines model for ConsistencyGroupSnapshotOrderByInput.
type ConsistencyGroupSnapshotOrderByInput string

// ConsistencyGroupSnapshotUpdationParams defines model for ConsistencyGroupSnapshotUpdationParams.
type ConsistencyGroupSnapshotUpdationParams struct {
	Where ConsistencyGroupSnapshotWhereInput `json:"where"`
}

// ConsistencyGroupSnapshotWhereInput defines model for ConsistencyGroupSnapshotWhereInput.
type ConsistencyGroupSnapshotWhereInput struct {
	AND                    *[]ConsistencyGroupSnapshotWhereInput `json:"AND"`
	IscsiLunSnapshotsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotWhereInput)
		IscsiLunSnapshotWhereInput `yaml:",inline"`
	} `json:"Iscsi_lun_snapshots_every"`
	IscsiLunSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotWhereInput)
		IscsiLunSnapshotWhereInput `yaml:",inline"`
	} `json:"Iscsi_lun_snapshots_none"`
	IscsiLunSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotWhereInput)
		IscsiLunSnapshotWhereInput `yaml:",inline"`
	} `json:"Iscsi_lun_snapshots_some"`
	NOT              *[]ConsistencyGroupSnapshotWhereInput `json:"NOT"`
	OR               *[]ConsistencyGroupSnapshotWhereInput `json:"OR"`
	ConsistencyGroup *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_group"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	LabelsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt              *string   `json:"local_created_at"`
	LocalCreatedAtGt            *string   `json:"local_created_at_gt"`
	LocalCreatedAtGte           *string   `json:"local_created_at_gte"`
	LocalCreatedAtIn            *[]string `json:"local_created_at_in"`
	LocalCreatedAtLt            *string   `json:"local_created_at_lt"`
	LocalCreatedAtLte           *string   `json:"local_created_at_lte"`
	LocalCreatedAtNot           *string   `json:"local_created_at_not"`
	LocalCreatedAtNotIn         *[]string `json:"local_created_at_not_in"`
	LocalId                     *string   `json:"local_id"`
	LocalIdContains             *string   `json:"local_id_contains"`
	LocalIdEndsWith             *string   `json:"local_id_ends_with"`
	LocalIdGt                   *string   `json:"local_id_gt"`
	LocalIdGte                  *string   `json:"local_id_gte"`
	LocalIdIn                   *[]string `json:"local_id_in"`
	LocalIdLt                   *string   `json:"local_id_lt"`
	LocalIdLte                  *string   `json:"local_id_lte"`
	LocalIdNot                  *string   `json:"local_id_not"`
	LocalIdNotContains          *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith          *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn                *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith        *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith           *string   `json:"local_id_starts_with"`
	Name                        *string   `json:"name"`
	NameContains                *string   `json:"name_contains"`
	NameEndsWith                *string   `json:"name_ends_with"`
	NameGt                      *string   `json:"name_gt"`
	NameGte                     *string   `json:"name_gte"`
	NameIn                      *[]string `json:"name_in"`
	NameLt                      *string   `json:"name_lt"`
	NameLte                     *string   `json:"name_lte"`
	NameNot                     *string   `json:"name_not"`
	NameNotContains             *string   `json:"name_not_contains"`
	NameNotEndsWith             *string   `json:"name_not_ends_with"`
	NameNotIn                   *[]string `json:"name_not_in"`
	NameNotStartsWith           *string   `json:"name_not_starts_with"`
	NameStartsWith              *string   `json:"name_starts_with"`
	NvmfNamespaceSnapshotsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotWhereInput)
		NvmfNamespaceSnapshotWhereInput `yaml:",inline"`
	} `json:"nvmf_namespace_snapshots_every"`
	NvmfNamespaceSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotWhereInput)
		NvmfNamespaceSnapshotWhereInput `yaml:",inline"`
	} `json:"nvmf_namespace_snapshots_none"`
	NvmfNamespaceSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotWhereInput)
		NvmfNamespaceSnapshotWhereInput `yaml:",inline"`
	} `json:"nvmf_namespace_snapshots_some"`
	UniqueSize      *float64   `json:"unique_size"`
	UniqueSizeGt    *float64   `json:"unique_size_gt"`
	UniqueSizeGte   *float64   `json:"unique_size_gte"`
	UniqueSizeIn    *[]float64 `json:"unique_size_in"`
	UniqueSizeLt    *float64   `json:"unique_size_lt"`
	UniqueSizeLte   *float64   `json:"unique_size_lte"`
	UniqueSizeNot   *float64   `json:"unique_size_not"`
	UniqueSizeNotIn *[]float64 `json:"unique_size_not_in"`
}

// ConsistencyGroupUpdationParams defines model for ConsistencyGroupUpdationParams.
type ConsistencyGroupUpdationParams struct {
	Data struct {
		Description          *string   `json:"description,omitempty"`
		IscsiLunsIds         *[]string `json:"iscsi_luns_ids,omitempty"`
		Name                 *string   `json:"name,omitempty"`
		NamespacesIds        *[]string `json:"namespaces_ids,omitempty"`
		RemainVolumeSnapshot *bool     `json:"remain_volume_snapshot,omitempty"`
	} `json:"data"`
	Where ConsistencyGroupWhereInput `json:"where"`
}

// ConsistencyGroupWhereInput defines model for ConsistencyGroupWhereInput.
type ConsistencyGroupWhereInput struct {
	AND     *[]ConsistencyGroupWhereInput `json:"AND"`
	NOT     *[]ConsistencyGroupWhereInput `json:"NOT"`
	OR      *[]ConsistencyGroupWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	ConsistencyGroupSnapshotsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"consistency_group_snapshots_every"`
	ConsistencyGroupSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"consistency_group_snapshots_none"`
	ConsistencyGroupSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"consistency_group_snapshots_some"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	IscsiLunsEvery         *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"iscsi_luns_every"`
	IscsiLunsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"iscsi_luns_none"`
	IscsiLunsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"iscsi_luns_some"`
	LabelsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt       *string   `json:"local_created_at"`
	LocalCreatedAtGt     *string   `json:"local_created_at_gt"`
	LocalCreatedAtGte    *string   `json:"local_created_at_gte"`
	LocalCreatedAtIn     *[]string `json:"local_created_at_in"`
	LocalCreatedAtLt     *string   `json:"local_created_at_lt"`
	LocalCreatedAtLte    *string   `json:"local_created_at_lte"`
	LocalCreatedAtNot    *string   `json:"local_created_at_not"`
	LocalCreatedAtNotIn  *[]string `json:"local_created_at_not_in"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NamespacesEvery      *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_every"`
	NamespacesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_none"`
	NamespacesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_some"`
	UniqueSize      *float64   `json:"unique_size"`
	UniqueSizeGt    *float64   `json:"unique_size_gt"`
	UniqueSizeGte   *float64   `json:"unique_size_gte"`
	UniqueSizeIn    *[]float64 `json:"unique_size_in"`
	UniqueSizeLt    *float64   `json:"unique_size_lt"`
	UniqueSizeLte   *float64   `json:"unique_size_lte"`
	UniqueSizeNot   *float64   `json:"unique_size_not"`
	UniqueSizeNotIn *[]float64 `json:"unique_size_not_in"`
}

// ConsistentType defines model for ConsistentType.
type ConsistentType string

// ConvertVmTemplateToVmParams defines model for ConvertVmTemplateToVmParams.
type ConvertVmTemplateToVmParams struct {
	ConvertedFromTemplateId string `json:"converted_from_template_id"`
	Name                    string `json:"name"`
}

// CpuFanSpeedUnit defines model for CpuFanSpeedUnit.
type CpuFanSpeedUnit string

// CustomizeAlertRuleUpdationParams defines model for CustomizeAlertRuleUpdationParams.
type CustomizeAlertRuleUpdationParams struct {
	Data struct {
		Clusters   ClusterWhereInput      `json:"clusters"`
		Disabled   *bool                  `json:"disabled,omitempty"`
		Thresholds *[]AlertRuleThresholds `json:"thresholds,omitempty"`
	} `json:"data"`
	Where GlobalAlertRuleWhereInput `json:"where"`
}

// Datacenter defines model for Datacenter.
type Datacenter struct {
	ClusterNum *float64 `json:"cluster_num"`
	Clusters   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"clusters"`
	FailureDataSpace *float64 `json:"failure_data_space"`
	HostNum          *float64 `json:"host_num"`
	Id               string   `json:"id"`
	Labels           *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	Name         string `json:"name"`
	Organization struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"organization"`
	TotalCpuHz        *float64 `json:"total_cpu_hz"`
	TotalDataCapacity *float64 `json:"total_data_capacity"`
	TotalMemoryBytes  *float64 `json:"total_memory_bytes"`
	UsedCpuHz         *float64 `json:"used_cpu_hz"`
	UsedDataSpace     *float64 `json:"used_data_space"`
	UsedMemoryBytes   *float64 `json:"used_memory_bytes"`
	VmNum             *float64 `json:"vm_num"`
}

// DatacenterConnection defines model for DatacenterConnection.
type DatacenterConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// DatacenterCreationParams defines model for DatacenterCreationParams.
type DatacenterCreationParams struct {
	Clusters       *ClusterWhereInput `json:"clusters,omitempty"`
	Name           string             `json:"name"`
	OrganizationId string             `json:"organization_id"`
}

// DatacenterDeletionParams defines model for DatacenterDeletionParams.
type DatacenterDeletionParams struct {
	Where DatacenterWhereInput `json:"where"`
}

// DatacenterOrderByInput defines model for DatacenterOrderByInput.
type DatacenterOrderByInput string

// DatacenterUpdationParams defines model for DatacenterUpdationParams.
type DatacenterUpdationParams struct {
	Data struct {
		Clusters *ClusterWhereInput `json:"clusters,omitempty"`
		Name     *string            `json:"name,omitempty"`
	} `json:"data"`
	Where DatacenterWhereInput `json:"where"`
}

// DatacenterWhereInput defines model for DatacenterWhereInput.
type DatacenterWhereInput struct {
	AND             *[]DatacenterWhereInput `json:"AND"`
	NOT             *[]DatacenterWhereInput `json:"NOT"`
	OR              *[]DatacenterWhereInput `json:"OR"`
	ClusterNum      *float64                `json:"cluster_num"`
	ClusterNumGt    *float64                `json:"cluster_num_gt"`
	ClusterNumGte   *float64                `json:"cluster_num_gte"`
	ClusterNumIn    *[]float64              `json:"cluster_num_in"`
	ClusterNumLt    *float64                `json:"cluster_num_lt"`
	ClusterNumLte   *float64                `json:"cluster_num_lte"`
	ClusterNumNot   *float64                `json:"cluster_num_not"`
	ClusterNumNotIn *[]float64              `json:"cluster_num_not_in"`
	ClustersEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_every"`
	ClustersNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_none"`
	ClustersSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_some"`
	FailureDataSpace      *float64   `json:"failure_data_space"`
	FailureDataSpaceGt    *float64   `json:"failure_data_space_gt"`
	FailureDataSpaceGte   *float64   `json:"failure_data_space_gte"`
	FailureDataSpaceIn    *[]float64 `json:"failure_data_space_in"`
	FailureDataSpaceLt    *float64   `json:"failure_data_space_lt"`
	FailureDataSpaceLte   *float64   `json:"failure_data_space_lte"`
	FailureDataSpaceNot   *float64   `json:"failure_data_space_not"`
	FailureDataSpaceNotIn *[]float64 `json:"failure_data_space_not_in"`
	HostNum               *float64   `json:"host_num"`
	HostNumGt             *float64   `json:"host_num_gt"`
	HostNumGte            *float64   `json:"host_num_gte"`
	HostNumIn             *[]float64 `json:"host_num_in"`
	HostNumLt             *float64   `json:"host_num_lt"`
	HostNumLte            *float64   `json:"host_num_lte"`
	HostNumNot            *float64   `json:"host_num_not"`
	HostNumNotIn          *[]float64 `json:"host_num_not_in"`
	Id                    *string    `json:"id"`
	IdContains            *string    `json:"id_contains"`
	IdEndsWith            *string    `json:"id_ends_with"`
	IdGt                  *string    `json:"id_gt"`
	IdGte                 *string    `json:"id_gte"`
	IdIn                  *[]string  `json:"id_in"`
	IdLt                  *string    `json:"id_lt"`
	IdLte                 *string    `json:"id_lte"`
	IdNot                 *string    `json:"id_not"`
	IdNotContains         *string    `json:"id_not_contains"`
	IdNotEndsWith         *string    `json:"id_not_ends_with"`
	IdNotIn               *[]string  `json:"id_not_in"`
	IdNotStartsWith       *string    `json:"id_not_starts_with"`
	IdStartsWith          *string    `json:"id_starts_with"`
	LabelsEvery           *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	Name              *string   `json:"name"`
	NameContains      *string   `json:"name_contains"`
	NameEndsWith      *string   `json:"name_ends_with"`
	NameGt            *string   `json:"name_gt"`
	NameGte           *string   `json:"name_gte"`
	NameIn            *[]string `json:"name_in"`
	NameLt            *string   `json:"name_lt"`
	NameLte           *string   `json:"name_lte"`
	NameNot           *string   `json:"name_not"`
	NameNotContains   *string   `json:"name_not_contains"`
	NameNotEndsWith   *string   `json:"name_not_ends_with"`
	NameNotIn         *[]string `json:"name_not_in"`
	NameNotStartsWith *string   `json:"name_not_starts_with"`
	NameStartsWith    *string   `json:"name_starts_with"`
	Organization      *struct {
		// Embedded struct due to allOf(#/components/schemas/OrganizationWhereInput)
		OrganizationWhereInput `yaml:",inline"`
	} `json:"organization"`
	TotalCpuHz             *float64   `json:"total_cpu_hz"`
	TotalCpuHzGt           *float64   `json:"total_cpu_hz_gt"`
	TotalCpuHzGte          *float64   `json:"total_cpu_hz_gte"`
	TotalCpuHzIn           *[]float64 `json:"total_cpu_hz_in"`
	TotalCpuHzLt           *float64   `json:"total_cpu_hz_lt"`
	TotalCpuHzLte          *float64   `json:"total_cpu_hz_lte"`
	TotalCpuHzNot          *float64   `json:"total_cpu_hz_not"`
	TotalCpuHzNotIn        *[]float64 `json:"total_cpu_hz_not_in"`
	TotalDataCapacity      *float64   `json:"total_data_capacity"`
	TotalDataCapacityGt    *float64   `json:"total_data_capacity_gt"`
	TotalDataCapacityGte   *float64   `json:"total_data_capacity_gte"`
	TotalDataCapacityIn    *[]float64 `json:"total_data_capacity_in"`
	TotalDataCapacityLt    *float64   `json:"total_data_capacity_lt"`
	TotalDataCapacityLte   *float64   `json:"total_data_capacity_lte"`
	TotalDataCapacityNot   *float64   `json:"total_data_capacity_not"`
	TotalDataCapacityNotIn *[]float64 `json:"total_data_capacity_not_in"`
	TotalMemoryBytes       *float64   `json:"total_memory_bytes"`
	TotalMemoryBytesGt     *float64   `json:"total_memory_bytes_gt"`
	TotalMemoryBytesGte    *float64   `json:"total_memory_bytes_gte"`
	TotalMemoryBytesIn     *[]float64 `json:"total_memory_bytes_in"`
	TotalMemoryBytesLt     *float64   `json:"total_memory_bytes_lt"`
	TotalMemoryBytesLte    *float64   `json:"total_memory_bytes_lte"`
	TotalMemoryBytesNot    *float64   `json:"total_memory_bytes_not"`
	TotalMemoryBytesNotIn  *[]float64 `json:"total_memory_bytes_not_in"`
	UsedCpuHz              *float64   `json:"used_cpu_hz"`
	UsedCpuHzGt            *float64   `json:"used_cpu_hz_gt"`
	UsedCpuHzGte           *float64   `json:"used_cpu_hz_gte"`
	UsedCpuHzIn            *[]float64 `json:"used_cpu_hz_in"`
	UsedCpuHzLt            *float64   `json:"used_cpu_hz_lt"`
	UsedCpuHzLte           *float64   `json:"used_cpu_hz_lte"`
	UsedCpuHzNot           *float64   `json:"used_cpu_hz_not"`
	UsedCpuHzNotIn         *[]float64 `json:"used_cpu_hz_not_in"`
	UsedDataSpace          *float64   `json:"used_data_space"`
	UsedDataSpaceGt        *float64   `json:"used_data_space_gt"`
	UsedDataSpaceGte       *float64   `json:"used_data_space_gte"`
	UsedDataSpaceIn        *[]float64 `json:"used_data_space_in"`
	UsedDataSpaceLt        *float64   `json:"used_data_space_lt"`
	UsedDataSpaceLte       *float64   `json:"used_data_space_lte"`
	UsedDataSpaceNot       *float64   `json:"used_data_space_not"`
	UsedDataSpaceNotIn     *[]float64 `json:"used_data_space_not_in"`
	UsedMemoryBytes        *float64   `json:"used_memory_bytes"`
	UsedMemoryBytesGt      *float64   `json:"used_memory_bytes_gt"`
	UsedMemoryBytesGte     *float64   `json:"used_memory_bytes_gte"`
	UsedMemoryBytesIn      *[]float64 `json:"used_memory_bytes_in"`
	UsedMemoryBytesLt      *float64   `json:"used_memory_bytes_lt"`
	UsedMemoryBytesLte     *float64   `json:"used_memory_bytes_lte"`
	UsedMemoryBytesNot     *float64   `json:"used_memory_bytes_not"`
	UsedMemoryBytesNotIn   *[]float64 `json:"used_memory_bytes_not_in"`
	VmNum                  *float64   `json:"vm_num"`
	VmNumGt                *float64   `json:"vm_num_gt"`
	VmNumGte               *float64   `json:"vm_num_gte"`
	VmNumIn                *[]float64 `json:"vm_num_in"`
	VmNumLt                *float64   `json:"vm_num_lt"`
	VmNumLte               *float64   `json:"vm_num_lte"`
	VmNumNot               *float64   `json:"vm_num_not"`
	VmNumNotIn             *[]float64 `json:"vm_num_not_in"`
}

// DeleteBrickTopo defines model for DeleteBrickTopo.
type DeleteBrickTopo struct {
	Id string `json:"id"`
}

// DeleteCluster defines model for DeleteCluster.
type DeleteCluster struct {
	Id string `json:"id"`
}

// DeleteClusterRecycleBin defines model for DeleteClusterRecycleBin.
type DeleteClusterRecycleBin struct {
	Id string `json:"id"`
}

// DeleteConsistencyGroup defines model for DeleteConsistencyGroup.
type DeleteConsistencyGroup struct {
	Id string `json:"id"`
}

// DeleteConsistencyGroupSnapshot defines model for DeleteConsistencyGroupSnapshot.
type DeleteConsistencyGroupSnapshot struct {
	Id string `json:"id"`
}

// DeleteDatacenter defines model for DeleteDatacenter.
type DeleteDatacenter struct {
	Id string `json:"id"`
}

// DeleteElfImage defines model for DeleteElfImage.
type DeleteElfImage struct {
	Id string `json:"id"`
}

// DeleteEntityFilter defines model for DeleteEntityFilter.
type DeleteEntityFilter struct {
	Id string `json:"id"`
}

// DeleteGraph defines model for DeleteGraph.
type DeleteGraph struct {
	Id string `json:"id"`
}

// DeleteIscsiLun defines model for DeleteIscsiLun.
type DeleteIscsiLun struct {
	Id string `json:"id"`
}

// DeleteIscsiLunSnapshot defines model for DeleteIscsiLunSnapshot.
type DeleteIscsiLunSnapshot struct {
	Id string `json:"id"`
}

// DeleteIscsiTarget defines model for DeleteIscsiTarget.
type DeleteIscsiTarget struct {
	Id string `json:"id"`
}

// DeleteLabel defines model for DeleteLabel.
type DeleteLabel struct {
	Id string `json:"id"`
}

// DeleteNamespaceGroup defines model for DeleteNamespaceGroup.
type DeleteNamespaceGroup struct {
	Id string `json:"id"`
}

// DeleteNfsExport defines model for DeleteNfsExport.
type DeleteNfsExport struct {
	Id string `json:"id"`
}

// DeleteNvmfNamespace defines model for DeleteNvmfNamespace.
type DeleteNvmfNamespace struct {
	Id string `json:"id"`
}

// DeleteNvmfNamespaceSnapshot defines model for DeleteNvmfNamespaceSnapshot.
type DeleteNvmfNamespaceSnapshot struct {
	Id string `json:"id"`
}

// DeleteNvmfSubsystem defines model for DeleteNvmfSubsystem.
type DeleteNvmfSubsystem struct {
	Id string `json:"id"`
}

// DeleteOrganization defines model for DeleteOrganization.
type DeleteOrganization struct {
	Id string `json:"id"`
}

// DeleteRackTopo defines model for DeleteRackTopo.
type DeleteRackTopo struct {
	Id string `json:"id"`
}

// DeleteReportTemplate defines model for DeleteReportTemplate.
type DeleteReportTemplate struct {
	Id string `json:"id"`
}

// DeleteRole defines model for DeleteRole.
type DeleteRole struct {
	Id string `json:"id"`
}

// DeleteSnapshotGroup defines model for DeleteSnapshotGroup.
type DeleteSnapshotGroup struct {
	Id string `json:"id"`
}

// DeleteSnapshotPlan defines model for DeleteSnapshotPlan.
type DeleteSnapshotPlan struct {
	Id string `json:"id"`
}

// DeleteSnmpTransport defines model for DeleteSnmpTransport.
type DeleteSnmpTransport struct {
	Id string `json:"id"`
}

// DeleteSnmpTrapReceiver defines model for DeleteSnmpTrapReceiver.
type DeleteSnmpTrapReceiver struct {
	Id string `json:"id"`
}

// DeleteUser defines model for DeleteUser.
type DeleteUser struct {
	Id string `json:"id"`
}

// DeleteVds defines model for DeleteVds.
type DeleteVds struct {
	Id string `json:"id"`
}

// DeleteView defines model for DeleteView.
type DeleteView struct {
	Id string `json:"id"`
}

// DeleteVlan defines model for DeleteVlan.
type DeleteVlan struct {
	Id string `json:"id"`
}

// DeleteVm defines model for DeleteVm.
type DeleteVm struct {
	Id string `json:"id"`
}

// DeleteVmFolder defines model for DeleteVmFolder.
type DeleteVmFolder struct {
	Id string `json:"id"`
}

// DeleteVmPlacementGroup defines model for DeleteVmPlacementGroup.
type DeleteVmPlacementGroup struct {
	Id string `json:"id"`
}

// DeleteVmSnapshot defines model for DeleteVmSnapshot.
type DeleteVmSnapshot struct {
	Id string `json:"id"`
}

// DeleteVmTemplate defines model for DeleteVmTemplate.
type DeleteVmTemplate struct {
	Id string `json:"id"`
}

// DeleteVmVolume defines model for DeleteVmVolume.
type DeleteVmVolume struct {
	Id string `json:"id"`
}

// Deploy defines model for Deploy.
type Deploy struct {
	Id      string `json:"id"`
	License *struct {
		Id string `json:"id"`
	} `json:"license"`
	Version string `json:"version"`
}

// DeployConnection defines model for DeployConnection.
type DeployConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// DeployOrderByInput defines model for DeployOrderByInput.
type DeployOrderByInput string

// DeployWhereInput defines model for DeployWhereInput.
type DeployWhereInput struct {
	AND             *[]DeployWhereInput `json:"AND"`
	NOT             *[]DeployWhereInput `json:"NOT"`
	OR              *[]DeployWhereInput `json:"OR"`
	Id              *string             `json:"id"`
	IdContains      *string             `json:"id_contains"`
	IdEndsWith      *string             `json:"id_ends_with"`
	IdGt            *string             `json:"id_gt"`
	IdGte           *string             `json:"id_gte"`
	IdIn            *[]string           `json:"id_in"`
	IdLt            *string             `json:"id_lt"`
	IdLte           *string             `json:"id_lte"`
	IdNot           *string             `json:"id_not"`
	IdNotContains   *string             `json:"id_not_contains"`
	IdNotEndsWith   *string             `json:"id_not_ends_with"`
	IdNotIn         *[]string           `json:"id_not_in"`
	IdNotStartsWith *string             `json:"id_not_starts_with"`
	IdStartsWith    *string             `json:"id_starts_with"`
	License         *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseWhereInput)
		LicenseWhereInput `yaml:",inline"`
	} `json:"license"`
	Version              *string   `json:"version"`
	VersionContains      *string   `json:"version_contains"`
	VersionEndsWith      *string   `json:"version_ends_with"`
	VersionGt            *string   `json:"version_gt"`
	VersionGte           *string   `json:"version_gte"`
	VersionIn            *[]string `json:"version_in"`
	VersionLt            *string   `json:"version_lt"`
	VersionLte           *string   `json:"version_lte"`
	VersionNot           *string   `json:"version_not"`
	VersionNotContains   *string   `json:"version_not_contains"`
	VersionNotEndsWith   *string   `json:"version_not_ends_with"`
	VersionNotIn         *[]string `json:"version_not_in"`
	VersionNotStartsWith *string   `json:"version_not_starts_with"`
	VersionStartsWith    *string   `json:"version_starts_with"`
}

// Direction defines model for Direction.
type Direction string

// DiscoveredHost defines model for DiscoveredHost.
type DiscoveredHost struct {
	AllFlash bool  `json:"all_flash"`
	Deployed *bool `json:"deployed"`
	Dimms    *[]struct {
		DimmId       string `json:"dimm_id"`
		FwVersion    string `json:"fw_version"`
		HealthStatus string `json:"health_status"`
		SocketId     string `json:"socket_id"`
	} `json:"dimms"`
	Disks []struct {
		DimmIds  *[]string `json:"dimm_ids"`
		Drive    string    `json:"drive"`
		Function *struct {
			// Embedded struct due to allOf(#/components/schemas/DiskFunction)
			DiskFunction `yaml:",inline"`
		} `json:"function"`
		Model                string   `json:"model"`
		NumaNode             *float64 `json:"numa_node"`
		PersistentMemoryType *string  `json:"persistent_memory_type"`
		Serial               string   `json:"serial"`
		Size                 float64  `json:"size"`
		Type                 DiskType `json:"type"`
	} `json:"disks"`
	HostIp   string `json:"host_ip"`
	HostUuid string `json:"host_uuid"`
	Hostname string `json:"hostname"`
	Ifaces   []struct {
		Ipv4        *string  `json:"ipv4"`
		Ipv6        *string  `json:"ipv6"`
		MacAddress  string   `json:"mac_address"`
		Mtu         float64  `json:"mtu"`
		Name        string   `json:"name"`
		PciSlotName *string  `json:"pci_slot_name"`
		RdmaEnabled *bool    `json:"rdma_enabled"`
		Speed       *float64 `json:"speed"`
		Up          bool     `json:"up"`
	} `json:"ifaces"`
	IpmiIp      *string `json:"ipmi_ip"`
	IsOsInRaid1 *bool   `json:"is_os_in_raid1"`
	Serial      string  `json:"serial"`
	Version     string  `json:"version"`
}

// Disk defines model for Disk.
type Disk struct {
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Firmware string `json:"firmware"`
	Function *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskFunction)
		DiskFunction `yaml:",inline"`
	} `json:"function"`
	HealthStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskHealthStatus)
		DiskHealthStatus `yaml:",inline"`
	} `json:"health_status"`
	Healthy bool `json:"healthy"`
	Host    struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Id     string `json:"id"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId    string   `json:"local_id"`
	Model      string   `json:"model"`
	Mounted    bool     `json:"mounted"`
	Name       string   `json:"name"`
	NumaNode   *float64 `json:"numa_node"`
	Offline    bool     `json:"offline"`
	Partitions []struct {
		Name     *string        `json:"name"`
		Path     *string        `json:"path"`
		Size     float64        `json:"size"`
		Usage    PartitionUsage `json:"usage"`
		UsedSize float64        `json:"used_size"`
	} `json:"partitions"`
	Path                 string   `json:"path"`
	PersistentMemoryType *string  `json:"persistent_memory_type"`
	PhysicalSlotOnBrick  *float64 `json:"physical_slot_on_brick"`
	PmemDimms            *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"pmem_dimms"`
	RecommendedUsage *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskUsage)
		DiskUsage `yaml:",inline"`
	} `json:"recommended_usage"`
	RemainingLifePercent *float64  `json:"remaining_life_percent"`
	Serial               string    `json:"serial"`
	Size                 float64   `json:"size"`
	Type                 DiskType  `json:"type"`
	Usage                DiskUsage `json:"usage"`
	UsageStatus          *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskUsageStatus)
		DiskUsageStatus `yaml:",inline"`
	} `json:"usage_status"`
}

// DiskConnection defines model for DiskConnection.
type DiskConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// DiskFunction defines model for DiskFunction.
type DiskFunction string

// DiskHealthStatus defines model for DiskHealthStatus.
type DiskHealthStatus string

// DiskMountParams defines model for DiskMountParams.
type DiskMountParams struct {
	Data struct {
		Function DiskFunction `json:"function"`
	} `json:"data"`
	Where DiskWhereInput `json:"where"`
}

// DiskOrderByInput defines model for DiskOrderByInput.
type DiskOrderByInput string

// DiskType defines model for DiskType.
type DiskType string

// DiskUnmountParams defines model for DiskUnmountParams.
type DiskUnmountParams struct {
	Where DiskWhereInput `json:"where"`
}

// DiskUsage defines model for DiskUsage.
type DiskUsage string

// DiskUsageStatus defines model for DiskUsageStatus.
type DiskUsageStatus string

// DiskWhereInput defines model for DiskWhereInput.
type DiskWhereInput struct {
	AND               *[]DiskWhereInput `json:"AND"`
	NOT               *[]DiskWhereInput `json:"NOT"`
	OR                *[]DiskWhereInput `json:"OR"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Firmware               *string              `json:"firmware"`
	FirmwareContains       *string              `json:"firmware_contains"`
	FirmwareEndsWith       *string              `json:"firmware_ends_with"`
	FirmwareGt             *string              `json:"firmware_gt"`
	FirmwareGte            *string              `json:"firmware_gte"`
	FirmwareIn             *[]string            `json:"firmware_in"`
	FirmwareLt             *string              `json:"firmware_lt"`
	FirmwareLte            *string              `json:"firmware_lte"`
	FirmwareNot            *string              `json:"firmware_not"`
	FirmwareNotContains    *string              `json:"firmware_not_contains"`
	FirmwareNotEndsWith    *string              `json:"firmware_not_ends_with"`
	FirmwareNotIn          *[]string            `json:"firmware_not_in"`
	FirmwareNotStartsWith  *string              `json:"firmware_not_starts_with"`
	FirmwareStartsWith     *string              `json:"firmware_starts_with"`
	Function               *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskFunction)
		DiskFunction `yaml:",inline"`
	} `json:"function"`
	FunctionIn  *[]DiskFunction `json:"function_in"`
	FunctionNot *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskFunction)
		DiskFunction `yaml:",inline"`
	} `json:"function_not"`
	FunctionNotIn *[]DiskFunction `json:"function_not_in"`
	HealthStatus  *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskHealthStatus)
		DiskHealthStatus `yaml:",inline"`
	} `json:"health_status"`
	HealthStatusIn  *[]DiskHealthStatus `json:"health_status_in"`
	HealthStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskHealthStatus)
		DiskHealthStatus `yaml:",inline"`
	} `json:"health_status_not"`
	HealthStatusNotIn *[]DiskHealthStatus `json:"health_status_not_in"`
	Healthy           *bool               `json:"healthy"`
	HealthyNot        *bool               `json:"healthy_not"`
	Host              *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Id              *string   `json:"id"`
	IdContains      *string   `json:"id_contains"`
	IdEndsWith      *string   `json:"id_ends_with"`
	IdGt            *string   `json:"id_gt"`
	IdGte           *string   `json:"id_gte"`
	IdIn            *[]string `json:"id_in"`
	IdLt            *string   `json:"id_lt"`
	IdLte           *string   `json:"id_lte"`
	IdNot           *string   `json:"id_not"`
	IdNotContains   *string   `json:"id_not_contains"`
	IdNotEndsWith   *string   `json:"id_not_ends_with"`
	IdNotIn         *[]string `json:"id_not_in"`
	IdNotStartsWith *string   `json:"id_not_starts_with"`
	IdStartsWith    *string   `json:"id_starts_with"`
	LabelsEvery     *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId                           *string    `json:"local_id"`
	LocalIdContains                   *string    `json:"local_id_contains"`
	LocalIdEndsWith                   *string    `json:"local_id_ends_with"`
	LocalIdGt                         *string    `json:"local_id_gt"`
	LocalIdGte                        *string    `json:"local_id_gte"`
	LocalIdIn                         *[]string  `json:"local_id_in"`
	LocalIdLt                         *string    `json:"local_id_lt"`
	LocalIdLte                        *string    `json:"local_id_lte"`
	LocalIdNot                        *string    `json:"local_id_not"`
	LocalIdNotContains                *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith                *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn                      *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith              *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith                 *string    `json:"local_id_starts_with"`
	Model                             *string    `json:"model"`
	ModelContains                     *string    `json:"model_contains"`
	ModelEndsWith                     *string    `json:"model_ends_with"`
	ModelGt                           *string    `json:"model_gt"`
	ModelGte                          *string    `json:"model_gte"`
	ModelIn                           *[]string  `json:"model_in"`
	ModelLt                           *string    `json:"model_lt"`
	ModelLte                          *string    `json:"model_lte"`
	ModelNot                          *string    `json:"model_not"`
	ModelNotContains                  *string    `json:"model_not_contains"`
	ModelNotEndsWith                  *string    `json:"model_not_ends_with"`
	ModelNotIn                        *[]string  `json:"model_not_in"`
	ModelNotStartsWith                *string    `json:"model_not_starts_with"`
	ModelStartsWith                   *string    `json:"model_starts_with"`
	Mounted                           *bool      `json:"mounted"`
	MountedNot                        *bool      `json:"mounted_not"`
	Name                              *string    `json:"name"`
	NameContains                      *string    `json:"name_contains"`
	NameEndsWith                      *string    `json:"name_ends_with"`
	NameGt                            *string    `json:"name_gt"`
	NameGte                           *string    `json:"name_gte"`
	NameIn                            *[]string  `json:"name_in"`
	NameLt                            *string    `json:"name_lt"`
	NameLte                           *string    `json:"name_lte"`
	NameNot                           *string    `json:"name_not"`
	NameNotContains                   *string    `json:"name_not_contains"`
	NameNotEndsWith                   *string    `json:"name_not_ends_with"`
	NameNotIn                         *[]string  `json:"name_not_in"`
	NameNotStartsWith                 *string    `json:"name_not_starts_with"`
	NameStartsWith                    *string    `json:"name_starts_with"`
	NumaNode                          *float64   `json:"numa_node"`
	NumaNodeGt                        *float64   `json:"numa_node_gt"`
	NumaNodeGte                       *float64   `json:"numa_node_gte"`
	NumaNodeIn                        *[]float64 `json:"numa_node_in"`
	NumaNodeLt                        *float64   `json:"numa_node_lt"`
	NumaNodeLte                       *float64   `json:"numa_node_lte"`
	NumaNodeNot                       *float64   `json:"numa_node_not"`
	NumaNodeNotIn                     *[]float64 `json:"numa_node_not_in"`
	Offline                           *bool      `json:"offline"`
	OfflineNot                        *bool      `json:"offline_not"`
	Path                              *string    `json:"path"`
	PathContains                      *string    `json:"path_contains"`
	PathEndsWith                      *string    `json:"path_ends_with"`
	PathGt                            *string    `json:"path_gt"`
	PathGte                           *string    `json:"path_gte"`
	PathIn                            *[]string  `json:"path_in"`
	PathLt                            *string    `json:"path_lt"`
	PathLte                           *string    `json:"path_lte"`
	PathNot                           *string    `json:"path_not"`
	PathNotContains                   *string    `json:"path_not_contains"`
	PathNotEndsWith                   *string    `json:"path_not_ends_with"`
	PathNotIn                         *[]string  `json:"path_not_in"`
	PathNotStartsWith                 *string    `json:"path_not_starts_with"`
	PathStartsWith                    *string    `json:"path_starts_with"`
	PersistentMemoryType              *string    `json:"persistent_memory_type"`
	PersistentMemoryTypeContains      *string    `json:"persistent_memory_type_contains"`
	PersistentMemoryTypeEndsWith      *string    `json:"persistent_memory_type_ends_with"`
	PersistentMemoryTypeGt            *string    `json:"persistent_memory_type_gt"`
	PersistentMemoryTypeGte           *string    `json:"persistent_memory_type_gte"`
	PersistentMemoryTypeIn            *[]string  `json:"persistent_memory_type_in"`
	PersistentMemoryTypeLt            *string    `json:"persistent_memory_type_lt"`
	PersistentMemoryTypeLte           *string    `json:"persistent_memory_type_lte"`
	PersistentMemoryTypeNot           *string    `json:"persistent_memory_type_not"`
	PersistentMemoryTypeNotContains   *string    `json:"persistent_memory_type_not_contains"`
	PersistentMemoryTypeNotEndsWith   *string    `json:"persistent_memory_type_not_ends_with"`
	PersistentMemoryTypeNotIn         *[]string  `json:"persistent_memory_type_not_in"`
	PersistentMemoryTypeNotStartsWith *string    `json:"persistent_memory_type_not_starts_with"`
	PersistentMemoryTypeStartsWith    *string    `json:"persistent_memory_type_starts_with"`
	PhysicalSlotOnBrick               *float64   `json:"physical_slot_on_brick"`
	PhysicalSlotOnBrickGt             *float64   `json:"physical_slot_on_brick_gt"`
	PhysicalSlotOnBrickGte            *float64   `json:"physical_slot_on_brick_gte"`
	PhysicalSlotOnBrickIn             *[]float64 `json:"physical_slot_on_brick_in"`
	PhysicalSlotOnBrickLt             *float64   `json:"physical_slot_on_brick_lt"`
	PhysicalSlotOnBrickLte            *float64   `json:"physical_slot_on_brick_lte"`
	PhysicalSlotOnBrickNot            *float64   `json:"physical_slot_on_brick_not"`
	PhysicalSlotOnBrickNotIn          *[]float64 `json:"physical_slot_on_brick_not_in"`
	PmemDimmsEvery                    *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmWhereInput)
		PmemDimmWhereInput `yaml:",inline"`
	} `json:"pmem_dimms_every"`
	PmemDimmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmWhereInput)
		PmemDimmWhereInput `yaml:",inline"`
	} `json:"pmem_dimms_none"`
	PmemDimmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmWhereInput)
		PmemDimmWhereInput `yaml:",inline"`
	} `json:"pmem_dimms_some"`
	RecommendedUsage *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskUsage)
		DiskUsage `yaml:",inline"`
	} `json:"recommended_usage"`
	RecommendedUsageIn  *[]DiskUsage `json:"recommended_usage_in"`
	RecommendedUsageNot *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskUsage)
		DiskUsage `yaml:",inline"`
	} `json:"recommended_usage_not"`
	RecommendedUsageNotIn     *[]DiskUsage `json:"recommended_usage_not_in"`
	RemainingLifePercent      *float64     `json:"remaining_life_percent"`
	RemainingLifePercentGt    *float64     `json:"remaining_life_percent_gt"`
	RemainingLifePercentGte   *float64     `json:"remaining_life_percent_gte"`
	RemainingLifePercentIn    *[]float64   `json:"remaining_life_percent_in"`
	RemainingLifePercentLt    *float64     `json:"remaining_life_percent_lt"`
	RemainingLifePercentLte   *float64     `json:"remaining_life_percent_lte"`
	RemainingLifePercentNot   *float64     `json:"remaining_life_percent_not"`
	RemainingLifePercentNotIn *[]float64   `json:"remaining_life_percent_not_in"`
	Serial                    *string      `json:"serial"`
	SerialContains            *string      `json:"serial_contains"`
	SerialEndsWith            *string      `json:"serial_ends_with"`
	SerialGt                  *string      `json:"serial_gt"`
	SerialGte                 *string      `json:"serial_gte"`
	SerialIn                  *[]string    `json:"serial_in"`
	SerialLt                  *string      `json:"serial_lt"`
	SerialLte                 *string      `json:"serial_lte"`
	SerialNot                 *string      `json:"serial_not"`
	SerialNotContains         *string      `json:"serial_not_contains"`
	SerialNotEndsWith         *string      `json:"serial_not_ends_with"`
	SerialNotIn               *[]string    `json:"serial_not_in"`
	SerialNotStartsWith       *string      `json:"serial_not_starts_with"`
	SerialStartsWith          *string      `json:"serial_starts_with"`
	Size                      *float64     `json:"size"`
	SizeGt                    *float64     `json:"size_gt"`
	SizeGte                   *float64     `json:"size_gte"`
	SizeIn                    *[]float64   `json:"size_in"`
	SizeLt                    *float64     `json:"size_lt"`
	SizeLte                   *float64     `json:"size_lte"`
	SizeNot                   *float64     `json:"size_not"`
	SizeNotIn                 *[]float64   `json:"size_not_in"`
	Type                      *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskType)
		DiskType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]DiskType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskType)
		DiskType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn *[]DiskType `json:"type_not_in"`
	Usage     *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskUsage)
		DiskUsage `yaml:",inline"`
	} `json:"usage"`
	UsageIn  *[]DiskUsage `json:"usage_in"`
	UsageNot *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskUsage)
		DiskUsage `yaml:",inline"`
	} `json:"usage_not"`
	UsageNotIn  *[]DiskUsage `json:"usage_not_in"`
	UsageStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskUsageStatus)
		DiskUsageStatus `yaml:",inline"`
	} `json:"usage_status"`
	UsageStatusIn  *[]DiskUsageStatus `json:"usage_status_in"`
	UsageStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskUsageStatus)
		DiskUsageStatus `yaml:",inline"`
	} `json:"usage_status_not"`
	UsageStatusNotIn *[]DiskUsageStatus `json:"usage_status_not_in"`
}

// ElfDataStore defines model for ElfDataStore.
type ElfDataStore struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description string `json:"description"`
	ExternalUse bool   `json:"external_use"`
	Id          string `json:"id"`
	Internal    bool   `json:"internal"`
	IpWhitelist string `json:"ip_whitelist"`
	IscsiTarget *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_target"`
	LocalId   string `json:"local_id"`
	Name      string `json:"name"`
	NfsExport *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nfs_export"`
	NvmfSubsystem *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_subsystem"`
	ReplicaNum    float64          `json:"replica_num"`
	ThinProvision bool             `json:"thin_provision"`
	Type          ElfDataStoreType `json:"type"`
}

// ElfDataStoreConnection defines model for ElfDataStoreConnection.
type ElfDataStoreConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ElfDataStoreOrderByInput defines model for ElfDataStoreOrderByInput.
type ElfDataStoreOrderByInput string

// ElfDataStoreType defines model for ElfDataStoreType.
type ElfDataStoreType string

// ElfDataStoreWhereInput defines model for ElfDataStoreWhereInput.
type ElfDataStoreWhereInput struct {
	AND     *[]ElfDataStoreWhereInput `json:"AND"`
	NOT     *[]ElfDataStoreWhereInput `json:"NOT"`
	OR      *[]ElfDataStoreWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	ExternalUse              *bool     `json:"external_use"`
	ExternalUseNot           *bool     `json:"external_use_not"`
	Id                       *string   `json:"id"`
	IdContains               *string   `json:"id_contains"`
	IdEndsWith               *string   `json:"id_ends_with"`
	IdGt                     *string   `json:"id_gt"`
	IdGte                    *string   `json:"id_gte"`
	IdIn                     *[]string `json:"id_in"`
	IdLt                     *string   `json:"id_lt"`
	IdLte                    *string   `json:"id_lte"`
	IdNot                    *string   `json:"id_not"`
	IdNotContains            *string   `json:"id_not_contains"`
	IdNotEndsWith            *string   `json:"id_not_ends_with"`
	IdNotIn                  *[]string `json:"id_not_in"`
	IdNotStartsWith          *string   `json:"id_not_starts_with"`
	IdStartsWith             *string   `json:"id_starts_with"`
	Internal                 *bool     `json:"internal"`
	InternalNot              *bool     `json:"internal_not"`
	IpWhitelist              *string   `json:"ip_whitelist"`
	IpWhitelistContains      *string   `json:"ip_whitelist_contains"`
	IpWhitelistEndsWith      *string   `json:"ip_whitelist_ends_with"`
	IpWhitelistGt            *string   `json:"ip_whitelist_gt"`
	IpWhitelistGte           *string   `json:"ip_whitelist_gte"`
	IpWhitelistIn            *[]string `json:"ip_whitelist_in"`
	IpWhitelistLt            *string   `json:"ip_whitelist_lt"`
	IpWhitelistLte           *string   `json:"ip_whitelist_lte"`
	IpWhitelistNot           *string   `json:"ip_whitelist_not"`
	IpWhitelistNotContains   *string   `json:"ip_whitelist_not_contains"`
	IpWhitelistNotEndsWith   *string   `json:"ip_whitelist_not_ends_with"`
	IpWhitelistNotIn         *[]string `json:"ip_whitelist_not_in"`
	IpWhitelistNotStartsWith *string   `json:"ip_whitelist_not_starts_with"`
	IpWhitelistStartsWith    *string   `json:"ip_whitelist_starts_with"`
	IscsiTarget              *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"iscsi_target"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NfsExport            *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportWhereInput)
		NfsExportWhereInput `yaml:",inline"`
	} `json:"nfs_export"`
	NvmfSubsystem *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"nvmf_subsystem"`
	ReplicaNum       *float64   `json:"replica_num"`
	ReplicaNumGt     *float64   `json:"replica_num_gt"`
	ReplicaNumGte    *float64   `json:"replica_num_gte"`
	ReplicaNumIn     *[]float64 `json:"replica_num_in"`
	ReplicaNumLt     *float64   `json:"replica_num_lt"`
	ReplicaNumLte    *float64   `json:"replica_num_lte"`
	ReplicaNumNot    *float64   `json:"replica_num_not"`
	ReplicaNumNotIn  *[]float64 `json:"replica_num_not_in"`
	ThinProvision    *bool      `json:"thin_provision"`
	ThinProvisionNot *bool      `json:"thin_provision_not"`
	Type             *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfDataStoreType)
		ElfDataStoreType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]ElfDataStoreType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfDataStoreType)
		ElfDataStoreType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn *[]ElfDataStoreType `json:"type_not_in"`
}

// ElfImage defines model for ElfImage.
type ElfImage struct {
	Cluster *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description       string `json:"description"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id     string `json:"id"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt string  `json:"local_created_at"`
	LocalId        string  `json:"local_id"`
	Name           string  `json:"name"`
	Path           string  `json:"path"`
	Size           float64 `json:"size"`
	UploadTask     *struct {
		Id string `json:"id"`
	} `json:"upload_task"`
	VmDisks *[]struct {
		Id string `json:"id"`
	} `json:"vm_disks"`
	VmSnapshots *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_snapshots"`
	VmTemplates *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_templates"`
}

// ElfImageConnection defines model for ElfImageConnection.
type ElfImageConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ElfImageDeletionParams defines model for ElfImageDeletionParams.
type ElfImageDeletionParams struct {
	Where ElfImageWhereInput `json:"where"`
}

// ElfImageOrderByInput defines model for ElfImageOrderByInput.
type ElfImageOrderByInput string

// ElfImageUpdationParams defines model for ElfImageUpdationParams.
type ElfImageUpdationParams struct {
	Data struct {
		Description *string `json:"description,omitempty"`
		Name        *string `json:"name,omitempty"`
	} `json:"data"`
	Where ElfImageWhereInput `json:"where"`
}

// ElfImageWhereInput defines model for ElfImageWhereInput.
type ElfImageWhereInput struct {
	AND     *[]ElfImageWhereInput `json:"AND"`
	NOT     *[]ElfImageWhereInput `json:"NOT"`
	OR      *[]ElfImageWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	LabelsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt       *string    `json:"local_created_at"`
	LocalCreatedAtGt     *string    `json:"local_created_at_gt"`
	LocalCreatedAtGte    *string    `json:"local_created_at_gte"`
	LocalCreatedAtIn     *[]string  `json:"local_created_at_in"`
	LocalCreatedAtLt     *string    `json:"local_created_at_lt"`
	LocalCreatedAtLte    *string    `json:"local_created_at_lte"`
	LocalCreatedAtNot    *string    `json:"local_created_at_not"`
	LocalCreatedAtNotIn  *[]string  `json:"local_created_at_not_in"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	Name                 *string    `json:"name"`
	NameContains         *string    `json:"name_contains"`
	NameEndsWith         *string    `json:"name_ends_with"`
	NameGt               *string    `json:"name_gt"`
	NameGte              *string    `json:"name_gte"`
	NameIn               *[]string  `json:"name_in"`
	NameLt               *string    `json:"name_lt"`
	NameLte              *string    `json:"name_lte"`
	NameNot              *string    `json:"name_not"`
	NameNotContains      *string    `json:"name_not_contains"`
	NameNotEndsWith      *string    `json:"name_not_ends_with"`
	NameNotIn            *[]string  `json:"name_not_in"`
	NameNotStartsWith    *string    `json:"name_not_starts_with"`
	NameStartsWith       *string    `json:"name_starts_with"`
	Path                 *string    `json:"path"`
	PathContains         *string    `json:"path_contains"`
	PathEndsWith         *string    `json:"path_ends_with"`
	PathGt               *string    `json:"path_gt"`
	PathGte              *string    `json:"path_gte"`
	PathIn               *[]string  `json:"path_in"`
	PathLt               *string    `json:"path_lt"`
	PathLte              *string    `json:"path_lte"`
	PathNot              *string    `json:"path_not"`
	PathNotContains      *string    `json:"path_not_contains"`
	PathNotEndsWith      *string    `json:"path_not_ends_with"`
	PathNotIn            *[]string  `json:"path_not_in"`
	PathNotStartsWith    *string    `json:"path_not_starts_with"`
	PathStartsWith       *string    `json:"path_starts_with"`
	Size                 *float64   `json:"size"`
	SizeGt               *float64   `json:"size_gt"`
	SizeGte              *float64   `json:"size_gte"`
	SizeIn               *[]float64 `json:"size_in"`
	SizeLt               *float64   `json:"size_lt"`
	SizeLte              *float64   `json:"size_lte"`
	SizeNot              *float64   `json:"size_not"`
	SizeNotIn            *[]float64 `json:"size_not_in"`
	VmDisksEvery         *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_every"`
	VmDisksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_none"`
	VmDisksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_some"`
	VmSnapshotsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_every"`
	VmSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_none"`
	VmSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_some"`
	VmTemplatesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_every"`
	VmTemplatesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_none"`
	VmTemplatesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_some"`
}

// ElfStoragePolicy defines model for ElfStoragePolicy.
type ElfStoragePolicy struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description       string `json:"description"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id            string  `json:"id"`
	LocalId       string  `json:"local_id"`
	Name          string  `json:"name"`
	ReplicaNum    float64 `json:"replica_num"`
	StripeNum     float64 `json:"stripe_num"`
	StripeSize    float64 `json:"stripe_size"`
	ThinProvision bool    `json:"thin_provision"`
}

// ElfStoragePolicyConnection defines model for ElfStoragePolicyConnection.
type ElfStoragePolicyConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ElfStoragePolicyOrderByInput defines model for ElfStoragePolicyOrderByInput.
type ElfStoragePolicyOrderByInput string

// ElfStoragePolicyWhereInput defines model for ElfStoragePolicyWhereInput.
type ElfStoragePolicyWhereInput struct {
	AND     *[]ElfStoragePolicyWhereInput `json:"AND"`
	NOT     *[]ElfStoragePolicyWhereInput `json:"NOT"`
	OR      *[]ElfStoragePolicyWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	LocalId                *string              `json:"local_id"`
	LocalIdContains        *string              `json:"local_id_contains"`
	LocalIdEndsWith        *string              `json:"local_id_ends_with"`
	LocalIdGt              *string              `json:"local_id_gt"`
	LocalIdGte             *string              `json:"local_id_gte"`
	LocalIdIn              *[]string            `json:"local_id_in"`
	LocalIdLt              *string              `json:"local_id_lt"`
	LocalIdLte             *string              `json:"local_id_lte"`
	LocalIdNot             *string              `json:"local_id_not"`
	LocalIdNotContains     *string              `json:"local_id_not_contains"`
	LocalIdNotEndsWith     *string              `json:"local_id_not_ends_with"`
	LocalIdNotIn           *[]string            `json:"local_id_not_in"`
	LocalIdNotStartsWith   *string              `json:"local_id_not_starts_with"`
	LocalIdStartsWith      *string              `json:"local_id_starts_with"`
	Name                   *string              `json:"name"`
	NameContains           *string              `json:"name_contains"`
	NameEndsWith           *string              `json:"name_ends_with"`
	NameGt                 *string              `json:"name_gt"`
	NameGte                *string              `json:"name_gte"`
	NameIn                 *[]string            `json:"name_in"`
	NameLt                 *string              `json:"name_lt"`
	NameLte                *string              `json:"name_lte"`
	NameNot                *string              `json:"name_not"`
	NameNotContains        *string              `json:"name_not_contains"`
	NameNotEndsWith        *string              `json:"name_not_ends_with"`
	NameNotIn              *[]string            `json:"name_not_in"`
	NameNotStartsWith      *string              `json:"name_not_starts_with"`
	NameStartsWith         *string              `json:"name_starts_with"`
	ReplicaNum             *float64             `json:"replica_num"`
	ReplicaNumGt           *float64             `json:"replica_num_gt"`
	ReplicaNumGte          *float64             `json:"replica_num_gte"`
	ReplicaNumIn           *[]float64           `json:"replica_num_in"`
	ReplicaNumLt           *float64             `json:"replica_num_lt"`
	ReplicaNumLte          *float64             `json:"replica_num_lte"`
	ReplicaNumNot          *float64             `json:"replica_num_not"`
	ReplicaNumNotIn        *[]float64           `json:"replica_num_not_in"`
	StripeNum              *float64             `json:"stripe_num"`
	StripeNumGt            *float64             `json:"stripe_num_gt"`
	StripeNumGte           *float64             `json:"stripe_num_gte"`
	StripeNumIn            *[]float64           `json:"stripe_num_in"`
	StripeNumLt            *float64             `json:"stripe_num_lt"`
	StripeNumLte           *float64             `json:"stripe_num_lte"`
	StripeNumNot           *float64             `json:"stripe_num_not"`
	StripeNumNotIn         *[]float64           `json:"stripe_num_not_in"`
	StripeSize             *float64             `json:"stripe_size"`
	StripeSizeGt           *float64             `json:"stripe_size_gt"`
	StripeSizeGte          *float64             `json:"stripe_size_gte"`
	StripeSizeIn           *[]float64           `json:"stripe_size_in"`
	StripeSizeLt           *float64             `json:"stripe_size_lt"`
	StripeSizeLte          *float64             `json:"stripe_size_lte"`
	StripeSizeNot          *float64             `json:"stripe_size_not"`
	StripeSizeNotIn        *[]float64           `json:"stripe_size_not_in"`
	ThinProvision          *bool                `json:"thin_provision"`
	ThinProvisionNot       *bool                `json:"thin_provision_not"`
}

// EntityAsyncStatus defines model for EntityAsyncStatus.
type EntityAsyncStatus string

// EntityFilter defines model for EntityFilter.
type EntityFilter struct {
	ApplyToAllClusters *bool `json:"apply_to_all_clusters"`
	Clusters           *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"clusters"`
	EntityType        EntityType `json:"entity_type"`
	ExcludeIds        []string   `json:"exclude_ids"`
	ExecFailedCluster *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"exec_failed_cluster"`
	FilterError    []string     `json:"filter_error"`
	FilterStatus   FilterStatus `json:"filter_status"`
	Id             string       `json:"id"`
	Ids            []string     `json:"ids"`
	LastExecutedAt *string      `json:"last_executed_at"`
	Name           string       `json:"name"`
	Preset         *string      `json:"preset"`
	Rules          []struct {
		Aggregation FilterRuleAggregationEnum `json:"aggregation"`
		Duration    float64                   `json:"duration"`
		Metric      FilterRuleMetricEnum      `json:"metric"`
		Op          FilterRuleOpEnum          `json:"op"`
		Quantile    float64                   `json:"quantile"`
		Threshold   float64                   `json:"threshold"`
	} `json:"rules"`
}

// EntityFilterConnection defines model for EntityFilterConnection.
type EntityFilterConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// EntityFilterCreationParams defines model for EntityFilterCreationParams.
type EntityFilterCreationParams struct {
	ApplyToAllClusters *bool              `json:"apply_to_all_clusters,omitempty"`
	Clusters           *ClusterWhereInput `json:"clusters,omitempty"`
	ExcludeVms         *VmWhereInput      `json:"exclude_vms,omitempty"`
	Name               string             `json:"name"`
	Rules              []FilterRuleInput  `json:"rules"`
}

// EntityFilterDeletionParams defines model for EntityFilterDeletionParams.
type EntityFilterDeletionParams struct {
	Where EntityFilterWhereInput `json:"where"`
}

// EntityFilterOrderByInput defines model for EntityFilterOrderByInput.
type EntityFilterOrderByInput string

// EntityFilterUpdationParams defines model for EntityFilterUpdationParams.
type EntityFilterUpdationParams struct {
	Data struct {
		ApplyToAllClusters *bool              `json:"apply_to_all_clusters,omitempty"`
		Clusters           *ClusterWhereInput `json:"clusters,omitempty"`
		ExcludeVms         *VmWhereInput      `json:"exclude_vms,omitempty"`
		Name               *string            `json:"name,omitempty"`
		Rules              *[]FilterRuleInput `json:"rules,omitempty"`
	} `json:"data"`
	Where EntityFilterWhereInput `json:"where"`
}

// EntityFilterWhereInput defines model for EntityFilterWhereInput.
type EntityFilterWhereInput struct {
	AND                   *[]EntityFilterWhereInput `json:"AND"`
	NOT                   *[]EntityFilterWhereInput `json:"NOT"`
	OR                    *[]EntityFilterWhereInput `json:"OR"`
	ApplyToAllClusters    *bool                     `json:"apply_to_all_clusters"`
	ApplyToAllClustersNot *bool                     `json:"apply_to_all_clusters_not"`
	ClustersEvery         *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_every"`
	ClustersNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_none"`
	ClustersSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_some"`
	EntityType *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityType)
		EntityType `yaml:",inline"`
	} `json:"entity_type"`
	EntityTypeIn  *[]EntityType `json:"entity_type_in"`
	EntityTypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityType)
		EntityType `yaml:",inline"`
	} `json:"entity_type_not"`
	EntityTypeNotIn        *[]EntityType `json:"entity_type_not_in"`
	ExecFailedClusterEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"exec_failed_cluster_every"`
	ExecFailedClusterNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"exec_failed_cluster_none"`
	ExecFailedClusterSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"exec_failed_cluster_some"`
	FilterStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/FilterStatus)
		FilterStatus `yaml:",inline"`
	} `json:"filter_status"`
	FilterStatusIn  *[]FilterStatus `json:"filter_status_in"`
	FilterStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/FilterStatus)
		FilterStatus `yaml:",inline"`
	} `json:"filter_status_not"`
	FilterStatusNotIn   *[]FilterStatus `json:"filter_status_not_in"`
	Id                  *string         `json:"id"`
	IdContains          *string         `json:"id_contains"`
	IdEndsWith          *string         `json:"id_ends_with"`
	IdGt                *string         `json:"id_gt"`
	IdGte               *string         `json:"id_gte"`
	IdIn                *[]string       `json:"id_in"`
	IdLt                *string         `json:"id_lt"`
	IdLte               *string         `json:"id_lte"`
	IdNot               *string         `json:"id_not"`
	IdNotContains       *string         `json:"id_not_contains"`
	IdNotEndsWith       *string         `json:"id_not_ends_with"`
	IdNotIn             *[]string       `json:"id_not_in"`
	IdNotStartsWith     *string         `json:"id_not_starts_with"`
	IdStartsWith        *string         `json:"id_starts_with"`
	LastExecutedAt      *string         `json:"last_executed_at"`
	LastExecutedAtGt    *string         `json:"last_executed_at_gt"`
	LastExecutedAtGte   *string         `json:"last_executed_at_gte"`
	LastExecutedAtIn    *[]string       `json:"last_executed_at_in"`
	LastExecutedAtLt    *string         `json:"last_executed_at_lt"`
	LastExecutedAtLte   *string         `json:"last_executed_at_lte"`
	LastExecutedAtNot   *string         `json:"last_executed_at_not"`
	LastExecutedAtNotIn *[]string       `json:"last_executed_at_not_in"`
	Name                *string         `json:"name"`
	NameContains        *string         `json:"name_contains"`
	NameEndsWith        *string         `json:"name_ends_with"`
	NameGt              *string         `json:"name_gt"`
	NameGte             *string         `json:"name_gte"`
	NameIn              *[]string       `json:"name_in"`
	NameLt              *string         `json:"name_lt"`
	NameLte             *string         `json:"name_lte"`
	NameNot             *string         `json:"name_not"`
	NameNotContains     *string         `json:"name_not_contains"`
	NameNotEndsWith     *string         `json:"name_not_ends_with"`
	NameNotIn           *[]string       `json:"name_not_in"`
	NameNotStartsWith   *string         `json:"name_not_starts_with"`
	NameStartsWith      *string         `json:"name_starts_with"`
	Preset              *string         `json:"preset"`
	PresetContains      *string         `json:"preset_contains"`
	PresetEndsWith      *string         `json:"preset_ends_with"`
	PresetGt            *string         `json:"preset_gt"`
	PresetGte           *string         `json:"preset_gte"`
	PresetIn            *[]string       `json:"preset_in"`
	PresetLt            *string         `json:"preset_lt"`
	PresetLte           *string         `json:"preset_lte"`
	PresetNot           *string         `json:"preset_not"`
	PresetNotContains   *string         `json:"preset_not_contains"`
	PresetNotEndsWith   *string         `json:"preset_not_ends_with"`
	PresetNotIn         *[]string       `json:"preset_not_in"`
	PresetNotStartsWith *string         `json:"preset_not_starts_with"`
	PresetStartsWith    *string         `json:"preset_starts_with"`
}

// EntityType defines model for EntityType.
type EntityType string

// FilterRuleAggregationEnum defines model for FilterRuleAggregationEnum.
type FilterRuleAggregationEnum string

// FilterRuleInput defines model for FilterRuleInput.
type FilterRuleInput struct {
	Aggregation FilterRuleAggregationEnum `json:"aggregation"`
	Duration    float64                   `json:"duration"`
	Metric      FilterRuleMetricEnum      `json:"metric"`
	Op          FilterRuleOpEnum          `json:"op"`
	Quantile    float64                   `json:"quantile"`
	Threshold   float64                   `json:"threshold"`
}

// FilterRuleMetricEnum defines model for FilterRuleMetricEnum.
type FilterRuleMetricEnum string

// FilterRuleOpEnum defines model for FilterRuleOpEnum.
type FilterRuleOpEnum string

// FilterStatus defines model for FilterStatus.
type FilterStatus string

// GetAlertNotifiersConnectionRequestBody defines model for GetAlertNotifiersConnectionRequestBody.
type GetAlertNotifiersConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertNotifierOrderByInput)
		AlertNotifierOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertNotifierWhereInput)
		AlertNotifierWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetAlertNotifiersRequestBody defines model for GetAlertNotifiersRequestBody.
type GetAlertNotifiersRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertNotifierOrderByInput)
		AlertNotifierOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertNotifierWhereInput)
		AlertNotifierWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetAlertRulesConnectionRequestBody defines model for GetAlertRulesConnectionRequestBody.
type GetAlertRulesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleOrderByInput)
		AlertRuleOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleWhereInput)
		AlertRuleWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetAlertRulesRequestBody defines model for GetAlertRulesRequestBody.
type GetAlertRulesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleOrderByInput)
		AlertRuleOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleWhereInput)
		AlertRuleWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetAlertsConnectionRequestBody defines model for GetAlertsConnectionRequestBody.
type GetAlertsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertOrderByInput)
		AlertOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertWhereInput)
		AlertWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetAlertsRequestBody defines model for GetAlertsRequestBody.
type GetAlertsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertOrderByInput)
		AlertOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertWhereInput)
		AlertWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetApplicationsConnectionRequestBody defines model for GetApplicationsConnectionRequestBody.
type GetApplicationsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationOrderByInput)
		ApplicationOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationWhereInput)
		ApplicationWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetApplicationsRequestBody defines model for GetApplicationsRequestBody.
type GetApplicationsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationOrderByInput)
		ApplicationOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ApplicationWhereInput)
		ApplicationWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetBrickTopoesConnectionRequestBody defines model for GetBrickTopoesConnectionRequestBody.
type GetBrickTopoesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoOrderByInput)
		BrickTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetBrickTopoesRequestBody defines model for GetBrickTopoesRequestBody.
type GetBrickTopoesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoOrderByInput)
		BrickTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClusterImagesConnectionRequestBody defines model for GetClusterImagesConnectionRequestBody.
type GetClusterImagesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterImageOrderByInput)
		ClusterImageOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterImageWhereInput)
		ClusterImageWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClusterImagesRequestBody defines model for GetClusterImagesRequestBody.
type GetClusterImagesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterImageOrderByInput)
		ClusterImageOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterImageWhereInput)
		ClusterImageWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClusterSettingsesConnectionRequestBody defines model for GetClusterSettingsesConnectionRequestBody.
type GetClusterSettingsesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterSettingsOrderByInput)
		ClusterSettingsOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterSettingsWhereInput)
		ClusterSettingsWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClusterSettingsesRequestBody defines model for GetClusterSettingsesRequestBody.
type GetClusterSettingsesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterSettingsOrderByInput)
		ClusterSettingsOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterSettingsWhereInput)
		ClusterSettingsWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClusterTopoesConnectionRequestBody defines model for GetClusterTopoesConnectionRequestBody.
type GetClusterTopoesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterTopoOrderByInput)
		ClusterTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterTopoWhereInput)
		ClusterTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClusterTopoesRequestBody defines model for GetClusterTopoesRequestBody.
type GetClusterTopoesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterTopoOrderByInput)
		ClusterTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterTopoWhereInput)
		ClusterTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClusterUpgradeHistoriesConnectionRequestBody defines model for GetClusterUpgradeHistoriesConnectionRequestBody.
type GetClusterUpgradeHistoriesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterUpgradeHistoryOrderByInput)
		ClusterUpgradeHistoryOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterUpgradeHistoryWhereInput)
		ClusterUpgradeHistoryWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClusterUpgradeHistoriesRequestBody defines model for GetClusterUpgradeHistoriesRequestBody.
type GetClusterUpgradeHistoriesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterUpgradeHistoryOrderByInput)
		ClusterUpgradeHistoryOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterUpgradeHistoryWhereInput)
		ClusterUpgradeHistoryWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClustersConnectionRequestBody defines model for GetClustersConnectionRequestBody.
type GetClustersConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterOrderByInput)
		ClusterOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetClustersRequestBody defines model for GetClustersRequestBody.
type GetClustersRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterOrderByInput)
		ClusterOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetConsistencyGroupSnapshotsConnectionRequestBody defines model for GetConsistencyGroupSnapshotsConnectionRequestBody.
type GetConsistencyGroupSnapshotsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotOrderByInput)
		ConsistencyGroupSnapshotOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetConsistencyGroupSnapshotsRequestBody defines model for GetConsistencyGroupSnapshotsRequestBody.
type GetConsistencyGroupSnapshotsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotOrderByInput)
		ConsistencyGroupSnapshotOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetConsistencyGroupsConnectionRequestBody defines model for GetConsistencyGroupsConnectionRequestBody.
type GetConsistencyGroupsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupOrderByInput)
		ConsistencyGroupOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetConsistencyGroupsRequestBody defines model for GetConsistencyGroupsRequestBody.
type GetConsistencyGroupsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupOrderByInput)
		ConsistencyGroupOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetDatacentersConnectionRequestBody defines model for GetDatacentersConnectionRequestBody.
type GetDatacentersConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterOrderByInput)
		DatacenterOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetDatacentersRequestBody defines model for GetDatacentersRequestBody.
type GetDatacentersRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterOrderByInput)
		DatacenterOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetDeploysConnectionRequestBody defines model for GetDeploysConnectionRequestBody.
type GetDeploysConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/DeployOrderByInput)
		DeployOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/DeployWhereInput)
		DeployWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetDeploysRequestBody defines model for GetDeploysRequestBody.
type GetDeploysRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/DeployOrderByInput)
		DeployOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/DeployWhereInput)
		DeployWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetDiscoverHostsRequestBody defines model for GetDiscoverHostsRequestBody.
type GetDiscoverHostsRequestBody struct {
	Cluster     ClusterWhereUniqueInput `json:"cluster"`
	HostAddress *[]string               `json:"host_address"`
}

// GetDisksConnectionRequestBody defines model for GetDisksConnectionRequestBody.
type GetDisksConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskOrderByInput)
		DiskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetDisksRequestBody defines model for GetDisksRequestBody.
type GetDisksRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskOrderByInput)
		DiskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetElfDataStoresConnectionRequestBody defines model for GetElfDataStoresConnectionRequestBody.
type GetElfDataStoresConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfDataStoreOrderByInput)
		ElfDataStoreOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfDataStoreWhereInput)
		ElfDataStoreWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetElfDataStoresRequestBody defines model for GetElfDataStoresRequestBody.
type GetElfDataStoresRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfDataStoreOrderByInput)
		ElfDataStoreOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfDataStoreWhereInput)
		ElfDataStoreWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetElfImagesConnectionRequestBody defines model for GetElfImagesConnectionRequestBody.
type GetElfImagesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfImageOrderByInput)
		ElfImageOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfImageWhereInput)
		ElfImageWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetElfImagesRequestBody defines model for GetElfImagesRequestBody.
type GetElfImagesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfImageOrderByInput)
		ElfImageOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfImageWhereInput)
		ElfImageWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetElfStoragePoliciesConnectionRequestBody defines model for GetElfStoragePoliciesConnectionRequestBody.
type GetElfStoragePoliciesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfStoragePolicyOrderByInput)
		ElfStoragePolicyOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfStoragePolicyWhereInput)
		ElfStoragePolicyWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetElfStoragePoliciesRequestBody defines model for GetElfStoragePoliciesRequestBody.
type GetElfStoragePoliciesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfStoragePolicyOrderByInput)
		ElfStoragePolicyOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfStoragePolicyWhereInput)
		ElfStoragePolicyWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetEntityFiltersConnectionRequestBody defines model for GetEntityFiltersConnectionRequestBody.
type GetEntityFiltersConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityFilterOrderByInput)
		EntityFilterOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityFilterWhereInput)
		EntityFilterWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetEntityFiltersRequestBody defines model for GetEntityFiltersRequestBody.
type GetEntityFiltersRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityFilterOrderByInput)
		EntityFilterOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityFilterWhereInput)
		EntityFilterWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetGlobalAlertRulesConnectionRequestBody defines model for GetGlobalAlertRulesConnectionRequestBody.
type GetGlobalAlertRulesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalAlertRuleOrderByInput)
		GlobalAlertRuleOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalAlertRuleWhereInput)
		GlobalAlertRuleWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetGlobalAlertRulesRequestBody defines model for GetGlobalAlertRulesRequestBody.
type GetGlobalAlertRulesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalAlertRuleOrderByInput)
		GlobalAlertRuleOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalAlertRuleWhereInput)
		GlobalAlertRuleWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetGlobalSettingsesConnectionRequestBody defines model for GetGlobalSettingsesConnectionRequestBody.
type GetGlobalSettingsesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalSettingsOrderByInput)
		GlobalSettingsOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalSettingsWhereInput)
		GlobalSettingsWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetGlobalSettingsesRequestBody defines model for GetGlobalSettingsesRequestBody.
type GetGlobalSettingsesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalSettingsOrderByInput)
		GlobalSettingsOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/GlobalSettingsWhereInput)
		GlobalSettingsWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetGraphsConnectionRequestBody defines model for GetGraphsConnectionRequestBody.
type GetGraphsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphOrderByInput)
		GraphOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphWhereInput)
		GraphWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetGraphsRequestBody defines model for GetGraphsRequestBody.
type GetGraphsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphOrderByInput)
		GraphOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphWhereInput)
		GraphWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetHostsConnectionRequestBody defines model for GetHostsConnectionRequestBody.
type GetHostsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/HostOrderByInput)
		HostOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetHostsRequestBody defines model for GetHostsRequestBody.
type GetHostsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/HostOrderByInput)
		HostOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetImagesConnectorRequestBody defines model for GetImagesConnectorRequestBody.
type GetImagesConnectorRequestBody struct {
	Cluster ClusterWhereUniqueInput `json:"cluster"`
}

// GetIpmisRequestBody defines model for GetIpmisRequestBody.
type GetIpmisRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IpmiOrderByInput)
		IpmiOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IpmiWhereInput)
		IpmiWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetIscsiConnectionsConnectionRequestBody defines model for GetIscsiConnectionsConnectionRequestBody.
type GetIscsiConnectionsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiConnectionOrderByInput)
		IscsiConnectionOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiConnectionWhereInput)
		IscsiConnectionWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetIscsiConnectionsRequestBody defines model for GetIscsiConnectionsRequestBody.
type GetIscsiConnectionsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiConnectionOrderByInput)
		IscsiConnectionOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiConnectionWhereInput)
		IscsiConnectionWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetIscsiLunSnapshotsConnectionRequestBody defines model for GetIscsiLunSnapshotsConnectionRequestBody.
type GetIscsiLunSnapshotsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotOrderByInput)
		IscsiLunSnapshotOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotWhereInput)
		IscsiLunSnapshotWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetIscsiLunSnapshotsRequestBody defines model for GetIscsiLunSnapshotsRequestBody.
type GetIscsiLunSnapshotsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotOrderByInput)
		IscsiLunSnapshotOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotWhereInput)
		IscsiLunSnapshotWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetIscsiLunsConnectionRequestBody defines model for GetIscsiLunsConnectionRequestBody.
type GetIscsiLunsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunOrderByInput)
		IscsiLunOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetIscsiLunsRequestBody defines model for GetIscsiLunsRequestBody.
type GetIscsiLunsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunOrderByInput)
		IscsiLunOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetIscsiTargetsConnectionRequestBody defines model for GetIscsiTargetsConnectionRequestBody.
type GetIscsiTargetsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetOrderByInput)
		IscsiTargetOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetIscsiTargetsRequestBody defines model for GetIscsiTargetsRequestBody.
type GetIscsiTargetsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetOrderByInput)
		IscsiTargetOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetLabelsConnectionRequestBody defines model for GetLabelsConnectionRequestBody.
type GetLabelsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelOrderByInput)
		LabelOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetLabelsRequestBody defines model for GetLabelsRequestBody.
type GetLabelsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelOrderByInput)
		LabelOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetLicensesConnectionRequestBody defines model for GetLicensesConnectionRequestBody.
type GetLicensesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseOrderByInput)
		LicenseOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseWhereInput)
		LicenseWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetLicensesRequestBody defines model for GetLicensesRequestBody.
type GetLicensesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseOrderByInput)
		LicenseOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseWhereInput)
		LicenseWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetLogCollectionsConnectionRequestBody defines model for GetLogCollectionsConnectionRequestBody.
type GetLogCollectionsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/LogCollectionOrderByInput)
		LogCollectionOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/LogCollectionWhereInput)
		LogCollectionWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetLogCollectionsRequestBody defines model for GetLogCollectionsRequestBody.
type GetLogCollectionsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/LogCollectionOrderByInput)
		LogCollectionOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/LogCollectionWhereInput)
		LogCollectionWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetMigrateTransmittersConnectionRequestBody defines model for GetMigrateTransmittersConnectionRequestBody.
type GetMigrateTransmittersConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/MigrateTransmitterOrderByInput)
		MigrateTransmitterOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/MigrateTransmitterWhereInput)
		MigrateTransmitterWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetMigrateTransmittersRequestBody defines model for GetMigrateTransmittersRequestBody.
type GetMigrateTransmittersRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/MigrateTransmitterOrderByInput)
		MigrateTransmitterOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/MigrateTransmitterWhereInput)
		MigrateTransmitterWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNamespaceGroupsConnectionRequestBody defines model for GetNamespaceGroupsConnectionRequestBody.
type GetNamespaceGroupsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupOrderByInput)
		NamespaceGroupOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNamespaceGroupsRequestBody defines model for GetNamespaceGroupsRequestBody.
type GetNamespaceGroupsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupOrderByInput)
		NamespaceGroupOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNfsExportsConnectionRequestBody defines model for GetNfsExportsConnectionRequestBody.
type GetNfsExportsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportOrderByInput)
		NfsExportOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportWhereInput)
		NfsExportWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNfsExportsRequestBody defines model for GetNfsExportsRequestBody.
type GetNfsExportsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportOrderByInput)
		NfsExportOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportWhereInput)
		NfsExportWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNfsInodesConnectionRequestBody defines model for GetNfsInodesConnectionRequestBody.
type GetNfsInodesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeOrderByInput)
		NfsInodeOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeWhereInput)
		NfsInodeWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNfsInodesRequestBody defines model for GetNfsInodesRequestBody.
type GetNfsInodesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeOrderByInput)
		NfsInodeOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeWhereInput)
		NfsInodeWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNicsConnectionRequestBody defines model for GetNicsConnectionRequestBody.
type GetNicsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NicOrderByInput)
		NicOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNicsRequestBody defines model for GetNicsRequestBody.
type GetNicsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NicOrderByInput)
		NicOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNodeTopoesConnectionRequestBody defines model for GetNodeTopoesConnectionRequestBody.
type GetNodeTopoesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoOrderByInput)
		NodeTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoWhereInput)
		NodeTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNodeTopoesRequestBody defines model for GetNodeTopoesRequestBody.
type GetNodeTopoesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoOrderByInput)
		NodeTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NodeTopoWhereInput)
		NodeTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNvmfNamespaceSnapshotsConnectionRequestBody defines model for GetNvmfNamespaceSnapshotsConnectionRequestBody.
type GetNvmfNamespaceSnapshotsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotOrderByInput)
		NvmfNamespaceSnapshotOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotWhereInput)
		NvmfNamespaceSnapshotWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNvmfNamespaceSnapshotsRequestBody defines model for GetNvmfNamespaceSnapshotsRequestBody.
type GetNvmfNamespaceSnapshotsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotOrderByInput)
		NvmfNamespaceSnapshotOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotWhereInput)
		NvmfNamespaceSnapshotWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNvmfNamespacesConnectionRequestBody defines model for GetNvmfNamespacesConnectionRequestBody.
type GetNvmfNamespacesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceOrderByInput)
		NvmfNamespaceOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNvmfNamespacesRequestBody defines model for GetNvmfNamespacesRequestBody.
type GetNvmfNamespacesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceOrderByInput)
		NvmfNamespaceOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNvmfSubsystemsConnectionRequestBody defines model for GetNvmfSubsystemsConnectionRequestBody.
type GetNvmfSubsystemsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemOrderByInput)
		NvmfSubsystemOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetNvmfSubsystemsRequestBody defines model for GetNvmfSubsystemsRequestBody.
type GetNvmfSubsystemsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemOrderByInput)
		NvmfSubsystemOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetOrganizationsConnectionRequestBody defines model for GetOrganizationsConnectionRequestBody.
type GetOrganizationsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/OrganizationOrderByInput)
		OrganizationOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/OrganizationWhereInput)
		OrganizationWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetOrganizationsRequestBody defines model for GetOrganizationsRequestBody.
type GetOrganizationsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/OrganizationOrderByInput)
		OrganizationOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/OrganizationWhereInput)
		OrganizationWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetPmemDimmsConnectionRequestBody defines model for GetPmemDimmsConnectionRequestBody.
type GetPmemDimmsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmOrderByInput)
		PmemDimmOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmWhereInput)
		PmemDimmWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetPmemDimmsRequestBody defines model for GetPmemDimmsRequestBody.
type GetPmemDimmsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmOrderByInput)
		PmemDimmOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmWhereInput)
		PmemDimmWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetRackTopoesConnectionRequestBody defines model for GetRackTopoesConnectionRequestBody.
type GetRackTopoesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/RackTopoOrderByInput)
		RackTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/RackTopoWhereInput)
		RackTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetRackTopoesRequestBody defines model for GetRackTopoesRequestBody.
type GetRackTopoesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/RackTopoOrderByInput)
		RackTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/RackTopoWhereInput)
		RackTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetReportTasksConnectionRequestBody defines model for GetReportTasksConnectionRequestBody.
type GetReportTasksConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTaskOrderByInput)
		ReportTaskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTaskWhereInput)
		ReportTaskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetReportTasksRequestBody defines model for GetReportTasksRequestBody.
type GetReportTasksRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTaskOrderByInput)
		ReportTaskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTaskWhereInput)
		ReportTaskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetReportTemplatesConnectionRequestBody defines model for GetReportTemplatesConnectionRequestBody.
type GetReportTemplatesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTemplateOrderByInput)
		ReportTemplateOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTemplateWhereInput)
		ReportTemplateWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetReportTemplatesRequestBody defines model for GetReportTemplatesRequestBody.
type GetReportTemplatesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTemplateOrderByInput)
		ReportTemplateOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTemplateWhereInput)
		ReportTemplateWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnapshotGroupsConnectionRequestBody defines model for GetSnapshotGroupsConnectionRequestBody.
type GetSnapshotGroupsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotGroupOrderByInput)
		SnapshotGroupOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotGroupWhereInput)
		SnapshotGroupWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnapshotGroupsRequestBody defines model for GetSnapshotGroupsRequestBody.
type GetSnapshotGroupsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotGroupOrderByInput)
		SnapshotGroupOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotGroupWhereInput)
		SnapshotGroupWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnapshotPlanTasksConnectionRequestBody defines model for GetSnapshotPlanTasksConnectionRequestBody.
type GetSnapshotPlanTasksConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskOrderByInput)
		SnapshotPlanTaskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskWhereInput)
		SnapshotPlanTaskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnapshotPlanTasksRequestBody defines model for GetSnapshotPlanTasksRequestBody.
type GetSnapshotPlanTasksRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskOrderByInput)
		SnapshotPlanTaskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskWhereInput)
		SnapshotPlanTaskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnapshotPlansConnectionRequestBody defines model for GetSnapshotPlansConnectionRequestBody.
type GetSnapshotPlansConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanOrderByInput)
		SnapshotPlanOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanWhereInput)
		SnapshotPlanWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnapshotPlansRequestBody defines model for GetSnapshotPlansRequestBody.
type GetSnapshotPlansRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanOrderByInput)
		SnapshotPlanOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanWhereInput)
		SnapshotPlanWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnmpTransportsConnectionRequestBody defines model for GetSnmpTransportsConnectionRequestBody.
type GetSnmpTransportsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpTransportOrderByInput)
		SnmpTransportOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpTransportWhereInput)
		SnmpTransportWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnmpTransportsRequestBody defines model for GetSnmpTransportsRequestBody.
type GetSnmpTransportsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpTransportOrderByInput)
		SnmpTransportOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpTransportWhereInput)
		SnmpTransportWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnmpTrapReceiversConnectionRequestBody defines model for GetSnmpTrapReceiversConnectionRequestBody.
type GetSnmpTrapReceiversConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpTrapReceiverOrderByInput)
		SnmpTrapReceiverOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpTrapReceiverWhereInput)
		SnmpTrapReceiverWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSnmpTrapReceiversRequestBody defines model for GetSnmpTrapReceiversRequestBody.
type GetSnmpTrapReceiversRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpTrapReceiverOrderByInput)
		SnmpTrapReceiverOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpTrapReceiverWhereInput)
		SnmpTrapReceiverWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetStoragePoliciesConnectorRequestBody defines model for GetStoragePoliciesConnectorRequestBody.
type GetStoragePoliciesConnectorRequestBody struct {
	Cluster ClusterWhereUniqueInput `json:"cluster"`
}

// GetSvtImagesConnectionRequestBody defines model for GetSvtImagesConnectionRequestBody.
type GetSvtImagesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SvtImageOrderByInput)
		SvtImageOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SvtImageWhereInput)
		SvtImageWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSvtImagesRequestBody defines model for GetSvtImagesRequestBody.
type GetSvtImagesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SvtImageOrderByInput)
		SvtImageOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SvtImageWhereInput)
		SvtImageWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSystemAuditLogsConnectionRequestBody defines model for GetSystemAuditLogsConnectionRequestBody.
type GetSystemAuditLogsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SystemAuditLogOrderByInput)
		SystemAuditLogOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SystemAuditLogWhereInput)
		SystemAuditLogWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetSystemAuditLogsRequestBody defines model for GetSystemAuditLogsRequestBody.
type GetSystemAuditLogsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/SystemAuditLogOrderByInput)
		SystemAuditLogOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/SystemAuditLogWhereInput)
		SystemAuditLogWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetTasksConnectionRequestBody defines model for GetTasksConnectionRequestBody.
type GetTasksConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskOrderByInput)
		TaskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskWhereInput)
		TaskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetTasksRequestBody defines model for GetTasksRequestBody.
type GetTasksRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskOrderByInput)
		TaskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskWhereInput)
		TaskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUploadTasksConnectionRequestBody defines model for GetUploadTasksConnectionRequestBody.
type GetUploadTasksConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UploadTaskOrderByInput)
		UploadTaskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UploadTaskWhereInput)
		UploadTaskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUploadTasksRequestBody defines model for GetUploadTasksRequestBody.
type GetUploadTasksRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UploadTaskOrderByInput)
		UploadTaskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UploadTaskWhereInput)
		UploadTaskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUsbDevicesConnectionRequestBody defines model for GetUsbDevicesConnectionRequestBody.
type GetUsbDevicesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceOrderByInput)
		UsbDeviceOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceWhereInput)
		UsbDeviceWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUsbDevicesRequestBody defines model for GetUsbDevicesRequestBody.
type GetUsbDevicesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceOrderByInput)
		UsbDeviceOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceWhereInput)
		UsbDeviceWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUserAuditLogsConnectionRequestBody defines model for GetUserAuditLogsConnectionRequestBody.
type GetUserAuditLogsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogOrderByInput)
		UserAuditLogOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogWhereInput)
		UserAuditLogWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUserAuditLogsRequestBody defines model for GetUserAuditLogsRequestBody.
type GetUserAuditLogsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogOrderByInput)
		UserAuditLogOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogWhereInput)
		UserAuditLogWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUserRoleNextsConnectionRequestBody defines model for GetUserRoleNextsConnectionRequestBody.
type GetUserRoleNextsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRoleNextOrderByInput)
		UserRoleNextOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRoleNextWhereInput)
		UserRoleNextWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUserRoleNextsRequestBody defines model for GetUserRoleNextsRequestBody.
type GetUserRoleNextsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRoleNextOrderByInput)
		UserRoleNextOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRoleNextWhereInput)
		UserRoleNextWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUsersConnectionRequestBody defines model for GetUsersConnectionRequestBody.
type GetUsersConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UserOrderByInput)
		UserOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UserWhereInput)
		UserWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetUsersRequestBody defines model for GetUsersRequestBody.
type GetUsersRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/UserOrderByInput)
		UserOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/UserWhereInput)
		UserWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVcenterAccountsConnectionRequestBody defines model for GetVcenterAccountsConnectionRequestBody.
type GetVcenterAccountsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VcenterAccountOrderByInput)
		VcenterAccountOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VcenterAccountWhereInput)
		VcenterAccountWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVcenterAccountsRequestBody defines model for GetVcenterAccountsRequestBody.
type GetVcenterAccountsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VcenterAccountOrderByInput)
		VcenterAccountOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VcenterAccountWhereInput)
		VcenterAccountWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVdsesConnectionRequestBody defines model for GetVdsesConnectionRequestBody.
type GetVdsesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsOrderByInput)
		VdsOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVdsesRequestBody defines model for GetVdsesRequestBody.
type GetVdsesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsOrderByInput)
		VdsOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetViewsConnectionRequestBody defines model for GetViewsConnectionRequestBody.
type GetViewsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ViewOrderByInput)
		ViewOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ViewWhereInput)
		ViewWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetViewsRequestBody defines model for GetViewsRequestBody.
type GetViewsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ViewOrderByInput)
		ViewOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ViewWhereInput)
		ViewWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVlansConnectionRequestBody defines model for GetVlansConnectionRequestBody.
type GetVlansConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanOrderByInput)
		VlanOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVlansRequestBody defines model for GetVlansRequestBody.
type GetVlansRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanOrderByInput)
		VlanOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmDisksConnectionRequestBody defines model for GetVmDisksConnectionRequestBody.
type GetVmDisksConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskOrderByInput)
		VmDiskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmDisksRequestBody defines model for GetVmDisksRequestBody.
type GetVmDisksRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskOrderByInput)
		VmDiskOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmEntityFilterResultsConnectionRequestBody defines model for GetVmEntityFilterResultsConnectionRequestBody.
type GetVmEntityFilterResultsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmEntityFilterResultOrderByInput)
		VmEntityFilterResultOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmEntityFilterResultWhereInput)
		VmEntityFilterResultWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmEntityFilterResultsRequestBody defines model for GetVmEntityFilterResultsRequestBody.
type GetVmEntityFilterResultsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmEntityFilterResultOrderByInput)
		VmEntityFilterResultOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmEntityFilterResultWhereInput)
		VmEntityFilterResultWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmFoldersConnectionRequestBody defines model for GetVmFoldersConnectionRequestBody.
type GetVmFoldersConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFolderOrderByInput)
		VmFolderOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFolderWhereInput)
		VmFolderWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmFoldersRequestBody defines model for GetVmFoldersRequestBody.
type GetVmFoldersRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFolderOrderByInput)
		VmFolderOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFolderWhereInput)
		VmFolderWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmNicsConnectionRequestBody defines model for GetVmNicsConnectionRequestBody.
type GetVmNicsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicOrderByInput)
		VmNicOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmNicsRequestBody defines model for GetVmNicsRequestBody.
type GetVmNicsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicOrderByInput)
		VmNicOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmPlacementGroupsConnectionRequestBody defines model for GetVmPlacementGroupsConnectionRequestBody.
type GetVmPlacementGroupsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmPlacementGroupOrderByInput)
		VmPlacementGroupOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmPlacementGroupWhereInput)
		VmPlacementGroupWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmPlacementGroupsRequestBody defines model for GetVmPlacementGroupsRequestBody.
type GetVmPlacementGroupsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmPlacementGroupOrderByInput)
		VmPlacementGroupOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmPlacementGroupWhereInput)
		VmPlacementGroupWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmSnapshotsConnectionRequestBody defines model for GetVmSnapshotsConnectionRequestBody.
type GetVmSnapshotsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotOrderByInput)
		VmSnapshotOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmSnapshotsRequestBody defines model for GetVmSnapshotsRequestBody.
type GetVmSnapshotsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotOrderByInput)
		VmSnapshotOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmTemplatesConnectionRequestBody defines model for GetVmTemplatesConnectionRequestBody.
type GetVmTemplatesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateOrderByInput)
		VmTemplateOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmTemplatesRequestBody defines model for GetVmTemplatesRequestBody.
type GetVmTemplatesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateOrderByInput)
		VmTemplateOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmVolumesConnectionRequestBody defines model for GetVmVolumesConnectionRequestBody.
type GetVmVolumesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeOrderByInput)
		VmVolumeOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmVolumesRequestBody defines model for GetVmVolumesRequestBody.
type GetVmVolumesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeOrderByInput)
		VmVolumeOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmsConnectionRequestBody defines model for GetVmsConnectionRequestBody.
type GetVmsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmOrderByInput)
		VmOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVmsRequestBody defines model for GetVmsRequestBody.
type GetVmsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmOrderByInput)
		VmOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVsphereEsxiAccountsConnectionRequestBody defines model for GetVsphereEsxiAccountsConnectionRequestBody.
type GetVsphereEsxiAccountsConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VsphereEsxiAccountOrderByInput)
		VsphereEsxiAccountOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VsphereEsxiAccountWhereInput)
		VsphereEsxiAccountWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetVsphereEsxiAccountsRequestBody defines model for GetVsphereEsxiAccountsRequestBody.
type GetVsphereEsxiAccountsRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/VsphereEsxiAccountOrderByInput)
		VsphereEsxiAccountOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/VsphereEsxiAccountWhereInput)
		VsphereEsxiAccountWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetWitnessesConnectionRequestBody defines model for GetWitnessesConnectionRequestBody.
type GetWitnessesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/WitnessOrderByInput)
		WitnessOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/WitnessWhereInput)
		WitnessWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetWitnessesRequestBody defines model for GetWitnessesRequestBody.
type GetWitnessesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/WitnessOrderByInput)
		WitnessOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/WitnessWhereInput)
		WitnessWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetZoneTopoesConnectionRequestBody defines model for GetZoneTopoesConnectionRequestBody.
type GetZoneTopoesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneTopoOrderByInput)
		ZoneTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneTopoWhereInput)
		ZoneTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetZoneTopoesRequestBody defines model for GetZoneTopoesRequestBody.
type GetZoneTopoesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneTopoOrderByInput)
		ZoneTopoOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneTopoWhereInput)
		ZoneTopoWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetZonesConnectionRequestBody defines model for GetZonesConnectionRequestBody.
type GetZonesConnectionRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneOrderByInput)
		ZoneOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GetZonesRequestBody defines model for GetZonesRequestBody.
type GetZonesRequestBody struct {
	After   *string  `json:"after"`
	Before  *string  `json:"before"`
	First   *float64 `json:"first"`
	Last    *float64 `json:"last"`
	OrderBy *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneOrderByInput)
		ZoneOrderByInput `yaml:",inline"`
	} `json:"orderBy"`
	Skip  *float64 `json:"skip"`
	Where *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"where"`
}

// GlobalAlertRule defines model for GlobalAlertRule.
type GlobalAlertRule struct {
	AlertRules *[]struct {
		Id string `json:"id"`
	} `json:"alert_rules"`
	Boolean           bool   `json:"boolean"`
	Cause             string `json:"cause"`
	DefaultThresholds []struct {
		Quantile *float64 `json:"quantile"`
		Severity *struct {
			// Embedded struct due to allOf(#/components/schemas/SeverityEnum)
			SeverityEnum `yaml:",inline"`
		} `json:"severity"`
		Value *float64 `json:"value"`
	} `json:"default_thresholds"`
	Disabled bool   `json:"disabled"`
	Id       string `json:"id"`
	Impact   string `json:"impact"`
	Message  string `json:"message"`
	Name     string `json:"name"`
	Object   *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleObject)
		AlertRuleObject `yaml:",inline"`
	} `json:"object"`
	Operator   string `json:"operator"`
	Solution   string `json:"solution"`
	Thresholds []struct {
		Quantile *float64 `json:"quantile"`
		Severity *struct {
			// Embedded struct due to allOf(#/components/schemas/SeverityEnum)
			SeverityEnum `yaml:",inline"`
		} `json:"severity"`
		Value *float64 `json:"value"`
	} `json:"thresholds"`
	Unit AlertRuleUnit `json:"unit"`
}

// GlobalAlertRuleConnection defines model for GlobalAlertRuleConnection.
type GlobalAlertRuleConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// GlobalAlertRuleOrderByInput defines model for GlobalAlertRuleOrderByInput.
type GlobalAlertRuleOrderByInput string

// GlobalAlertRuleUpdationParams defines model for GlobalAlertRuleUpdationParams.
type GlobalAlertRuleUpdationParams struct {
	Data struct {
		Disabled   *bool                  `json:"disabled,omitempty"`
		Thresholds *[]AlertRuleThresholds `json:"thresholds,omitempty"`
	} `json:"data"`
	Where GlobalAlertRuleWhereInput `json:"where"`
}

// GlobalAlertRuleWhereInput defines model for GlobalAlertRuleWhereInput.
type GlobalAlertRuleWhereInput struct {
	AND             *[]GlobalAlertRuleWhereInput `json:"AND"`
	NOT             *[]GlobalAlertRuleWhereInput `json:"NOT"`
	OR              *[]GlobalAlertRuleWhereInput `json:"OR"`
	AlertRulesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleWhereInput)
		AlertRuleWhereInput `yaml:",inline"`
	} `json:"alert_rules_every"`
	AlertRulesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleWhereInput)
		AlertRuleWhereInput `yaml:",inline"`
	} `json:"alert_rules_none"`
	AlertRulesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleWhereInput)
		AlertRuleWhereInput `yaml:",inline"`
	} `json:"alert_rules_some"`
	Boolean              *bool     `json:"boolean"`
	BooleanNot           *bool     `json:"boolean_not"`
	Cause                *string   `json:"cause"`
	CauseContains        *string   `json:"cause_contains"`
	CauseEndsWith        *string   `json:"cause_ends_with"`
	CauseGt              *string   `json:"cause_gt"`
	CauseGte             *string   `json:"cause_gte"`
	CauseIn              *[]string `json:"cause_in"`
	CauseLt              *string   `json:"cause_lt"`
	CauseLte             *string   `json:"cause_lte"`
	CauseNot             *string   `json:"cause_not"`
	CauseNotContains     *string   `json:"cause_not_contains"`
	CauseNotEndsWith     *string   `json:"cause_not_ends_with"`
	CauseNotIn           *[]string `json:"cause_not_in"`
	CauseNotStartsWith   *string   `json:"cause_not_starts_with"`
	CauseStartsWith      *string   `json:"cause_starts_with"`
	Disabled             *bool     `json:"disabled"`
	DisabledNot          *bool     `json:"disabled_not"`
	Id                   *string   `json:"id"`
	IdContains           *string   `json:"id_contains"`
	IdEndsWith           *string   `json:"id_ends_with"`
	IdGt                 *string   `json:"id_gt"`
	IdGte                *string   `json:"id_gte"`
	IdIn                 *[]string `json:"id_in"`
	IdLt                 *string   `json:"id_lt"`
	IdLte                *string   `json:"id_lte"`
	IdNot                *string   `json:"id_not"`
	IdNotContains        *string   `json:"id_not_contains"`
	IdNotEndsWith        *string   `json:"id_not_ends_with"`
	IdNotIn              *[]string `json:"id_not_in"`
	IdNotStartsWith      *string   `json:"id_not_starts_with"`
	IdStartsWith         *string   `json:"id_starts_with"`
	Impact               *string   `json:"impact"`
	ImpactContains       *string   `json:"impact_contains"`
	ImpactEndsWith       *string   `json:"impact_ends_with"`
	ImpactGt             *string   `json:"impact_gt"`
	ImpactGte            *string   `json:"impact_gte"`
	ImpactIn             *[]string `json:"impact_in"`
	ImpactLt             *string   `json:"impact_lt"`
	ImpactLte            *string   `json:"impact_lte"`
	ImpactNot            *string   `json:"impact_not"`
	ImpactNotContains    *string   `json:"impact_not_contains"`
	ImpactNotEndsWith    *string   `json:"impact_not_ends_with"`
	ImpactNotIn          *[]string `json:"impact_not_in"`
	ImpactNotStartsWith  *string   `json:"impact_not_starts_with"`
	ImpactStartsWith     *string   `json:"impact_starts_with"`
	Message              *string   `json:"message"`
	MessageContains      *string   `json:"message_contains"`
	MessageEndsWith      *string   `json:"message_ends_with"`
	MessageGt            *string   `json:"message_gt"`
	MessageGte           *string   `json:"message_gte"`
	MessageIn            *[]string `json:"message_in"`
	MessageLt            *string   `json:"message_lt"`
	MessageLte           *string   `json:"message_lte"`
	MessageNot           *string   `json:"message_not"`
	MessageNotContains   *string   `json:"message_not_contains"`
	MessageNotEndsWith   *string   `json:"message_not_ends_with"`
	MessageNotIn         *[]string `json:"message_not_in"`
	MessageNotStartsWith *string   `json:"message_not_starts_with"`
	MessageStartsWith    *string   `json:"message_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	Object               *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleObject)
		AlertRuleObject `yaml:",inline"`
	} `json:"object"`
	ObjectIn  *[]AlertRuleObject `json:"object_in"`
	ObjectNot *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleObject)
		AlertRuleObject `yaml:",inline"`
	} `json:"object_not"`
	ObjectNotIn           *[]AlertRuleObject `json:"object_not_in"`
	Operator              *string            `json:"operator"`
	OperatorContains      *string            `json:"operator_contains"`
	OperatorEndsWith      *string            `json:"operator_ends_with"`
	OperatorGt            *string            `json:"operator_gt"`
	OperatorGte           *string            `json:"operator_gte"`
	OperatorIn            *[]string          `json:"operator_in"`
	OperatorLt            *string            `json:"operator_lt"`
	OperatorLte           *string            `json:"operator_lte"`
	OperatorNot           *string            `json:"operator_not"`
	OperatorNotContains   *string            `json:"operator_not_contains"`
	OperatorNotEndsWith   *string            `json:"operator_not_ends_with"`
	OperatorNotIn         *[]string          `json:"operator_not_in"`
	OperatorNotStartsWith *string            `json:"operator_not_starts_with"`
	OperatorStartsWith    *string            `json:"operator_starts_with"`
	Solution              *string            `json:"solution"`
	SolutionContains      *string            `json:"solution_contains"`
	SolutionEndsWith      *string            `json:"solution_ends_with"`
	SolutionGt            *string            `json:"solution_gt"`
	SolutionGte           *string            `json:"solution_gte"`
	SolutionIn            *[]string          `json:"solution_in"`
	SolutionLt            *string            `json:"solution_lt"`
	SolutionLte           *string            `json:"solution_lte"`
	SolutionNot           *string            `json:"solution_not"`
	SolutionNotContains   *string            `json:"solution_not_contains"`
	SolutionNotEndsWith   *string            `json:"solution_not_ends_with"`
	SolutionNotIn         *[]string          `json:"solution_not_in"`
	SolutionNotStartsWith *string            `json:"solution_not_starts_with"`
	SolutionStartsWith    *string            `json:"solution_starts_with"`
	Unit                  *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleUnit)
		AlertRuleUnit `yaml:",inline"`
	} `json:"unit"`
	UnitIn  *[]AlertRuleUnit `json:"unit_in"`
	UnitNot *struct {
		// Embedded struct due to allOf(#/components/schemas/AlertRuleUnit)
		AlertRuleUnit `yaml:",inline"`
	} `json:"unit_not"`
	UnitNotIn *[]AlertRuleUnit `json:"unit_not_in"`
}

// GlobalRecycleBinUpdationParams defines model for GlobalRecycleBinUpdationParams.
type GlobalRecycleBinUpdationParams struct {
	Enaled bool    `json:"enaled"`
	Retain float64 `json:"retain"`
}

// GlobalSettings defines model for GlobalSettings.
type GlobalSettings struct {
	Id           string `json:"id"`
	VmRecycleBin struct {
		Enabled bool    `json:"enabled"`
		Retain  float64 `json:"retain"`
	} `json:"vm_recycle_bin"`
}

// GlobalSettingsConnection defines model for GlobalSettingsConnection.
type GlobalSettingsConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// GlobalSettingsOrderByInput defines model for GlobalSettingsOrderByInput.
type GlobalSettingsOrderByInput string

// GlobalSettingsWhereInput defines model for GlobalSettingsWhereInput.
type GlobalSettingsWhereInput struct {
	AND             *[]GlobalSettingsWhereInput `json:"AND"`
	NOT             *[]GlobalSettingsWhereInput `json:"NOT"`
	OR              *[]GlobalSettingsWhereInput `json:"OR"`
	Id              *string                     `json:"id"`
	IdContains      *string                     `json:"id_contains"`
	IdEndsWith      *string                     `json:"id_ends_with"`
	IdGt            *string                     `json:"id_gt"`
	IdGte           *string                     `json:"id_gte"`
	IdIn            *[]string                   `json:"id_in"`
	IdLt            *string                     `json:"id_lt"`
	IdLte           *string                     `json:"id_lte"`
	IdNot           *string                     `json:"id_not"`
	IdNotContains   *string                     `json:"id_not_contains"`
	IdNotEndsWith   *string                     `json:"id_not_ends_with"`
	IdNotIn         *[]string                   `json:"id_not_in"`
	IdNotStartsWith *string                     `json:"id_not_starts_with"`
	IdStartsWith    *string                     `json:"id_starts_with"`
}

// Graph defines model for Graph.
type Graph struct {
	Cluster *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Disks *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"disks"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Hosts *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"hosts"`
	Id      string `json:"id"`
	LocalId string `json:"local_id"`
	Luns    *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"luns"`
	MetricCount float64    `json:"metric_count"`
	MetricName  string     `json:"metric_name"`
	MetricType  MetricType `json:"metric_type"`
	Namespaces  *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"namespaces"`
	Network *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"network"`
	Nics *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nics"`
	ResourceType string                 `json:"resource_type"`
	Service      *string                `json:"service"`
	Targets      map[string]interface{} `json:"targets"`
	Title        string                 `json:"title"`
	Type         GraphType              `json:"type"`
	View         struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"view"`
	VmNics *[]struct {
		Id string `json:"id"`
	} `json:"vmNics"`
	VmVolumes *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vmVolumes"`
	Vms *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vms"`
	Witnesses *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"witnesses"`
	Zones *[]struct {
		Id string `json:"id"`
	} `json:"zones"`
}

// GraphConnection defines model for GraphConnection.
type GraphConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// GraphCreationParams defines model for GraphCreationParams.
type GraphCreationParams struct {
	ClusterId    string       `json:"cluster_id"`
	ConnectId    []string     `json:"connect_id"`
	MetricCount  *float64     `json:"metric_count,omitempty"`
	MetricName   string       `json:"metric_name"`
	MetricType   *MetricType  `json:"metric_type,omitempty"`
	Network      *NetworkType `json:"network,omitempty"`
	ResourceType string       `json:"resource_type"`
	Service      *string      `json:"service,omitempty"`
	Title        string       `json:"title"`
	Type         GraphType    `json:"type"`
	ViewId       string       `json:"view_id"`
}

// GraphDeletionParams defines model for GraphDeletionParams.
type GraphDeletionParams struct {
	Where GraphWhereInput `json:"where"`
}

// GraphOrderByInput defines model for GraphOrderByInput.
type GraphOrderByInput string

// GraphType defines model for GraphType.
type GraphType string

// GraphUpdationParams defines model for GraphUpdationParams.
type GraphUpdationParams struct {
	Data *struct {
		Cluster      *ClusterWhereInput  `json:"cluster,omitempty"`
		ConnectId    *[]string           `json:"connect_id,omitempty"`
		Disks        *DiskWhereInput     `json:"disks,omitempty"`
		Hosts        *HostWhereInput     `json:"hosts,omitempty"`
		Luns         *IscsiLunWhereInput `json:"luns,omitempty"`
		MetricCount  *float64            `json:"metric_count,omitempty"`
		MetricName   *string             `json:"metric_name,omitempty"`
		MetricType   *MetricType         `json:"metric_type,omitempty"`
		Network      *NetworkType        `json:"network,omitempty"`
		Nics         *NicWhereInput      `json:"nics,omitempty"`
		ResourceType *string             `json:"resource_type,omitempty"`
		Service      *string             `json:"service,omitempty"`
		Title        *string             `json:"title,omitempty"`
		Type         *GraphType          `json:"type,omitempty"`
		VmNics       *VmNicWhereInput    `json:"vmNics,omitempty"`
		VmVolumes    *VmVolumeWhereInput `json:"vmVolumes,omitempty"`
		Vms          *VmWhereInput       `json:"vms,omitempty"`
	} `json:"data,omitempty"`
	Where GraphWhereInput `json:"where"`
}

// GraphWhereInput defines model for GraphWhereInput.
type GraphWhereInput struct {
	AND     *[]GraphWhereInput `json:"AND"`
	NOT     *[]GraphWhereInput `json:"NOT"`
	OR      *[]GraphWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	DisksEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_every"`
	DisksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_none"`
	DisksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_some"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	HostsEvery             *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_every"`
	HostsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_none"`
	HostsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_some"`
	Id                   *string   `json:"id"`
	IdContains           *string   `json:"id_contains"`
	IdEndsWith           *string   `json:"id_ends_with"`
	IdGt                 *string   `json:"id_gt"`
	IdGte                *string   `json:"id_gte"`
	IdIn                 *[]string `json:"id_in"`
	IdLt                 *string   `json:"id_lt"`
	IdLte                *string   `json:"id_lte"`
	IdNot                *string   `json:"id_not"`
	IdNotContains        *string   `json:"id_not_contains"`
	IdNotEndsWith        *string   `json:"id_not_ends_with"`
	IdNotIn              *[]string `json:"id_not_in"`
	IdNotStartsWith      *string   `json:"id_not_starts_with"`
	IdStartsWith         *string   `json:"id_starts_with"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	LunsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"luns_every"`
	LunsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"luns_none"`
	LunsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"luns_some"`
	MetricCount             *float64   `json:"metric_count"`
	MetricCountGt           *float64   `json:"metric_count_gt"`
	MetricCountGte          *float64   `json:"metric_count_gte"`
	MetricCountIn           *[]float64 `json:"metric_count_in"`
	MetricCountLt           *float64   `json:"metric_count_lt"`
	MetricCountLte          *float64   `json:"metric_count_lte"`
	MetricCountNot          *float64   `json:"metric_count_not"`
	MetricCountNotIn        *[]float64 `json:"metric_count_not_in"`
	MetricName              *string    `json:"metric_name"`
	MetricNameContains      *string    `json:"metric_name_contains"`
	MetricNameEndsWith      *string    `json:"metric_name_ends_with"`
	MetricNameGt            *string    `json:"metric_name_gt"`
	MetricNameGte           *string    `json:"metric_name_gte"`
	MetricNameIn            *[]string  `json:"metric_name_in"`
	MetricNameLt            *string    `json:"metric_name_lt"`
	MetricNameLte           *string    `json:"metric_name_lte"`
	MetricNameNot           *string    `json:"metric_name_not"`
	MetricNameNotContains   *string    `json:"metric_name_not_contains"`
	MetricNameNotEndsWith   *string    `json:"metric_name_not_ends_with"`
	MetricNameNotIn         *[]string  `json:"metric_name_not_in"`
	MetricNameNotStartsWith *string    `json:"metric_name_not_starts_with"`
	MetricNameStartsWith    *string    `json:"metric_name_starts_with"`
	MetricType              *struct {
		// Embedded struct due to allOf(#/components/schemas/MetricType)
		MetricType `yaml:",inline"`
	} `json:"metric_type"`
	MetricTypeIn  *[]MetricType `json:"metric_type_in"`
	MetricTypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/MetricType)
		MetricType `yaml:",inline"`
	} `json:"metric_type_not"`
	MetricTypeNotIn *[]MetricType `json:"metric_type_not_in"`
	NamespacesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_every"`
	NamespacesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_none"`
	NamespacesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_some"`
	Network *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"network"`
	NetworkIn  *[]NetworkType `json:"network_in"`
	NetworkNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"network_not"`
	NetworkNotIn *[]NetworkType `json:"network_not_in"`
	NicsEvery    *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_every"`
	NicsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_none"`
	NicsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_some"`
	ResourceType              *string   `json:"resource_type"`
	ResourceTypeContains      *string   `json:"resource_type_contains"`
	ResourceTypeEndsWith      *string   `json:"resource_type_ends_with"`
	ResourceTypeGt            *string   `json:"resource_type_gt"`
	ResourceTypeGte           *string   `json:"resource_type_gte"`
	ResourceTypeIn            *[]string `json:"resource_type_in"`
	ResourceTypeLt            *string   `json:"resource_type_lt"`
	ResourceTypeLte           *string   `json:"resource_type_lte"`
	ResourceTypeNot           *string   `json:"resource_type_not"`
	ResourceTypeNotContains   *string   `json:"resource_type_not_contains"`
	ResourceTypeNotEndsWith   *string   `json:"resource_type_not_ends_with"`
	ResourceTypeNotIn         *[]string `json:"resource_type_not_in"`
	ResourceTypeNotStartsWith *string   `json:"resource_type_not_starts_with"`
	ResourceTypeStartsWith    *string   `json:"resource_type_starts_with"`
	Service                   *string   `json:"service"`
	ServiceContains           *string   `json:"service_contains"`
	ServiceEndsWith           *string   `json:"service_ends_with"`
	ServiceGt                 *string   `json:"service_gt"`
	ServiceGte                *string   `json:"service_gte"`
	ServiceIn                 *[]string `json:"service_in"`
	ServiceLt                 *string   `json:"service_lt"`
	ServiceLte                *string   `json:"service_lte"`
	ServiceNot                *string   `json:"service_not"`
	ServiceNotContains        *string   `json:"service_not_contains"`
	ServiceNotEndsWith        *string   `json:"service_not_ends_with"`
	ServiceNotIn              *[]string `json:"service_not_in"`
	ServiceNotStartsWith      *string   `json:"service_not_starts_with"`
	ServiceStartsWith         *string   `json:"service_starts_with"`
	Title                     *string   `json:"title"`
	TitleContains             *string   `json:"title_contains"`
	TitleEndsWith             *string   `json:"title_ends_with"`
	TitleGt                   *string   `json:"title_gt"`
	TitleGte                  *string   `json:"title_gte"`
	TitleIn                   *[]string `json:"title_in"`
	TitleLt                   *string   `json:"title_lt"`
	TitleLte                  *string   `json:"title_lte"`
	TitleNot                  *string   `json:"title_not"`
	TitleNotContains          *string   `json:"title_not_contains"`
	TitleNotEndsWith          *string   `json:"title_not_ends_with"`
	TitleNotIn                *[]string `json:"title_not_in"`
	TitleNotStartsWith        *string   `json:"title_not_starts_with"`
	TitleStartsWith           *string   `json:"title_starts_with"`
	Type                      *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphType)
		GraphType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]GraphType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphType)
		GraphType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn *[]GraphType `json:"type_not_in"`
	View      *struct {
		// Embedded struct due to allOf(#/components/schemas/ViewWhereInput)
		ViewWhereInput `yaml:",inline"`
	} `json:"view"`
	VmNicsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vmNics_every"`
	VmNicsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vmNics_none"`
	VmNicsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vmNics_some"`
	VmVolumesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"vmVolumes_every"`
	VmVolumesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"vmVolumes_none"`
	VmVolumesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"vmVolumes_some"`
	VmsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_every"`
	VmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_none"`
	VmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_some"`
	WitnessesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/WitnessWhereInput)
		WitnessWhereInput `yaml:",inline"`
	} `json:"witnesses_every"`
	WitnessesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/WitnessWhereInput)
		WitnessWhereInput `yaml:",inline"`
	} `json:"witnesses_none"`
	WitnessesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/WitnessWhereInput)
		WitnessWhereInput `yaml:",inline"`
	} `json:"witnesses_some"`
	ZonesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"zones_every"`
	ZonesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"zones_none"`
	ZonesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"zones_some"`
}

// Host defines model for Host.
type Host struct {
	AccessIp               *string `json:"access_ip"`
	AllocatableMemoryBytes float64 `json:"allocatable_memory_bytes"`
	ChunkId                string  `json:"chunk_id"`
	Cluster                struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	CompatibleCpuModels []string  `json:"compatible_cpu_models"`
	CpuBrand            string    `json:"cpu_brand"`
	CpuFanSpeed         []float64 `json:"cpu_fan_speed"`
	CpuFanSpeedUnit     *struct {
		// Embedded struct due to allOf(#/components/schemas/CpuFanSpeedUnit)
		CpuFanSpeedUnit `yaml:",inline"`
	} `json:"cpu_fan_speed_unit"`
	CpuHzPerCore          float64   `json:"cpu_hz_per_core"`
	CpuModel              string    `json:"cpu_model"`
	CpuTemperatureCelsius []float64 `json:"cpu_temperature_celsius"`
	DataIp                *string   `json:"data_ip"`
	Disks                 *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"disks"`
	FailureDataSpace float64 `json:"failure_data_space"`
	HddDataCapacity  float64 `json:"hdd_data_capacity"`
	HddDiskCount     float64 `json:"hdd_disk_count"`
	Id               string  `json:"id"`
	Ipmi             *struct {
		Id string `json:"id"`
	} `json:"ipmi"`
	IsOsInRaid1 *bool `json:"is_os_in_raid1"`
	Labels      *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId              string  `json:"local_id"`
	LsmCapDiskSafeUmount bool    `json:"lsm_cap_disk_safe_umount"`
	ManagementIp         string  `json:"management_ip"`
	Model                string  `json:"model"`
	Name                 string  `json:"name"`
	NestedVirtualization bool    `json:"nested_virtualization"`
	NicCount             float64 `json:"nic_count"`
	Nics                 *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nics"`
	NodeTopoLocalId  *string `json:"node_topo_local_id"`
	OsMemoryBytes    float64 `json:"os_memory_bytes"`
	OsVersion        *string `json:"os_version"`
	PmemDimmCapacity float64 `json:"pmem_dimm_capacity"`
	PmemDimmCount    float64 `json:"pmem_dimm_count"`
	PmemDimms        *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"pmem_dimms"`
	PmemDiskCount             float64    `json:"pmem_disk_count"`
	ProvisionedCpuCores       float64    `json:"provisioned_cpu_cores"`
	ProvisionedMemoryBytes    float64    `json:"provisioned_memory_bytes"`
	RunningPauseVmMemoryBytes float64    `json:"running_pause_vm_memory_bytes"`
	RunningVmNum              *float64   `json:"running_vm_num"`
	ScvmCpu                   *float64   `json:"scvm_cpu"`
	ScvmMemory                *float64   `json:"scvm_memory"`
	ScvmName                  *string    `json:"scvm_name"`
	Serial                    *string    `json:"serial"`
	SsdDataCapacity           float64    `json:"ssd_data_capacity"`
	SsdDiskCount              float64    `json:"ssd_disk_count"`
	State                     HostState  `json:"state"`
	Status                    HostStatus `json:"status"`
	StoppedVmNum              *float64   `json:"stopped_vm_num"`
	SuspendedVmNum            *float64   `json:"suspended_vm_num"`
	TotalCacheCapacity        *float64   `json:"total_cache_capacity"`
	TotalCpuCores             float64    `json:"total_cpu_cores"`
	TotalCpuHz                float64    `json:"total_cpu_hz"`
	TotalDataCapacity         float64    `json:"total_data_capacity"`
	TotalMemoryBytes          float64    `json:"total_memory_bytes"`
	UsbDevices                *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"usb_devices"`
	UsedCpuHz       *float64 `json:"used_cpu_hz"`
	UsedDataSpace   float64  `json:"used_data_space"`
	UsedMemoryBytes *float64 `json:"used_memory_bytes"`
	VmNum           *float64 `json:"vm_num"`
	VmotionIp       *string  `json:"vmotion_ip"`
	Vms             *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vms"`
	VsphereEsxiAccount *struct {
		Id string `json:"id"`
	} `json:"vsphereEsxiAccount"`
	WithFasterSsdAsCache *bool `json:"with_faster_ssd_as_cache"`
	Zone                 *struct {
		Id string `json:"id"`
	} `json:"zone"`
}

// HostBatchCreateDiskInput defines model for HostBatchCreateDiskInput.
type HostBatchCreateDiskInput struct {
	Drive    string             `json:"drive"`
	Function *MaybeDiskFunction `json:"function"`
	Type     *MaybeDiskType     `json:"type"`
}

// HostBatchCreateIfaceFunction defines model for HostBatchCreateIfaceFunction.
type HostBatchCreateIfaceFunction string

// HostBatchCreateIfaceInput defines model for HostBatchCreateIfaceInput.
type HostBatchCreateIfaceInput struct {
	Function HostBatchCreateIfaceFunction `json:"function"`
	Ip       string                       `json:"ip"`
	Name     []string                     `json:"name"`
	Netmask  string                       `json:"netmask"`
}

// HostBatchCreateIpmiInput defines model for HostBatchCreateIpmiInput.
type HostBatchCreateIpmiInput struct {
	Ip       string `json:"ip"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// HostConnection defines model for HostConnection.
type HostConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// HostCreationParams defines model for HostCreationParams.
type HostCreationParams struct {
	ClusterId string `json:"cluster_id"`
	Data      []struct {
		Disks            []HostBatchCreateDiskInput  `json:"disks"`
		HostIp           string                      `json:"host_ip"`
		HostUuid         string                      `json:"host_uuid"`
		Hostname         string                      `json:"hostname"`
		Ifaces           []HostBatchCreateIfaceInput `json:"ifaces"`
		Ipmi             *HostBatchCreateIpmiInput   `json:"ipmi,omitempty"`
		PlatformIp       *string                     `json:"platform_ip,omitempty"`
		PlatformPassword *string                     `json:"platform_password,omitempty"`
		PlatformUsername *string                     `json:"platform_username,omitempty"`
	} `json:"data"`
}

// HostOrderByInput defines model for HostOrderByInput.
type HostOrderByInput string

// HostState defines model for HostState.
type HostState string

// HostStatus defines model for HostStatus.
type HostStatus string

// HostUpdationParams defines model for HostUpdationParams.
type HostUpdationParams struct {
	Data struct {
		Ipmi     *HostBatchCreateIpmiInput `json:"ipmi,omitempty"`
		Name     *string                   `json:"name,omitempty"`
		ScvmName *string                   `json:"scvm_name,omitempty"`
	} `json:"data"`
	Where HostWhereInput `json:"where"`
}

// HostWhereInput defines model for HostWhereInput.
type HostWhereInput struct {
	AND                         *[]HostWhereInput `json:"AND"`
	NOT                         *[]HostWhereInput `json:"NOT"`
	OR                          *[]HostWhereInput `json:"OR"`
	AccessIp                    *string           `json:"access_ip"`
	AccessIpContains            *string           `json:"access_ip_contains"`
	AccessIpEndsWith            *string           `json:"access_ip_ends_with"`
	AccessIpGt                  *string           `json:"access_ip_gt"`
	AccessIpGte                 *string           `json:"access_ip_gte"`
	AccessIpIn                  *[]string         `json:"access_ip_in"`
	AccessIpLt                  *string           `json:"access_ip_lt"`
	AccessIpLte                 *string           `json:"access_ip_lte"`
	AccessIpNot                 *string           `json:"access_ip_not"`
	AccessIpNotContains         *string           `json:"access_ip_not_contains"`
	AccessIpNotEndsWith         *string           `json:"access_ip_not_ends_with"`
	AccessIpNotIn               *[]string         `json:"access_ip_not_in"`
	AccessIpNotStartsWith       *string           `json:"access_ip_not_starts_with"`
	AccessIpStartsWith          *string           `json:"access_ip_starts_with"`
	AllocatableMemoryBytes      *float64          `json:"allocatable_memory_bytes"`
	AllocatableMemoryBytesGt    *float64          `json:"allocatable_memory_bytes_gt"`
	AllocatableMemoryBytesGte   *float64          `json:"allocatable_memory_bytes_gte"`
	AllocatableMemoryBytesIn    *[]float64        `json:"allocatable_memory_bytes_in"`
	AllocatableMemoryBytesLt    *float64          `json:"allocatable_memory_bytes_lt"`
	AllocatableMemoryBytesLte   *float64          `json:"allocatable_memory_bytes_lte"`
	AllocatableMemoryBytesNot   *float64          `json:"allocatable_memory_bytes_not"`
	AllocatableMemoryBytesNotIn *[]float64        `json:"allocatable_memory_bytes_not_in"`
	ChunkId                     *string           `json:"chunk_id"`
	ChunkIdContains             *string           `json:"chunk_id_contains"`
	ChunkIdEndsWith             *string           `json:"chunk_id_ends_with"`
	ChunkIdGt                   *string           `json:"chunk_id_gt"`
	ChunkIdGte                  *string           `json:"chunk_id_gte"`
	ChunkIdIn                   *[]string         `json:"chunk_id_in"`
	ChunkIdLt                   *string           `json:"chunk_id_lt"`
	ChunkIdLte                  *string           `json:"chunk_id_lte"`
	ChunkIdNot                  *string           `json:"chunk_id_not"`
	ChunkIdNotContains          *string           `json:"chunk_id_not_contains"`
	ChunkIdNotEndsWith          *string           `json:"chunk_id_not_ends_with"`
	ChunkIdNotIn                *[]string         `json:"chunk_id_not_in"`
	ChunkIdNotStartsWith        *string           `json:"chunk_id_not_starts_with"`
	ChunkIdStartsWith           *string           `json:"chunk_id_starts_with"`
	Cluster                     *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	CpuBrand              *string   `json:"cpu_brand"`
	CpuBrandContains      *string   `json:"cpu_brand_contains"`
	CpuBrandEndsWith      *string   `json:"cpu_brand_ends_with"`
	CpuBrandGt            *string   `json:"cpu_brand_gt"`
	CpuBrandGte           *string   `json:"cpu_brand_gte"`
	CpuBrandIn            *[]string `json:"cpu_brand_in"`
	CpuBrandLt            *string   `json:"cpu_brand_lt"`
	CpuBrandLte           *string   `json:"cpu_brand_lte"`
	CpuBrandNot           *string   `json:"cpu_brand_not"`
	CpuBrandNotContains   *string   `json:"cpu_brand_not_contains"`
	CpuBrandNotEndsWith   *string   `json:"cpu_brand_not_ends_with"`
	CpuBrandNotIn         *[]string `json:"cpu_brand_not_in"`
	CpuBrandNotStartsWith *string   `json:"cpu_brand_not_starts_with"`
	CpuBrandStartsWith    *string   `json:"cpu_brand_starts_with"`
	CpuFanSpeedUnit       *struct {
		// Embedded struct due to allOf(#/components/schemas/CpuFanSpeedUnit)
		CpuFanSpeedUnit `yaml:",inline"`
	} `json:"cpu_fan_speed_unit"`
	CpuFanSpeedUnitIn  *[]CpuFanSpeedUnit `json:"cpu_fan_speed_unit_in"`
	CpuFanSpeedUnitNot *struct {
		// Embedded struct due to allOf(#/components/schemas/CpuFanSpeedUnit)
		CpuFanSpeedUnit `yaml:",inline"`
	} `json:"cpu_fan_speed_unit_not"`
	CpuFanSpeedUnitNotIn  *[]CpuFanSpeedUnit `json:"cpu_fan_speed_unit_not_in"`
	CpuHzPerCore          *float64           `json:"cpu_hz_per_core"`
	CpuHzPerCoreGt        *float64           `json:"cpu_hz_per_core_gt"`
	CpuHzPerCoreGte       *float64           `json:"cpu_hz_per_core_gte"`
	CpuHzPerCoreIn        *[]float64         `json:"cpu_hz_per_core_in"`
	CpuHzPerCoreLt        *float64           `json:"cpu_hz_per_core_lt"`
	CpuHzPerCoreLte       *float64           `json:"cpu_hz_per_core_lte"`
	CpuHzPerCoreNot       *float64           `json:"cpu_hz_per_core_not"`
	CpuHzPerCoreNotIn     *[]float64         `json:"cpu_hz_per_core_not_in"`
	CpuModel              *string            `json:"cpu_model"`
	CpuModelContains      *string            `json:"cpu_model_contains"`
	CpuModelEndsWith      *string            `json:"cpu_model_ends_with"`
	CpuModelGt            *string            `json:"cpu_model_gt"`
	CpuModelGte           *string            `json:"cpu_model_gte"`
	CpuModelIn            *[]string          `json:"cpu_model_in"`
	CpuModelLt            *string            `json:"cpu_model_lt"`
	CpuModelLte           *string            `json:"cpu_model_lte"`
	CpuModelNot           *string            `json:"cpu_model_not"`
	CpuModelNotContains   *string            `json:"cpu_model_not_contains"`
	CpuModelNotEndsWith   *string            `json:"cpu_model_not_ends_with"`
	CpuModelNotIn         *[]string          `json:"cpu_model_not_in"`
	CpuModelNotStartsWith *string            `json:"cpu_model_not_starts_with"`
	CpuModelStartsWith    *string            `json:"cpu_model_starts_with"`
	DataIp                *string            `json:"data_ip"`
	DataIpContains        *string            `json:"data_ip_contains"`
	DataIpEndsWith        *string            `json:"data_ip_ends_with"`
	DataIpGt              *string            `json:"data_ip_gt"`
	DataIpGte             *string            `json:"data_ip_gte"`
	DataIpIn              *[]string          `json:"data_ip_in"`
	DataIpLt              *string            `json:"data_ip_lt"`
	DataIpLte             *string            `json:"data_ip_lte"`
	DataIpNot             *string            `json:"data_ip_not"`
	DataIpNotContains     *string            `json:"data_ip_not_contains"`
	DataIpNotEndsWith     *string            `json:"data_ip_not_ends_with"`
	DataIpNotIn           *[]string          `json:"data_ip_not_in"`
	DataIpNotStartsWith   *string            `json:"data_ip_not_starts_with"`
	DataIpStartsWith      *string            `json:"data_ip_starts_with"`
	DisksEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_every"`
	DisksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_none"`
	DisksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_some"`
	FailureDataSpace      *float64   `json:"failure_data_space"`
	FailureDataSpaceGt    *float64   `json:"failure_data_space_gt"`
	FailureDataSpaceGte   *float64   `json:"failure_data_space_gte"`
	FailureDataSpaceIn    *[]float64 `json:"failure_data_space_in"`
	FailureDataSpaceLt    *float64   `json:"failure_data_space_lt"`
	FailureDataSpaceLte   *float64   `json:"failure_data_space_lte"`
	FailureDataSpaceNot   *float64   `json:"failure_data_space_not"`
	FailureDataSpaceNotIn *[]float64 `json:"failure_data_space_not_in"`
	HddDataCapacity       *float64   `json:"hdd_data_capacity"`
	HddDataCapacityGt     *float64   `json:"hdd_data_capacity_gt"`
	HddDataCapacityGte    *float64   `json:"hdd_data_capacity_gte"`
	HddDataCapacityIn     *[]float64 `json:"hdd_data_capacity_in"`
	HddDataCapacityLt     *float64   `json:"hdd_data_capacity_lt"`
	HddDataCapacityLte    *float64   `json:"hdd_data_capacity_lte"`
	HddDataCapacityNot    *float64   `json:"hdd_data_capacity_not"`
	HddDataCapacityNotIn  *[]float64 `json:"hdd_data_capacity_not_in"`
	HddDiskCount          *float64   `json:"hdd_disk_count"`
	HddDiskCountGt        *float64   `json:"hdd_disk_count_gt"`
	HddDiskCountGte       *float64   `json:"hdd_disk_count_gte"`
	HddDiskCountIn        *[]float64 `json:"hdd_disk_count_in"`
	HddDiskCountLt        *float64   `json:"hdd_disk_count_lt"`
	HddDiskCountLte       *float64   `json:"hdd_disk_count_lte"`
	HddDiskCountNot       *float64   `json:"hdd_disk_count_not"`
	HddDiskCountNotIn     *[]float64 `json:"hdd_disk_count_not_in"`
	Id                    *string    `json:"id"`
	IdContains            *string    `json:"id_contains"`
	IdEndsWith            *string    `json:"id_ends_with"`
	IdGt                  *string    `json:"id_gt"`
	IdGte                 *string    `json:"id_gte"`
	IdIn                  *[]string  `json:"id_in"`
	IdLt                  *string    `json:"id_lt"`
	IdLte                 *string    `json:"id_lte"`
	IdNot                 *string    `json:"id_not"`
	IdNotContains         *string    `json:"id_not_contains"`
	IdNotEndsWith         *string    `json:"id_not_ends_with"`
	IdNotIn               *[]string  `json:"id_not_in"`
	IdNotStartsWith       *string    `json:"id_not_starts_with"`
	IdStartsWith          *string    `json:"id_starts_with"`
	Ipmi                  *struct {
		// Embedded struct due to allOf(#/components/schemas/IpmiWhereInput)
		IpmiWhereInput `yaml:",inline"`
	} `json:"ipmi"`
	IsOsInRaid1    *bool `json:"is_os_in_raid1"`
	IsOsInRaid1Not *bool `json:"is_os_in_raid1_not"`
	LabelsEvery    *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId                   *string    `json:"local_id"`
	LocalIdContains           *string    `json:"local_id_contains"`
	LocalIdEndsWith           *string    `json:"local_id_ends_with"`
	LocalIdGt                 *string    `json:"local_id_gt"`
	LocalIdGte                *string    `json:"local_id_gte"`
	LocalIdIn                 *[]string  `json:"local_id_in"`
	LocalIdLt                 *string    `json:"local_id_lt"`
	LocalIdLte                *string    `json:"local_id_lte"`
	LocalIdNot                *string    `json:"local_id_not"`
	LocalIdNotContains        *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith        *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn              *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith      *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith         *string    `json:"local_id_starts_with"`
	LsmCapDiskSafeUmount      *bool      `json:"lsm_cap_disk_safe_umount"`
	LsmCapDiskSafeUmountNot   *bool      `json:"lsm_cap_disk_safe_umount_not"`
	ManagementIp              *string    `json:"management_ip"`
	ManagementIpContains      *string    `json:"management_ip_contains"`
	ManagementIpEndsWith      *string    `json:"management_ip_ends_with"`
	ManagementIpGt            *string    `json:"management_ip_gt"`
	ManagementIpGte           *string    `json:"management_ip_gte"`
	ManagementIpIn            *[]string  `json:"management_ip_in"`
	ManagementIpLt            *string    `json:"management_ip_lt"`
	ManagementIpLte           *string    `json:"management_ip_lte"`
	ManagementIpNot           *string    `json:"management_ip_not"`
	ManagementIpNotContains   *string    `json:"management_ip_not_contains"`
	ManagementIpNotEndsWith   *string    `json:"management_ip_not_ends_with"`
	ManagementIpNotIn         *[]string  `json:"management_ip_not_in"`
	ManagementIpNotStartsWith *string    `json:"management_ip_not_starts_with"`
	ManagementIpStartsWith    *string    `json:"management_ip_starts_with"`
	Model                     *string    `json:"model"`
	ModelContains             *string    `json:"model_contains"`
	ModelEndsWith             *string    `json:"model_ends_with"`
	ModelGt                   *string    `json:"model_gt"`
	ModelGte                  *string    `json:"model_gte"`
	ModelIn                   *[]string  `json:"model_in"`
	ModelLt                   *string    `json:"model_lt"`
	ModelLte                  *string    `json:"model_lte"`
	ModelNot                  *string    `json:"model_not"`
	ModelNotContains          *string    `json:"model_not_contains"`
	ModelNotEndsWith          *string    `json:"model_not_ends_with"`
	ModelNotIn                *[]string  `json:"model_not_in"`
	ModelNotStartsWith        *string    `json:"model_not_starts_with"`
	ModelStartsWith           *string    `json:"model_starts_with"`
	Name                      *string    `json:"name"`
	NameContains              *string    `json:"name_contains"`
	NameEndsWith              *string    `json:"name_ends_with"`
	NameGt                    *string    `json:"name_gt"`
	NameGte                   *string    `json:"name_gte"`
	NameIn                    *[]string  `json:"name_in"`
	NameLt                    *string    `json:"name_lt"`
	NameLte                   *string    `json:"name_lte"`
	NameNot                   *string    `json:"name_not"`
	NameNotContains           *string    `json:"name_not_contains"`
	NameNotEndsWith           *string    `json:"name_not_ends_with"`
	NameNotIn                 *[]string  `json:"name_not_in"`
	NameNotStartsWith         *string    `json:"name_not_starts_with"`
	NameStartsWith            *string    `json:"name_starts_with"`
	NestedVirtualization      *bool      `json:"nested_virtualization"`
	NestedVirtualizationNot   *bool      `json:"nested_virtualization_not"`
	NicCount                  *float64   `json:"nic_count"`
	NicCountGt                *float64   `json:"nic_count_gt"`
	NicCountGte               *float64   `json:"nic_count_gte"`
	NicCountIn                *[]float64 `json:"nic_count_in"`
	NicCountLt                *float64   `json:"nic_count_lt"`
	NicCountLte               *float64   `json:"nic_count_lte"`
	NicCountNot               *float64   `json:"nic_count_not"`
	NicCountNotIn             *[]float64 `json:"nic_count_not_in"`
	NicsEvery                 *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_every"`
	NicsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_none"`
	NicsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_some"`
	NodeTopoLocalId              *string    `json:"node_topo_local_id"`
	NodeTopoLocalIdContains      *string    `json:"node_topo_local_id_contains"`
	NodeTopoLocalIdEndsWith      *string    `json:"node_topo_local_id_ends_with"`
	NodeTopoLocalIdGt            *string    `json:"node_topo_local_id_gt"`
	NodeTopoLocalIdGte           *string    `json:"node_topo_local_id_gte"`
	NodeTopoLocalIdIn            *[]string  `json:"node_topo_local_id_in"`
	NodeTopoLocalIdLt            *string    `json:"node_topo_local_id_lt"`
	NodeTopoLocalIdLte           *string    `json:"node_topo_local_id_lte"`
	NodeTopoLocalIdNot           *string    `json:"node_topo_local_id_not"`
	NodeTopoLocalIdNotContains   *string    `json:"node_topo_local_id_not_contains"`
	NodeTopoLocalIdNotEndsWith   *string    `json:"node_topo_local_id_not_ends_with"`
	NodeTopoLocalIdNotIn         *[]string  `json:"node_topo_local_id_not_in"`
	NodeTopoLocalIdNotStartsWith *string    `json:"node_topo_local_id_not_starts_with"`
	NodeTopoLocalIdStartsWith    *string    `json:"node_topo_local_id_starts_with"`
	OsMemoryBytes                *float64   `json:"os_memory_bytes"`
	OsMemoryBytesGt              *float64   `json:"os_memory_bytes_gt"`
	OsMemoryBytesGte             *float64   `json:"os_memory_bytes_gte"`
	OsMemoryBytesIn              *[]float64 `json:"os_memory_bytes_in"`
	OsMemoryBytesLt              *float64   `json:"os_memory_bytes_lt"`
	OsMemoryBytesLte             *float64   `json:"os_memory_bytes_lte"`
	OsMemoryBytesNot             *float64   `json:"os_memory_bytes_not"`
	OsMemoryBytesNotIn           *[]float64 `json:"os_memory_bytes_not_in"`
	OsVersion                    *string    `json:"os_version"`
	OsVersionContains            *string    `json:"os_version_contains"`
	OsVersionEndsWith            *string    `json:"os_version_ends_with"`
	OsVersionGt                  *string    `json:"os_version_gt"`
	OsVersionGte                 *string    `json:"os_version_gte"`
	OsVersionIn                  *[]string  `json:"os_version_in"`
	OsVersionLt                  *string    `json:"os_version_lt"`
	OsVersionLte                 *string    `json:"os_version_lte"`
	OsVersionNot                 *string    `json:"os_version_not"`
	OsVersionNotContains         *string    `json:"os_version_not_contains"`
	OsVersionNotEndsWith         *string    `json:"os_version_not_ends_with"`
	OsVersionNotIn               *[]string  `json:"os_version_not_in"`
	OsVersionNotStartsWith       *string    `json:"os_version_not_starts_with"`
	OsVersionStartsWith          *string    `json:"os_version_starts_with"`
	PmemDimmCapacity             *float64   `json:"pmem_dimm_capacity"`
	PmemDimmCapacityGt           *float64   `json:"pmem_dimm_capacity_gt"`
	PmemDimmCapacityGte          *float64   `json:"pmem_dimm_capacity_gte"`
	PmemDimmCapacityIn           *[]float64 `json:"pmem_dimm_capacity_in"`
	PmemDimmCapacityLt           *float64   `json:"pmem_dimm_capacity_lt"`
	PmemDimmCapacityLte          *float64   `json:"pmem_dimm_capacity_lte"`
	PmemDimmCapacityNot          *float64   `json:"pmem_dimm_capacity_not"`
	PmemDimmCapacityNotIn        *[]float64 `json:"pmem_dimm_capacity_not_in"`
	PmemDimmCount                *float64   `json:"pmem_dimm_count"`
	PmemDimmCountGt              *float64   `json:"pmem_dimm_count_gt"`
	PmemDimmCountGte             *float64   `json:"pmem_dimm_count_gte"`
	PmemDimmCountIn              *[]float64 `json:"pmem_dimm_count_in"`
	PmemDimmCountLt              *float64   `json:"pmem_dimm_count_lt"`
	PmemDimmCountLte             *float64   `json:"pmem_dimm_count_lte"`
	PmemDimmCountNot             *float64   `json:"pmem_dimm_count_not"`
	PmemDimmCountNotIn           *[]float64 `json:"pmem_dimm_count_not_in"`
	PmemDimmsEvery               *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmWhereInput)
		PmemDimmWhereInput `yaml:",inline"`
	} `json:"pmem_dimms_every"`
	PmemDimmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmWhereInput)
		PmemDimmWhereInput `yaml:",inline"`
	} `json:"pmem_dimms_none"`
	PmemDimmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/PmemDimmWhereInput)
		PmemDimmWhereInput `yaml:",inline"`
	} `json:"pmem_dimms_some"`
	PmemDiskCount                  *float64   `json:"pmem_disk_count"`
	PmemDiskCountGt                *float64   `json:"pmem_disk_count_gt"`
	PmemDiskCountGte               *float64   `json:"pmem_disk_count_gte"`
	PmemDiskCountIn                *[]float64 `json:"pmem_disk_count_in"`
	PmemDiskCountLt                *float64   `json:"pmem_disk_count_lt"`
	PmemDiskCountLte               *float64   `json:"pmem_disk_count_lte"`
	PmemDiskCountNot               *float64   `json:"pmem_disk_count_not"`
	PmemDiskCountNotIn             *[]float64 `json:"pmem_disk_count_not_in"`
	ProvisionedCpuCores            *float64   `json:"provisioned_cpu_cores"`
	ProvisionedCpuCoresGt          *float64   `json:"provisioned_cpu_cores_gt"`
	ProvisionedCpuCoresGte         *float64   `json:"provisioned_cpu_cores_gte"`
	ProvisionedCpuCoresIn          *[]float64 `json:"provisioned_cpu_cores_in"`
	ProvisionedCpuCoresLt          *float64   `json:"provisioned_cpu_cores_lt"`
	ProvisionedCpuCoresLte         *float64   `json:"provisioned_cpu_cores_lte"`
	ProvisionedCpuCoresNot         *float64   `json:"provisioned_cpu_cores_not"`
	ProvisionedCpuCoresNotIn       *[]float64 `json:"provisioned_cpu_cores_not_in"`
	ProvisionedMemoryBytes         *float64   `json:"provisioned_memory_bytes"`
	ProvisionedMemoryBytesGt       *float64   `json:"provisioned_memory_bytes_gt"`
	ProvisionedMemoryBytesGte      *float64   `json:"provisioned_memory_bytes_gte"`
	ProvisionedMemoryBytesIn       *[]float64 `json:"provisioned_memory_bytes_in"`
	ProvisionedMemoryBytesLt       *float64   `json:"provisioned_memory_bytes_lt"`
	ProvisionedMemoryBytesLte      *float64   `json:"provisioned_memory_bytes_lte"`
	ProvisionedMemoryBytesNot      *float64   `json:"provisioned_memory_bytes_not"`
	ProvisionedMemoryBytesNotIn    *[]float64 `json:"provisioned_memory_bytes_not_in"`
	RunningPauseVmMemoryBytes      *float64   `json:"running_pause_vm_memory_bytes"`
	RunningPauseVmMemoryBytesGt    *float64   `json:"running_pause_vm_memory_bytes_gt"`
	RunningPauseVmMemoryBytesGte   *float64   `json:"running_pause_vm_memory_bytes_gte"`
	RunningPauseVmMemoryBytesIn    *[]float64 `json:"running_pause_vm_memory_bytes_in"`
	RunningPauseVmMemoryBytesLt    *float64   `json:"running_pause_vm_memory_bytes_lt"`
	RunningPauseVmMemoryBytesLte   *float64   `json:"running_pause_vm_memory_bytes_lte"`
	RunningPauseVmMemoryBytesNot   *float64   `json:"running_pause_vm_memory_bytes_not"`
	RunningPauseVmMemoryBytesNotIn *[]float64 `json:"running_pause_vm_memory_bytes_not_in"`
	RunningVmNum                   *float64   `json:"running_vm_num"`
	RunningVmNumGt                 *float64   `json:"running_vm_num_gt"`
	RunningVmNumGte                *float64   `json:"running_vm_num_gte"`
	RunningVmNumIn                 *[]float64 `json:"running_vm_num_in"`
	RunningVmNumLt                 *float64   `json:"running_vm_num_lt"`
	RunningVmNumLte                *float64   `json:"running_vm_num_lte"`
	RunningVmNumNot                *float64   `json:"running_vm_num_not"`
	RunningVmNumNotIn              *[]float64 `json:"running_vm_num_not_in"`
	ScvmCpu                        *float64   `json:"scvm_cpu"`
	ScvmCpuGt                      *float64   `json:"scvm_cpu_gt"`
	ScvmCpuGte                     *float64   `json:"scvm_cpu_gte"`
	ScvmCpuIn                      *[]float64 `json:"scvm_cpu_in"`
	ScvmCpuLt                      *float64   `json:"scvm_cpu_lt"`
	ScvmCpuLte                     *float64   `json:"scvm_cpu_lte"`
	ScvmCpuNot                     *float64   `json:"scvm_cpu_not"`
	ScvmCpuNotIn                   *[]float64 `json:"scvm_cpu_not_in"`
	ScvmMemory                     *float64   `json:"scvm_memory"`
	ScvmMemoryGt                   *float64   `json:"scvm_memory_gt"`
	ScvmMemoryGte                  *float64   `json:"scvm_memory_gte"`
	ScvmMemoryIn                   *[]float64 `json:"scvm_memory_in"`
	ScvmMemoryLt                   *float64   `json:"scvm_memory_lt"`
	ScvmMemoryLte                  *float64   `json:"scvm_memory_lte"`
	ScvmMemoryNot                  *float64   `json:"scvm_memory_not"`
	ScvmMemoryNotIn                *[]float64 `json:"scvm_memory_not_in"`
	ScvmName                       *string    `json:"scvm_name"`
	ScvmNameContains               *string    `json:"scvm_name_contains"`
	ScvmNameEndsWith               *string    `json:"scvm_name_ends_with"`
	ScvmNameGt                     *string    `json:"scvm_name_gt"`
	ScvmNameGte                    *string    `json:"scvm_name_gte"`
	ScvmNameIn                     *[]string  `json:"scvm_name_in"`
	ScvmNameLt                     *string    `json:"scvm_name_lt"`
	ScvmNameLte                    *string    `json:"scvm_name_lte"`
	ScvmNameNot                    *string    `json:"scvm_name_not"`
	ScvmNameNotContains            *string    `json:"scvm_name_not_contains"`
	ScvmNameNotEndsWith            *string    `json:"scvm_name_not_ends_with"`
	ScvmNameNotIn                  *[]string  `json:"scvm_name_not_in"`
	ScvmNameNotStartsWith          *string    `json:"scvm_name_not_starts_with"`
	ScvmNameStartsWith             *string    `json:"scvm_name_starts_with"`
	Serial                         *string    `json:"serial"`
	SerialContains                 *string    `json:"serial_contains"`
	SerialEndsWith                 *string    `json:"serial_ends_with"`
	SerialGt                       *string    `json:"serial_gt"`
	SerialGte                      *string    `json:"serial_gte"`
	SerialIn                       *[]string  `json:"serial_in"`
	SerialLt                       *string    `json:"serial_lt"`
	SerialLte                      *string    `json:"serial_lte"`
	SerialNot                      *string    `json:"serial_not"`
	SerialNotContains              *string    `json:"serial_not_contains"`
	SerialNotEndsWith              *string    `json:"serial_not_ends_with"`
	SerialNotIn                    *[]string  `json:"serial_not_in"`
	SerialNotStartsWith            *string    `json:"serial_not_starts_with"`
	SerialStartsWith               *string    `json:"serial_starts_with"`
	SsdDataCapacity                *float64   `json:"ssd_data_capacity"`
	SsdDataCapacityGt              *float64   `json:"ssd_data_capacity_gt"`
	SsdDataCapacityGte             *float64   `json:"ssd_data_capacity_gte"`
	SsdDataCapacityIn              *[]float64 `json:"ssd_data_capacity_in"`
	SsdDataCapacityLt              *float64   `json:"ssd_data_capacity_lt"`
	SsdDataCapacityLte             *float64   `json:"ssd_data_capacity_lte"`
	SsdDataCapacityNot             *float64   `json:"ssd_data_capacity_not"`
	SsdDataCapacityNotIn           *[]float64 `json:"ssd_data_capacity_not_in"`
	SsdDiskCount                   *float64   `json:"ssd_disk_count"`
	SsdDiskCountGt                 *float64   `json:"ssd_disk_count_gt"`
	SsdDiskCountGte                *float64   `json:"ssd_disk_count_gte"`
	SsdDiskCountIn                 *[]float64 `json:"ssd_disk_count_in"`
	SsdDiskCountLt                 *float64   `json:"ssd_disk_count_lt"`
	SsdDiskCountLte                *float64   `json:"ssd_disk_count_lte"`
	SsdDiskCountNot                *float64   `json:"ssd_disk_count_not"`
	SsdDiskCountNotIn              *[]float64 `json:"ssd_disk_count_not_in"`
	State                          *struct {
		// Embedded struct due to allOf(#/components/schemas/HostState)
		HostState `yaml:",inline"`
	} `json:"state"`
	StateIn  *[]HostState `json:"state_in"`
	StateNot *struct {
		// Embedded struct due to allOf(#/components/schemas/HostState)
		HostState `yaml:",inline"`
	} `json:"state_not"`
	StateNotIn *[]HostState `json:"state_not_in"`
	Status     *struct {
		// Embedded struct due to allOf(#/components/schemas/HostStatus)
		HostStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]HostStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/HostStatus)
		HostStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn             *[]HostStatus `json:"status_not_in"`
	StoppedVmNum            *float64      `json:"stopped_vm_num"`
	StoppedVmNumGt          *float64      `json:"stopped_vm_num_gt"`
	StoppedVmNumGte         *float64      `json:"stopped_vm_num_gte"`
	StoppedVmNumIn          *[]float64    `json:"stopped_vm_num_in"`
	StoppedVmNumLt          *float64      `json:"stopped_vm_num_lt"`
	StoppedVmNumLte         *float64      `json:"stopped_vm_num_lte"`
	StoppedVmNumNot         *float64      `json:"stopped_vm_num_not"`
	StoppedVmNumNotIn       *[]float64    `json:"stopped_vm_num_not_in"`
	SuspendedVmNum          *float64      `json:"suspended_vm_num"`
	SuspendedVmNumGt        *float64      `json:"suspended_vm_num_gt"`
	SuspendedVmNumGte       *float64      `json:"suspended_vm_num_gte"`
	SuspendedVmNumIn        *[]float64    `json:"suspended_vm_num_in"`
	SuspendedVmNumLt        *float64      `json:"suspended_vm_num_lt"`
	SuspendedVmNumLte       *float64      `json:"suspended_vm_num_lte"`
	SuspendedVmNumNot       *float64      `json:"suspended_vm_num_not"`
	SuspendedVmNumNotIn     *[]float64    `json:"suspended_vm_num_not_in"`
	TotalCacheCapacity      *float64      `json:"total_cache_capacity"`
	TotalCacheCapacityGt    *float64      `json:"total_cache_capacity_gt"`
	TotalCacheCapacityGte   *float64      `json:"total_cache_capacity_gte"`
	TotalCacheCapacityIn    *[]float64    `json:"total_cache_capacity_in"`
	TotalCacheCapacityLt    *float64      `json:"total_cache_capacity_lt"`
	TotalCacheCapacityLte   *float64      `json:"total_cache_capacity_lte"`
	TotalCacheCapacityNot   *float64      `json:"total_cache_capacity_not"`
	TotalCacheCapacityNotIn *[]float64    `json:"total_cache_capacity_not_in"`
	TotalCpuCores           *float64      `json:"total_cpu_cores"`
	TotalCpuCoresGt         *float64      `json:"total_cpu_cores_gt"`
	TotalCpuCoresGte        *float64      `json:"total_cpu_cores_gte"`
	TotalCpuCoresIn         *[]float64    `json:"total_cpu_cores_in"`
	TotalCpuCoresLt         *float64      `json:"total_cpu_cores_lt"`
	TotalCpuCoresLte        *float64      `json:"total_cpu_cores_lte"`
	TotalCpuCoresNot        *float64      `json:"total_cpu_cores_not"`
	TotalCpuCoresNotIn      *[]float64    `json:"total_cpu_cores_not_in"`
	TotalCpuHz              *float64      `json:"total_cpu_hz"`
	TotalCpuHzGt            *float64      `json:"total_cpu_hz_gt"`
	TotalCpuHzGte           *float64      `json:"total_cpu_hz_gte"`
	TotalCpuHzIn            *[]float64    `json:"total_cpu_hz_in"`
	TotalCpuHzLt            *float64      `json:"total_cpu_hz_lt"`
	TotalCpuHzLte           *float64      `json:"total_cpu_hz_lte"`
	TotalCpuHzNot           *float64      `json:"total_cpu_hz_not"`
	TotalCpuHzNotIn         *[]float64    `json:"total_cpu_hz_not_in"`
	TotalDataCapacity       *float64      `json:"total_data_capacity"`
	TotalDataCapacityGt     *float64      `json:"total_data_capacity_gt"`
	TotalDataCapacityGte    *float64      `json:"total_data_capacity_gte"`
	TotalDataCapacityIn     *[]float64    `json:"total_data_capacity_in"`
	TotalDataCapacityLt     *float64      `json:"total_data_capacity_lt"`
	TotalDataCapacityLte    *float64      `json:"total_data_capacity_lte"`
	TotalDataCapacityNot    *float64      `json:"total_data_capacity_not"`
	TotalDataCapacityNotIn  *[]float64    `json:"total_data_capacity_not_in"`
	TotalMemoryBytes        *float64      `json:"total_memory_bytes"`
	TotalMemoryBytesGt      *float64      `json:"total_memory_bytes_gt"`
	TotalMemoryBytesGte     *float64      `json:"total_memory_bytes_gte"`
	TotalMemoryBytesIn      *[]float64    `json:"total_memory_bytes_in"`
	TotalMemoryBytesLt      *float64      `json:"total_memory_bytes_lt"`
	TotalMemoryBytesLte     *float64      `json:"total_memory_bytes_lte"`
	TotalMemoryBytesNot     *float64      `json:"total_memory_bytes_not"`
	TotalMemoryBytesNotIn   *[]float64    `json:"total_memory_bytes_not_in"`
	UsbDevicesEvery         *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceWhereInput)
		UsbDeviceWhereInput `yaml:",inline"`
	} `json:"usb_devices_every"`
	UsbDevicesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceWhereInput)
		UsbDeviceWhereInput `yaml:",inline"`
	} `json:"usb_devices_none"`
	UsbDevicesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceWhereInput)
		UsbDeviceWhereInput `yaml:",inline"`
	} `json:"usb_devices_some"`
	UsedCpuHz              *float64   `json:"used_cpu_hz"`
	UsedCpuHzGt            *float64   `json:"used_cpu_hz_gt"`
	UsedCpuHzGte           *float64   `json:"used_cpu_hz_gte"`
	UsedCpuHzIn            *[]float64 `json:"used_cpu_hz_in"`
	UsedCpuHzLt            *float64   `json:"used_cpu_hz_lt"`
	UsedCpuHzLte           *float64   `json:"used_cpu_hz_lte"`
	UsedCpuHzNot           *float64   `json:"used_cpu_hz_not"`
	UsedCpuHzNotIn         *[]float64 `json:"used_cpu_hz_not_in"`
	UsedDataSpace          *float64   `json:"used_data_space"`
	UsedDataSpaceGt        *float64   `json:"used_data_space_gt"`
	UsedDataSpaceGte       *float64   `json:"used_data_space_gte"`
	UsedDataSpaceIn        *[]float64 `json:"used_data_space_in"`
	UsedDataSpaceLt        *float64   `json:"used_data_space_lt"`
	UsedDataSpaceLte       *float64   `json:"used_data_space_lte"`
	UsedDataSpaceNot       *float64   `json:"used_data_space_not"`
	UsedDataSpaceNotIn     *[]float64 `json:"used_data_space_not_in"`
	UsedMemoryBytes        *float64   `json:"used_memory_bytes"`
	UsedMemoryBytesGt      *float64   `json:"used_memory_bytes_gt"`
	UsedMemoryBytesGte     *float64   `json:"used_memory_bytes_gte"`
	UsedMemoryBytesIn      *[]float64 `json:"used_memory_bytes_in"`
	UsedMemoryBytesLt      *float64   `json:"used_memory_bytes_lt"`
	UsedMemoryBytesLte     *float64   `json:"used_memory_bytes_lte"`
	UsedMemoryBytesNot     *float64   `json:"used_memory_bytes_not"`
	UsedMemoryBytesNotIn   *[]float64 `json:"used_memory_bytes_not_in"`
	VmNum                  *float64   `json:"vm_num"`
	VmNumGt                *float64   `json:"vm_num_gt"`
	VmNumGte               *float64   `json:"vm_num_gte"`
	VmNumIn                *[]float64 `json:"vm_num_in"`
	VmNumLt                *float64   `json:"vm_num_lt"`
	VmNumLte               *float64   `json:"vm_num_lte"`
	VmNumNot               *float64   `json:"vm_num_not"`
	VmNumNotIn             *[]float64 `json:"vm_num_not_in"`
	VmotionIp              *string    `json:"vmotion_ip"`
	VmotionIpContains      *string    `json:"vmotion_ip_contains"`
	VmotionIpEndsWith      *string    `json:"vmotion_ip_ends_with"`
	VmotionIpGt            *string    `json:"vmotion_ip_gt"`
	VmotionIpGte           *string    `json:"vmotion_ip_gte"`
	VmotionIpIn            *[]string  `json:"vmotion_ip_in"`
	VmotionIpLt            *string    `json:"vmotion_ip_lt"`
	VmotionIpLte           *string    `json:"vmotion_ip_lte"`
	VmotionIpNot           *string    `json:"vmotion_ip_not"`
	VmotionIpNotContains   *string    `json:"vmotion_ip_not_contains"`
	VmotionIpNotEndsWith   *string    `json:"vmotion_ip_not_ends_with"`
	VmotionIpNotIn         *[]string  `json:"vmotion_ip_not_in"`
	VmotionIpNotStartsWith *string    `json:"vmotion_ip_not_starts_with"`
	VmotionIpStartsWith    *string    `json:"vmotion_ip_starts_with"`
	VmsEvery               *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_every"`
	VmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_none"`
	VmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_some"`
	VsphereEsxiAccount *struct {
		// Embedded struct due to allOf(#/components/schemas/VsphereEsxiAccountWhereInput)
		VsphereEsxiAccountWhereInput `yaml:",inline"`
	} `json:"vsphereEsxiAccount"`
	WithFasterSsdAsCache    *bool `json:"with_faster_ssd_as_cache"`
	WithFasterSsdAsCacheNot *bool `json:"with_faster_ssd_as_cache_not"`
	Zone                    *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneWhereInput)
		ZoneWhereInput `yaml:",inline"`
	} `json:"zone"`
}

// Hypervisor defines model for Hypervisor.
type Hypervisor string

// ImageConnector defines model for ImageConnector.
type ImageConnector struct {
	Name string  `json:"name"`
	Path string  `json:"path"`
	Size float64 `json:"size"`
}

// InstallVmtoolsParams defines model for InstallVmtoolsParams.
type InstallVmtoolsParams struct {
	Data struct {
		CdRomId    string `json:"cd_rom_id"`
		SvtImageId string `json:"svt_image_id"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// Ipmi defines model for Ipmi.
type Ipmi struct {
	Host struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Id       string `json:"id"`
	Ip       string `json:"ip"`
	LocalId  string `json:"local_id"`
	Username string `json:"username"`
	Valid    bool   `json:"valid"`
}

// IpmiOrderByInput defines model for IpmiOrderByInput.
type IpmiOrderByInput string

// IpmiWhereInput defines model for IpmiWhereInput.
type IpmiWhereInput struct {
	AND  *[]IpmiWhereInput `json:"AND"`
	NOT  *[]IpmiWhereInput `json:"NOT"`
	OR   *[]IpmiWhereInput `json:"OR"`
	Host *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Id                    *string   `json:"id"`
	IdContains            *string   `json:"id_contains"`
	IdEndsWith            *string   `json:"id_ends_with"`
	IdGt                  *string   `json:"id_gt"`
	IdGte                 *string   `json:"id_gte"`
	IdIn                  *[]string `json:"id_in"`
	IdLt                  *string   `json:"id_lt"`
	IdLte                 *string   `json:"id_lte"`
	IdNot                 *string   `json:"id_not"`
	IdNotContains         *string   `json:"id_not_contains"`
	IdNotEndsWith         *string   `json:"id_not_ends_with"`
	IdNotIn               *[]string `json:"id_not_in"`
	IdNotStartsWith       *string   `json:"id_not_starts_with"`
	IdStartsWith          *string   `json:"id_starts_with"`
	Ip                    *string   `json:"ip"`
	IpContains            *string   `json:"ip_contains"`
	IpEndsWith            *string   `json:"ip_ends_with"`
	IpGt                  *string   `json:"ip_gt"`
	IpGte                 *string   `json:"ip_gte"`
	IpIn                  *[]string `json:"ip_in"`
	IpLt                  *string   `json:"ip_lt"`
	IpLte                 *string   `json:"ip_lte"`
	IpNot                 *string   `json:"ip_not"`
	IpNotContains         *string   `json:"ip_not_contains"`
	IpNotEndsWith         *string   `json:"ip_not_ends_with"`
	IpNotIn               *[]string `json:"ip_not_in"`
	IpNotStartsWith       *string   `json:"ip_not_starts_with"`
	IpStartsWith          *string   `json:"ip_starts_with"`
	LocalId               *string   `json:"local_id"`
	LocalIdContains       *string   `json:"local_id_contains"`
	LocalIdEndsWith       *string   `json:"local_id_ends_with"`
	LocalIdGt             *string   `json:"local_id_gt"`
	LocalIdGte            *string   `json:"local_id_gte"`
	LocalIdIn             *[]string `json:"local_id_in"`
	LocalIdLt             *string   `json:"local_id_lt"`
	LocalIdLte            *string   `json:"local_id_lte"`
	LocalIdNot            *string   `json:"local_id_not"`
	LocalIdNotContains    *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith    *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn          *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith  *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith     *string   `json:"local_id_starts_with"`
	Username              *string   `json:"username"`
	UsernameContains      *string   `json:"username_contains"`
	UsernameEndsWith      *string   `json:"username_ends_with"`
	UsernameGt            *string   `json:"username_gt"`
	UsernameGte           *string   `json:"username_gte"`
	UsernameIn            *[]string `json:"username_in"`
	UsernameLt            *string   `json:"username_lt"`
	UsernameLte           *string   `json:"username_lte"`
	UsernameNot           *string   `json:"username_not"`
	UsernameNotContains   *string   `json:"username_not_contains"`
	UsernameNotEndsWith   *string   `json:"username_not_ends_with"`
	UsernameNotIn         *[]string `json:"username_not_in"`
	UsernameNotStartsWith *string   `json:"username_not_starts_with"`
	UsernameStartsWith    *string   `json:"username_starts_with"`
	Valid                 *bool     `json:"valid"`
	ValidNot              *bool     `json:"valid_not"`
}

// IscsiConnection defines model for IscsiConnection.
type IscsiConnection struct {
	ClientPort float64 `json:"client_port"`
	Cluster    struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Host struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Id          string `json:"id"`
	InitiatorIp string `json:"initiator_ip"`
	IscsiTarget *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_target"`
	NvmfSubsystem *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_subsystem"`
	Type StoreConnectionType `json:"type"`
}

// IscsiConnectionConnection defines model for IscsiConnectionConnection.
type IscsiConnectionConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// IscsiConnectionOrderByInput defines model for IscsiConnectionOrderByInput.
type IscsiConnectionOrderByInput string

// IscsiConnectionWhereInput defines model for IscsiConnectionWhereInput.
type IscsiConnectionWhereInput struct {
	AND             *[]IscsiConnectionWhereInput `json:"AND"`
	NOT             *[]IscsiConnectionWhereInput `json:"NOT"`
	OR              *[]IscsiConnectionWhereInput `json:"OR"`
	ClientPort      *float64                     `json:"client_port"`
	ClientPortGt    *float64                     `json:"client_port_gt"`
	ClientPortGte   *float64                     `json:"client_port_gte"`
	ClientPortIn    *[]float64                   `json:"client_port_in"`
	ClientPortLt    *float64                     `json:"client_port_lt"`
	ClientPortLte   *float64                     `json:"client_port_lte"`
	ClientPortNot   *float64                     `json:"client_port_not"`
	ClientPortNotIn *[]float64                   `json:"client_port_not_in"`
	Cluster         *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Host *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Id                       *string   `json:"id"`
	IdContains               *string   `json:"id_contains"`
	IdEndsWith               *string   `json:"id_ends_with"`
	IdGt                     *string   `json:"id_gt"`
	IdGte                    *string   `json:"id_gte"`
	IdIn                     *[]string `json:"id_in"`
	IdLt                     *string   `json:"id_lt"`
	IdLte                    *string   `json:"id_lte"`
	IdNot                    *string   `json:"id_not"`
	IdNotContains            *string   `json:"id_not_contains"`
	IdNotEndsWith            *string   `json:"id_not_ends_with"`
	IdNotIn                  *[]string `json:"id_not_in"`
	IdNotStartsWith          *string   `json:"id_not_starts_with"`
	IdStartsWith             *string   `json:"id_starts_with"`
	InitiatorIp              *string   `json:"initiator_ip"`
	InitiatorIpContains      *string   `json:"initiator_ip_contains"`
	InitiatorIpEndsWith      *string   `json:"initiator_ip_ends_with"`
	InitiatorIpGt            *string   `json:"initiator_ip_gt"`
	InitiatorIpGte           *string   `json:"initiator_ip_gte"`
	InitiatorIpIn            *[]string `json:"initiator_ip_in"`
	InitiatorIpLt            *string   `json:"initiator_ip_lt"`
	InitiatorIpLte           *string   `json:"initiator_ip_lte"`
	InitiatorIpNot           *string   `json:"initiator_ip_not"`
	InitiatorIpNotContains   *string   `json:"initiator_ip_not_contains"`
	InitiatorIpNotEndsWith   *string   `json:"initiator_ip_not_ends_with"`
	InitiatorIpNotIn         *[]string `json:"initiator_ip_not_in"`
	InitiatorIpNotStartsWith *string   `json:"initiator_ip_not_starts_with"`
	InitiatorIpStartsWith    *string   `json:"initiator_ip_starts_with"`
	IscsiTarget              *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"iscsi_target"`
	NvmfSubsystem *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"nvmf_subsystem"`
	Type *struct {
		// Embedded struct due to allOf(#/components/schemas/StoreConnectionType)
		StoreConnectionType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]StoreConnectionType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/StoreConnectionType)
		StoreConnectionType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn *[]StoreConnectionType `json:"type_not_in"`
}

// IscsiLun defines model for IscsiLun.
type IscsiLun struct {
	AllowedInitiators string  `json:"allowed_initiators"`
	AssignedSize      float64 `json:"assigned_size"`
	Bps               float64 `json:"bps"`
	BpsMax            float64 `json:"bps_max"`
	BpsMaxLength      float64 `json:"bps_max_length"`
	BpsRd             float64 `json:"bps_rd"`
	BpsRdMax          float64 `json:"bps_rd_max"`
	BpsRdMaxLength    float64 `json:"bps_rd_max_length"`
	BpsWr             float64 `json:"bps_wr"`
	BpsWrMax          float64 `json:"bps_wr_max"`
	BpsWrMaxLength    float64 `json:"bps_wr_max_length"`
	ConsistencyGroup  *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_group"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id              string  `json:"id"`
	IoSize          float64 `json:"io_size"`
	Iops            float64 `json:"iops"`
	IopsMax         float64 `json:"iops_max"`
	IopsMaxLength   float64 `json:"iops_max_length"`
	IopsRd          float64 `json:"iops_rd"`
	IopsRdMax       float64 `json:"iops_rd_max"`
	IopsRdMaxLength float64 `json:"iops_rd_max_length"`
	IopsWr          float64 `json:"iops_wr"`
	IopsWrMax       float64 `json:"iops_wr_max"`
	IopsWrMaxLength float64 `json:"iops_wr_max_length"`
	IscsiTarget     struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_target"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt string  `json:"local_created_at"`
	LocalId        string  `json:"local_id"`
	LunId          float64 `json:"lun_id"`
	Name           string  `json:"name"`
	ReplicaNum     float64 `json:"replica_num"`
	SharedSize     float64 `json:"shared_size"`
	SnapshotNum    float64 `json:"snapshot_num"`
	StripeNum      float64 `json:"stripe_num"`
	StripeSize     float64 `json:"stripe_size"`
	ThinProvision  bool    `json:"thin_provision"`
	UniqueSize     float64 `json:"unique_size"`
	ZbsVolumeId    string  `json:"zbs_volume_id"`
}

// IscsiLunCloneParams defines model for IscsiLunCloneParams.
type IscsiLunCloneParams struct {
	IscsiTargetId string `json:"iscsi_target_id"`
	Name          string `json:"name"`
	SnapshotId    string `json:"snapshot_id"`
}

// IscsiLunCommonParams defines model for IscsiLunCommonParams.
type IscsiLunCommonParams struct {
	AllowedInitiators *string  `json:"allowed_initiators,omitempty"`
	Bps               *float64 `json:"bps,omitempty"`
	BpsMax            *float64 `json:"bps_max,omitempty"`
	BpsMaxLength      *float64 `json:"bps_max_length,omitempty"`
	BpsRd             *float64 `json:"bps_rd,omitempty"`
	BpsRdMax          *float64 `json:"bps_rd_max,omitempty"`
	BpsRdMaxLength    *float64 `json:"bps_rd_max_length,omitempty"`
	BpsWr             *float64 `json:"bps_wr,omitempty"`
	BpsWrMax          *float64 `json:"bps_wr_max,omitempty"`
	BpsWrMaxLength    *float64 `json:"bps_wr_max_length,omitempty"`
	Iops              *float64 `json:"iops,omitempty"`
	IopsMax           *float64 `json:"iops_max,omitempty"`
	IopsMaxLength     *float64 `json:"iops_max_length,omitempty"`
	IopsRd            *float64 `json:"iops_rd,omitempty"`
	IopsRdMax         *float64 `json:"iops_rd_max,omitempty"`
	IopsRdMaxLength   *float64 `json:"iops_rd_max_length,omitempty"`
	IopsWr            *float64 `json:"iops_wr,omitempty"`
	IopsWrMax         *float64 `json:"iops_wr_max,omitempty"`
	IopsWrMaxLength   *float64 `json:"iops_wr_max_length,omitempty"`
}

// IscsiLunConnection defines model for IscsiLunConnection.
type IscsiLunConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// IscsiLunCreationParams defines model for IscsiLunCreationParams.
type IscsiLunCreationParams struct {
	// Embedded fields due to inline allOf schema
	AssignedSize  float64  `json:"assigned_size"`
	IscsiTargetId string   `json:"iscsi_target_id"`
	LunId         *float64 `json:"lun_id,omitempty"`
	Name          string   `json:"name"`
	ReplicaNum    float64  `json:"replica_num"`
	// Embedded struct due to allOf(#/components/schemas/IscsiLunCommonParams)
	IscsiLunCommonParams `yaml:",inline"`
}

// IscsiLunDeletionParams defines model for IscsiLunDeletionParams.
type IscsiLunDeletionParams struct {
	Data struct {
		RemoveSnapshot bool `json:"remove_snapshot"`
	} `json:"data"`
	Where IscsiLunWhereInput `json:"where"`
}

// IscsiLunOrderByInput defines model for IscsiLunOrderByInput.
type IscsiLunOrderByInput string

// IscsiLunRollbackParams defines model for IscsiLunRollbackParams.
type IscsiLunRollbackParams struct {
	LunId      string `json:"lun_id"`
	SnapshotId string `json:"snapshot_id"`
}

// IscsiLunSnapshot defines model for IscsiLunSnapshot.
type IscsiLunSnapshot struct {
	ConsistencyGroupSnapshot *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_group_snapshot"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id       string `json:"id"`
	IscsiLun *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_lun"`
	IscsiTarget struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_target"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt string  `json:"local_created_at"`
	LocalId        string  `json:"local_id"`
	Name           string  `json:"name"`
	UniqueSize     float64 `json:"unique_size"`
}

// IscsiLunSnapshotConnection defines model for IscsiLunSnapshotConnection.
type IscsiLunSnapshotConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// IscsiLunSnapshotCreationParams defines model for IscsiLunSnapshotCreationParams.
type IscsiLunSnapshotCreationParams struct {
	IscsiLunId    string `json:"iscsi_lun_id"`
	IscsiTargetId string `json:"iscsi_target_id"`
	Name          string `json:"name"`
}

// IscsiLunSnapshotDeletionParams defines model for IscsiLunSnapshotDeletionParams.
type IscsiLunSnapshotDeletionParams struct {
	Where IscsiLunSnapshotWhereInput `json:"where"`
}

// IscsiLunSnapshotOrderByInput defines model for IscsiLunSnapshotOrderByInput.
type IscsiLunSnapshotOrderByInput string

// IscsiLunSnapshotWhereInput defines model for IscsiLunSnapshotWhereInput.
type IscsiLunSnapshotWhereInput struct {
	AND                      *[]IscsiLunSnapshotWhereInput `json:"AND"`
	NOT                      *[]IscsiLunSnapshotWhereInput `json:"NOT"`
	OR                       *[]IscsiLunSnapshotWhereInput `json:"OR"`
	ConsistencyGroupSnapshot *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"consistency_group_snapshot"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	IscsiLun               *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"iscsi_lun"`
	IscsiTarget *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"iscsi_target"`
	LabelsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt       *string    `json:"local_created_at"`
	LocalCreatedAtGt     *string    `json:"local_created_at_gt"`
	LocalCreatedAtGte    *string    `json:"local_created_at_gte"`
	LocalCreatedAtIn     *[]string  `json:"local_created_at_in"`
	LocalCreatedAtLt     *string    `json:"local_created_at_lt"`
	LocalCreatedAtLte    *string    `json:"local_created_at_lte"`
	LocalCreatedAtNot    *string    `json:"local_created_at_not"`
	LocalCreatedAtNotIn  *[]string  `json:"local_created_at_not_in"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	Name                 *string    `json:"name"`
	NameContains         *string    `json:"name_contains"`
	NameEndsWith         *string    `json:"name_ends_with"`
	NameGt               *string    `json:"name_gt"`
	NameGte              *string    `json:"name_gte"`
	NameIn               *[]string  `json:"name_in"`
	NameLt               *string    `json:"name_lt"`
	NameLte              *string    `json:"name_lte"`
	NameNot              *string    `json:"name_not"`
	NameNotContains      *string    `json:"name_not_contains"`
	NameNotEndsWith      *string    `json:"name_not_ends_with"`
	NameNotIn            *[]string  `json:"name_not_in"`
	NameNotStartsWith    *string    `json:"name_not_starts_with"`
	NameStartsWith       *string    `json:"name_starts_with"`
	UniqueSize           *float64   `json:"unique_size"`
	UniqueSizeGt         *float64   `json:"unique_size_gt"`
	UniqueSizeGte        *float64   `json:"unique_size_gte"`
	UniqueSizeIn         *[]float64 `json:"unique_size_in"`
	UniqueSizeLt         *float64   `json:"unique_size_lt"`
	UniqueSizeLte        *float64   `json:"unique_size_lte"`
	UniqueSizeNot        *float64   `json:"unique_size_not"`
	UniqueSizeNotIn      *[]float64 `json:"unique_size_not_in"`
}

// IscsiLunUpdationParams defines model for IscsiLunUpdationParams.
type IscsiLunUpdationParams struct {
	Data struct {
		// Embedded fields due to inline allOf schema
		AssignedSize *float64 `json:"assigned_size,omitempty"`
		Name         *string  `json:"name,omitempty"`
		// Embedded struct due to allOf(#/components/schemas/IscsiLunCommonParams)
		IscsiLunCommonParams `yaml:",inline"`
	} `json:"data"`
	Where IscsiLunWhereInput `json:"where"`
}

// IscsiLunWhereInput defines model for IscsiLunWhereInput.
type IscsiLunWhereInput struct {
	AND                            *[]IscsiLunWhereInput `json:"AND"`
	NOT                            *[]IscsiLunWhereInput `json:"NOT"`
	OR                             *[]IscsiLunWhereInput `json:"OR"`
	AllowedInitiators              *string               `json:"allowed_initiators"`
	AllowedInitiatorsContains      *string               `json:"allowed_initiators_contains"`
	AllowedInitiatorsEndsWith      *string               `json:"allowed_initiators_ends_with"`
	AllowedInitiatorsGt            *string               `json:"allowed_initiators_gt"`
	AllowedInitiatorsGte           *string               `json:"allowed_initiators_gte"`
	AllowedInitiatorsIn            *[]string             `json:"allowed_initiators_in"`
	AllowedInitiatorsLt            *string               `json:"allowed_initiators_lt"`
	AllowedInitiatorsLte           *string               `json:"allowed_initiators_lte"`
	AllowedInitiatorsNot           *string               `json:"allowed_initiators_not"`
	AllowedInitiatorsNotContains   *string               `json:"allowed_initiators_not_contains"`
	AllowedInitiatorsNotEndsWith   *string               `json:"allowed_initiators_not_ends_with"`
	AllowedInitiatorsNotIn         *[]string             `json:"allowed_initiators_not_in"`
	AllowedInitiatorsNotStartsWith *string               `json:"allowed_initiators_not_starts_with"`
	AllowedInitiatorsStartsWith    *string               `json:"allowed_initiators_starts_with"`
	AssignedSize                   *float64              `json:"assigned_size"`
	AssignedSizeGt                 *float64              `json:"assigned_size_gt"`
	AssignedSizeGte                *float64              `json:"assigned_size_gte"`
	AssignedSizeIn                 *[]float64            `json:"assigned_size_in"`
	AssignedSizeLt                 *float64              `json:"assigned_size_lt"`
	AssignedSizeLte                *float64              `json:"assigned_size_lte"`
	AssignedSizeNot                *float64              `json:"assigned_size_not"`
	AssignedSizeNotIn              *[]float64            `json:"assigned_size_not_in"`
	Bps                            *float64              `json:"bps"`
	BpsGt                          *float64              `json:"bps_gt"`
	BpsGte                         *float64              `json:"bps_gte"`
	BpsIn                          *[]float64            `json:"bps_in"`
	BpsLt                          *float64              `json:"bps_lt"`
	BpsLte                         *float64              `json:"bps_lte"`
	BpsMax                         *float64              `json:"bps_max"`
	BpsMaxGt                       *float64              `json:"bps_max_gt"`
	BpsMaxGte                      *float64              `json:"bps_max_gte"`
	BpsMaxIn                       *[]float64            `json:"bps_max_in"`
	BpsMaxLength                   *float64              `json:"bps_max_length"`
	BpsMaxLengthGt                 *float64              `json:"bps_max_length_gt"`
	BpsMaxLengthGte                *float64              `json:"bps_max_length_gte"`
	BpsMaxLengthIn                 *[]float64            `json:"bps_max_length_in"`
	BpsMaxLengthLt                 *float64              `json:"bps_max_length_lt"`
	BpsMaxLengthLte                *float64              `json:"bps_max_length_lte"`
	BpsMaxLengthNot                *float64              `json:"bps_max_length_not"`
	BpsMaxLengthNotIn              *[]float64            `json:"bps_max_length_not_in"`
	BpsMaxLt                       *float64              `json:"bps_max_lt"`
	BpsMaxLte                      *float64              `json:"bps_max_lte"`
	BpsMaxNot                      *float64              `json:"bps_max_not"`
	BpsMaxNotIn                    *[]float64            `json:"bps_max_not_in"`
	BpsNot                         *float64              `json:"bps_not"`
	BpsNotIn                       *[]float64            `json:"bps_not_in"`
	BpsRd                          *float64              `json:"bps_rd"`
	BpsRdGt                        *float64              `json:"bps_rd_gt"`
	BpsRdGte                       *float64              `json:"bps_rd_gte"`
	BpsRdIn                        *[]float64            `json:"bps_rd_in"`
	BpsRdLt                        *float64              `json:"bps_rd_lt"`
	BpsRdLte                       *float64              `json:"bps_rd_lte"`
	BpsRdMax                       *float64              `json:"bps_rd_max"`
	BpsRdMaxGt                     *float64              `json:"bps_rd_max_gt"`
	BpsRdMaxGte                    *float64              `json:"bps_rd_max_gte"`
	BpsRdMaxIn                     *[]float64            `json:"bps_rd_max_in"`
	BpsRdMaxLength                 *float64              `json:"bps_rd_max_length"`
	BpsRdMaxLengthGt               *float64              `json:"bps_rd_max_length_gt"`
	BpsRdMaxLengthGte              *float64              `json:"bps_rd_max_length_gte"`
	BpsRdMaxLengthIn               *[]float64            `json:"bps_rd_max_length_in"`
	BpsRdMaxLengthLt               *float64              `json:"bps_rd_max_length_lt"`
	BpsRdMaxLengthLte              *float64              `json:"bps_rd_max_length_lte"`
	BpsRdMaxLengthNot              *float64              `json:"bps_rd_max_length_not"`
	BpsRdMaxLengthNotIn            *[]float64            `json:"bps_rd_max_length_not_in"`
	BpsRdMaxLt                     *float64              `json:"bps_rd_max_lt"`
	BpsRdMaxLte                    *float64              `json:"bps_rd_max_lte"`
	BpsRdMaxNot                    *float64              `json:"bps_rd_max_not"`
	BpsRdMaxNotIn                  *[]float64            `json:"bps_rd_max_not_in"`
	BpsRdNot                       *float64              `json:"bps_rd_not"`
	BpsRdNotIn                     *[]float64            `json:"bps_rd_not_in"`
	BpsWr                          *float64              `json:"bps_wr"`
	BpsWrGt                        *float64              `json:"bps_wr_gt"`
	BpsWrGte                       *float64              `json:"bps_wr_gte"`
	BpsWrIn                        *[]float64            `json:"bps_wr_in"`
	BpsWrLt                        *float64              `json:"bps_wr_lt"`
	BpsWrLte                       *float64              `json:"bps_wr_lte"`
	BpsWrMax                       *float64              `json:"bps_wr_max"`
	BpsWrMaxGt                     *float64              `json:"bps_wr_max_gt"`
	BpsWrMaxGte                    *float64              `json:"bps_wr_max_gte"`
	BpsWrMaxIn                     *[]float64            `json:"bps_wr_max_in"`
	BpsWrMaxLength                 *float64              `json:"bps_wr_max_length"`
	BpsWrMaxLengthGt               *float64              `json:"bps_wr_max_length_gt"`
	BpsWrMaxLengthGte              *float64              `json:"bps_wr_max_length_gte"`
	BpsWrMaxLengthIn               *[]float64            `json:"bps_wr_max_length_in"`
	BpsWrMaxLengthLt               *float64              `json:"bps_wr_max_length_lt"`
	BpsWrMaxLengthLte              *float64              `json:"bps_wr_max_length_lte"`
	BpsWrMaxLengthNot              *float64              `json:"bps_wr_max_length_not"`
	BpsWrMaxLengthNotIn            *[]float64            `json:"bps_wr_max_length_not_in"`
	BpsWrMaxLt                     *float64              `json:"bps_wr_max_lt"`
	BpsWrMaxLte                    *float64              `json:"bps_wr_max_lte"`
	BpsWrMaxNot                    *float64              `json:"bps_wr_max_not"`
	BpsWrMaxNotIn                  *[]float64            `json:"bps_wr_max_not_in"`
	BpsWrNot                       *float64              `json:"bps_wr_not"`
	BpsWrNotIn                     *[]float64            `json:"bps_wr_not_in"`
	ConsistencyGroup               *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_group"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	IoSize                 *float64             `json:"io_size"`
	IoSizeGt               *float64             `json:"io_size_gt"`
	IoSizeGte              *float64             `json:"io_size_gte"`
	IoSizeIn               *[]float64           `json:"io_size_in"`
	IoSizeLt               *float64             `json:"io_size_lt"`
	IoSizeLte              *float64             `json:"io_size_lte"`
	IoSizeNot              *float64             `json:"io_size_not"`
	IoSizeNotIn            *[]float64           `json:"io_size_not_in"`
	Iops                   *float64             `json:"iops"`
	IopsGt                 *float64             `json:"iops_gt"`
	IopsGte                *float64             `json:"iops_gte"`
	IopsIn                 *[]float64           `json:"iops_in"`
	IopsLt                 *float64             `json:"iops_lt"`
	IopsLte                *float64             `json:"iops_lte"`
	IopsMax                *float64             `json:"iops_max"`
	IopsMaxGt              *float64             `json:"iops_max_gt"`
	IopsMaxGte             *float64             `json:"iops_max_gte"`
	IopsMaxIn              *[]float64           `json:"iops_max_in"`
	IopsMaxLength          *float64             `json:"iops_max_length"`
	IopsMaxLengthGt        *float64             `json:"iops_max_length_gt"`
	IopsMaxLengthGte       *float64             `json:"iops_max_length_gte"`
	IopsMaxLengthIn        *[]float64           `json:"iops_max_length_in"`
	IopsMaxLengthLt        *float64             `json:"iops_max_length_lt"`
	IopsMaxLengthLte       *float64             `json:"iops_max_length_lte"`
	IopsMaxLengthNot       *float64             `json:"iops_max_length_not"`
	IopsMaxLengthNotIn     *[]float64           `json:"iops_max_length_not_in"`
	IopsMaxLt              *float64             `json:"iops_max_lt"`
	IopsMaxLte             *float64             `json:"iops_max_lte"`
	IopsMaxNot             *float64             `json:"iops_max_not"`
	IopsMaxNotIn           *[]float64           `json:"iops_max_not_in"`
	IopsNot                *float64             `json:"iops_not"`
	IopsNotIn              *[]float64           `json:"iops_not_in"`
	IopsRd                 *float64             `json:"iops_rd"`
	IopsRdGt               *float64             `json:"iops_rd_gt"`
	IopsRdGte              *float64             `json:"iops_rd_gte"`
	IopsRdIn               *[]float64           `json:"iops_rd_in"`
	IopsRdLt               *float64             `json:"iops_rd_lt"`
	IopsRdLte              *float64             `json:"iops_rd_lte"`
	IopsRdMax              *float64             `json:"iops_rd_max"`
	IopsRdMaxGt            *float64             `json:"iops_rd_max_gt"`
	IopsRdMaxGte           *float64             `json:"iops_rd_max_gte"`
	IopsRdMaxIn            *[]float64           `json:"iops_rd_max_in"`
	IopsRdMaxLength        *float64             `json:"iops_rd_max_length"`
	IopsRdMaxLengthGt      *float64             `json:"iops_rd_max_length_gt"`
	IopsRdMaxLengthGte     *float64             `json:"iops_rd_max_length_gte"`
	IopsRdMaxLengthIn      *[]float64           `json:"iops_rd_max_length_in"`
	IopsRdMaxLengthLt      *float64             `json:"iops_rd_max_length_lt"`
	IopsRdMaxLengthLte     *float64             `json:"iops_rd_max_length_lte"`
	IopsRdMaxLengthNot     *float64             `json:"iops_rd_max_length_not"`
	IopsRdMaxLengthNotIn   *[]float64           `json:"iops_rd_max_length_not_in"`
	IopsRdMaxLt            *float64             `json:"iops_rd_max_lt"`
	IopsRdMaxLte           *float64             `json:"iops_rd_max_lte"`
	IopsRdMaxNot           *float64             `json:"iops_rd_max_not"`
	IopsRdMaxNotIn         *[]float64           `json:"iops_rd_max_not_in"`
	IopsRdNot              *float64             `json:"iops_rd_not"`
	IopsRdNotIn            *[]float64           `json:"iops_rd_not_in"`
	IopsWr                 *float64             `json:"iops_wr"`
	IopsWrGt               *float64             `json:"iops_wr_gt"`
	IopsWrGte              *float64             `json:"iops_wr_gte"`
	IopsWrIn               *[]float64           `json:"iops_wr_in"`
	IopsWrLt               *float64             `json:"iops_wr_lt"`
	IopsWrLte              *float64             `json:"iops_wr_lte"`
	IopsWrMax              *float64             `json:"iops_wr_max"`
	IopsWrMaxGt            *float64             `json:"iops_wr_max_gt"`
	IopsWrMaxGte           *float64             `json:"iops_wr_max_gte"`
	IopsWrMaxIn            *[]float64           `json:"iops_wr_max_in"`
	IopsWrMaxLength        *float64             `json:"iops_wr_max_length"`
	IopsWrMaxLengthGt      *float64             `json:"iops_wr_max_length_gt"`
	IopsWrMaxLengthGte     *float64             `json:"iops_wr_max_length_gte"`
	IopsWrMaxLengthIn      *[]float64           `json:"iops_wr_max_length_in"`
	IopsWrMaxLengthLt      *float64             `json:"iops_wr_max_length_lt"`
	IopsWrMaxLengthLte     *float64             `json:"iops_wr_max_length_lte"`
	IopsWrMaxLengthNot     *float64             `json:"iops_wr_max_length_not"`
	IopsWrMaxLengthNotIn   *[]float64           `json:"iops_wr_max_length_not_in"`
	IopsWrMaxLt            *float64             `json:"iops_wr_max_lt"`
	IopsWrMaxLte           *float64             `json:"iops_wr_max_lte"`
	IopsWrMaxNot           *float64             `json:"iops_wr_max_not"`
	IopsWrMaxNotIn         *[]float64           `json:"iops_wr_max_not_in"`
	IopsWrNot              *float64             `json:"iops_wr_not"`
	IopsWrNotIn            *[]float64           `json:"iops_wr_not_in"`
	IscsiTarget            *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"iscsi_target"`
	LabelsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt           *string    `json:"local_created_at"`
	LocalCreatedAtGt         *string    `json:"local_created_at_gt"`
	LocalCreatedAtGte        *string    `json:"local_created_at_gte"`
	LocalCreatedAtIn         *[]string  `json:"local_created_at_in"`
	LocalCreatedAtLt         *string    `json:"local_created_at_lt"`
	LocalCreatedAtLte        *string    `json:"local_created_at_lte"`
	LocalCreatedAtNot        *string    `json:"local_created_at_not"`
	LocalCreatedAtNotIn      *[]string  `json:"local_created_at_not_in"`
	LocalId                  *string    `json:"local_id"`
	LocalIdContains          *string    `json:"local_id_contains"`
	LocalIdEndsWith          *string    `json:"local_id_ends_with"`
	LocalIdGt                *string    `json:"local_id_gt"`
	LocalIdGte               *string    `json:"local_id_gte"`
	LocalIdIn                *[]string  `json:"local_id_in"`
	LocalIdLt                *string    `json:"local_id_lt"`
	LocalIdLte               *string    `json:"local_id_lte"`
	LocalIdNot               *string    `json:"local_id_not"`
	LocalIdNotContains       *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith       *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn             *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith     *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith        *string    `json:"local_id_starts_with"`
	LunId                    *float64   `json:"lun_id"`
	LunIdGt                  *float64   `json:"lun_id_gt"`
	LunIdGte                 *float64   `json:"lun_id_gte"`
	LunIdIn                  *[]float64 `json:"lun_id_in"`
	LunIdLt                  *float64   `json:"lun_id_lt"`
	LunIdLte                 *float64   `json:"lun_id_lte"`
	LunIdNot                 *float64   `json:"lun_id_not"`
	LunIdNotIn               *[]float64 `json:"lun_id_not_in"`
	Name                     *string    `json:"name"`
	NameContains             *string    `json:"name_contains"`
	NameEndsWith             *string    `json:"name_ends_with"`
	NameGt                   *string    `json:"name_gt"`
	NameGte                  *string    `json:"name_gte"`
	NameIn                   *[]string  `json:"name_in"`
	NameLt                   *string    `json:"name_lt"`
	NameLte                  *string    `json:"name_lte"`
	NameNot                  *string    `json:"name_not"`
	NameNotContains          *string    `json:"name_not_contains"`
	NameNotEndsWith          *string    `json:"name_not_ends_with"`
	NameNotIn                *[]string  `json:"name_not_in"`
	NameNotStartsWith        *string    `json:"name_not_starts_with"`
	NameStartsWith           *string    `json:"name_starts_with"`
	ReplicaNum               *float64   `json:"replica_num"`
	ReplicaNumGt             *float64   `json:"replica_num_gt"`
	ReplicaNumGte            *float64   `json:"replica_num_gte"`
	ReplicaNumIn             *[]float64 `json:"replica_num_in"`
	ReplicaNumLt             *float64   `json:"replica_num_lt"`
	ReplicaNumLte            *float64   `json:"replica_num_lte"`
	ReplicaNumNot            *float64   `json:"replica_num_not"`
	ReplicaNumNotIn          *[]float64 `json:"replica_num_not_in"`
	SharedSize               *float64   `json:"shared_size"`
	SharedSizeGt             *float64   `json:"shared_size_gt"`
	SharedSizeGte            *float64   `json:"shared_size_gte"`
	SharedSizeIn             *[]float64 `json:"shared_size_in"`
	SharedSizeLt             *float64   `json:"shared_size_lt"`
	SharedSizeLte            *float64   `json:"shared_size_lte"`
	SharedSizeNot            *float64   `json:"shared_size_not"`
	SharedSizeNotIn          *[]float64 `json:"shared_size_not_in"`
	SnapshotNum              *float64   `json:"snapshot_num"`
	SnapshotNumGt            *float64   `json:"snapshot_num_gt"`
	SnapshotNumGte           *float64   `json:"snapshot_num_gte"`
	SnapshotNumIn            *[]float64 `json:"snapshot_num_in"`
	SnapshotNumLt            *float64   `json:"snapshot_num_lt"`
	SnapshotNumLte           *float64   `json:"snapshot_num_lte"`
	SnapshotNumNot           *float64   `json:"snapshot_num_not"`
	SnapshotNumNotIn         *[]float64 `json:"snapshot_num_not_in"`
	StripeNum                *float64   `json:"stripe_num"`
	StripeNumGt              *float64   `json:"stripe_num_gt"`
	StripeNumGte             *float64   `json:"stripe_num_gte"`
	StripeNumIn              *[]float64 `json:"stripe_num_in"`
	StripeNumLt              *float64   `json:"stripe_num_lt"`
	StripeNumLte             *float64   `json:"stripe_num_lte"`
	StripeNumNot             *float64   `json:"stripe_num_not"`
	StripeNumNotIn           *[]float64 `json:"stripe_num_not_in"`
	StripeSize               *float64   `json:"stripe_size"`
	StripeSizeGt             *float64   `json:"stripe_size_gt"`
	StripeSizeGte            *float64   `json:"stripe_size_gte"`
	StripeSizeIn             *[]float64 `json:"stripe_size_in"`
	StripeSizeLt             *float64   `json:"stripe_size_lt"`
	StripeSizeLte            *float64   `json:"stripe_size_lte"`
	StripeSizeNot            *float64   `json:"stripe_size_not"`
	StripeSizeNotIn          *[]float64 `json:"stripe_size_not_in"`
	ThinProvision            *bool      `json:"thin_provision"`
	ThinProvisionNot         *bool      `json:"thin_provision_not"`
	UniqueSize               *float64   `json:"unique_size"`
	UniqueSizeGt             *float64   `json:"unique_size_gt"`
	UniqueSizeGte            *float64   `json:"unique_size_gte"`
	UniqueSizeIn             *[]float64 `json:"unique_size_in"`
	UniqueSizeLt             *float64   `json:"unique_size_lt"`
	UniqueSizeLte            *float64   `json:"unique_size_lte"`
	UniqueSizeNot            *float64   `json:"unique_size_not"`
	UniqueSizeNotIn          *[]float64 `json:"unique_size_not_in"`
	ZbsVolumeId              *string    `json:"zbs_volume_id"`
	ZbsVolumeIdContains      *string    `json:"zbs_volume_id_contains"`
	ZbsVolumeIdEndsWith      *string    `json:"zbs_volume_id_ends_with"`
	ZbsVolumeIdGt            *string    `json:"zbs_volume_id_gt"`
	ZbsVolumeIdGte           *string    `json:"zbs_volume_id_gte"`
	ZbsVolumeIdIn            *[]string  `json:"zbs_volume_id_in"`
	ZbsVolumeIdLt            *string    `json:"zbs_volume_id_lt"`
	ZbsVolumeIdLte           *string    `json:"zbs_volume_id_lte"`
	ZbsVolumeIdNot           *string    `json:"zbs_volume_id_not"`
	ZbsVolumeIdNotContains   *string    `json:"zbs_volume_id_not_contains"`
	ZbsVolumeIdNotEndsWith   *string    `json:"zbs_volume_id_not_ends_with"`
	ZbsVolumeIdNotIn         *[]string  `json:"zbs_volume_id_not_in"`
	ZbsVolumeIdNotStartsWith *string    `json:"zbs_volume_id_not_starts_with"`
	ZbsVolumeIdStartsWith    *string    `json:"zbs_volume_id_starts_with"`
}

// IscsiTarget defines model for IscsiTarget.
type IscsiTarget struct {
	Bps            *float64 `json:"bps"`
	BpsMax         *float64 `json:"bps_max"`
	BpsMaxLength   *float64 `json:"bps_max_length"`
	BpsRd          *float64 `json:"bps_rd"`
	BpsRdMax       *float64 `json:"bps_rd_max"`
	BpsRdMaxLength *float64 `json:"bps_rd_max_length"`
	BpsWr          *float64 `json:"bps_wr"`
	BpsWrMax       *float64 `json:"bps_wr_max"`
	BpsWrMaxLength *float64 `json:"bps_wr_max_length"`
	ChapEnabled    bool     `json:"chap_enabled"`
	ChapName       *string  `json:"chap_name"`
	ChapSecret     *string  `json:"chap_secret"`
	Cluster        struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description       string `json:"description"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	ExternalUse    bool   `json:"external_use"`
	Id             string `json:"id"`
	InitiatorChaps *[]struct {
		ChapName     string `json:"chap_name"`
		ChapSecret   string `json:"chap_secret"`
		InitiatorIqn string `json:"initiator_iqn"`
	} `json:"initiator_chaps"`
	Internal        bool     `json:"internal"`
	IoSize          *float64 `json:"io_size"`
	Iops            *float64 `json:"iops"`
	IopsMax         *float64 `json:"iops_max"`
	IopsMaxLength   *float64 `json:"iops_max_length"`
	IopsRd          *float64 `json:"iops_rd"`
	IopsRdMax       *float64 `json:"iops_rd_max"`
	IopsRdMaxLength *float64 `json:"iops_rd_max_length"`
	IopsWr          *float64 `json:"iops_wr"`
	IopsWrMax       *float64 `json:"iops_wr_max"`
	IopsWrMaxLength *float64 `json:"iops_wr_max_length"`
	IpWhitelist     string   `json:"ip_whitelist"`
	IqnName         string   `json:"iqn_name"`
	IqnWhitelist    string   `json:"iqn_whitelist"`
	Labels          *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId string `json:"local_id"`
	Luns    *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"luns"`
	Name          string  `json:"name"`
	ReplicaNum    float64 `json:"replica_num"`
	StripeNum     float64 `json:"stripe_num"`
	StripeSize    float64 `json:"stripe_size"`
	ThinProvision bool    `json:"thin_provision"`
}

// IscsiTargetCommonParams defines model for IscsiTargetCommonParams.
type IscsiTargetCommonParams struct {
	Bps            *float64 `json:"bps,omitempty"`
	BpsMax         *float64 `json:"bps_max,omitempty"`
	BpsMaxLength   *float64 `json:"bps_max_length,omitempty"`
	BpsRd          *float64 `json:"bps_rd,omitempty"`
	BpsRdMax       *float64 `json:"bps_rd_max,omitempty"`
	BpsRdMaxLength *float64 `json:"bps_rd_max_length,omitempty"`
	BpsWr          *float64 `json:"bps_wr,omitempty"`
	BpsWrMax       *float64 `json:"bps_wr_max,omitempty"`
	BpsWrMaxLength *float64 `json:"bps_wr_max_length,omitempty"`
	ChapEnabled    *bool    `json:"chap_enabled,omitempty"`
	ChapName       *string  `json:"chap_name,omitempty"`
	ChapSecret     *string  `json:"chap_secret,omitempty"`
	Description    *string  `json:"description,omitempty"`
	InitiatorChaps *[]struct {
		ChapName     string `json:"chap_name"`
		ChapSecret   string `json:"chap_secret"`
		InitiatorIqn string `json:"initiator_iqn"`
	} `json:"initiator_chaps,omitempty"`
	Iops            *float64 `json:"iops,omitempty"`
	IopsMax         *float64 `json:"iops_max,omitempty"`
	IopsMaxLength   *float64 `json:"iops_max_length,omitempty"`
	IopsRd          *float64 `json:"iops_rd,omitempty"`
	IopsRdMax       *float64 `json:"iops_rd_max,omitempty"`
	IopsRdMaxLength *float64 `json:"iops_rd_max_length,omitempty"`
	IopsWr          *float64 `json:"iops_wr,omitempty"`
	IopsWrMax       *float64 `json:"iops_wr_max,omitempty"`
	IopsWrMaxLength *float64 `json:"iops_wr_max_length,omitempty"`
	IpWhitelist     *string  `json:"ip_whitelist,omitempty"`
	IqnWhitelist    *string  `json:"iqn_whitelist,omitempty"`
}

// IscsiTargetConnection defines model for IscsiTargetConnection.
type IscsiTargetConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// IscsiTargetCreationParams defines model for IscsiTargetCreationParams.
type IscsiTargetCreationParams struct {
	// Embedded fields due to inline allOf schema
	ClusterId     string  `json:"cluster_id"`
	Name          string  `json:"name"`
	ReplicaNum    float64 `json:"replica_num"`
	StripeNum     float64 `json:"stripe_num"`
	StripeSize    float64 `json:"stripe_size"`
	ThinProvision bool    `json:"thin_provision"`
	// Embedded struct due to allOf(#/components/schemas/IscsiTargetCommonParams)
	IscsiTargetCommonParams `yaml:",inline"`
}

// IscsiTargetDeletionParams defines model for IscsiTargetDeletionParams.
type IscsiTargetDeletionParams struct {
	Where IscsiTargetWhereInput `json:"where"`
}

// IscsiTargetOrderByInput defines model for IscsiTargetOrderByInput.
type IscsiTargetOrderByInput string

// IscsiTargetUpdationParams defines model for IscsiTargetUpdationParams.
type IscsiTargetUpdationParams struct {
	Data  IscsiTargetCommonParams `json:"data"`
	Where IscsiTargetWhereInput   `json:"where"`
}

// IscsiTargetWhereInput defines model for IscsiTargetWhereInput.
type IscsiTargetWhereInput struct {
	AND                     *[]IscsiTargetWhereInput `json:"AND"`
	NOT                     *[]IscsiTargetWhereInput `json:"NOT"`
	OR                      *[]IscsiTargetWhereInput `json:"OR"`
	Bps                     *float64                 `json:"bps"`
	BpsGt                   *float64                 `json:"bps_gt"`
	BpsGte                  *float64                 `json:"bps_gte"`
	BpsIn                   *[]float64               `json:"bps_in"`
	BpsLt                   *float64                 `json:"bps_lt"`
	BpsLte                  *float64                 `json:"bps_lte"`
	BpsMax                  *float64                 `json:"bps_max"`
	BpsMaxGt                *float64                 `json:"bps_max_gt"`
	BpsMaxGte               *float64                 `json:"bps_max_gte"`
	BpsMaxIn                *[]float64               `json:"bps_max_in"`
	BpsMaxLength            *float64                 `json:"bps_max_length"`
	BpsMaxLengthGt          *float64                 `json:"bps_max_length_gt"`
	BpsMaxLengthGte         *float64                 `json:"bps_max_length_gte"`
	BpsMaxLengthIn          *[]float64               `json:"bps_max_length_in"`
	BpsMaxLengthLt          *float64                 `json:"bps_max_length_lt"`
	BpsMaxLengthLte         *float64                 `json:"bps_max_length_lte"`
	BpsMaxLengthNot         *float64                 `json:"bps_max_length_not"`
	BpsMaxLengthNotIn       *[]float64               `json:"bps_max_length_not_in"`
	BpsMaxLt                *float64                 `json:"bps_max_lt"`
	BpsMaxLte               *float64                 `json:"bps_max_lte"`
	BpsMaxNot               *float64                 `json:"bps_max_not"`
	BpsMaxNotIn             *[]float64               `json:"bps_max_not_in"`
	BpsNot                  *float64                 `json:"bps_not"`
	BpsNotIn                *[]float64               `json:"bps_not_in"`
	BpsRd                   *float64                 `json:"bps_rd"`
	BpsRdGt                 *float64                 `json:"bps_rd_gt"`
	BpsRdGte                *float64                 `json:"bps_rd_gte"`
	BpsRdIn                 *[]float64               `json:"bps_rd_in"`
	BpsRdLt                 *float64                 `json:"bps_rd_lt"`
	BpsRdLte                *float64                 `json:"bps_rd_lte"`
	BpsRdMax                *float64                 `json:"bps_rd_max"`
	BpsRdMaxGt              *float64                 `json:"bps_rd_max_gt"`
	BpsRdMaxGte             *float64                 `json:"bps_rd_max_gte"`
	BpsRdMaxIn              *[]float64               `json:"bps_rd_max_in"`
	BpsRdMaxLength          *float64                 `json:"bps_rd_max_length"`
	BpsRdMaxLengthGt        *float64                 `json:"bps_rd_max_length_gt"`
	BpsRdMaxLengthGte       *float64                 `json:"bps_rd_max_length_gte"`
	BpsRdMaxLengthIn        *[]float64               `json:"bps_rd_max_length_in"`
	BpsRdMaxLengthLt        *float64                 `json:"bps_rd_max_length_lt"`
	BpsRdMaxLengthLte       *float64                 `json:"bps_rd_max_length_lte"`
	BpsRdMaxLengthNot       *float64                 `json:"bps_rd_max_length_not"`
	BpsRdMaxLengthNotIn     *[]float64               `json:"bps_rd_max_length_not_in"`
	BpsRdMaxLt              *float64                 `json:"bps_rd_max_lt"`
	BpsRdMaxLte             *float64                 `json:"bps_rd_max_lte"`
	BpsRdMaxNot             *float64                 `json:"bps_rd_max_not"`
	BpsRdMaxNotIn           *[]float64               `json:"bps_rd_max_not_in"`
	BpsRdNot                *float64                 `json:"bps_rd_not"`
	BpsRdNotIn              *[]float64               `json:"bps_rd_not_in"`
	BpsWr                   *float64                 `json:"bps_wr"`
	BpsWrGt                 *float64                 `json:"bps_wr_gt"`
	BpsWrGte                *float64                 `json:"bps_wr_gte"`
	BpsWrIn                 *[]float64               `json:"bps_wr_in"`
	BpsWrLt                 *float64                 `json:"bps_wr_lt"`
	BpsWrLte                *float64                 `json:"bps_wr_lte"`
	BpsWrMax                *float64                 `json:"bps_wr_max"`
	BpsWrMaxGt              *float64                 `json:"bps_wr_max_gt"`
	BpsWrMaxGte             *float64                 `json:"bps_wr_max_gte"`
	BpsWrMaxIn              *[]float64               `json:"bps_wr_max_in"`
	BpsWrMaxLength          *float64                 `json:"bps_wr_max_length"`
	BpsWrMaxLengthGt        *float64                 `json:"bps_wr_max_length_gt"`
	BpsWrMaxLengthGte       *float64                 `json:"bps_wr_max_length_gte"`
	BpsWrMaxLengthIn        *[]float64               `json:"bps_wr_max_length_in"`
	BpsWrMaxLengthLt        *float64                 `json:"bps_wr_max_length_lt"`
	BpsWrMaxLengthLte       *float64                 `json:"bps_wr_max_length_lte"`
	BpsWrMaxLengthNot       *float64                 `json:"bps_wr_max_length_not"`
	BpsWrMaxLengthNotIn     *[]float64               `json:"bps_wr_max_length_not_in"`
	BpsWrMaxLt              *float64                 `json:"bps_wr_max_lt"`
	BpsWrMaxLte             *float64                 `json:"bps_wr_max_lte"`
	BpsWrMaxNot             *float64                 `json:"bps_wr_max_not"`
	BpsWrMaxNotIn           *[]float64               `json:"bps_wr_max_not_in"`
	BpsWrNot                *float64                 `json:"bps_wr_not"`
	BpsWrNotIn              *[]float64               `json:"bps_wr_not_in"`
	ChapEnabled             *bool                    `json:"chap_enabled"`
	ChapEnabledNot          *bool                    `json:"chap_enabled_not"`
	ChapName                *string                  `json:"chap_name"`
	ChapNameContains        *string                  `json:"chap_name_contains"`
	ChapNameEndsWith        *string                  `json:"chap_name_ends_with"`
	ChapNameGt              *string                  `json:"chap_name_gt"`
	ChapNameGte             *string                  `json:"chap_name_gte"`
	ChapNameIn              *[]string                `json:"chap_name_in"`
	ChapNameLt              *string                  `json:"chap_name_lt"`
	ChapNameLte             *string                  `json:"chap_name_lte"`
	ChapNameNot             *string                  `json:"chap_name_not"`
	ChapNameNotContains     *string                  `json:"chap_name_not_contains"`
	ChapNameNotEndsWith     *string                  `json:"chap_name_not_ends_with"`
	ChapNameNotIn           *[]string                `json:"chap_name_not_in"`
	ChapNameNotStartsWith   *string                  `json:"chap_name_not_starts_with"`
	ChapNameStartsWith      *string                  `json:"chap_name_starts_with"`
	ChapSecret              *string                  `json:"chap_secret"`
	ChapSecretContains      *string                  `json:"chap_secret_contains"`
	ChapSecretEndsWith      *string                  `json:"chap_secret_ends_with"`
	ChapSecretGt            *string                  `json:"chap_secret_gt"`
	ChapSecretGte           *string                  `json:"chap_secret_gte"`
	ChapSecretIn            *[]string                `json:"chap_secret_in"`
	ChapSecretLt            *string                  `json:"chap_secret_lt"`
	ChapSecretLte           *string                  `json:"chap_secret_lte"`
	ChapSecretNot           *string                  `json:"chap_secret_not"`
	ChapSecretNotContains   *string                  `json:"chap_secret_not_contains"`
	ChapSecretNotEndsWith   *string                  `json:"chap_secret_not_ends_with"`
	ChapSecretNotIn         *[]string                `json:"chap_secret_not_in"`
	ChapSecretNotStartsWith *string                  `json:"chap_secret_not_starts_with"`
	ChapSecretStartsWith    *string                  `json:"chap_secret_starts_with"`
	Cluster                 *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn    *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	ExternalUse               *bool                `json:"external_use"`
	ExternalUseNot            *bool                `json:"external_use_not"`
	Id                        *string              `json:"id"`
	IdContains                *string              `json:"id_contains"`
	IdEndsWith                *string              `json:"id_ends_with"`
	IdGt                      *string              `json:"id_gt"`
	IdGte                     *string              `json:"id_gte"`
	IdIn                      *[]string            `json:"id_in"`
	IdLt                      *string              `json:"id_lt"`
	IdLte                     *string              `json:"id_lte"`
	IdNot                     *string              `json:"id_not"`
	IdNotContains             *string              `json:"id_not_contains"`
	IdNotEndsWith             *string              `json:"id_not_ends_with"`
	IdNotIn                   *[]string            `json:"id_not_in"`
	IdNotStartsWith           *string              `json:"id_not_starts_with"`
	IdStartsWith              *string              `json:"id_starts_with"`
	Internal                  *bool                `json:"internal"`
	InternalNot               *bool                `json:"internal_not"`
	IoSize                    *float64             `json:"io_size"`
	IoSizeGt                  *float64             `json:"io_size_gt"`
	IoSizeGte                 *float64             `json:"io_size_gte"`
	IoSizeIn                  *[]float64           `json:"io_size_in"`
	IoSizeLt                  *float64             `json:"io_size_lt"`
	IoSizeLte                 *float64             `json:"io_size_lte"`
	IoSizeNot                 *float64             `json:"io_size_not"`
	IoSizeNotIn               *[]float64           `json:"io_size_not_in"`
	Iops                      *float64             `json:"iops"`
	IopsGt                    *float64             `json:"iops_gt"`
	IopsGte                   *float64             `json:"iops_gte"`
	IopsIn                    *[]float64           `json:"iops_in"`
	IopsLt                    *float64             `json:"iops_lt"`
	IopsLte                   *float64             `json:"iops_lte"`
	IopsMax                   *float64             `json:"iops_max"`
	IopsMaxGt                 *float64             `json:"iops_max_gt"`
	IopsMaxGte                *float64             `json:"iops_max_gte"`
	IopsMaxIn                 *[]float64           `json:"iops_max_in"`
	IopsMaxLength             *float64             `json:"iops_max_length"`
	IopsMaxLengthGt           *float64             `json:"iops_max_length_gt"`
	IopsMaxLengthGte          *float64             `json:"iops_max_length_gte"`
	IopsMaxLengthIn           *[]float64           `json:"iops_max_length_in"`
	IopsMaxLengthLt           *float64             `json:"iops_max_length_lt"`
	IopsMaxLengthLte          *float64             `json:"iops_max_length_lte"`
	IopsMaxLengthNot          *float64             `json:"iops_max_length_not"`
	IopsMaxLengthNotIn        *[]float64           `json:"iops_max_length_not_in"`
	IopsMaxLt                 *float64             `json:"iops_max_lt"`
	IopsMaxLte                *float64             `json:"iops_max_lte"`
	IopsMaxNot                *float64             `json:"iops_max_not"`
	IopsMaxNotIn              *[]float64           `json:"iops_max_not_in"`
	IopsNot                   *float64             `json:"iops_not"`
	IopsNotIn                 *[]float64           `json:"iops_not_in"`
	IopsRd                    *float64             `json:"iops_rd"`
	IopsRdGt                  *float64             `json:"iops_rd_gt"`
	IopsRdGte                 *float64             `json:"iops_rd_gte"`
	IopsRdIn                  *[]float64           `json:"iops_rd_in"`
	IopsRdLt                  *float64             `json:"iops_rd_lt"`
	IopsRdLte                 *float64             `json:"iops_rd_lte"`
	IopsRdMax                 *float64             `json:"iops_rd_max"`
	IopsRdMaxGt               *float64             `json:"iops_rd_max_gt"`
	IopsRdMaxGte              *float64             `json:"iops_rd_max_gte"`
	IopsRdMaxIn               *[]float64           `json:"iops_rd_max_in"`
	IopsRdMaxLength           *float64             `json:"iops_rd_max_length"`
	IopsRdMaxLengthGt         *float64             `json:"iops_rd_max_length_gt"`
	IopsRdMaxLengthGte        *float64             `json:"iops_rd_max_length_gte"`
	IopsRdMaxLengthIn         *[]float64           `json:"iops_rd_max_length_in"`
	IopsRdMaxLengthLt         *float64             `json:"iops_rd_max_length_lt"`
	IopsRdMaxLengthLte        *float64             `json:"iops_rd_max_length_lte"`
	IopsRdMaxLengthNot        *float64             `json:"iops_rd_max_length_not"`
	IopsRdMaxLengthNotIn      *[]float64           `json:"iops_rd_max_length_not_in"`
	IopsRdMaxLt               *float64             `json:"iops_rd_max_lt"`
	IopsRdMaxLte              *float64             `json:"iops_rd_max_lte"`
	IopsRdMaxNot              *float64             `json:"iops_rd_max_not"`
	IopsRdMaxNotIn            *[]float64           `json:"iops_rd_max_not_in"`
	IopsRdNot                 *float64             `json:"iops_rd_not"`
	IopsRdNotIn               *[]float64           `json:"iops_rd_not_in"`
	IopsWr                    *float64             `json:"iops_wr"`
	IopsWrGt                  *float64             `json:"iops_wr_gt"`
	IopsWrGte                 *float64             `json:"iops_wr_gte"`
	IopsWrIn                  *[]float64           `json:"iops_wr_in"`
	IopsWrLt                  *float64             `json:"iops_wr_lt"`
	IopsWrLte                 *float64             `json:"iops_wr_lte"`
	IopsWrMax                 *float64             `json:"iops_wr_max"`
	IopsWrMaxGt               *float64             `json:"iops_wr_max_gt"`
	IopsWrMaxGte              *float64             `json:"iops_wr_max_gte"`
	IopsWrMaxIn               *[]float64           `json:"iops_wr_max_in"`
	IopsWrMaxLength           *float64             `json:"iops_wr_max_length"`
	IopsWrMaxLengthGt         *float64             `json:"iops_wr_max_length_gt"`
	IopsWrMaxLengthGte        *float64             `json:"iops_wr_max_length_gte"`
	IopsWrMaxLengthIn         *[]float64           `json:"iops_wr_max_length_in"`
	IopsWrMaxLengthLt         *float64             `json:"iops_wr_max_length_lt"`
	IopsWrMaxLengthLte        *float64             `json:"iops_wr_max_length_lte"`
	IopsWrMaxLengthNot        *float64             `json:"iops_wr_max_length_not"`
	IopsWrMaxLengthNotIn      *[]float64           `json:"iops_wr_max_length_not_in"`
	IopsWrMaxLt               *float64             `json:"iops_wr_max_lt"`
	IopsWrMaxLte              *float64             `json:"iops_wr_max_lte"`
	IopsWrMaxNot              *float64             `json:"iops_wr_max_not"`
	IopsWrMaxNotIn            *[]float64           `json:"iops_wr_max_not_in"`
	IopsWrNot                 *float64             `json:"iops_wr_not"`
	IopsWrNotIn               *[]float64           `json:"iops_wr_not_in"`
	IpWhitelist               *string              `json:"ip_whitelist"`
	IpWhitelistContains       *string              `json:"ip_whitelist_contains"`
	IpWhitelistEndsWith       *string              `json:"ip_whitelist_ends_with"`
	IpWhitelistGt             *string              `json:"ip_whitelist_gt"`
	IpWhitelistGte            *string              `json:"ip_whitelist_gte"`
	IpWhitelistIn             *[]string            `json:"ip_whitelist_in"`
	IpWhitelistLt             *string              `json:"ip_whitelist_lt"`
	IpWhitelistLte            *string              `json:"ip_whitelist_lte"`
	IpWhitelistNot            *string              `json:"ip_whitelist_not"`
	IpWhitelistNotContains    *string              `json:"ip_whitelist_not_contains"`
	IpWhitelistNotEndsWith    *string              `json:"ip_whitelist_not_ends_with"`
	IpWhitelistNotIn          *[]string            `json:"ip_whitelist_not_in"`
	IpWhitelistNotStartsWith  *string              `json:"ip_whitelist_not_starts_with"`
	IpWhitelistStartsWith     *string              `json:"ip_whitelist_starts_with"`
	IqnName                   *string              `json:"iqn_name"`
	IqnNameContains           *string              `json:"iqn_name_contains"`
	IqnNameEndsWith           *string              `json:"iqn_name_ends_with"`
	IqnNameGt                 *string              `json:"iqn_name_gt"`
	IqnNameGte                *string              `json:"iqn_name_gte"`
	IqnNameIn                 *[]string            `json:"iqn_name_in"`
	IqnNameLt                 *string              `json:"iqn_name_lt"`
	IqnNameLte                *string              `json:"iqn_name_lte"`
	IqnNameNot                *string              `json:"iqn_name_not"`
	IqnNameNotContains        *string              `json:"iqn_name_not_contains"`
	IqnNameNotEndsWith        *string              `json:"iqn_name_not_ends_with"`
	IqnNameNotIn              *[]string            `json:"iqn_name_not_in"`
	IqnNameNotStartsWith      *string              `json:"iqn_name_not_starts_with"`
	IqnNameStartsWith         *string              `json:"iqn_name_starts_with"`
	IqnWhitelist              *string              `json:"iqn_whitelist"`
	IqnWhitelistContains      *string              `json:"iqn_whitelist_contains"`
	IqnWhitelistEndsWith      *string              `json:"iqn_whitelist_ends_with"`
	IqnWhitelistGt            *string              `json:"iqn_whitelist_gt"`
	IqnWhitelistGte           *string              `json:"iqn_whitelist_gte"`
	IqnWhitelistIn            *[]string            `json:"iqn_whitelist_in"`
	IqnWhitelistLt            *string              `json:"iqn_whitelist_lt"`
	IqnWhitelistLte           *string              `json:"iqn_whitelist_lte"`
	IqnWhitelistNot           *string              `json:"iqn_whitelist_not"`
	IqnWhitelistNotContains   *string              `json:"iqn_whitelist_not_contains"`
	IqnWhitelistNotEndsWith   *string              `json:"iqn_whitelist_not_ends_with"`
	IqnWhitelistNotIn         *[]string            `json:"iqn_whitelist_not_in"`
	IqnWhitelistNotStartsWith *string              `json:"iqn_whitelist_not_starts_with"`
	IqnWhitelistStartsWith    *string              `json:"iqn_whitelist_starts_with"`
	LabelsEvery               *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	LunsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"luns_every"`
	LunsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"luns_none"`
	LunsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"luns_some"`
	Name              *string    `json:"name"`
	NameContains      *string    `json:"name_contains"`
	NameEndsWith      *string    `json:"name_ends_with"`
	NameGt            *string    `json:"name_gt"`
	NameGte           *string    `json:"name_gte"`
	NameIn            *[]string  `json:"name_in"`
	NameLt            *string    `json:"name_lt"`
	NameLte           *string    `json:"name_lte"`
	NameNot           *string    `json:"name_not"`
	NameNotContains   *string    `json:"name_not_contains"`
	NameNotEndsWith   *string    `json:"name_not_ends_with"`
	NameNotIn         *[]string  `json:"name_not_in"`
	NameNotStartsWith *string    `json:"name_not_starts_with"`
	NameStartsWith    *string    `json:"name_starts_with"`
	ReplicaNum        *float64   `json:"replica_num"`
	ReplicaNumGt      *float64   `json:"replica_num_gt"`
	ReplicaNumGte     *float64   `json:"replica_num_gte"`
	ReplicaNumIn      *[]float64 `json:"replica_num_in"`
	ReplicaNumLt      *float64   `json:"replica_num_lt"`
	ReplicaNumLte     *float64   `json:"replica_num_lte"`
	ReplicaNumNot     *float64   `json:"replica_num_not"`
	ReplicaNumNotIn   *[]float64 `json:"replica_num_not_in"`
	StripeNum         *float64   `json:"stripe_num"`
	StripeNumGt       *float64   `json:"stripe_num_gt"`
	StripeNumGte      *float64   `json:"stripe_num_gte"`
	StripeNumIn       *[]float64 `json:"stripe_num_in"`
	StripeNumLt       *float64   `json:"stripe_num_lt"`
	StripeNumLte      *float64   `json:"stripe_num_lte"`
	StripeNumNot      *float64   `json:"stripe_num_not"`
	StripeNumNotIn    *[]float64 `json:"stripe_num_not_in"`
	StripeSize        *float64   `json:"stripe_size"`
	StripeSizeGt      *float64   `json:"stripe_size_gt"`
	StripeSizeGte     *float64   `json:"stripe_size_gte"`
	StripeSizeIn      *[]float64 `json:"stripe_size_in"`
	StripeSizeLt      *float64   `json:"stripe_size_lt"`
	StripeSizeLte     *float64   `json:"stripe_size_lte"`
	StripeSizeNot     *float64   `json:"stripe_size_not"`
	StripeSizeNotIn   *[]float64 `json:"stripe_size_not_in"`
	ThinProvision     *bool      `json:"thin_provision"`
	ThinProvisionNot  *bool      `json:"thin_provision_not"`
}

// Label defines model for Label.
type Label struct {
	ClusterNum *float64 `json:"cluster_num"`
	Clusters   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"clusters"`
	ConsistencyGroupNum         *float64 `json:"consistency_group_num"`
	ConsistencyGroupSnapshotNum *float64 `json:"consistency_group_snapshot_num"`
	ConsistencyGroupSnapshots   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_group_snapshots"`
	ConsistencyGroups *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_groups"`
	CreatedAt     string   `json:"createdAt"`
	DatacenterNum *float64 `json:"datacenter_num"`
	Datacenters   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"datacenters"`
	DiskNum *float64 `json:"disk_num"`
	Disks   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"disks"`
	ElfImageNum *float64 `json:"elf_image_num"`
	ElfImages   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"elf_images"`
	HostNum *float64 `json:"host_num"`
	Hosts   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"hosts"`
	Id                  string   `json:"id"`
	IscsiLunNum         *float64 `json:"iscsi_lun_num"`
	IscsiLunSnapshotNum *float64 `json:"iscsi_lun_snapshot_num"`
	IscsiLunSnapshots   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_lun_snapshots"`
	IscsiLuns *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_luns"`
	IscsiTargetNum *float64 `json:"iscsi_target_num"`
	IscsiTargets   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"iscsi_targets"`
	Key               string   `json:"key"`
	NamespaceGroupNum *float64 `json:"namespace_group_num"`
	NamespaceGroups   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"namespace_groups"`
	NfsExportNum *float64 `json:"nfs_export_num"`
	NfsExports   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nfs_exports"`
	NfsInodeNum *float64 `json:"nfs_inode_num"`
	NfsInodes   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nfs_inodes"`
	NicNum *float64 `json:"nic_num"`
	Nics   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nics"`
	NvmfNamespaceNum         *float64 `json:"nvmf_namespace_num"`
	NvmfNamespaceSnapshotNum *float64 `json:"nvmf_namespace_snapshot_num"`
	NvmfNamespaceSnapshots   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_namespace_snapshots"`
	NvmfNamespaces *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_namespaces"`
	NvmfSubsystemNum *float64 `json:"nvmf_subsystem_num"`
	NvmfSubsystems   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_subsystems"`
	SystemVlanNum *float64 `json:"system_vlan_num"`
	TotalNum      *float64 `json:"total_num"`
	Value         *string  `json:"value"`
	VdsNum        *float64 `json:"vds_num"`
	Vdses         *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vdses"`
	Vlans *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vlans"`
	VmNum         *float64 `json:"vm_num"`
	VmSnapshotNum *float64 `json:"vm_snapshot_num"`
	VmSnapshots   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_snapshots"`
	VmTemplateNum *float64 `json:"vm_template_num"`
	VmTemplates   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_templates"`
	VmVlanNum   *float64 `json:"vm_vlan_num"`
	VmVolumeNum *float64 `json:"vm_volume_num"`
	VmVolumes   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_volumes"`
	Vms *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vms"`
}

// LabelConnection defines model for LabelConnection.
type LabelConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// LabelCreationParams defines model for LabelCreationParams.
type LabelCreationParams struct {
	Key   string  `json:"key"`
	Value *string `json:"value,omitempty"`
}

// LabelDeletionParams defines model for LabelDeletionParams.
type LabelDeletionParams struct {
	Where LabelWhereInput `json:"where"`
}

// LabelOrderByInput defines model for LabelOrderByInput.
type LabelOrderByInput string

// LabelUpdationParams defines model for LabelUpdationParams.
type LabelUpdationParams struct {
	Data struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"data"`
	Where LabelWhereInput `json:"where"`
}

// LabelWhereInput defines model for LabelWhereInput.
type LabelWhereInput struct {
	AND             *[]LabelWhereInput `json:"AND"`
	NOT             *[]LabelWhereInput `json:"NOT"`
	OR              *[]LabelWhereInput `json:"OR"`
	ClusterNum      *float64           `json:"cluster_num"`
	ClusterNumGt    *float64           `json:"cluster_num_gt"`
	ClusterNumGte   *float64           `json:"cluster_num_gte"`
	ClusterNumIn    *[]float64         `json:"cluster_num_in"`
	ClusterNumLt    *float64           `json:"cluster_num_lt"`
	ClusterNumLte   *float64           `json:"cluster_num_lte"`
	ClusterNumNot   *float64           `json:"cluster_num_not"`
	ClusterNumNotIn *[]float64         `json:"cluster_num_not_in"`
	ClustersEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_every"`
	ClustersNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_none"`
	ClustersSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"clusters_some"`
	ConsistencyGroupNum              *float64   `json:"consistency_group_num"`
	ConsistencyGroupNumGt            *float64   `json:"consistency_group_num_gt"`
	ConsistencyGroupNumGte           *float64   `json:"consistency_group_num_gte"`
	ConsistencyGroupNumIn            *[]float64 `json:"consistency_group_num_in"`
	ConsistencyGroupNumLt            *float64   `json:"consistency_group_num_lt"`
	ConsistencyGroupNumLte           *float64   `json:"consistency_group_num_lte"`
	ConsistencyGroupNumNot           *float64   `json:"consistency_group_num_not"`
	ConsistencyGroupNumNotIn         *[]float64 `json:"consistency_group_num_not_in"`
	ConsistencyGroupSnapshotNum      *float64   `json:"consistency_group_snapshot_num"`
	ConsistencyGroupSnapshotNumGt    *float64   `json:"consistency_group_snapshot_num_gt"`
	ConsistencyGroupSnapshotNumGte   *float64   `json:"consistency_group_snapshot_num_gte"`
	ConsistencyGroupSnapshotNumIn    *[]float64 `json:"consistency_group_snapshot_num_in"`
	ConsistencyGroupSnapshotNumLt    *float64   `json:"consistency_group_snapshot_num_lt"`
	ConsistencyGroupSnapshotNumLte   *float64   `json:"consistency_group_snapshot_num_lte"`
	ConsistencyGroupSnapshotNumNot   *float64   `json:"consistency_group_snapshot_num_not"`
	ConsistencyGroupSnapshotNumNotIn *[]float64 `json:"consistency_group_snapshot_num_not_in"`
	ConsistencyGroupSnapshotsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"consistency_group_snapshots_every"`
	ConsistencyGroupSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"consistency_group_snapshots_none"`
	ConsistencyGroupSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"consistency_group_snapshots_some"`
	ConsistencyGroupsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_groups_every"`
	ConsistencyGroupsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_groups_none"`
	ConsistencyGroupsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_groups_some"`
	CreatedAt          *string    `json:"createdAt"`
	CreatedAtGt        *string    `json:"createdAt_gt"`
	CreatedAtGte       *string    `json:"createdAt_gte"`
	CreatedAtIn        *[]string  `json:"createdAt_in"`
	CreatedAtLt        *string    `json:"createdAt_lt"`
	CreatedAtLte       *string    `json:"createdAt_lte"`
	CreatedAtNot       *string    `json:"createdAt_not"`
	CreatedAtNotIn     *[]string  `json:"createdAt_not_in"`
	DatacenterNum      *float64   `json:"datacenter_num"`
	DatacenterNumGt    *float64   `json:"datacenter_num_gt"`
	DatacenterNumGte   *float64   `json:"datacenter_num_gte"`
	DatacenterNumIn    *[]float64 `json:"datacenter_num_in"`
	DatacenterNumLt    *float64   `json:"datacenter_num_lt"`
	DatacenterNumLte   *float64   `json:"datacenter_num_lte"`
	DatacenterNumNot   *float64   `json:"datacenter_num_not"`
	DatacenterNumNotIn *[]float64 `json:"datacenter_num_not_in"`
	DatacentersEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_every"`
	DatacentersNone *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_none"`
	DatacentersSome *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_some"`
	DiskNum      *float64   `json:"disk_num"`
	DiskNumGt    *float64   `json:"disk_num_gt"`
	DiskNumGte   *float64   `json:"disk_num_gte"`
	DiskNumIn    *[]float64 `json:"disk_num_in"`
	DiskNumLt    *float64   `json:"disk_num_lt"`
	DiskNumLte   *float64   `json:"disk_num_lte"`
	DiskNumNot   *float64   `json:"disk_num_not"`
	DiskNumNotIn *[]float64 `json:"disk_num_not_in"`
	DisksEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_every"`
	DisksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_none"`
	DisksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disks_some"`
	ElfImageNum      *float64   `json:"elf_image_num"`
	ElfImageNumGt    *float64   `json:"elf_image_num_gt"`
	ElfImageNumGte   *float64   `json:"elf_image_num_gte"`
	ElfImageNumIn    *[]float64 `json:"elf_image_num_in"`
	ElfImageNumLt    *float64   `json:"elf_image_num_lt"`
	ElfImageNumLte   *float64   `json:"elf_image_num_lte"`
	ElfImageNumNot   *float64   `json:"elf_image_num_not"`
	ElfImageNumNotIn *[]float64 `json:"elf_image_num_not_in"`
	ElfImagesEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfImageWhereInput)
		ElfImageWhereInput `yaml:",inline"`
	} `json:"elf_images_every"`
	ElfImagesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfImageWhereInput)
		ElfImageWhereInput `yaml:",inline"`
	} `json:"elf_images_none"`
	ElfImagesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfImageWhereInput)
		ElfImageWhereInput `yaml:",inline"`
	} `json:"elf_images_some"`
	HostNum      *float64   `json:"host_num"`
	HostNumGt    *float64   `json:"host_num_gt"`
	HostNumGte   *float64   `json:"host_num_gte"`
	HostNumIn    *[]float64 `json:"host_num_in"`
	HostNumLt    *float64   `json:"host_num_lt"`
	HostNumLte   *float64   `json:"host_num_lte"`
	HostNumNot   *float64   `json:"host_num_not"`
	HostNumNotIn *[]float64 `json:"host_num_not_in"`
	HostsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_every"`
	HostsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_none"`
	HostsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_some"`
	Id                       *string    `json:"id"`
	IdContains               *string    `json:"id_contains"`
	IdEndsWith               *string    `json:"id_ends_with"`
	IdGt                     *string    `json:"id_gt"`
	IdGte                    *string    `json:"id_gte"`
	IdIn                     *[]string  `json:"id_in"`
	IdLt                     *string    `json:"id_lt"`
	IdLte                    *string    `json:"id_lte"`
	IdNot                    *string    `json:"id_not"`
	IdNotContains            *string    `json:"id_not_contains"`
	IdNotEndsWith            *string    `json:"id_not_ends_with"`
	IdNotIn                  *[]string  `json:"id_not_in"`
	IdNotStartsWith          *string    `json:"id_not_starts_with"`
	IdStartsWith             *string    `json:"id_starts_with"`
	IscsiLunNum              *float64   `json:"iscsi_lun_num"`
	IscsiLunNumGt            *float64   `json:"iscsi_lun_num_gt"`
	IscsiLunNumGte           *float64   `json:"iscsi_lun_num_gte"`
	IscsiLunNumIn            *[]float64 `json:"iscsi_lun_num_in"`
	IscsiLunNumLt            *float64   `json:"iscsi_lun_num_lt"`
	IscsiLunNumLte           *float64   `json:"iscsi_lun_num_lte"`
	IscsiLunNumNot           *float64   `json:"iscsi_lun_num_not"`
	IscsiLunNumNotIn         *[]float64 `json:"iscsi_lun_num_not_in"`
	IscsiLunSnapshotNum      *float64   `json:"iscsi_lun_snapshot_num"`
	IscsiLunSnapshotNumGt    *float64   `json:"iscsi_lun_snapshot_num_gt"`
	IscsiLunSnapshotNumGte   *float64   `json:"iscsi_lun_snapshot_num_gte"`
	IscsiLunSnapshotNumIn    *[]float64 `json:"iscsi_lun_snapshot_num_in"`
	IscsiLunSnapshotNumLt    *float64   `json:"iscsi_lun_snapshot_num_lt"`
	IscsiLunSnapshotNumLte   *float64   `json:"iscsi_lun_snapshot_num_lte"`
	IscsiLunSnapshotNumNot   *float64   `json:"iscsi_lun_snapshot_num_not"`
	IscsiLunSnapshotNumNotIn *[]float64 `json:"iscsi_lun_snapshot_num_not_in"`
	IscsiLunSnapshotsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotWhereInput)
		IscsiLunSnapshotWhereInput `yaml:",inline"`
	} `json:"iscsi_lun_snapshots_every"`
	IscsiLunSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotWhereInput)
		IscsiLunSnapshotWhereInput `yaml:",inline"`
	} `json:"iscsi_lun_snapshots_none"`
	IscsiLunSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunSnapshotWhereInput)
		IscsiLunSnapshotWhereInput `yaml:",inline"`
	} `json:"iscsi_lun_snapshots_some"`
	IscsiLunsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"iscsi_luns_every"`
	IscsiLunsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"iscsi_luns_none"`
	IscsiLunsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"iscsi_luns_some"`
	IscsiTargetNum      *float64   `json:"iscsi_target_num"`
	IscsiTargetNumGt    *float64   `json:"iscsi_target_num_gt"`
	IscsiTargetNumGte   *float64   `json:"iscsi_target_num_gte"`
	IscsiTargetNumIn    *[]float64 `json:"iscsi_target_num_in"`
	IscsiTargetNumLt    *float64   `json:"iscsi_target_num_lt"`
	IscsiTargetNumLte   *float64   `json:"iscsi_target_num_lte"`
	IscsiTargetNumNot   *float64   `json:"iscsi_target_num_not"`
	IscsiTargetNumNotIn *[]float64 `json:"iscsi_target_num_not_in"`
	IscsiTargetsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"iscsi_targets_every"`
	IscsiTargetsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"iscsi_targets_none"`
	IscsiTargetsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiTargetWhereInput)
		IscsiTargetWhereInput `yaml:",inline"`
	} `json:"iscsi_targets_some"`
	Key                    *string    `json:"key"`
	KeyContains            *string    `json:"key_contains"`
	KeyEndsWith            *string    `json:"key_ends_with"`
	KeyGt                  *string    `json:"key_gt"`
	KeyGte                 *string    `json:"key_gte"`
	KeyIn                  *[]string  `json:"key_in"`
	KeyLt                  *string    `json:"key_lt"`
	KeyLte                 *string    `json:"key_lte"`
	KeyNot                 *string    `json:"key_not"`
	KeyNotContains         *string    `json:"key_not_contains"`
	KeyNotEndsWith         *string    `json:"key_not_ends_with"`
	KeyNotIn               *[]string  `json:"key_not_in"`
	KeyNotStartsWith       *string    `json:"key_not_starts_with"`
	KeyStartsWith          *string    `json:"key_starts_with"`
	NamespaceGroupNum      *float64   `json:"namespace_group_num"`
	NamespaceGroupNumGt    *float64   `json:"namespace_group_num_gt"`
	NamespaceGroupNumGte   *float64   `json:"namespace_group_num_gte"`
	NamespaceGroupNumIn    *[]float64 `json:"namespace_group_num_in"`
	NamespaceGroupNumLt    *float64   `json:"namespace_group_num_lt"`
	NamespaceGroupNumLte   *float64   `json:"namespace_group_num_lte"`
	NamespaceGroupNumNot   *float64   `json:"namespace_group_num_not"`
	NamespaceGroupNumNotIn *[]float64 `json:"namespace_group_num_not_in"`
	NamespaceGroupsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"namespace_groups_every"`
	NamespaceGroupsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"namespace_groups_none"`
	NamespaceGroupsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"namespace_groups_some"`
	NfsExportNum      *float64   `json:"nfs_export_num"`
	NfsExportNumGt    *float64   `json:"nfs_export_num_gt"`
	NfsExportNumGte   *float64   `json:"nfs_export_num_gte"`
	NfsExportNumIn    *[]float64 `json:"nfs_export_num_in"`
	NfsExportNumLt    *float64   `json:"nfs_export_num_lt"`
	NfsExportNumLte   *float64   `json:"nfs_export_num_lte"`
	NfsExportNumNot   *float64   `json:"nfs_export_num_not"`
	NfsExportNumNotIn *[]float64 `json:"nfs_export_num_not_in"`
	NfsExportsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportWhereInput)
		NfsExportWhereInput `yaml:",inline"`
	} `json:"nfs_exports_every"`
	NfsExportsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportWhereInput)
		NfsExportWhereInput `yaml:",inline"`
	} `json:"nfs_exports_none"`
	NfsExportsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportWhereInput)
		NfsExportWhereInput `yaml:",inline"`
	} `json:"nfs_exports_some"`
	NfsInodeNum      *float64   `json:"nfs_inode_num"`
	NfsInodeNumGt    *float64   `json:"nfs_inode_num_gt"`
	NfsInodeNumGte   *float64   `json:"nfs_inode_num_gte"`
	NfsInodeNumIn    *[]float64 `json:"nfs_inode_num_in"`
	NfsInodeNumLt    *float64   `json:"nfs_inode_num_lt"`
	NfsInodeNumLte   *float64   `json:"nfs_inode_num_lte"`
	NfsInodeNumNot   *float64   `json:"nfs_inode_num_not"`
	NfsInodeNumNotIn *[]float64 `json:"nfs_inode_num_not_in"`
	NfsInodesEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeWhereInput)
		NfsInodeWhereInput `yaml:",inline"`
	} `json:"nfs_inodes_every"`
	NfsInodesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeWhereInput)
		NfsInodeWhereInput `yaml:",inline"`
	} `json:"nfs_inodes_none"`
	NfsInodesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeWhereInput)
		NfsInodeWhereInput `yaml:",inline"`
	} `json:"nfs_inodes_some"`
	NicNum      *float64   `json:"nic_num"`
	NicNumGt    *float64   `json:"nic_num_gt"`
	NicNumGte   *float64   `json:"nic_num_gte"`
	NicNumIn    *[]float64 `json:"nic_num_in"`
	NicNumLt    *float64   `json:"nic_num_lt"`
	NicNumLte   *float64   `json:"nic_num_lte"`
	NicNumNot   *float64   `json:"nic_num_not"`
	NicNumNotIn *[]float64 `json:"nic_num_not_in"`
	NicsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_every"`
	NicsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_none"`
	NicsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_some"`
	NvmfNamespaceNum              *float64   `json:"nvmf_namespace_num"`
	NvmfNamespaceNumGt            *float64   `json:"nvmf_namespace_num_gt"`
	NvmfNamespaceNumGte           *float64   `json:"nvmf_namespace_num_gte"`
	NvmfNamespaceNumIn            *[]float64 `json:"nvmf_namespace_num_in"`
	NvmfNamespaceNumLt            *float64   `json:"nvmf_namespace_num_lt"`
	NvmfNamespaceNumLte           *float64   `json:"nvmf_namespace_num_lte"`
	NvmfNamespaceNumNot           *float64   `json:"nvmf_namespace_num_not"`
	NvmfNamespaceNumNotIn         *[]float64 `json:"nvmf_namespace_num_not_in"`
	NvmfNamespaceSnapshotNum      *float64   `json:"nvmf_namespace_snapshot_num"`
	NvmfNamespaceSnapshotNumGt    *float64   `json:"nvmf_namespace_snapshot_num_gt"`
	NvmfNamespaceSnapshotNumGte   *float64   `json:"nvmf_namespace_snapshot_num_gte"`
	NvmfNamespaceSnapshotNumIn    *[]float64 `json:"nvmf_namespace_snapshot_num_in"`
	NvmfNamespaceSnapshotNumLt    *float64   `json:"nvmf_namespace_snapshot_num_lt"`
	NvmfNamespaceSnapshotNumLte   *float64   `json:"nvmf_namespace_snapshot_num_lte"`
	NvmfNamespaceSnapshotNumNot   *float64   `json:"nvmf_namespace_snapshot_num_not"`
	NvmfNamespaceSnapshotNumNotIn *[]float64 `json:"nvmf_namespace_snapshot_num_not_in"`
	NvmfNamespaceSnapshotsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotWhereInput)
		NvmfNamespaceSnapshotWhereInput `yaml:",inline"`
	} `json:"nvmf_namespace_snapshots_every"`
	NvmfNamespaceSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotWhereInput)
		NvmfNamespaceSnapshotWhereInput `yaml:",inline"`
	} `json:"nvmf_namespace_snapshots_none"`
	NvmfNamespaceSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceSnapshotWhereInput)
		NvmfNamespaceSnapshotWhereInput `yaml:",inline"`
	} `json:"nvmf_namespace_snapshots_some"`
	NvmfNamespacesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"nvmf_namespaces_every"`
	NvmfNamespacesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"nvmf_namespaces_none"`
	NvmfNamespacesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"nvmf_namespaces_some"`
	NvmfSubsystemNum      *float64   `json:"nvmf_subsystem_num"`
	NvmfSubsystemNumGt    *float64   `json:"nvmf_subsystem_num_gt"`
	NvmfSubsystemNumGte   *float64   `json:"nvmf_subsystem_num_gte"`
	NvmfSubsystemNumIn    *[]float64 `json:"nvmf_subsystem_num_in"`
	NvmfSubsystemNumLt    *float64   `json:"nvmf_subsystem_num_lt"`
	NvmfSubsystemNumLte   *float64   `json:"nvmf_subsystem_num_lte"`
	NvmfSubsystemNumNot   *float64   `json:"nvmf_subsystem_num_not"`
	NvmfSubsystemNumNotIn *[]float64 `json:"nvmf_subsystem_num_not_in"`
	NvmfSubsystemsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"nvmf_subsystems_every"`
	NvmfSubsystemsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"nvmf_subsystems_none"`
	NvmfSubsystemsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"nvmf_subsystems_some"`
	SystemVlanNum      *float64   `json:"system_vlan_num"`
	SystemVlanNumGt    *float64   `json:"system_vlan_num_gt"`
	SystemVlanNumGte   *float64   `json:"system_vlan_num_gte"`
	SystemVlanNumIn    *[]float64 `json:"system_vlan_num_in"`
	SystemVlanNumLt    *float64   `json:"system_vlan_num_lt"`
	SystemVlanNumLte   *float64   `json:"system_vlan_num_lte"`
	SystemVlanNumNot   *float64   `json:"system_vlan_num_not"`
	SystemVlanNumNotIn *[]float64 `json:"system_vlan_num_not_in"`
	TotalNum           *float64   `json:"total_num"`
	TotalNumGt         *float64   `json:"total_num_gt"`
	TotalNumGte        *float64   `json:"total_num_gte"`
	TotalNumIn         *[]float64 `json:"total_num_in"`
	TotalNumLt         *float64   `json:"total_num_lt"`
	TotalNumLte        *float64   `json:"total_num_lte"`
	TotalNumNot        *float64   `json:"total_num_not"`
	TotalNumNotIn      *[]float64 `json:"total_num_not_in"`
	Value              *string    `json:"value"`
	ValueContains      *string    `json:"value_contains"`
	ValueEndsWith      *string    `json:"value_ends_with"`
	ValueGt            *string    `json:"value_gt"`
	ValueGte           *string    `json:"value_gte"`
	ValueIn            *[]string  `json:"value_in"`
	ValueLt            *string    `json:"value_lt"`
	ValueLte           *string    `json:"value_lte"`
	ValueNot           *string    `json:"value_not"`
	ValueNotContains   *string    `json:"value_not_contains"`
	ValueNotEndsWith   *string    `json:"value_not_ends_with"`
	ValueNotIn         *[]string  `json:"value_not_in"`
	ValueNotStartsWith *string    `json:"value_not_starts_with"`
	ValueStartsWith    *string    `json:"value_starts_with"`
	VdsNum             *float64   `json:"vds_num"`
	VdsNumGt           *float64   `json:"vds_num_gt"`
	VdsNumGte          *float64   `json:"vds_num_gte"`
	VdsNumIn           *[]float64 `json:"vds_num_in"`
	VdsNumLt           *float64   `json:"vds_num_lt"`
	VdsNumLte          *float64   `json:"vds_num_lte"`
	VdsNumNot          *float64   `json:"vds_num_not"`
	VdsNumNotIn        *[]float64 `json:"vds_num_not_in"`
	VdsesEvery         *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"vdses_every"`
	VdsesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"vdses_none"`
	VdsesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"vdses_some"`
	VlansEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"vlans_every"`
	VlansNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"vlans_none"`
	VlansSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"vlans_some"`
	VmNum              *float64   `json:"vm_num"`
	VmNumGt            *float64   `json:"vm_num_gt"`
	VmNumGte           *float64   `json:"vm_num_gte"`
	VmNumIn            *[]float64 `json:"vm_num_in"`
	VmNumLt            *float64   `json:"vm_num_lt"`
	VmNumLte           *float64   `json:"vm_num_lte"`
	VmNumNot           *float64   `json:"vm_num_not"`
	VmNumNotIn         *[]float64 `json:"vm_num_not_in"`
	VmSnapshotNum      *float64   `json:"vm_snapshot_num"`
	VmSnapshotNumGt    *float64   `json:"vm_snapshot_num_gt"`
	VmSnapshotNumGte   *float64   `json:"vm_snapshot_num_gte"`
	VmSnapshotNumIn    *[]float64 `json:"vm_snapshot_num_in"`
	VmSnapshotNumLt    *float64   `json:"vm_snapshot_num_lt"`
	VmSnapshotNumLte   *float64   `json:"vm_snapshot_num_lte"`
	VmSnapshotNumNot   *float64   `json:"vm_snapshot_num_not"`
	VmSnapshotNumNotIn *[]float64 `json:"vm_snapshot_num_not_in"`
	VmSnapshotsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_every"`
	VmSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_none"`
	VmSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_some"`
	VmTemplateNum      *float64   `json:"vm_template_num"`
	VmTemplateNumGt    *float64   `json:"vm_template_num_gt"`
	VmTemplateNumGte   *float64   `json:"vm_template_num_gte"`
	VmTemplateNumIn    *[]float64 `json:"vm_template_num_in"`
	VmTemplateNumLt    *float64   `json:"vm_template_num_lt"`
	VmTemplateNumLte   *float64   `json:"vm_template_num_lte"`
	VmTemplateNumNot   *float64   `json:"vm_template_num_not"`
	VmTemplateNumNotIn *[]float64 `json:"vm_template_num_not_in"`
	VmTemplatesEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_every"`
	VmTemplatesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_none"`
	VmTemplatesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmTemplateWhereInput)
		VmTemplateWhereInput `yaml:",inline"`
	} `json:"vm_templates_some"`
	VmVlanNum        *float64   `json:"vm_vlan_num"`
	VmVlanNumGt      *float64   `json:"vm_vlan_num_gt"`
	VmVlanNumGte     *float64   `json:"vm_vlan_num_gte"`
	VmVlanNumIn      *[]float64 `json:"vm_vlan_num_in"`
	VmVlanNumLt      *float64   `json:"vm_vlan_num_lt"`
	VmVlanNumLte     *float64   `json:"vm_vlan_num_lte"`
	VmVlanNumNot     *float64   `json:"vm_vlan_num_not"`
	VmVlanNumNotIn   *[]float64 `json:"vm_vlan_num_not_in"`
	VmVolumeNum      *float64   `json:"vm_volume_num"`
	VmVolumeNumGt    *float64   `json:"vm_volume_num_gt"`
	VmVolumeNumGte   *float64   `json:"vm_volume_num_gte"`
	VmVolumeNumIn    *[]float64 `json:"vm_volume_num_in"`
	VmVolumeNumLt    *float64   `json:"vm_volume_num_lt"`
	VmVolumeNumLte   *float64   `json:"vm_volume_num_lte"`
	VmVolumeNumNot   *float64   `json:"vm_volume_num_not"`
	VmVolumeNumNotIn *[]float64 `json:"vm_volume_num_not_in"`
	VmVolumesEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"vm_volumes_every"`
	VmVolumesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"vm_volumes_none"`
	VmVolumesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"vm_volumes_some"`
	VmsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_every"`
	VmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_none"`
	VmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_some"`
}

// License defines model for License.
type License struct {
	ExpireDate           string          `json:"expire_date"`
	Id                   string          `json:"id"`
	LicenseSerial        string          `json:"license_serial"`
	MaintenanceEndDate   *string         `json:"maintenance_end_date"`
	MaintenanceStartDate *string         `json:"maintenance_start_date"`
	MaxChunkNum          float64         `json:"max_chunk_num"`
	MaxClusterNum        float64         `json:"max_cluster_num"`
	SignDate             string          `json:"sign_date"`
	SoftwareEdition      SoftwareEdition `json:"software_edition"`
	Type                 LicenseType     `json:"type"`
}

// LicenseConnection defines model for LicenseConnection.
type LicenseConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// LicenseOrderByInput defines model for LicenseOrderByInput.
type LicenseOrderByInput string

// LicenseType defines model for LicenseType.
type LicenseType string

// LicenseUpdationParams defines model for LicenseUpdationParams.
type LicenseUpdationParams struct {
	Data struct {
		License string `json:"license"`
	} `json:"data"`
}

// LicenseWhereInput defines model for LicenseWhereInput.
type LicenseWhereInput struct {
	AND                        *[]LicenseWhereInput `json:"AND"`
	NOT                        *[]LicenseWhereInput `json:"NOT"`
	OR                         *[]LicenseWhereInput `json:"OR"`
	ExpireDate                 *string              `json:"expire_date"`
	ExpireDateGt               *string              `json:"expire_date_gt"`
	ExpireDateGte              *string              `json:"expire_date_gte"`
	ExpireDateIn               *[]string            `json:"expire_date_in"`
	ExpireDateLt               *string              `json:"expire_date_lt"`
	ExpireDateLte              *string              `json:"expire_date_lte"`
	ExpireDateNot              *string              `json:"expire_date_not"`
	ExpireDateNotIn            *[]string            `json:"expire_date_not_in"`
	Id                         *string              `json:"id"`
	IdContains                 *string              `json:"id_contains"`
	IdEndsWith                 *string              `json:"id_ends_with"`
	IdGt                       *string              `json:"id_gt"`
	IdGte                      *string              `json:"id_gte"`
	IdIn                       *[]string            `json:"id_in"`
	IdLt                       *string              `json:"id_lt"`
	IdLte                      *string              `json:"id_lte"`
	IdNot                      *string              `json:"id_not"`
	IdNotContains              *string              `json:"id_not_contains"`
	IdNotEndsWith              *string              `json:"id_not_ends_with"`
	IdNotIn                    *[]string            `json:"id_not_in"`
	IdNotStartsWith            *string              `json:"id_not_starts_with"`
	IdStartsWith               *string              `json:"id_starts_with"`
	LicenseSerial              *string              `json:"license_serial"`
	LicenseSerialContains      *string              `json:"license_serial_contains"`
	LicenseSerialEndsWith      *string              `json:"license_serial_ends_with"`
	LicenseSerialGt            *string              `json:"license_serial_gt"`
	LicenseSerialGte           *string              `json:"license_serial_gte"`
	LicenseSerialIn            *[]string            `json:"license_serial_in"`
	LicenseSerialLt            *string              `json:"license_serial_lt"`
	LicenseSerialLte           *string              `json:"license_serial_lte"`
	LicenseSerialNot           *string              `json:"license_serial_not"`
	LicenseSerialNotContains   *string              `json:"license_serial_not_contains"`
	LicenseSerialNotEndsWith   *string              `json:"license_serial_not_ends_with"`
	LicenseSerialNotIn         *[]string            `json:"license_serial_not_in"`
	LicenseSerialNotStartsWith *string              `json:"license_serial_not_starts_with"`
	LicenseSerialStartsWith    *string              `json:"license_serial_starts_with"`
	MaintenanceEndDate         *string              `json:"maintenance_end_date"`
	MaintenanceEndDateGt       *string              `json:"maintenance_end_date_gt"`
	MaintenanceEndDateGte      *string              `json:"maintenance_end_date_gte"`
	MaintenanceEndDateIn       *[]string            `json:"maintenance_end_date_in"`
	MaintenanceEndDateLt       *string              `json:"maintenance_end_date_lt"`
	MaintenanceEndDateLte      *string              `json:"maintenance_end_date_lte"`
	MaintenanceEndDateNot      *string              `json:"maintenance_end_date_not"`
	MaintenanceEndDateNotIn    *[]string            `json:"maintenance_end_date_not_in"`
	MaintenanceStartDate       *string              `json:"maintenance_start_date"`
	MaintenanceStartDateGt     *string              `json:"maintenance_start_date_gt"`
	MaintenanceStartDateGte    *string              `json:"maintenance_start_date_gte"`
	MaintenanceStartDateIn     *[]string            `json:"maintenance_start_date_in"`
	MaintenanceStartDateLt     *string              `json:"maintenance_start_date_lt"`
	MaintenanceStartDateLte    *string              `json:"maintenance_start_date_lte"`
	MaintenanceStartDateNot    *string              `json:"maintenance_start_date_not"`
	MaintenanceStartDateNotIn  *[]string            `json:"maintenance_start_date_not_in"`
	MaxChunkNum                *float64             `json:"max_chunk_num"`
	MaxChunkNumGt              *float64             `json:"max_chunk_num_gt"`
	MaxChunkNumGte             *float64             `json:"max_chunk_num_gte"`
	MaxChunkNumIn              *[]float64           `json:"max_chunk_num_in"`
	MaxChunkNumLt              *float64             `json:"max_chunk_num_lt"`
	MaxChunkNumLte             *float64             `json:"max_chunk_num_lte"`
	MaxChunkNumNot             *float64             `json:"max_chunk_num_not"`
	MaxChunkNumNotIn           *[]float64           `json:"max_chunk_num_not_in"`
	MaxClusterNum              *float64             `json:"max_cluster_num"`
	MaxClusterNumGt            *float64             `json:"max_cluster_num_gt"`
	MaxClusterNumGte           *float64             `json:"max_cluster_num_gte"`
	MaxClusterNumIn            *[]float64           `json:"max_cluster_num_in"`
	MaxClusterNumLt            *float64             `json:"max_cluster_num_lt"`
	MaxClusterNumLte           *float64             `json:"max_cluster_num_lte"`
	MaxClusterNumNot           *float64             `json:"max_cluster_num_not"`
	MaxClusterNumNotIn         *[]float64           `json:"max_cluster_num_not_in"`
	SignDate                   *string              `json:"sign_date"`
	SignDateGt                 *string              `json:"sign_date_gt"`
	SignDateGte                *string              `json:"sign_date_gte"`
	SignDateIn                 *[]string            `json:"sign_date_in"`
	SignDateLt                 *string              `json:"sign_date_lt"`
	SignDateLte                *string              `json:"sign_date_lte"`
	SignDateNot                *string              `json:"sign_date_not"`
	SignDateNotIn              *[]string            `json:"sign_date_not_in"`
	SoftwareEdition            *struct {
		// Embedded struct due to allOf(#/components/schemas/SoftwareEdition)
		SoftwareEdition `yaml:",inline"`
	} `json:"software_edition"`
	SoftwareEditionIn  *[]SoftwareEdition `json:"software_edition_in"`
	SoftwareEditionNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SoftwareEdition)
		SoftwareEdition `yaml:",inline"`
	} `json:"software_edition_not"`
	SoftwareEditionNotIn *[]SoftwareEdition `json:"software_edition_not_in"`
	Type                 *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseType)
		LicenseType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]LicenseType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/LicenseType)
		LicenseType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn *[]LicenseType `json:"type_not_in"`
}

// LogCollection defines model for LogCollection.
type LogCollection struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Hosts *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"hosts"`
	Id           string              `json:"id"`
	LocalId      string              `json:"local_id"`
	LogEndedAt   string              `json:"log_ended_at"`
	LogStartedAt string              `json:"log_started_at"`
	Owner        string              `json:"owner"`
	Path         string              `json:"path"`
	Progress     float64             `json:"progress"`
	Size         float64             `json:"size"`
	StartedAt    string              `json:"started_at"`
	Status       LogCollectionStatus `json:"status"`
}

// LogCollectionConnection defines model for LogCollectionConnection.
type LogCollectionConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// LogCollectionOrderByInput defines model for LogCollectionOrderByInput.
type LogCollectionOrderByInput string

// LogCollectionStatus defines model for LogCollectionStatus.
type LogCollectionStatus string

// LogCollectionWhereInput defines model for LogCollectionWhereInput.
type LogCollectionWhereInput struct {
	AND     *[]LogCollectionWhereInput `json:"AND"`
	NOT     *[]LogCollectionWhereInput `json:"NOT"`
	OR      *[]LogCollectionWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	HostsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_every"`
	HostsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_none"`
	HostsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_some"`
	Id                   *string    `json:"id"`
	IdContains           *string    `json:"id_contains"`
	IdEndsWith           *string    `json:"id_ends_with"`
	IdGt                 *string    `json:"id_gt"`
	IdGte                *string    `json:"id_gte"`
	IdIn                 *[]string  `json:"id_in"`
	IdLt                 *string    `json:"id_lt"`
	IdLte                *string    `json:"id_lte"`
	IdNot                *string    `json:"id_not"`
	IdNotContains        *string    `json:"id_not_contains"`
	IdNotEndsWith        *string    `json:"id_not_ends_with"`
	IdNotIn              *[]string  `json:"id_not_in"`
	IdNotStartsWith      *string    `json:"id_not_starts_with"`
	IdStartsWith         *string    `json:"id_starts_with"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	LogEndedAt           *string    `json:"log_ended_at"`
	LogEndedAtGt         *string    `json:"log_ended_at_gt"`
	LogEndedAtGte        *string    `json:"log_ended_at_gte"`
	LogEndedAtIn         *[]string  `json:"log_ended_at_in"`
	LogEndedAtLt         *string    `json:"log_ended_at_lt"`
	LogEndedAtLte        *string    `json:"log_ended_at_lte"`
	LogEndedAtNot        *string    `json:"log_ended_at_not"`
	LogEndedAtNotIn      *[]string  `json:"log_ended_at_not_in"`
	LogStartedAt         *string    `json:"log_started_at"`
	LogStartedAtGt       *string    `json:"log_started_at_gt"`
	LogStartedAtGte      *string    `json:"log_started_at_gte"`
	LogStartedAtIn       *[]string  `json:"log_started_at_in"`
	LogStartedAtLt       *string    `json:"log_started_at_lt"`
	LogStartedAtLte      *string    `json:"log_started_at_lte"`
	LogStartedAtNot      *string    `json:"log_started_at_not"`
	LogStartedAtNotIn    *[]string  `json:"log_started_at_not_in"`
	Owner                *string    `json:"owner"`
	OwnerContains        *string    `json:"owner_contains"`
	OwnerEndsWith        *string    `json:"owner_ends_with"`
	OwnerGt              *string    `json:"owner_gt"`
	OwnerGte             *string    `json:"owner_gte"`
	OwnerIn              *[]string  `json:"owner_in"`
	OwnerLt              *string    `json:"owner_lt"`
	OwnerLte             *string    `json:"owner_lte"`
	OwnerNot             *string    `json:"owner_not"`
	OwnerNotContains     *string    `json:"owner_not_contains"`
	OwnerNotEndsWith     *string    `json:"owner_not_ends_with"`
	OwnerNotIn           *[]string  `json:"owner_not_in"`
	OwnerNotStartsWith   *string    `json:"owner_not_starts_with"`
	OwnerStartsWith      *string    `json:"owner_starts_with"`
	Path                 *string    `json:"path"`
	PathContains         *string    `json:"path_contains"`
	PathEndsWith         *string    `json:"path_ends_with"`
	PathGt               *string    `json:"path_gt"`
	PathGte              *string    `json:"path_gte"`
	PathIn               *[]string  `json:"path_in"`
	PathLt               *string    `json:"path_lt"`
	PathLte              *string    `json:"path_lte"`
	PathNot              *string    `json:"path_not"`
	PathNotContains      *string    `json:"path_not_contains"`
	PathNotEndsWith      *string    `json:"path_not_ends_with"`
	PathNotIn            *[]string  `json:"path_not_in"`
	PathNotStartsWith    *string    `json:"path_not_starts_with"`
	PathStartsWith       *string    `json:"path_starts_with"`
	Progress             *float64   `json:"progress"`
	ProgressGt           *float64   `json:"progress_gt"`
	ProgressGte          *float64   `json:"progress_gte"`
	ProgressIn           *[]float64 `json:"progress_in"`
	ProgressLt           *float64   `json:"progress_lt"`
	ProgressLte          *float64   `json:"progress_lte"`
	ProgressNot          *float64   `json:"progress_not"`
	ProgressNotIn        *[]float64 `json:"progress_not_in"`
	Size                 *float64   `json:"size"`
	SizeGt               *float64   `json:"size_gt"`
	SizeGte              *float64   `json:"size_gte"`
	SizeIn               *[]float64 `json:"size_in"`
	SizeLt               *float64   `json:"size_lt"`
	SizeLte              *float64   `json:"size_lte"`
	SizeNot              *float64   `json:"size_not"`
	SizeNotIn            *[]float64 `json:"size_not_in"`
	StartedAt            *string    `json:"started_at"`
	StartedAtGt          *string    `json:"started_at_gt"`
	StartedAtGte         *string    `json:"started_at_gte"`
	StartedAtIn          *[]string  `json:"started_at_in"`
	StartedAtLt          *string    `json:"started_at_lt"`
	StartedAtLte         *string    `json:"started_at_lte"`
	StartedAtNot         *string    `json:"started_at_not"`
	StartedAtNotIn       *[]string  `json:"started_at_not_in"`
	Status               *struct {
		// Embedded struct due to allOf(#/components/schemas/LogCollectionStatus)
		LogCollectionStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]LogCollectionStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/LogCollectionStatus)
		LogCollectionStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn *[]LogCollectionStatus `json:"status_not_in"`
}

// LoginInput defines model for LoginInput.
type LoginInput struct {
	Password string     `json:"password"`
	Source   UserSource `json:"source"`
	Username string     `json:"username"`
}

// ManagementVlanUpdationParams defines model for ManagementVlanUpdationParams.
type ManagementVlanUpdationParams struct {
	Data struct {
		ExtraIp *[]struct {
			HostId       string `json:"host_id"`
			ManagementIp string `json:"management_ip"`
		} `json:"extra_ip,omitempty"`
		GatewayIp  *string  `json:"gateway_ip,omitempty"`
		Subnetmask *string  `json:"subnetmask,omitempty"`
		VlanId     *float64 `json:"vlan_id,omitempty"`
	} `json:"data"`
	Where VlanWhereInput `json:"where"`
}

// MaybeDiskFunction defines model for Maybe_DiskFunction_.
type MaybeDiskFunction struct {
	// Embedded struct due to allOf(#/components/schemas/DiskFunction)
	DiskFunction `yaml:",inline"`
}

// MaybeDiskType defines model for Maybe_DiskType_.
type MaybeDiskType struct {
	// Embedded struct due to allOf(#/components/schemas/DiskType)
	DiskType `yaml:",inline"`
}

// MaybeScalarsAtInt defines model for Maybe_Scalars-at-Int_.
type MaybeScalarsAtInt float64

// MetricType defines model for MetricType.
type MetricType string

// MetroCheckStatusEnum defines model for MetroCheckStatusEnum.
type MetroCheckStatusEnum string

// MigrateTransmitter defines model for MigrateTransmitter.
type MigrateTransmitter struct {
	CreatedAt         string `json:"createdAt"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id        string `json:"id"`
	Ip        string `json:"ip"`
	Migrating bool   `json:"migrating"`
	Name      string `json:"name"`
	Password  string `json:"password"`
	Username  string `json:"username"`
}

// MigrateTransmitterConnection defines model for MigrateTransmitterConnection.
type MigrateTransmitterConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// MigrateTransmitterOrderByInput defines model for MigrateTransmitterOrderByInput.
type MigrateTransmitterOrderByInput string

// MigrateTransmitterWhereInput defines model for MigrateTransmitterWhereInput.
type MigrateTransmitterWhereInput struct {
	AND               *[]MigrateTransmitterWhereInput `json:"AND"`
	NOT               *[]MigrateTransmitterWhereInput `json:"NOT"`
	OR                *[]MigrateTransmitterWhereInput `json:"OR"`
	CreatedAt         *string                         `json:"createdAt"`
	CreatedAtGt       *string                         `json:"createdAt_gt"`
	CreatedAtGte      *string                         `json:"createdAt_gte"`
	CreatedAtIn       *[]string                       `json:"createdAt_in"`
	CreatedAtLt       *string                         `json:"createdAt_lt"`
	CreatedAtLte      *string                         `json:"createdAt_lte"`
	CreatedAtNot      *string                         `json:"createdAt_not"`
	CreatedAtNotIn    *[]string                       `json:"createdAt_not_in"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	Ip                     *string              `json:"ip"`
	IpContains             *string              `json:"ip_contains"`
	IpEndsWith             *string              `json:"ip_ends_with"`
	IpGt                   *string              `json:"ip_gt"`
	IpGte                  *string              `json:"ip_gte"`
	IpIn                   *[]string            `json:"ip_in"`
	IpLt                   *string              `json:"ip_lt"`
	IpLte                  *string              `json:"ip_lte"`
	IpNot                  *string              `json:"ip_not"`
	IpNotContains          *string              `json:"ip_not_contains"`
	IpNotEndsWith          *string              `json:"ip_not_ends_with"`
	IpNotIn                *[]string            `json:"ip_not_in"`
	IpNotStartsWith        *string              `json:"ip_not_starts_with"`
	IpStartsWith           *string              `json:"ip_starts_with"`
	Name                   *string              `json:"name"`
	NameContains           *string              `json:"name_contains"`
	NameEndsWith           *string              `json:"name_ends_with"`
	NameGt                 *string              `json:"name_gt"`
	NameGte                *string              `json:"name_gte"`
	NameIn                 *[]string            `json:"name_in"`
	NameLt                 *string              `json:"name_lt"`
	NameLte                *string              `json:"name_lte"`
	NameNot                *string              `json:"name_not"`
	NameNotContains        *string              `json:"name_not_contains"`
	NameNotEndsWith        *string              `json:"name_not_ends_with"`
	NameNotIn              *[]string            `json:"name_not_in"`
	NameNotStartsWith      *string              `json:"name_not_starts_with"`
	NameStartsWith         *string              `json:"name_starts_with"`
	Password               *string              `json:"password"`
	PasswordContains       *string              `json:"password_contains"`
	PasswordEndsWith       *string              `json:"password_ends_with"`
	PasswordGt             *string              `json:"password_gt"`
	PasswordGte            *string              `json:"password_gte"`
	PasswordIn             *[]string            `json:"password_in"`
	PasswordLt             *string              `json:"password_lt"`
	PasswordLte            *string              `json:"password_lte"`
	PasswordNot            *string              `json:"password_not"`
	PasswordNotContains    *string              `json:"password_not_contains"`
	PasswordNotEndsWith    *string              `json:"password_not_ends_with"`
	PasswordNotIn          *[]string            `json:"password_not_in"`
	PasswordNotStartsWith  *string              `json:"password_not_starts_with"`
	PasswordStartsWith     *string              `json:"password_starts_with"`
	Username               *string              `json:"username"`
	UsernameContains       *string              `json:"username_contains"`
	UsernameEndsWith       *string              `json:"username_ends_with"`
	UsernameGt             *string              `json:"username_gt"`
	UsernameGte            *string              `json:"username_gte"`
	UsernameIn             *[]string            `json:"username_in"`
	UsernameLt             *string              `json:"username_lt"`
	UsernameLte            *string              `json:"username_lte"`
	UsernameNot            *string              `json:"username_not"`
	UsernameNotContains    *string              `json:"username_not_contains"`
	UsernameNotEndsWith    *string              `json:"username_not_ends_with"`
	UsernameNotIn          *[]string            `json:"username_not_in"`
	UsernameNotStartsWith  *string              `json:"username_not_starts_with"`
	UsernameStartsWith     *string              `json:"username_starts_with"`
}

// MigrationVlanUpdationParams defines model for MigrationVlanUpdationParams.
type MigrationVlanUpdationParams struct {
	Data *struct {
		ExtraIp *[]struct {
			HostId       string `json:"host_id"`
			ManagementIp string `json:"management_ip"`
		} `json:"extra_ip,omitempty"`
		GatewayIp  *string  `json:"gateway_ip,omitempty"`
		Subnetmask *string  `json:"subnetmask,omitempty"`
		VlanId     *float64 `json:"vlan_id,omitempty"`
	} `json:"data,omitempty"`
	Where VlanWhereInput `json:"where"`
}

// MountDisksParams defines model for MountDisksParams.
type MountDisksParams []struct {
	Boot               float64               `json:"boot"`
	Bus                Bus                   `json:"bus"`
	Index              float64               `json:"index"`
	Key                *float64              `json:"key,omitempty"`
	MaxBandwidth       *float64              `json:"max_bandwidth,omitempty"`
	MaxBandwidthPolicy *VmDiskIoRestrictType `json:"max_bandwidth_policy,omitempty"`
	MaxIops            *float64              `json:"max_iops,omitempty"`
	MaxIopsPolicy      *VmDiskIoRestrictType `json:"max_iops_policy,omitempty"`
	VmVolumeId         string                `json:"vm_volume_id"`
}

// MountNewCreateDisksParams defines model for MountNewCreateDisksParams.
type MountNewCreateDisksParams []struct {
	Boot               float64               `json:"boot"`
	Bus                Bus                   `json:"bus"`
	Index              *float64              `json:"index,omitempty"`
	Key                *float64              `json:"key,omitempty"`
	MaxBandwidth       *float64              `json:"max_bandwidth,omitempty"`
	MaxBandwidthPolicy *VmDiskIoRestrictType `json:"max_bandwidth_policy,omitempty"`
	MaxIops            *float64              `json:"max_iops,omitempty"`
	MaxIopsPolicy      *VmDiskIoRestrictType `json:"max_iops_policy,omitempty"`
	VmVolume           struct {
		ElfStoragePolicy VmVolumeElfStoragePolicyType `json:"elf_storage_policy"`
		Name             string                       `json:"name"`
		Path             *string                      `json:"path,omitempty"`
		Size             float64                      `json:"size"`
	} `json:"vm_volume"`
}

// NamespaceGroup defines model for NamespaceGroup.
type NamespaceGroup struct {
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id     string `json:"id"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreateTime string `json:"local_create_time"`
	LocalId         string `json:"local_id"`
	Name            string `json:"name"`
	Namespaces      *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"namespaces"`
	NvmfSubsystem struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_subsystem"`
}

// NamespaceGroupConnection defines model for NamespaceGroupConnection.
type NamespaceGroupConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// NamespaceGroupCreationParams defines model for NamespaceGroupCreationParams.
type NamespaceGroupCreationParams struct {
	Name            string `json:"name"`
	NvmfSubsystemId string `json:"nvmf_subsystem_id"`
}

// NamespaceGroupDeletionParams defines model for NamespaceGroupDeletionParams.
type NamespaceGroupDeletionParams struct {
	Where NamespaceGroupWhereInput `json:"where"`
}

// NamespaceGroupOrderByInput defines model for NamespaceGroupOrderByInput.
type NamespaceGroupOrderByInput string

// NamespaceGroupUpdationParams defines model for NamespaceGroupUpdationParams.
type NamespaceGroupUpdationParams struct {
	Data struct {
		Name *string `json:"name,omitempty"`
	} `json:"data"`
	Where NamespaceGroupWhereInput `json:"where"`
}

// NamespaceGroupWhereInput defines model for NamespaceGroupWhereInput.
type NamespaceGroupWhereInput struct {
	AND               *[]NamespaceGroupWhereInput `json:"AND"`
	NOT               *[]NamespaceGroupWhereInput `json:"NOT"`
	OR                *[]NamespaceGroupWhereInput `json:"OR"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	LabelsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreateTime      *string   `json:"local_create_time"`
	LocalCreateTimeGt    *string   `json:"local_create_time_gt"`
	LocalCreateTimeGte   *string   `json:"local_create_time_gte"`
	LocalCreateTimeIn    *[]string `json:"local_create_time_in"`
	LocalCreateTimeLt    *string   `json:"local_create_time_lt"`
	LocalCreateTimeLte   *string   `json:"local_create_time_lte"`
	LocalCreateTimeNot   *string   `json:"local_create_time_not"`
	LocalCreateTimeNotIn *[]string `json:"local_create_time_not_in"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NamespacesEvery      *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_every"`
	NamespacesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_none"`
	NamespacesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_some"`
	NvmfSubsystem *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"nvmf_subsystem"`
}

// NetworkType defines model for NetworkType.
type NetworkType string

// NfsExport defines model for NfsExport.
type NfsExport struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description       string `json:"description"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	ExportInodeId string `json:"export_inode_id"`
	Id            string `json:"id"`
	Inodes        *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"inodes"`
	Internal    bool   `json:"internal"`
	IpWhitelist string `json:"ip_whitelist"`
	Labels      *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId       string  `json:"local_id"`
	Name          string  `json:"name"`
	ReplicaNum    float64 `json:"replica_num"`
	ThinProvision bool    `json:"thin_provision"`
}

// NfsExportConnection defines model for NfsExportConnection.
type NfsExportConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// NfsExportCreationParams defines model for NfsExportCreationParams.
type NfsExportCreationParams struct {
	ClusterId     string  `json:"cluster_id"`
	IpWhitelist   *string `json:"ip_whitelist,omitempty"`
	Name          string  `json:"name"`
	ReplicaNum    float64 `json:"replica_num"`
	ThinProvision bool    `json:"thin_provision"`
}

// NfsExportDeletionParams defines model for NfsExportDeletionParams.
type NfsExportDeletionParams struct {
	Where NfsExportWhereInput `json:"where"`
}

// NfsExportOrderByInput defines model for NfsExportOrderByInput.
type NfsExportOrderByInput string

// NfsExportUpdationParams defines model for NfsExportUpdationParams.
type NfsExportUpdationParams struct {
	Data *struct {
		IpWhitelist *string `json:"ip_whitelist,omitempty"`
		Name        *string `json:"name,omitempty"`
	} `json:"data,omitempty"`
	Where NfsExportWhereInput `json:"where"`
}

// NfsExportWhereInput defines model for NfsExportWhereInput.
type NfsExportWhereInput struct {
	AND     *[]NfsExportWhereInput `json:"AND"`
	NOT     *[]NfsExportWhereInput `json:"NOT"`
	OR      *[]NfsExportWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn     *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	ExportInodeId              *string              `json:"export_inode_id"`
	ExportInodeIdContains      *string              `json:"export_inode_id_contains"`
	ExportInodeIdEndsWith      *string              `json:"export_inode_id_ends_with"`
	ExportInodeIdGt            *string              `json:"export_inode_id_gt"`
	ExportInodeIdGte           *string              `json:"export_inode_id_gte"`
	ExportInodeIdIn            *[]string            `json:"export_inode_id_in"`
	ExportInodeIdLt            *string              `json:"export_inode_id_lt"`
	ExportInodeIdLte           *string              `json:"export_inode_id_lte"`
	ExportInodeIdNot           *string              `json:"export_inode_id_not"`
	ExportInodeIdNotContains   *string              `json:"export_inode_id_not_contains"`
	ExportInodeIdNotEndsWith   *string              `json:"export_inode_id_not_ends_with"`
	ExportInodeIdNotIn         *[]string            `json:"export_inode_id_not_in"`
	ExportInodeIdNotStartsWith *string              `json:"export_inode_id_not_starts_with"`
	ExportInodeIdStartsWith    *string              `json:"export_inode_id_starts_with"`
	Id                         *string              `json:"id"`
	IdContains                 *string              `json:"id_contains"`
	IdEndsWith                 *string              `json:"id_ends_with"`
	IdGt                       *string              `json:"id_gt"`
	IdGte                      *string              `json:"id_gte"`
	IdIn                       *[]string            `json:"id_in"`
	IdLt                       *string              `json:"id_lt"`
	IdLte                      *string              `json:"id_lte"`
	IdNot                      *string              `json:"id_not"`
	IdNotContains              *string              `json:"id_not_contains"`
	IdNotEndsWith              *string              `json:"id_not_ends_with"`
	IdNotIn                    *[]string            `json:"id_not_in"`
	IdNotStartsWith            *string              `json:"id_not_starts_with"`
	IdStartsWith               *string              `json:"id_starts_with"`
	InodesEvery                *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeWhereInput)
		NfsInodeWhereInput `yaml:",inline"`
	} `json:"inodes_every"`
	InodesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeWhereInput)
		NfsInodeWhereInput `yaml:",inline"`
	} `json:"inodes_none"`
	InodesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsInodeWhereInput)
		NfsInodeWhereInput `yaml:",inline"`
	} `json:"inodes_some"`
	Internal                 *bool     `json:"internal"`
	InternalNot              *bool     `json:"internal_not"`
	IpWhitelist              *string   `json:"ip_whitelist"`
	IpWhitelistContains      *string   `json:"ip_whitelist_contains"`
	IpWhitelistEndsWith      *string   `json:"ip_whitelist_ends_with"`
	IpWhitelistGt            *string   `json:"ip_whitelist_gt"`
	IpWhitelistGte           *string   `json:"ip_whitelist_gte"`
	IpWhitelistIn            *[]string `json:"ip_whitelist_in"`
	IpWhitelistLt            *string   `json:"ip_whitelist_lt"`
	IpWhitelistLte           *string   `json:"ip_whitelist_lte"`
	IpWhitelistNot           *string   `json:"ip_whitelist_not"`
	IpWhitelistNotContains   *string   `json:"ip_whitelist_not_contains"`
	IpWhitelistNotEndsWith   *string   `json:"ip_whitelist_not_ends_with"`
	IpWhitelistNotIn         *[]string `json:"ip_whitelist_not_in"`
	IpWhitelistNotStartsWith *string   `json:"ip_whitelist_not_starts_with"`
	IpWhitelistStartsWith    *string   `json:"ip_whitelist_starts_with"`
	LabelsEvery              *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	Name                 *string    `json:"name"`
	NameContains         *string    `json:"name_contains"`
	NameEndsWith         *string    `json:"name_ends_with"`
	NameGt               *string    `json:"name_gt"`
	NameGte              *string    `json:"name_gte"`
	NameIn               *[]string  `json:"name_in"`
	NameLt               *string    `json:"name_lt"`
	NameLte              *string    `json:"name_lte"`
	NameNot              *string    `json:"name_not"`
	NameNotContains      *string    `json:"name_not_contains"`
	NameNotEndsWith      *string    `json:"name_not_ends_with"`
	NameNotIn            *[]string  `json:"name_not_in"`
	NameNotStartsWith    *string    `json:"name_not_starts_with"`
	NameStartsWith       *string    `json:"name_starts_with"`
	ReplicaNum           *float64   `json:"replica_num"`
	ReplicaNumGt         *float64   `json:"replica_num_gt"`
	ReplicaNumGte        *float64   `json:"replica_num_gte"`
	ReplicaNumIn         *[]float64 `json:"replica_num_in"`
	ReplicaNumLt         *float64   `json:"replica_num_lt"`
	ReplicaNumLte        *float64   `json:"replica_num_lte"`
	ReplicaNumNot        *float64   `json:"replica_num_not"`
	ReplicaNumNotIn      *[]float64 `json:"replica_num_not_in"`
	ThinProvision        *bool      `json:"thin_provision"`
	ThinProvisionNot     *bool      `json:"thin_provision_not"`
}

// NfsInode defines model for NfsInode.
type NfsInode struct {
	AssignedSize      float64 `json:"assigned_size"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	File   bool   `json:"file"`
	Id     string `json:"id"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId        string `json:"local_id"`
	LocalUpdatedAt string `json:"local_updated_at"`
	Name           string `json:"name"`
	NfsExport      struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nfs_export"`
	ParentId    string  `json:"parent_id"`
	SharedSize  float64 `json:"shared_size"`
	SnapshotNum float64 `json:"snapshot_num"`
	UniqueSize  float64 `json:"unique_size"`
}

// NfsInodeConnection defines model for NfsInodeConnection.
type NfsInodeConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// NfsInodeOrderByInput defines model for NfsInodeOrderByInput.
type NfsInodeOrderByInput string

// NfsInodeWhereInput defines model for NfsInodeWhereInput.
type NfsInodeWhereInput struct {
	AND               *[]NfsInodeWhereInput `json:"AND"`
	NOT               *[]NfsInodeWhereInput `json:"NOT"`
	OR                *[]NfsInodeWhereInput `json:"OR"`
	AssignedSize      *float64              `json:"assigned_size"`
	AssignedSizeGt    *float64              `json:"assigned_size_gt"`
	AssignedSizeGte   *float64              `json:"assigned_size_gte"`
	AssignedSizeIn    *[]float64            `json:"assigned_size_in"`
	AssignedSizeLt    *float64              `json:"assigned_size_lt"`
	AssignedSizeLte   *float64              `json:"assigned_size_lte"`
	AssignedSizeNot   *float64              `json:"assigned_size_not"`
	AssignedSizeNotIn *[]float64            `json:"assigned_size_not_in"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	File                   *bool                `json:"file"`
	FileNot                *bool                `json:"file_not"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	LabelsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	LocalUpdatedAt       *string   `json:"local_updated_at"`
	LocalUpdatedAtGt     *string   `json:"local_updated_at_gt"`
	LocalUpdatedAtGte    *string   `json:"local_updated_at_gte"`
	LocalUpdatedAtIn     *[]string `json:"local_updated_at_in"`
	LocalUpdatedAtLt     *string   `json:"local_updated_at_lt"`
	LocalUpdatedAtLte    *string   `json:"local_updated_at_lte"`
	LocalUpdatedAtNot    *string   `json:"local_updated_at_not"`
	LocalUpdatedAtNotIn  *[]string `json:"local_updated_at_not_in"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NfsExport            *struct {
		// Embedded struct due to allOf(#/components/schemas/NfsExportWhereInput)
		NfsExportWhereInput `yaml:",inline"`
	} `json:"nfs_export"`
	ParentId              *string    `json:"parent_id"`
	ParentIdContains      *string    `json:"parent_id_contains"`
	ParentIdEndsWith      *string    `json:"parent_id_ends_with"`
	ParentIdGt            *string    `json:"parent_id_gt"`
	ParentIdGte           *string    `json:"parent_id_gte"`
	ParentIdIn            *[]string  `json:"parent_id_in"`
	ParentIdLt            *string    `json:"parent_id_lt"`
	ParentIdLte           *string    `json:"parent_id_lte"`
	ParentIdNot           *string    `json:"parent_id_not"`
	ParentIdNotContains   *string    `json:"parent_id_not_contains"`
	ParentIdNotEndsWith   *string    `json:"parent_id_not_ends_with"`
	ParentIdNotIn         *[]string  `json:"parent_id_not_in"`
	ParentIdNotStartsWith *string    `json:"parent_id_not_starts_with"`
	ParentIdStartsWith    *string    `json:"parent_id_starts_with"`
	SharedSize            *float64   `json:"shared_size"`
	SharedSizeGt          *float64   `json:"shared_size_gt"`
	SharedSizeGte         *float64   `json:"shared_size_gte"`
	SharedSizeIn          *[]float64 `json:"shared_size_in"`
	SharedSizeLt          *float64   `json:"shared_size_lt"`
	SharedSizeLte         *float64   `json:"shared_size_lte"`
	SharedSizeNot         *float64   `json:"shared_size_not"`
	SharedSizeNotIn       *[]float64 `json:"shared_size_not_in"`
	SnapshotNum           *float64   `json:"snapshot_num"`
	SnapshotNumGt         *float64   `json:"snapshot_num_gt"`
	SnapshotNumGte        *float64   `json:"snapshot_num_gte"`
	SnapshotNumIn         *[]float64 `json:"snapshot_num_in"`
	SnapshotNumLt         *float64   `json:"snapshot_num_lt"`
	SnapshotNumLte        *float64   `json:"snapshot_num_lte"`
	SnapshotNumNot        *float64   `json:"snapshot_num_not"`
	SnapshotNumNotIn      *[]float64 `json:"snapshot_num_not_in"`
	UniqueSize            *float64   `json:"unique_size"`
	UniqueSizeGt          *float64   `json:"unique_size_gt"`
	UniqueSizeGte         *float64   `json:"unique_size_gte"`
	UniqueSizeIn          *[]float64 `json:"unique_size_in"`
	UniqueSizeLt          *float64   `json:"unique_size_lt"`
	UniqueSizeLte         *float64   `json:"unique_size_lte"`
	UniqueSizeNot         *float64   `json:"unique_size_not"`
	UniqueSizeNotIn       *[]float64 `json:"unique_size_not_in"`
}

// Nic defines model for Nic.
type Nic struct {
	Driver      *string `json:"driver"`
	DriverState *struct {
		// Embedded struct due to allOf(#/components/schemas/NicDriverState)
		NicDriverState `yaml:",inline"`
	} `json:"driver_state"`
	GatewayIp *string `json:"gateway_ip"`
	Host      struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Ibdev     *string `json:"ibdev"`
	Id        string  `json:"id"`
	IpAddress *string `json:"ip_address"`
	IsSriov   *bool   `json:"is_sriov"`
	Labels    *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId     string   `json:"local_id"`
	MacAddress  string   `json:"mac_address"`
	MaxVfNum    *float64 `json:"max_vf_num"`
	Model       *string  `json:"model"`
	Mtu         float64  `json:"mtu"`
	Name        string   `json:"name"`
	NicUuid     *string  `json:"nic_uuid"`
	Physical    bool     `json:"physical"`
	RdmaEnabled *bool    `json:"rdma_enabled"`
	Running     bool     `json:"running"`
	Speed       *float64 `json:"speed"`
	SubnetMask  *string  `json:"subnet_mask"`
	TotalVfNum  *float64 `json:"total_vf_num"`
	Type        *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"type"`
	Up        bool     `json:"up"`
	UsedVfNum *float64 `json:"used_vf_num"`
	Vds       *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vds"`
}

// NicConnection defines model for NicConnection.
type NicConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// NicDriverState defines model for NicDriverState.
type NicDriverState string

// NicOrderByInput defines model for NicOrderByInput.
type NicOrderByInput string

// NicUpdationParams defines model for NicUpdationParams.
type NicUpdationParams struct {
	Data struct {
		Mtu        *float64 `json:"mtu,omitempty"`
		TotalVfNum *float64 `json:"total_vf_num,omitempty"`
	} `json:"data"`
	Where NicWhereInput `json:"where"`
}

// NicWhereInput defines model for NicWhereInput.
type NicWhereInput struct {
	AND                 *[]NicWhereInput `json:"AND"`
	NOT                 *[]NicWhereInput `json:"NOT"`
	OR                  *[]NicWhereInput `json:"OR"`
	Driver              *string          `json:"driver"`
	DriverContains      *string          `json:"driver_contains"`
	DriverEndsWith      *string          `json:"driver_ends_with"`
	DriverGt            *string          `json:"driver_gt"`
	DriverGte           *string          `json:"driver_gte"`
	DriverIn            *[]string        `json:"driver_in"`
	DriverLt            *string          `json:"driver_lt"`
	DriverLte           *string          `json:"driver_lte"`
	DriverNot           *string          `json:"driver_not"`
	DriverNotContains   *string          `json:"driver_not_contains"`
	DriverNotEndsWith   *string          `json:"driver_not_ends_with"`
	DriverNotIn         *[]string        `json:"driver_not_in"`
	DriverNotStartsWith *string          `json:"driver_not_starts_with"`
	DriverStartsWith    *string          `json:"driver_starts_with"`
	DriverState         *struct {
		// Embedded struct due to allOf(#/components/schemas/NicDriverState)
		NicDriverState `yaml:",inline"`
	} `json:"driver_state"`
	DriverStateIn  *[]NicDriverState `json:"driver_state_in"`
	DriverStateNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NicDriverState)
		NicDriverState `yaml:",inline"`
	} `json:"driver_state_not"`
	DriverStateNotIn       *[]NicDriverState `json:"driver_state_not_in"`
	GatewayIp              *string           `json:"gateway_ip"`
	GatewayIpContains      *string           `json:"gateway_ip_contains"`
	GatewayIpEndsWith      *string           `json:"gateway_ip_ends_with"`
	GatewayIpGt            *string           `json:"gateway_ip_gt"`
	GatewayIpGte           *string           `json:"gateway_ip_gte"`
	GatewayIpIn            *[]string         `json:"gateway_ip_in"`
	GatewayIpLt            *string           `json:"gateway_ip_lt"`
	GatewayIpLte           *string           `json:"gateway_ip_lte"`
	GatewayIpNot           *string           `json:"gateway_ip_not"`
	GatewayIpNotContains   *string           `json:"gateway_ip_not_contains"`
	GatewayIpNotEndsWith   *string           `json:"gateway_ip_not_ends_with"`
	GatewayIpNotIn         *[]string         `json:"gateway_ip_not_in"`
	GatewayIpNotStartsWith *string           `json:"gateway_ip_not_starts_with"`
	GatewayIpStartsWith    *string           `json:"gateway_ip_starts_with"`
	Host                   *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Ibdev                  *string   `json:"ibdev"`
	IbdevContains          *string   `json:"ibdev_contains"`
	IbdevEndsWith          *string   `json:"ibdev_ends_with"`
	IbdevGt                *string   `json:"ibdev_gt"`
	IbdevGte               *string   `json:"ibdev_gte"`
	IbdevIn                *[]string `json:"ibdev_in"`
	IbdevLt                *string   `json:"ibdev_lt"`
	IbdevLte               *string   `json:"ibdev_lte"`
	IbdevNot               *string   `json:"ibdev_not"`
	IbdevNotContains       *string   `json:"ibdev_not_contains"`
	IbdevNotEndsWith       *string   `json:"ibdev_not_ends_with"`
	IbdevNotIn             *[]string `json:"ibdev_not_in"`
	IbdevNotStartsWith     *string   `json:"ibdev_not_starts_with"`
	IbdevStartsWith        *string   `json:"ibdev_starts_with"`
	Id                     *string   `json:"id"`
	IdContains             *string   `json:"id_contains"`
	IdEndsWith             *string   `json:"id_ends_with"`
	IdGt                   *string   `json:"id_gt"`
	IdGte                  *string   `json:"id_gte"`
	IdIn                   *[]string `json:"id_in"`
	IdLt                   *string   `json:"id_lt"`
	IdLte                  *string   `json:"id_lte"`
	IdNot                  *string   `json:"id_not"`
	IdNotContains          *string   `json:"id_not_contains"`
	IdNotEndsWith          *string   `json:"id_not_ends_with"`
	IdNotIn                *[]string `json:"id_not_in"`
	IdNotStartsWith        *string   `json:"id_not_starts_with"`
	IdStartsWith           *string   `json:"id_starts_with"`
	IpAddress              *string   `json:"ip_address"`
	IpAddressContains      *string   `json:"ip_address_contains"`
	IpAddressEndsWith      *string   `json:"ip_address_ends_with"`
	IpAddressGt            *string   `json:"ip_address_gt"`
	IpAddressGte           *string   `json:"ip_address_gte"`
	IpAddressIn            *[]string `json:"ip_address_in"`
	IpAddressLt            *string   `json:"ip_address_lt"`
	IpAddressLte           *string   `json:"ip_address_lte"`
	IpAddressNot           *string   `json:"ip_address_not"`
	IpAddressNotContains   *string   `json:"ip_address_not_contains"`
	IpAddressNotEndsWith   *string   `json:"ip_address_not_ends_with"`
	IpAddressNotIn         *[]string `json:"ip_address_not_in"`
	IpAddressNotStartsWith *string   `json:"ip_address_not_starts_with"`
	IpAddressStartsWith    *string   `json:"ip_address_starts_with"`
	IsSriov                *bool     `json:"is_sriov"`
	IsSriovNot             *bool     `json:"is_sriov_not"`
	LabelsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId                 *string    `json:"local_id"`
	LocalIdContains         *string    `json:"local_id_contains"`
	LocalIdEndsWith         *string    `json:"local_id_ends_with"`
	LocalIdGt               *string    `json:"local_id_gt"`
	LocalIdGte              *string    `json:"local_id_gte"`
	LocalIdIn               *[]string  `json:"local_id_in"`
	LocalIdLt               *string    `json:"local_id_lt"`
	LocalIdLte              *string    `json:"local_id_lte"`
	LocalIdNot              *string    `json:"local_id_not"`
	LocalIdNotContains      *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith      *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn            *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith    *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith       *string    `json:"local_id_starts_with"`
	MacAddress              *string    `json:"mac_address"`
	MacAddressContains      *string    `json:"mac_address_contains"`
	MacAddressEndsWith      *string    `json:"mac_address_ends_with"`
	MacAddressGt            *string    `json:"mac_address_gt"`
	MacAddressGte           *string    `json:"mac_address_gte"`
	MacAddressIn            *[]string  `json:"mac_address_in"`
	MacAddressLt            *string    `json:"mac_address_lt"`
	MacAddressLte           *string    `json:"mac_address_lte"`
	MacAddressNot           *string    `json:"mac_address_not"`
	MacAddressNotContains   *string    `json:"mac_address_not_contains"`
	MacAddressNotEndsWith   *string    `json:"mac_address_not_ends_with"`
	MacAddressNotIn         *[]string  `json:"mac_address_not_in"`
	MacAddressNotStartsWith *string    `json:"mac_address_not_starts_with"`
	MacAddressStartsWith    *string    `json:"mac_address_starts_with"`
	MaxVfNum                *float64   `json:"max_vf_num"`
	MaxVfNumGt              *float64   `json:"max_vf_num_gt"`
	MaxVfNumGte             *float64   `json:"max_vf_num_gte"`
	MaxVfNumIn              *[]float64 `json:"max_vf_num_in"`
	MaxVfNumLt              *float64   `json:"max_vf_num_lt"`
	MaxVfNumLte             *float64   `json:"max_vf_num_lte"`
	MaxVfNumNot             *float64   `json:"max_vf_num_not"`
	MaxVfNumNotIn           *[]float64 `json:"max_vf_num_not_in"`
	Model                   *string    `json:"model"`
	ModelContains           *string    `json:"model_contains"`
	ModelEndsWith           *string    `json:"model_ends_with"`
	ModelGt                 *string    `json:"model_gt"`
	ModelGte                *string    `json:"model_gte"`
	ModelIn                 *[]string  `json:"model_in"`
	ModelLt                 *string    `json:"model_lt"`
	ModelLte                *string    `json:"model_lte"`
	ModelNot                *string    `json:"model_not"`
	ModelNotContains        *string    `json:"model_not_contains"`
	ModelNotEndsWith        *string    `json:"model_not_ends_with"`
	ModelNotIn              *[]string  `json:"model_not_in"`
	ModelNotStartsWith      *string    `json:"model_not_starts_with"`
	ModelStartsWith         *string    `json:"model_starts_with"`
	Mtu                     *float64   `json:"mtu"`
	MtuGt                   *float64   `json:"mtu_gt"`
	MtuGte                  *float64   `json:"mtu_gte"`
	MtuIn                   *[]float64 `json:"mtu_in"`
	MtuLt                   *float64   `json:"mtu_lt"`
	MtuLte                  *float64   `json:"mtu_lte"`
	MtuNot                  *float64   `json:"mtu_not"`
	MtuNotIn                *[]float64 `json:"mtu_not_in"`
	Name                    *string    `json:"name"`
	NameContains            *string    `json:"name_contains"`
	NameEndsWith            *string    `json:"name_ends_with"`
	NameGt                  *string    `json:"name_gt"`
	NameGte                 *string    `json:"name_gte"`
	NameIn                  *[]string  `json:"name_in"`
	NameLt                  *string    `json:"name_lt"`
	NameLte                 *string    `json:"name_lte"`
	NameNot                 *string    `json:"name_not"`
	NameNotContains         *string    `json:"name_not_contains"`
	NameNotEndsWith         *string    `json:"name_not_ends_with"`
	NameNotIn               *[]string  `json:"name_not_in"`
	NameNotStartsWith       *string    `json:"name_not_starts_with"`
	NameStartsWith          *string    `json:"name_starts_with"`
	NicUuid                 *string    `json:"nic_uuid"`
	NicUuidContains         *string    `json:"nic_uuid_contains"`
	NicUuidEndsWith         *string    `json:"nic_uuid_ends_with"`
	NicUuidGt               *string    `json:"nic_uuid_gt"`
	NicUuidGte              *string    `json:"nic_uuid_gte"`
	NicUuidIn               *[]string  `json:"nic_uuid_in"`
	NicUuidLt               *string    `json:"nic_uuid_lt"`
	NicUuidLte              *string    `json:"nic_uuid_lte"`
	NicUuidNot              *string    `json:"nic_uuid_not"`
	NicUuidNotContains      *string    `json:"nic_uuid_not_contains"`
	NicUuidNotEndsWith      *string    `json:"nic_uuid_not_ends_with"`
	NicUuidNotIn            *[]string  `json:"nic_uuid_not_in"`
	NicUuidNotStartsWith    *string    `json:"nic_uuid_not_starts_with"`
	NicUuidStartsWith       *string    `json:"nic_uuid_starts_with"`
	Physical                *bool      `json:"physical"`
	PhysicalNot             *bool      `json:"physical_not"`
	RdmaEnabled             *bool      `json:"rdma_enabled"`
	RdmaEnabledNot          *bool      `json:"rdma_enabled_not"`
	Running                 *bool      `json:"running"`
	RunningNot              *bool      `json:"running_not"`
	Speed                   *float64   `json:"speed"`
	SpeedGt                 *float64   `json:"speed_gt"`
	SpeedGte                *float64   `json:"speed_gte"`
	SpeedIn                 *[]float64 `json:"speed_in"`
	SpeedLt                 *float64   `json:"speed_lt"`
	SpeedLte                *float64   `json:"speed_lte"`
	SpeedNot                *float64   `json:"speed_not"`
	SpeedNotIn              *[]float64 `json:"speed_not_in"`
	SubnetMask              *string    `json:"subnet_mask"`
	SubnetMaskContains      *string    `json:"subnet_mask_contains"`
	SubnetMaskEndsWith      *string    `json:"subnet_mask_ends_with"`
	SubnetMaskGt            *string    `json:"subnet_mask_gt"`
	SubnetMaskGte           *string    `json:"subnet_mask_gte"`
	SubnetMaskIn            *[]string  `json:"subnet_mask_in"`
	SubnetMaskLt            *string    `json:"subnet_mask_lt"`
	SubnetMaskLte           *string    `json:"subnet_mask_lte"`
	SubnetMaskNot           *string    `json:"subnet_mask_not"`
	SubnetMaskNotContains   *string    `json:"subnet_mask_not_contains"`
	SubnetMaskNotEndsWith   *string    `json:"subnet_mask_not_ends_with"`
	SubnetMaskNotIn         *[]string  `json:"subnet_mask_not_in"`
	SubnetMaskNotStartsWith *string    `json:"subnet_mask_not_starts_with"`
	SubnetMaskStartsWith    *string    `json:"subnet_mask_starts_with"`
	TotalVfNum              *float64   `json:"total_vf_num"`
	TotalVfNumGt            *float64   `json:"total_vf_num_gt"`
	TotalVfNumGte           *float64   `json:"total_vf_num_gte"`
	TotalVfNumIn            *[]float64 `json:"total_vf_num_in"`
	TotalVfNumLt            *float64   `json:"total_vf_num_lt"`
	TotalVfNumLte           *float64   `json:"total_vf_num_lte"`
	TotalVfNumNot           *float64   `json:"total_vf_num_not"`
	TotalVfNumNotIn         *[]float64 `json:"total_vf_num_not_in"`
	Type                    *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]NetworkType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn      *[]NetworkType `json:"type_not_in"`
	Up             *bool          `json:"up"`
	UpNot          *bool          `json:"up_not"`
	UsedVfNum      *float64       `json:"used_vf_num"`
	UsedVfNumGt    *float64       `json:"used_vf_num_gt"`
	UsedVfNumGte   *float64       `json:"used_vf_num_gte"`
	UsedVfNumIn    *[]float64     `json:"used_vf_num_in"`
	UsedVfNumLt    *float64       `json:"used_vf_num_lt"`
	UsedVfNumLte   *float64       `json:"used_vf_num_lte"`
	UsedVfNumNot   *float64       `json:"used_vf_num_not"`
	UsedVfNumNotIn *[]float64     `json:"used_vf_num_not_in"`
	Vds            *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"vds"`
}

// NodeTopo defines model for NodeTopo.
type NodeTopo struct {
	BrickTopo *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"brick_topo"`
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	ClusterTopo *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster_topo"`
	Host struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Id       string `json:"id"`
	LocalId  string `json:"local_id"`
	Name     string `json:"name"`
	Position struct {
		Column *float64 `json:"column"`
		Row    *float64 `json:"row"`
	} `json:"position"`
}

// NodeTopoConnection defines model for NodeTopoConnection.
type NodeTopoConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// NodeTopoOrderByInput defines model for NodeTopoOrderByInput.
type NodeTopoOrderByInput string

// NodeTopoUpdationParams defines model for NodeTopoUpdationParams.
type NodeTopoUpdationParams []struct {
	Data  interface{}              `json:"data"`
	Where NodeTopoWhereUniqueInput `json:"where"`
}

// NodeTopoWhereInput defines model for NodeTopoWhereInput.
type NodeTopoWhereInput struct {
	AND       *[]NodeTopoWhereInput `json:"AND"`
	NOT       *[]NodeTopoWhereInput `json:"NOT"`
	OR        *[]NodeTopoWhereInput `json:"OR"`
	BrickTopo *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"brick_topo"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	ClusterTopo *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterTopoWhereInput)
		ClusterTopoWhereInput `yaml:",inline"`
	} `json:"cluster_topo"`
	Host *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Id                   *string   `json:"id"`
	IdContains           *string   `json:"id_contains"`
	IdEndsWith           *string   `json:"id_ends_with"`
	IdGt                 *string   `json:"id_gt"`
	IdGte                *string   `json:"id_gte"`
	IdIn                 *[]string `json:"id_in"`
	IdLt                 *string   `json:"id_lt"`
	IdLte                *string   `json:"id_lte"`
	IdNot                *string   `json:"id_not"`
	IdNotContains        *string   `json:"id_not_contains"`
	IdNotEndsWith        *string   `json:"id_not_ends_with"`
	IdNotIn              *[]string `json:"id_not_in"`
	IdNotStartsWith      *string   `json:"id_not_starts_with"`
	IdStartsWith         *string   `json:"id_starts_with"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
}

// NodeTopoWhereUniqueInput defines model for NodeTopoWhereUniqueInput.
type NodeTopoWhereUniqueInput struct {
	Id      *string `json:"id"`
	LocalId *string `json:"local_id"`
}

// NotifierLanguageCode defines model for NotifierLanguageCode.
type NotifierLanguageCode string

// NotifierSecurityMode defines model for NotifierSecurityMode.
type NotifierSecurityMode string

// NtpMode defines model for NtpMode.
type NtpMode string

// NvmfNamespace defines model for NvmfNamespace.
type NvmfNamespace struct {
	AssignedSize     float64 `json:"assigned_size"`
	Bps              float64 `json:"bps"`
	BpsMax           float64 `json:"bps_max"`
	BpsMaxLength     float64 `json:"bps_max_length"`
	BpsRd            float64 `json:"bps_rd"`
	BpsRdMax         float64 `json:"bps_rd_max"`
	BpsRdMaxLength   float64 `json:"bps_rd_max_length"`
	BpsWr            float64 `json:"bps_wr"`
	BpsWrMax         float64 `json:"bps_wr_max"`
	BpsWrMaxLength   float64 `json:"bps_wr_max_length"`
	ConsistencyGroup *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_group"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id              string  `json:"id"`
	IoSize          float64 `json:"io_size"`
	Iops            float64 `json:"iops"`
	IopsMax         float64 `json:"iops_max"`
	IopsMaxLength   float64 `json:"iops_max_length"`
	IopsRd          float64 `json:"iops_rd"`
	IopsRdMax       float64 `json:"iops_rd_max"`
	IopsRdMaxLength float64 `json:"iops_rd_max_length"`
	IopsWr          float64 `json:"iops_wr"`
	IopsWrMax       float64 `json:"iops_wr_max"`
	IopsWrMaxLength float64 `json:"iops_wr_max_length"`
	IsShared        bool    `json:"is_shared"`
	Labels          *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt string `json:"local_created_at"`
	LocalId        string `json:"local_id"`
	Name           string `json:"name"`
	NamespaceGroup *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"namespace_group"`
	NamespaceId   float64 `json:"namespace_id"`
	NqnWhitelist  string  `json:"nqn_whitelist"`
	NvmfSubsystem struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_subsystem"`
	ReplicaNum    float64 `json:"replica_num"`
	SharedSize    float64 `json:"shared_size"`
	SnapshotNum   float64 `json:"snapshot_num"`
	StripeNum     float64 `json:"stripe_num"`
	StripeSize    float64 `json:"stripe_size"`
	ThinProvision bool    `json:"thin_provision"`
	UniqueSize    float64 `json:"unique_size"`
	ZbsVolumeId   string  `json:"zbs_volume_id"`
}

// NvmfNamespaceCloneParams defines model for NvmfNamespaceCloneParams.
type NvmfNamespaceCloneParams struct {
	Name             string  `json:"name"`
	NamespaceGroupId *string `json:"namespace_group_id,omitempty"`
	NvmfSubsystemId  string  `json:"nvmf_subsystem_id"`
	SnapshotId       string  `json:"snapshot_id"`
}

// NvmfNamespaceCommonParams defines model for NvmfNamespaceCommonParams.
type NvmfNamespaceCommonParams struct {
	Bps             *float64 `json:"bps,omitempty"`
	BpsMax          *float64 `json:"bps_max,omitempty"`
	BpsMaxLength    *float64 `json:"bps_max_length,omitempty"`
	BpsRd           *float64 `json:"bps_rd,omitempty"`
	BpsRdMax        *float64 `json:"bps_rd_max,omitempty"`
	BpsRdMaxLength  *float64 `json:"bps_rd_max_length,omitempty"`
	BpsWr           *float64 `json:"bps_wr,omitempty"`
	BpsWrMax        *float64 `json:"bps_wr_max,omitempty"`
	BpsWrMaxLength  *float64 `json:"bps_wr_max_length,omitempty"`
	Iops            *float64 `json:"iops,omitempty"`
	IopsMax         *float64 `json:"iops_max,omitempty"`
	IopsMaxLength   *float64 `json:"iops_max_length,omitempty"`
	IopsRd          *float64 `json:"iops_rd,omitempty"`
	IopsRdMax       *float64 `json:"iops_rd_max,omitempty"`
	IopsRdMaxLength *float64 `json:"iops_rd_max_length,omitempty"`
	IopsWr          *float64 `json:"iops_wr,omitempty"`
	IopsWrMax       *float64 `json:"iops_wr_max,omitempty"`
	IopsWrMaxLength *float64 `json:"iops_wr_max_length,omitempty"`
	NqnWhitelist    *string  `json:"nqn_whitelist,omitempty"`
}

// NvmfNamespaceConnection defines model for NvmfNamespaceConnection.
type NvmfNamespaceConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// NvmfNamespaceCreationParams defines model for NvmfNamespaceCreationParams.
type NvmfNamespaceCreationParams struct {
	// Embedded fields due to inline allOf schema
	AssignedSize    float64  `json:"assigned_size"`
	GroupId         *string  `json:"group_id,omitempty"`
	IsShared        bool     `json:"is_shared"`
	Name            string   `json:"name"`
	NamespaceId     *float64 `json:"namespace_id,omitempty"`
	NvmfSubsystemId string   `json:"nvmf_subsystem_id"`
	ReplicaNum      float64  `json:"replica_num"`
	// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceCommonParams)
	NvmfNamespaceCommonParams `yaml:",inline"`
}

// NvmfNamespaceDeletionParams defines model for NvmfNamespaceDeletionParams.
type NvmfNamespaceDeletionParams struct {
	Data struct {
		RemoveSnapshot bool `json:"remove_snapshot"`
	} `json:"data"`
	Where NvmfNamespaceWhereInput `json:"where"`
}

// NvmfNamespaceOrderByInput defines model for NvmfNamespaceOrderByInput.
type NvmfNamespaceOrderByInput string

// NvmfNamespaceRollbackParams defines model for NvmfNamespaceRollbackParams.
type NvmfNamespaceRollbackParams struct {
	NamespaceId string `json:"namespace_id"`
	SnapshotId  string `json:"snapshot_id"`
}

// NvmfNamespaceSnapshot defines model for NvmfNamespaceSnapshot.
type NvmfNamespaceSnapshot struct {
	ConsistencyGroupSnapshot *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"consistency_group_snapshot"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id     string `json:"id"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt string `json:"local_created_at"`
	LocalId        string `json:"local_id"`
	Name           string `json:"name"`
	NvmfNamespace  *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_namespace"`
	NvmfSubsystem struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nvmf_subsystem"`
	UniqueSize float64 `json:"unique_size"`
}

// NvmfNamespaceSnapshotConnection defines model for NvmfNamespaceSnapshotConnection.
type NvmfNamespaceSnapshotConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// NvmfNamespaceSnapshotCreationParams defines model for NvmfNamespaceSnapshotCreationParams.
type NvmfNamespaceSnapshotCreationParams struct {
	Name            string `json:"name"`
	NvmfNamespaceId string `json:"nvmf_namespace_id"`
	NvmfSubsystemId string `json:"nvmf_subsystem_id"`
}

// NvmfNamespaceSnapshotDeletionParams defines model for NvmfNamespaceSnapshotDeletionParams.
type NvmfNamespaceSnapshotDeletionParams struct {
	Where NvmfNamespaceSnapshotWhereInput `json:"where"`
}

// NvmfNamespaceSnapshotOrderByInput defines model for NvmfNamespaceSnapshotOrderByInput.
type NvmfNamespaceSnapshotOrderByInput string

// NvmfNamespaceSnapshotWhereInput defines model for NvmfNamespaceSnapshotWhereInput.
type NvmfNamespaceSnapshotWhereInput struct {
	AND                      *[]NvmfNamespaceSnapshotWhereInput `json:"AND"`
	NOT                      *[]NvmfNamespaceSnapshotWhereInput `json:"NOT"`
	OR                       *[]NvmfNamespaceSnapshotWhereInput `json:"OR"`
	ConsistencyGroupSnapshot *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupSnapshotWhereInput)
		ConsistencyGroupSnapshotWhereInput `yaml:",inline"`
	} `json:"consistency_group_snapshot"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	LabelsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt       *string   `json:"local_created_at"`
	LocalCreatedAtGt     *string   `json:"local_created_at_gt"`
	LocalCreatedAtGte    *string   `json:"local_created_at_gte"`
	LocalCreatedAtIn     *[]string `json:"local_created_at_in"`
	LocalCreatedAtLt     *string   `json:"local_created_at_lt"`
	LocalCreatedAtLte    *string   `json:"local_created_at_lte"`
	LocalCreatedAtNot    *string   `json:"local_created_at_not"`
	LocalCreatedAtNotIn  *[]string `json:"local_created_at_not_in"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NvmfNamespace        *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"nvmf_namespace"`
	NvmfSubsystem *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"nvmf_subsystem"`
	UniqueSize      *float64   `json:"unique_size"`
	UniqueSizeGt    *float64   `json:"unique_size_gt"`
	UniqueSizeGte   *float64   `json:"unique_size_gte"`
	UniqueSizeIn    *[]float64 `json:"unique_size_in"`
	UniqueSizeLt    *float64   `json:"unique_size_lt"`
	UniqueSizeLte   *float64   `json:"unique_size_lte"`
	UniqueSizeNot   *float64   `json:"unique_size_not"`
	UniqueSizeNotIn *[]float64 `json:"unique_size_not_in"`
}

// NvmfNamespaceUpdationParams defines model for NvmfNamespaceUpdationParams.
type NvmfNamespaceUpdationParams struct {
	Data struct {
		// Embedded fields due to inline allOf schema
		AssignedSize *float64 `json:"assigned_size,omitempty"`
		Name         *string  `json:"name,omitempty"`
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceCommonParams)
		NvmfNamespaceCommonParams `yaml:",inline"`
	} `json:"data"`
	Where NvmfNamespaceWhereInput `json:"where"`
}

// NvmfNamespaceWhereInput defines model for NvmfNamespaceWhereInput.
type NvmfNamespaceWhereInput struct {
	AND                 *[]NvmfNamespaceWhereInput `json:"AND"`
	NOT                 *[]NvmfNamespaceWhereInput `json:"NOT"`
	OR                  *[]NvmfNamespaceWhereInput `json:"OR"`
	AssignedSize        *float64                   `json:"assigned_size"`
	AssignedSizeGt      *float64                   `json:"assigned_size_gt"`
	AssignedSizeGte     *float64                   `json:"assigned_size_gte"`
	AssignedSizeIn      *[]float64                 `json:"assigned_size_in"`
	AssignedSizeLt      *float64                   `json:"assigned_size_lt"`
	AssignedSizeLte     *float64                   `json:"assigned_size_lte"`
	AssignedSizeNot     *float64                   `json:"assigned_size_not"`
	AssignedSizeNotIn   *[]float64                 `json:"assigned_size_not_in"`
	Bps                 *float64                   `json:"bps"`
	BpsGt               *float64                   `json:"bps_gt"`
	BpsGte              *float64                   `json:"bps_gte"`
	BpsIn               *[]float64                 `json:"bps_in"`
	BpsLt               *float64                   `json:"bps_lt"`
	BpsLte              *float64                   `json:"bps_lte"`
	BpsMax              *float64                   `json:"bps_max"`
	BpsMaxGt            *float64                   `json:"bps_max_gt"`
	BpsMaxGte           *float64                   `json:"bps_max_gte"`
	BpsMaxIn            *[]float64                 `json:"bps_max_in"`
	BpsMaxLength        *float64                   `json:"bps_max_length"`
	BpsMaxLengthGt      *float64                   `json:"bps_max_length_gt"`
	BpsMaxLengthGte     *float64                   `json:"bps_max_length_gte"`
	BpsMaxLengthIn      *[]float64                 `json:"bps_max_length_in"`
	BpsMaxLengthLt      *float64                   `json:"bps_max_length_lt"`
	BpsMaxLengthLte     *float64                   `json:"bps_max_length_lte"`
	BpsMaxLengthNot     *float64                   `json:"bps_max_length_not"`
	BpsMaxLengthNotIn   *[]float64                 `json:"bps_max_length_not_in"`
	BpsMaxLt            *float64                   `json:"bps_max_lt"`
	BpsMaxLte           *float64                   `json:"bps_max_lte"`
	BpsMaxNot           *float64                   `json:"bps_max_not"`
	BpsMaxNotIn         *[]float64                 `json:"bps_max_not_in"`
	BpsNot              *float64                   `json:"bps_not"`
	BpsNotIn            *[]float64                 `json:"bps_not_in"`
	BpsRd               *float64                   `json:"bps_rd"`
	BpsRdGt             *float64                   `json:"bps_rd_gt"`
	BpsRdGte            *float64                   `json:"bps_rd_gte"`
	BpsRdIn             *[]float64                 `json:"bps_rd_in"`
	BpsRdLt             *float64                   `json:"bps_rd_lt"`
	BpsRdLte            *float64                   `json:"bps_rd_lte"`
	BpsRdMax            *float64                   `json:"bps_rd_max"`
	BpsRdMaxGt          *float64                   `json:"bps_rd_max_gt"`
	BpsRdMaxGte         *float64                   `json:"bps_rd_max_gte"`
	BpsRdMaxIn          *[]float64                 `json:"bps_rd_max_in"`
	BpsRdMaxLength      *float64                   `json:"bps_rd_max_length"`
	BpsRdMaxLengthGt    *float64                   `json:"bps_rd_max_length_gt"`
	BpsRdMaxLengthGte   *float64                   `json:"bps_rd_max_length_gte"`
	BpsRdMaxLengthIn    *[]float64                 `json:"bps_rd_max_length_in"`
	BpsRdMaxLengthLt    *float64                   `json:"bps_rd_max_length_lt"`
	BpsRdMaxLengthLte   *float64                   `json:"bps_rd_max_length_lte"`
	BpsRdMaxLengthNot   *float64                   `json:"bps_rd_max_length_not"`
	BpsRdMaxLengthNotIn *[]float64                 `json:"bps_rd_max_length_not_in"`
	BpsRdMaxLt          *float64                   `json:"bps_rd_max_lt"`
	BpsRdMaxLte         *float64                   `json:"bps_rd_max_lte"`
	BpsRdMaxNot         *float64                   `json:"bps_rd_max_not"`
	BpsRdMaxNotIn       *[]float64                 `json:"bps_rd_max_not_in"`
	BpsRdNot            *float64                   `json:"bps_rd_not"`
	BpsRdNotIn          *[]float64                 `json:"bps_rd_not_in"`
	BpsWr               *float64                   `json:"bps_wr"`
	BpsWrGt             *float64                   `json:"bps_wr_gt"`
	BpsWrGte            *float64                   `json:"bps_wr_gte"`
	BpsWrIn             *[]float64                 `json:"bps_wr_in"`
	BpsWrLt             *float64                   `json:"bps_wr_lt"`
	BpsWrLte            *float64                   `json:"bps_wr_lte"`
	BpsWrMax            *float64                   `json:"bps_wr_max"`
	BpsWrMaxGt          *float64                   `json:"bps_wr_max_gt"`
	BpsWrMaxGte         *float64                   `json:"bps_wr_max_gte"`
	BpsWrMaxIn          *[]float64                 `json:"bps_wr_max_in"`
	BpsWrMaxLength      *float64                   `json:"bps_wr_max_length"`
	BpsWrMaxLengthGt    *float64                   `json:"bps_wr_max_length_gt"`
	BpsWrMaxLengthGte   *float64                   `json:"bps_wr_max_length_gte"`
	BpsWrMaxLengthIn    *[]float64                 `json:"bps_wr_max_length_in"`
	BpsWrMaxLengthLt    *float64                   `json:"bps_wr_max_length_lt"`
	BpsWrMaxLengthLte   *float64                   `json:"bps_wr_max_length_lte"`
	BpsWrMaxLengthNot   *float64                   `json:"bps_wr_max_length_not"`
	BpsWrMaxLengthNotIn *[]float64                 `json:"bps_wr_max_length_not_in"`
	BpsWrMaxLt          *float64                   `json:"bps_wr_max_lt"`
	BpsWrMaxLte         *float64                   `json:"bps_wr_max_lte"`
	BpsWrMaxNot         *float64                   `json:"bps_wr_max_not"`
	BpsWrMaxNotIn       *[]float64                 `json:"bps_wr_max_not_in"`
	BpsWrNot            *float64                   `json:"bps_wr_not"`
	BpsWrNotIn          *[]float64                 `json:"bps_wr_not_in"`
	ConsistencyGroup    *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistencyGroupWhereInput)
		ConsistencyGroupWhereInput `yaml:",inline"`
	} `json:"consistency_group"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	IoSize                 *float64             `json:"io_size"`
	IoSizeGt               *float64             `json:"io_size_gt"`
	IoSizeGte              *float64             `json:"io_size_gte"`
	IoSizeIn               *[]float64           `json:"io_size_in"`
	IoSizeLt               *float64             `json:"io_size_lt"`
	IoSizeLte              *float64             `json:"io_size_lte"`
	IoSizeNot              *float64             `json:"io_size_not"`
	IoSizeNotIn            *[]float64           `json:"io_size_not_in"`
	Iops                   *float64             `json:"iops"`
	IopsGt                 *float64             `json:"iops_gt"`
	IopsGte                *float64             `json:"iops_gte"`
	IopsIn                 *[]float64           `json:"iops_in"`
	IopsLt                 *float64             `json:"iops_lt"`
	IopsLte                *float64             `json:"iops_lte"`
	IopsMax                *float64             `json:"iops_max"`
	IopsMaxGt              *float64             `json:"iops_max_gt"`
	IopsMaxGte             *float64             `json:"iops_max_gte"`
	IopsMaxIn              *[]float64           `json:"iops_max_in"`
	IopsMaxLength          *float64             `json:"iops_max_length"`
	IopsMaxLengthGt        *float64             `json:"iops_max_length_gt"`
	IopsMaxLengthGte       *float64             `json:"iops_max_length_gte"`
	IopsMaxLengthIn        *[]float64           `json:"iops_max_length_in"`
	IopsMaxLengthLt        *float64             `json:"iops_max_length_lt"`
	IopsMaxLengthLte       *float64             `json:"iops_max_length_lte"`
	IopsMaxLengthNot       *float64             `json:"iops_max_length_not"`
	IopsMaxLengthNotIn     *[]float64           `json:"iops_max_length_not_in"`
	IopsMaxLt              *float64             `json:"iops_max_lt"`
	IopsMaxLte             *float64             `json:"iops_max_lte"`
	IopsMaxNot             *float64             `json:"iops_max_not"`
	IopsMaxNotIn           *[]float64           `json:"iops_max_not_in"`
	IopsNot                *float64             `json:"iops_not"`
	IopsNotIn              *[]float64           `json:"iops_not_in"`
	IopsRd                 *float64             `json:"iops_rd"`
	IopsRdGt               *float64             `json:"iops_rd_gt"`
	IopsRdGte              *float64             `json:"iops_rd_gte"`
	IopsRdIn               *[]float64           `json:"iops_rd_in"`
	IopsRdLt               *float64             `json:"iops_rd_lt"`
	IopsRdLte              *float64             `json:"iops_rd_lte"`
	IopsRdMax              *float64             `json:"iops_rd_max"`
	IopsRdMaxGt            *float64             `json:"iops_rd_max_gt"`
	IopsRdMaxGte           *float64             `json:"iops_rd_max_gte"`
	IopsRdMaxIn            *[]float64           `json:"iops_rd_max_in"`
	IopsRdMaxLength        *float64             `json:"iops_rd_max_length"`
	IopsRdMaxLengthGt      *float64             `json:"iops_rd_max_length_gt"`
	IopsRdMaxLengthGte     *float64             `json:"iops_rd_max_length_gte"`
	IopsRdMaxLengthIn      *[]float64           `json:"iops_rd_max_length_in"`
	IopsRdMaxLengthLt      *float64             `json:"iops_rd_max_length_lt"`
	IopsRdMaxLengthLte     *float64             `json:"iops_rd_max_length_lte"`
	IopsRdMaxLengthNot     *float64             `json:"iops_rd_max_length_not"`
	IopsRdMaxLengthNotIn   *[]float64           `json:"iops_rd_max_length_not_in"`
	IopsRdMaxLt            *float64             `json:"iops_rd_max_lt"`
	IopsRdMaxLte           *float64             `json:"iops_rd_max_lte"`
	IopsRdMaxNot           *float64             `json:"iops_rd_max_not"`
	IopsRdMaxNotIn         *[]float64           `json:"iops_rd_max_not_in"`
	IopsRdNot              *float64             `json:"iops_rd_not"`
	IopsRdNotIn            *[]float64           `json:"iops_rd_not_in"`
	IopsWr                 *float64             `json:"iops_wr"`
	IopsWrGt               *float64             `json:"iops_wr_gt"`
	IopsWrGte              *float64             `json:"iops_wr_gte"`
	IopsWrIn               *[]float64           `json:"iops_wr_in"`
	IopsWrLt               *float64             `json:"iops_wr_lt"`
	IopsWrLte              *float64             `json:"iops_wr_lte"`
	IopsWrMax              *float64             `json:"iops_wr_max"`
	IopsWrMaxGt            *float64             `json:"iops_wr_max_gt"`
	IopsWrMaxGte           *float64             `json:"iops_wr_max_gte"`
	IopsWrMaxIn            *[]float64           `json:"iops_wr_max_in"`
	IopsWrMaxLength        *float64             `json:"iops_wr_max_length"`
	IopsWrMaxLengthGt      *float64             `json:"iops_wr_max_length_gt"`
	IopsWrMaxLengthGte     *float64             `json:"iops_wr_max_length_gte"`
	IopsWrMaxLengthIn      *[]float64           `json:"iops_wr_max_length_in"`
	IopsWrMaxLengthLt      *float64             `json:"iops_wr_max_length_lt"`
	IopsWrMaxLengthLte     *float64             `json:"iops_wr_max_length_lte"`
	IopsWrMaxLengthNot     *float64             `json:"iops_wr_max_length_not"`
	IopsWrMaxLengthNotIn   *[]float64           `json:"iops_wr_max_length_not_in"`
	IopsWrMaxLt            *float64             `json:"iops_wr_max_lt"`
	IopsWrMaxLte           *float64             `json:"iops_wr_max_lte"`
	IopsWrMaxNot           *float64             `json:"iops_wr_max_not"`
	IopsWrMaxNotIn         *[]float64           `json:"iops_wr_max_not_in"`
	IopsWrNot              *float64             `json:"iops_wr_not"`
	IopsWrNotIn            *[]float64           `json:"iops_wr_not_in"`
	IsShared               *bool                `json:"is_shared"`
	IsSharedNot            *bool                `json:"is_shared_not"`
	LabelsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt       *string   `json:"local_created_at"`
	LocalCreatedAtGt     *string   `json:"local_created_at_gt"`
	LocalCreatedAtGte    *string   `json:"local_created_at_gte"`
	LocalCreatedAtIn     *[]string `json:"local_created_at_in"`
	LocalCreatedAtLt     *string   `json:"local_created_at_lt"`
	LocalCreatedAtLte    *string   `json:"local_created_at_lte"`
	LocalCreatedAtNot    *string   `json:"local_created_at_not"`
	LocalCreatedAtNotIn  *[]string `json:"local_created_at_not_in"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NamespaceGroup       *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"namespace_group"`
	NamespaceId               *float64   `json:"namespace_id"`
	NamespaceIdGt             *float64   `json:"namespace_id_gt"`
	NamespaceIdGte            *float64   `json:"namespace_id_gte"`
	NamespaceIdIn             *[]float64 `json:"namespace_id_in"`
	NamespaceIdLt             *float64   `json:"namespace_id_lt"`
	NamespaceIdLte            *float64   `json:"namespace_id_lte"`
	NamespaceIdNot            *float64   `json:"namespace_id_not"`
	NamespaceIdNotIn          *[]float64 `json:"namespace_id_not_in"`
	NqnWhitelist              *string    `json:"nqn_whitelist"`
	NqnWhitelistContains      *string    `json:"nqn_whitelist_contains"`
	NqnWhitelistEndsWith      *string    `json:"nqn_whitelist_ends_with"`
	NqnWhitelistGt            *string    `json:"nqn_whitelist_gt"`
	NqnWhitelistGte           *string    `json:"nqn_whitelist_gte"`
	NqnWhitelistIn            *[]string  `json:"nqn_whitelist_in"`
	NqnWhitelistLt            *string    `json:"nqn_whitelist_lt"`
	NqnWhitelistLte           *string    `json:"nqn_whitelist_lte"`
	NqnWhitelistNot           *string    `json:"nqn_whitelist_not"`
	NqnWhitelistNotContains   *string    `json:"nqn_whitelist_not_contains"`
	NqnWhitelistNotEndsWith   *string    `json:"nqn_whitelist_not_ends_with"`
	NqnWhitelistNotIn         *[]string  `json:"nqn_whitelist_not_in"`
	NqnWhitelistNotStartsWith *string    `json:"nqn_whitelist_not_starts_with"`
	NqnWhitelistStartsWith    *string    `json:"nqn_whitelist_starts_with"`
	NvmfSubsystem             *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemWhereInput)
		NvmfSubsystemWhereInput `yaml:",inline"`
	} `json:"nvmf_subsystem"`
	ReplicaNum               *float64   `json:"replica_num"`
	ReplicaNumGt             *float64   `json:"replica_num_gt"`
	ReplicaNumGte            *float64   `json:"replica_num_gte"`
	ReplicaNumIn             *[]float64 `json:"replica_num_in"`
	ReplicaNumLt             *float64   `json:"replica_num_lt"`
	ReplicaNumLte            *float64   `json:"replica_num_lte"`
	ReplicaNumNot            *float64   `json:"replica_num_not"`
	ReplicaNumNotIn          *[]float64 `json:"replica_num_not_in"`
	SharedSize               *float64   `json:"shared_size"`
	SharedSizeGt             *float64   `json:"shared_size_gt"`
	SharedSizeGte            *float64   `json:"shared_size_gte"`
	SharedSizeIn             *[]float64 `json:"shared_size_in"`
	SharedSizeLt             *float64   `json:"shared_size_lt"`
	SharedSizeLte            *float64   `json:"shared_size_lte"`
	SharedSizeNot            *float64   `json:"shared_size_not"`
	SharedSizeNotIn          *[]float64 `json:"shared_size_not_in"`
	SnapshotNum              *float64   `json:"snapshot_num"`
	SnapshotNumGt            *float64   `json:"snapshot_num_gt"`
	SnapshotNumGte           *float64   `json:"snapshot_num_gte"`
	SnapshotNumIn            *[]float64 `json:"snapshot_num_in"`
	SnapshotNumLt            *float64   `json:"snapshot_num_lt"`
	SnapshotNumLte           *float64   `json:"snapshot_num_lte"`
	SnapshotNumNot           *float64   `json:"snapshot_num_not"`
	SnapshotNumNotIn         *[]float64 `json:"snapshot_num_not_in"`
	StripeNum                *float64   `json:"stripe_num"`
	StripeNumGt              *float64   `json:"stripe_num_gt"`
	StripeNumGte             *float64   `json:"stripe_num_gte"`
	StripeNumIn              *[]float64 `json:"stripe_num_in"`
	StripeNumLt              *float64   `json:"stripe_num_lt"`
	StripeNumLte             *float64   `json:"stripe_num_lte"`
	StripeNumNot             *float64   `json:"stripe_num_not"`
	StripeNumNotIn           *[]float64 `json:"stripe_num_not_in"`
	StripeSize               *float64   `json:"stripe_size"`
	StripeSizeGt             *float64   `json:"stripe_size_gt"`
	StripeSizeGte            *float64   `json:"stripe_size_gte"`
	StripeSizeIn             *[]float64 `json:"stripe_size_in"`
	StripeSizeLt             *float64   `json:"stripe_size_lt"`
	StripeSizeLte            *float64   `json:"stripe_size_lte"`
	StripeSizeNot            *float64   `json:"stripe_size_not"`
	StripeSizeNotIn          *[]float64 `json:"stripe_size_not_in"`
	ThinProvision            *bool      `json:"thin_provision"`
	ThinProvisionNot         *bool      `json:"thin_provision_not"`
	UniqueSize               *float64   `json:"unique_size"`
	UniqueSizeGt             *float64   `json:"unique_size_gt"`
	UniqueSizeGte            *float64   `json:"unique_size_gte"`
	UniqueSizeIn             *[]float64 `json:"unique_size_in"`
	UniqueSizeLt             *float64   `json:"unique_size_lt"`
	UniqueSizeLte            *float64   `json:"unique_size_lte"`
	UniqueSizeNot            *float64   `json:"unique_size_not"`
	UniqueSizeNotIn          *[]float64 `json:"unique_size_not_in"`
	ZbsVolumeId              *string    `json:"zbs_volume_id"`
	ZbsVolumeIdContains      *string    `json:"zbs_volume_id_contains"`
	ZbsVolumeIdEndsWith      *string    `json:"zbs_volume_id_ends_with"`
	ZbsVolumeIdGt            *string    `json:"zbs_volume_id_gt"`
	ZbsVolumeIdGte           *string    `json:"zbs_volume_id_gte"`
	ZbsVolumeIdIn            *[]string  `json:"zbs_volume_id_in"`
	ZbsVolumeIdLt            *string    `json:"zbs_volume_id_lt"`
	ZbsVolumeIdLte           *string    `json:"zbs_volume_id_lte"`
	ZbsVolumeIdNot           *string    `json:"zbs_volume_id_not"`
	ZbsVolumeIdNotContains   *string    `json:"zbs_volume_id_not_contains"`
	ZbsVolumeIdNotEndsWith   *string    `json:"zbs_volume_id_not_ends_with"`
	ZbsVolumeIdNotIn         *[]string  `json:"zbs_volume_id_not_in"`
	ZbsVolumeIdNotStartsWith *string    `json:"zbs_volume_id_not_starts_with"`
	ZbsVolumeIdStartsWith    *string    `json:"zbs_volume_id_starts_with"`
}

// NvmfSubsystem defines model for NvmfSubsystem.
type NvmfSubsystem struct {
	Bps            *float64 `json:"bps"`
	BpsMax         *float64 `json:"bps_max"`
	BpsMaxLength   *float64 `json:"bps_max_length"`
	BpsRd          *float64 `json:"bps_rd"`
	BpsRdMax       *float64 `json:"bps_rd_max"`
	BpsRdMaxLength *float64 `json:"bps_rd_max_length"`
	BpsWr          *float64 `json:"bps_wr"`
	BpsWrMax       *float64 `json:"bps_wr_max"`
	BpsWrMaxLength *float64 `json:"bps_wr_max_length"`
	Cluster        struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description       string `json:"description"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	ExternalUse     bool     `json:"external_use"`
	Id              string   `json:"id"`
	Internal        bool     `json:"internal"`
	IoSize          *float64 `json:"io_size"`
	Iops            *float64 `json:"iops"`
	IopsMax         *float64 `json:"iops_max"`
	IopsMaxLength   *float64 `json:"iops_max_length"`
	IopsRd          *float64 `json:"iops_rd"`
	IopsRdMax       *float64 `json:"iops_rd_max"`
	IopsRdMaxLength *float64 `json:"iops_rd_max_length"`
	IopsWr          *float64 `json:"iops_wr"`
	IopsWrMax       *float64 `json:"iops_wr_max"`
	IopsWrMaxLength *float64 `json:"iops_wr_max_length"`
	IpWhitelist     string   `json:"ip_whitelist"`
	Labels          *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId         string `json:"local_id"`
	Name            string `json:"name"`
	NamespaceGroups *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"namespace_groups"`
	Namespaces *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"namespaces"`
	NqnName       string                  `json:"nqn_name"`
	NqnWhitelist  string                  `json:"nqn_whitelist"`
	Policy        NvmfSubsystemPolicyType `json:"policy"`
	ReplicaNum    float64                 `json:"replica_num"`
	StripeNum     float64                 `json:"stripe_num"`
	StripeSize    float64                 `json:"stripe_size"`
	ThinProvision bool                    `json:"thin_provision"`
}

// NvmfSubsystemCommonParams defines model for NvmfSubsystemCommonParams.
type NvmfSubsystemCommonParams struct {
	Bps             *float64 `json:"bps,omitempty"`
	BpsMax          *float64 `json:"bps_max,omitempty"`
	BpsMaxLength    *float64 `json:"bps_max_length,omitempty"`
	BpsRd           *float64 `json:"bps_rd,omitempty"`
	BpsRdMax        *float64 `json:"bps_rd_max,omitempty"`
	BpsRdMaxLength  *float64 `json:"bps_rd_max_length,omitempty"`
	BpsWr           *float64 `json:"bps_wr,omitempty"`
	BpsWrMax        *float64 `json:"bps_wr_max,omitempty"`
	BpsWrMaxLength  *float64 `json:"bps_wr_max_length,omitempty"`
	Description     *string  `json:"description,omitempty"`
	Iops            *float64 `json:"iops,omitempty"`
	IopsMax         *float64 `json:"iops_max,omitempty"`
	IopsMaxLength   *float64 `json:"iops_max_length,omitempty"`
	IopsRd          *float64 `json:"iops_rd,omitempty"`
	IopsRdMax       *float64 `json:"iops_rd_max,omitempty"`
	IopsRdMaxLength *float64 `json:"iops_rd_max_length,omitempty"`
	IopsWr          *float64 `json:"iops_wr,omitempty"`
	IopsWrMax       *float64 `json:"iops_wr_max,omitempty"`
	IopsWrMaxLength *float64 `json:"iops_wr_max_length,omitempty"`
	IpWhitelist     *string  `json:"ip_whitelist,omitempty"`
	NqnWhitelist    *string  `json:"nqn_whitelist,omitempty"`
}

// NvmfSubsystemConnection defines model for NvmfSubsystemConnection.
type NvmfSubsystemConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// NvmfSubsystemCreationParams defines model for NvmfSubsystemCreationParams.
type NvmfSubsystemCreationParams struct {
	// Embedded fields due to inline allOf schema
	ClusterId     string                  `json:"cluster_id"`
	Name          string                  `json:"name"`
	Policy        NvmfSubsystemPolicyType `json:"policy"`
	ReplicaNum    float64                 `json:"replica_num"`
	StripeNum     float64                 `json:"stripe_num"`
	StripeSize    float64                 `json:"stripe_size"`
	ThinProvision bool                    `json:"thin_provision"`
	// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemCommonParams)
	NvmfSubsystemCommonParams `yaml:",inline"`
}

// NvmfSubsystemDeletionParams defines model for NvmfSubsystemDeletionParams.
type NvmfSubsystemDeletionParams struct {
	Where NvmfSubsystemWhereInput `json:"where"`
}

// NvmfSubsystemOrderByInput defines model for NvmfSubsystemOrderByInput.
type NvmfSubsystemOrderByInput string

// NvmfSubsystemPolicyType defines model for NvmfSubsystemPolicyType.
type NvmfSubsystemPolicyType string

// NvmfSubsystemUpdationParams defines model for NvmfSubsystemUpdationParams.
type NvmfSubsystemUpdationParams struct {
	Data  NvmfSubsystemCommonParams `json:"data"`
	Where NvmfSubsystemWhereInput   `json:"where"`
}

// NvmfSubsystemWhereInput defines model for NvmfSubsystemWhereInput.
type NvmfSubsystemWhereInput struct {
	AND                 *[]NvmfSubsystemWhereInput `json:"AND"`
	NOT                 *[]NvmfSubsystemWhereInput `json:"NOT"`
	OR                  *[]NvmfSubsystemWhereInput `json:"OR"`
	Bps                 *float64                   `json:"bps"`
	BpsGt               *float64                   `json:"bps_gt"`
	BpsGte              *float64                   `json:"bps_gte"`
	BpsIn               *[]float64                 `json:"bps_in"`
	BpsLt               *float64                   `json:"bps_lt"`
	BpsLte              *float64                   `json:"bps_lte"`
	BpsMax              *float64                   `json:"bps_max"`
	BpsMaxGt            *float64                   `json:"bps_max_gt"`
	BpsMaxGte           *float64                   `json:"bps_max_gte"`
	BpsMaxIn            *[]float64                 `json:"bps_max_in"`
	BpsMaxLength        *float64                   `json:"bps_max_length"`
	BpsMaxLengthGt      *float64                   `json:"bps_max_length_gt"`
	BpsMaxLengthGte     *float64                   `json:"bps_max_length_gte"`
	BpsMaxLengthIn      *[]float64                 `json:"bps_max_length_in"`
	BpsMaxLengthLt      *float64                   `json:"bps_max_length_lt"`
	BpsMaxLengthLte     *float64                   `json:"bps_max_length_lte"`
	BpsMaxLengthNot     *float64                   `json:"bps_max_length_not"`
	BpsMaxLengthNotIn   *[]float64                 `json:"bps_max_length_not_in"`
	BpsMaxLt            *float64                   `json:"bps_max_lt"`
	BpsMaxLte           *float64                   `json:"bps_max_lte"`
	BpsMaxNot           *float64                   `json:"bps_max_not"`
	BpsMaxNotIn         *[]float64                 `json:"bps_max_not_in"`
	BpsNot              *float64                   `json:"bps_not"`
	BpsNotIn            *[]float64                 `json:"bps_not_in"`
	BpsRd               *float64                   `json:"bps_rd"`
	BpsRdGt             *float64                   `json:"bps_rd_gt"`
	BpsRdGte            *float64                   `json:"bps_rd_gte"`
	BpsRdIn             *[]float64                 `json:"bps_rd_in"`
	BpsRdLt             *float64                   `json:"bps_rd_lt"`
	BpsRdLte            *float64                   `json:"bps_rd_lte"`
	BpsRdMax            *float64                   `json:"bps_rd_max"`
	BpsRdMaxGt          *float64                   `json:"bps_rd_max_gt"`
	BpsRdMaxGte         *float64                   `json:"bps_rd_max_gte"`
	BpsRdMaxIn          *[]float64                 `json:"bps_rd_max_in"`
	BpsRdMaxLength      *float64                   `json:"bps_rd_max_length"`
	BpsRdMaxLengthGt    *float64                   `json:"bps_rd_max_length_gt"`
	BpsRdMaxLengthGte   *float64                   `json:"bps_rd_max_length_gte"`
	BpsRdMaxLengthIn    *[]float64                 `json:"bps_rd_max_length_in"`
	BpsRdMaxLengthLt    *float64                   `json:"bps_rd_max_length_lt"`
	BpsRdMaxLengthLte   *float64                   `json:"bps_rd_max_length_lte"`
	BpsRdMaxLengthNot   *float64                   `json:"bps_rd_max_length_not"`
	BpsRdMaxLengthNotIn *[]float64                 `json:"bps_rd_max_length_not_in"`
	BpsRdMaxLt          *float64                   `json:"bps_rd_max_lt"`
	BpsRdMaxLte         *float64                   `json:"bps_rd_max_lte"`
	BpsRdMaxNot         *float64                   `json:"bps_rd_max_not"`
	BpsRdMaxNotIn       *[]float64                 `json:"bps_rd_max_not_in"`
	BpsRdNot            *float64                   `json:"bps_rd_not"`
	BpsRdNotIn          *[]float64                 `json:"bps_rd_not_in"`
	BpsWr               *float64                   `json:"bps_wr"`
	BpsWrGt             *float64                   `json:"bps_wr_gt"`
	BpsWrGte            *float64                   `json:"bps_wr_gte"`
	BpsWrIn             *[]float64                 `json:"bps_wr_in"`
	BpsWrLt             *float64                   `json:"bps_wr_lt"`
	BpsWrLte            *float64                   `json:"bps_wr_lte"`
	BpsWrMax            *float64                   `json:"bps_wr_max"`
	BpsWrMaxGt          *float64                   `json:"bps_wr_max_gt"`
	BpsWrMaxGte         *float64                   `json:"bps_wr_max_gte"`
	BpsWrMaxIn          *[]float64                 `json:"bps_wr_max_in"`
	BpsWrMaxLength      *float64                   `json:"bps_wr_max_length"`
	BpsWrMaxLengthGt    *float64                   `json:"bps_wr_max_length_gt"`
	BpsWrMaxLengthGte   *float64                   `json:"bps_wr_max_length_gte"`
	BpsWrMaxLengthIn    *[]float64                 `json:"bps_wr_max_length_in"`
	BpsWrMaxLengthLt    *float64                   `json:"bps_wr_max_length_lt"`
	BpsWrMaxLengthLte   *float64                   `json:"bps_wr_max_length_lte"`
	BpsWrMaxLengthNot   *float64                   `json:"bps_wr_max_length_not"`
	BpsWrMaxLengthNotIn *[]float64                 `json:"bps_wr_max_length_not_in"`
	BpsWrMaxLt          *float64                   `json:"bps_wr_max_lt"`
	BpsWrMaxLte         *float64                   `json:"bps_wr_max_lte"`
	BpsWrMaxNot         *float64                   `json:"bps_wr_max_not"`
	BpsWrMaxNotIn       *[]float64                 `json:"bps_wr_max_not_in"`
	BpsWrNot            *float64                   `json:"bps_wr_not"`
	BpsWrNotIn          *[]float64                 `json:"bps_wr_not_in"`
	Cluster             *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn   *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	ExternalUse              *bool                `json:"external_use"`
	ExternalUseNot           *bool                `json:"external_use_not"`
	Id                       *string              `json:"id"`
	IdContains               *string              `json:"id_contains"`
	IdEndsWith               *string              `json:"id_ends_with"`
	IdGt                     *string              `json:"id_gt"`
	IdGte                    *string              `json:"id_gte"`
	IdIn                     *[]string            `json:"id_in"`
	IdLt                     *string              `json:"id_lt"`
	IdLte                    *string              `json:"id_lte"`
	IdNot                    *string              `json:"id_not"`
	IdNotContains            *string              `json:"id_not_contains"`
	IdNotEndsWith            *string              `json:"id_not_ends_with"`
	IdNotIn                  *[]string            `json:"id_not_in"`
	IdNotStartsWith          *string              `json:"id_not_starts_with"`
	IdStartsWith             *string              `json:"id_starts_with"`
	Internal                 *bool                `json:"internal"`
	InternalNot              *bool                `json:"internal_not"`
	IoSize                   *float64             `json:"io_size"`
	IoSizeGt                 *float64             `json:"io_size_gt"`
	IoSizeGte                *float64             `json:"io_size_gte"`
	IoSizeIn                 *[]float64           `json:"io_size_in"`
	IoSizeLt                 *float64             `json:"io_size_lt"`
	IoSizeLte                *float64             `json:"io_size_lte"`
	IoSizeNot                *float64             `json:"io_size_not"`
	IoSizeNotIn              *[]float64           `json:"io_size_not_in"`
	Iops                     *float64             `json:"iops"`
	IopsGt                   *float64             `json:"iops_gt"`
	IopsGte                  *float64             `json:"iops_gte"`
	IopsIn                   *[]float64           `json:"iops_in"`
	IopsLt                   *float64             `json:"iops_lt"`
	IopsLte                  *float64             `json:"iops_lte"`
	IopsMax                  *float64             `json:"iops_max"`
	IopsMaxGt                *float64             `json:"iops_max_gt"`
	IopsMaxGte               *float64             `json:"iops_max_gte"`
	IopsMaxIn                *[]float64           `json:"iops_max_in"`
	IopsMaxLength            *float64             `json:"iops_max_length"`
	IopsMaxLengthGt          *float64             `json:"iops_max_length_gt"`
	IopsMaxLengthGte         *float64             `json:"iops_max_length_gte"`
	IopsMaxLengthIn          *[]float64           `json:"iops_max_length_in"`
	IopsMaxLengthLt          *float64             `json:"iops_max_length_lt"`
	IopsMaxLengthLte         *float64             `json:"iops_max_length_lte"`
	IopsMaxLengthNot         *float64             `json:"iops_max_length_not"`
	IopsMaxLengthNotIn       *[]float64           `json:"iops_max_length_not_in"`
	IopsMaxLt                *float64             `json:"iops_max_lt"`
	IopsMaxLte               *float64             `json:"iops_max_lte"`
	IopsMaxNot               *float64             `json:"iops_max_not"`
	IopsMaxNotIn             *[]float64           `json:"iops_max_not_in"`
	IopsNot                  *float64             `json:"iops_not"`
	IopsNotIn                *[]float64           `json:"iops_not_in"`
	IopsRd                   *float64             `json:"iops_rd"`
	IopsRdGt                 *float64             `json:"iops_rd_gt"`
	IopsRdGte                *float64             `json:"iops_rd_gte"`
	IopsRdIn                 *[]float64           `json:"iops_rd_in"`
	IopsRdLt                 *float64             `json:"iops_rd_lt"`
	IopsRdLte                *float64             `json:"iops_rd_lte"`
	IopsRdMax                *float64             `json:"iops_rd_max"`
	IopsRdMaxGt              *float64             `json:"iops_rd_max_gt"`
	IopsRdMaxGte             *float64             `json:"iops_rd_max_gte"`
	IopsRdMaxIn              *[]float64           `json:"iops_rd_max_in"`
	IopsRdMaxLength          *float64             `json:"iops_rd_max_length"`
	IopsRdMaxLengthGt        *float64             `json:"iops_rd_max_length_gt"`
	IopsRdMaxLengthGte       *float64             `json:"iops_rd_max_length_gte"`
	IopsRdMaxLengthIn        *[]float64           `json:"iops_rd_max_length_in"`
	IopsRdMaxLengthLt        *float64             `json:"iops_rd_max_length_lt"`
	IopsRdMaxLengthLte       *float64             `json:"iops_rd_max_length_lte"`
	IopsRdMaxLengthNot       *float64             `json:"iops_rd_max_length_not"`
	IopsRdMaxLengthNotIn     *[]float64           `json:"iops_rd_max_length_not_in"`
	IopsRdMaxLt              *float64             `json:"iops_rd_max_lt"`
	IopsRdMaxLte             *float64             `json:"iops_rd_max_lte"`
	IopsRdMaxNot             *float64             `json:"iops_rd_max_not"`
	IopsRdMaxNotIn           *[]float64           `json:"iops_rd_max_not_in"`
	IopsRdNot                *float64             `json:"iops_rd_not"`
	IopsRdNotIn              *[]float64           `json:"iops_rd_not_in"`
	IopsWr                   *float64             `json:"iops_wr"`
	IopsWrGt                 *float64             `json:"iops_wr_gt"`
	IopsWrGte                *float64             `json:"iops_wr_gte"`
	IopsWrIn                 *[]float64           `json:"iops_wr_in"`
	IopsWrLt                 *float64             `json:"iops_wr_lt"`
	IopsWrLte                *float64             `json:"iops_wr_lte"`
	IopsWrMax                *float64             `json:"iops_wr_max"`
	IopsWrMaxGt              *float64             `json:"iops_wr_max_gt"`
	IopsWrMaxGte             *float64             `json:"iops_wr_max_gte"`
	IopsWrMaxIn              *[]float64           `json:"iops_wr_max_in"`
	IopsWrMaxLength          *float64             `json:"iops_wr_max_length"`
	IopsWrMaxLengthGt        *float64             `json:"iops_wr_max_length_gt"`
	IopsWrMaxLengthGte       *float64             `json:"iops_wr_max_length_gte"`
	IopsWrMaxLengthIn        *[]float64           `json:"iops_wr_max_length_in"`
	IopsWrMaxLengthLt        *float64             `json:"iops_wr_max_length_lt"`
	IopsWrMaxLengthLte       *float64             `json:"iops_wr_max_length_lte"`
	IopsWrMaxLengthNot       *float64             `json:"iops_wr_max_length_not"`
	IopsWrMaxLengthNotIn     *[]float64           `json:"iops_wr_max_length_not_in"`
	IopsWrMaxLt              *float64             `json:"iops_wr_max_lt"`
	IopsWrMaxLte             *float64             `json:"iops_wr_max_lte"`
	IopsWrMaxNot             *float64             `json:"iops_wr_max_not"`
	IopsWrMaxNotIn           *[]float64           `json:"iops_wr_max_not_in"`
	IopsWrNot                *float64             `json:"iops_wr_not"`
	IopsWrNotIn              *[]float64           `json:"iops_wr_not_in"`
	IpWhitelist              *string              `json:"ip_whitelist"`
	IpWhitelistContains      *string              `json:"ip_whitelist_contains"`
	IpWhitelistEndsWith      *string              `json:"ip_whitelist_ends_with"`
	IpWhitelistGt            *string              `json:"ip_whitelist_gt"`
	IpWhitelistGte           *string              `json:"ip_whitelist_gte"`
	IpWhitelistIn            *[]string            `json:"ip_whitelist_in"`
	IpWhitelistLt            *string              `json:"ip_whitelist_lt"`
	IpWhitelistLte           *string              `json:"ip_whitelist_lte"`
	IpWhitelistNot           *string              `json:"ip_whitelist_not"`
	IpWhitelistNotContains   *string              `json:"ip_whitelist_not_contains"`
	IpWhitelistNotEndsWith   *string              `json:"ip_whitelist_not_ends_with"`
	IpWhitelistNotIn         *[]string            `json:"ip_whitelist_not_in"`
	IpWhitelistNotStartsWith *string              `json:"ip_whitelist_not_starts_with"`
	IpWhitelistStartsWith    *string              `json:"ip_whitelist_starts_with"`
	LabelsEvery              *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NamespaceGroupsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"namespace_groups_every"`
	NamespaceGroupsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"namespace_groups_none"`
	NamespaceGroupsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NamespaceGroupWhereInput)
		NamespaceGroupWhereInput `yaml:",inline"`
	} `json:"namespace_groups_some"`
	NamespacesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_every"`
	NamespacesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_none"`
	NamespacesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfNamespaceWhereInput)
		NvmfNamespaceWhereInput `yaml:",inline"`
	} `json:"namespaces_some"`
	NqnName                   *string   `json:"nqn_name"`
	NqnNameContains           *string   `json:"nqn_name_contains"`
	NqnNameEndsWith           *string   `json:"nqn_name_ends_with"`
	NqnNameGt                 *string   `json:"nqn_name_gt"`
	NqnNameGte                *string   `json:"nqn_name_gte"`
	NqnNameIn                 *[]string `json:"nqn_name_in"`
	NqnNameLt                 *string   `json:"nqn_name_lt"`
	NqnNameLte                *string   `json:"nqn_name_lte"`
	NqnNameNot                *string   `json:"nqn_name_not"`
	NqnNameNotContains        *string   `json:"nqn_name_not_contains"`
	NqnNameNotEndsWith        *string   `json:"nqn_name_not_ends_with"`
	NqnNameNotIn              *[]string `json:"nqn_name_not_in"`
	NqnNameNotStartsWith      *string   `json:"nqn_name_not_starts_with"`
	NqnNameStartsWith         *string   `json:"nqn_name_starts_with"`
	NqnWhitelist              *string   `json:"nqn_whitelist"`
	NqnWhitelistContains      *string   `json:"nqn_whitelist_contains"`
	NqnWhitelistEndsWith      *string   `json:"nqn_whitelist_ends_with"`
	NqnWhitelistGt            *string   `json:"nqn_whitelist_gt"`
	NqnWhitelistGte           *string   `json:"nqn_whitelist_gte"`
	NqnWhitelistIn            *[]string `json:"nqn_whitelist_in"`
	NqnWhitelistLt            *string   `json:"nqn_whitelist_lt"`
	NqnWhitelistLte           *string   `json:"nqn_whitelist_lte"`
	NqnWhitelistNot           *string   `json:"nqn_whitelist_not"`
	NqnWhitelistNotContains   *string   `json:"nqn_whitelist_not_contains"`
	NqnWhitelistNotEndsWith   *string   `json:"nqn_whitelist_not_ends_with"`
	NqnWhitelistNotIn         *[]string `json:"nqn_whitelist_not_in"`
	NqnWhitelistNotStartsWith *string   `json:"nqn_whitelist_not_starts_with"`
	NqnWhitelistStartsWith    *string   `json:"nqn_whitelist_starts_with"`
	Policy                    *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemPolicyType)
		NvmfSubsystemPolicyType `yaml:",inline"`
	} `json:"policy"`
	PolicyIn  *[]NvmfSubsystemPolicyType `json:"policy_in"`
	PolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NvmfSubsystemPolicyType)
		NvmfSubsystemPolicyType `yaml:",inline"`
	} `json:"policy_not"`
	PolicyNotIn      *[]NvmfSubsystemPolicyType `json:"policy_not_in"`
	ReplicaNum       *float64                   `json:"replica_num"`
	ReplicaNumGt     *float64                   `json:"replica_num_gt"`
	ReplicaNumGte    *float64                   `json:"replica_num_gte"`
	ReplicaNumIn     *[]float64                 `json:"replica_num_in"`
	ReplicaNumLt     *float64                   `json:"replica_num_lt"`
	ReplicaNumLte    *float64                   `json:"replica_num_lte"`
	ReplicaNumNot    *float64                   `json:"replica_num_not"`
	ReplicaNumNotIn  *[]float64                 `json:"replica_num_not_in"`
	StripeNum        *float64                   `json:"stripe_num"`
	StripeNumGt      *float64                   `json:"stripe_num_gt"`
	StripeNumGte     *float64                   `json:"stripe_num_gte"`
	StripeNumIn      *[]float64                 `json:"stripe_num_in"`
	StripeNumLt      *float64                   `json:"stripe_num_lt"`
	StripeNumLte     *float64                   `json:"stripe_num_lte"`
	StripeNumNot     *float64                   `json:"stripe_num_not"`
	StripeNumNotIn   *[]float64                 `json:"stripe_num_not_in"`
	StripeSize       *float64                   `json:"stripe_size"`
	StripeSizeGt     *float64                   `json:"stripe_size_gt"`
	StripeSizeGte    *float64                   `json:"stripe_size_gte"`
	StripeSizeIn     *[]float64                 `json:"stripe_size_in"`
	StripeSizeLt     *float64                   `json:"stripe_size_lt"`
	StripeSizeLte    *float64                   `json:"stripe_size_lte"`
	StripeSizeNot    *float64                   `json:"stripe_size_not"`
	StripeSizeNotIn  *[]float64                 `json:"stripe_size_not_in"`
	ThinProvision    *bool                      `json:"thin_provision"`
	ThinProvisionNot *bool                      `json:"thin_provision_not"`
}

// Organization defines model for Organization.
type Organization struct {
	Datacenters *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"datacenters"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

// OrganizationConnection defines model for OrganizationConnection.
type OrganizationConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// OrganizationCreationParams defines model for OrganizationCreationParams.
type OrganizationCreationParams struct {
	Name string `json:"name"`
}

// OrganizationDeletionParams defines model for OrganizationDeletionParams.
type OrganizationDeletionParams struct {
	Where OrganizationWhereInput `json:"where"`
}

// OrganizationOrderByInput defines model for OrganizationOrderByInput.
type OrganizationOrderByInput string

// OrganizationUpdationParams defines model for OrganizationUpdationParams.
type OrganizationUpdationParams struct {
	Data struct {
		Name *string `json:"name,omitempty"`
	} `json:"data"`
	Where OrganizationWhereInput `json:"where"`
}

// OrganizationWhereInput defines model for OrganizationWhereInput.
type OrganizationWhereInput struct {
	AND              *[]OrganizationWhereInput `json:"AND"`
	NOT              *[]OrganizationWhereInput `json:"NOT"`
	OR               *[]OrganizationWhereInput `json:"OR"`
	DatacentersEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_every"`
	DatacentersNone *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_none"`
	DatacentersSome *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenters_some"`
	Id                *string   `json:"id"`
	IdContains        *string   `json:"id_contains"`
	IdEndsWith        *string   `json:"id_ends_with"`
	IdGt              *string   `json:"id_gt"`
	IdGte             *string   `json:"id_gte"`
	IdIn              *[]string `json:"id_in"`
	IdLt              *string   `json:"id_lt"`
	IdLte             *string   `json:"id_lte"`
	IdNot             *string   `json:"id_not"`
	IdNotContains     *string   `json:"id_not_contains"`
	IdNotEndsWith     *string   `json:"id_not_ends_with"`
	IdNotIn           *[]string `json:"id_not_in"`
	IdNotStartsWith   *string   `json:"id_not_starts_with"`
	IdStartsWith      *string   `json:"id_starts_with"`
	Name              *string   `json:"name"`
	NameContains      *string   `json:"name_contains"`
	NameEndsWith      *string   `json:"name_ends_with"`
	NameGt            *string   `json:"name_gt"`
	NameGte           *string   `json:"name_gte"`
	NameIn            *[]string `json:"name_in"`
	NameLt            *string   `json:"name_lt"`
	NameLte           *string   `json:"name_lte"`
	NameNot           *string   `json:"name_not"`
	NameNotContains   *string   `json:"name_not_contains"`
	NameNotEndsWith   *string   `json:"name_not_ends_with"`
	NameNotIn         *[]string `json:"name_not_in"`
	NameNotStartsWith *string   `json:"name_not_starts_with"`
	NameStartsWith    *string   `json:"name_starts_with"`
}

// PartitionUsage defines model for PartitionUsage.
type PartitionUsage string

// PmemDimm defines model for PmemDimm.
type PmemDimm struct {
	Capacity      float64 `json:"capacity"`
	DeviceLocator string  `json:"device_locator"`
	Disk          *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"disk"`
	HealthStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskHealthStatus)
		DiskHealthStatus `yaml:",inline"`
	} `json:"health_status"`
	Host struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Id                   string   `json:"id"`
	LocalId              *string  `json:"local_id"`
	Name                 string   `json:"name"`
	NumaNode             float64  `json:"numa_node"`
	PartNumber           string   `json:"part_number"`
	RemainingLifePercent *float64 `json:"remaining_life_percent"`
	Version              string   `json:"version"`
}

// PmemDimmConnection defines model for PmemDimmConnection.
type PmemDimmConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// PmemDimmOrderByInput defines model for PmemDimmOrderByInput.
type PmemDimmOrderByInput string

// PmemDimmWhereInput defines model for PmemDimmWhereInput.
type PmemDimmWhereInput struct {
	AND                        *[]PmemDimmWhereInput `json:"AND"`
	NOT                        *[]PmemDimmWhereInput `json:"NOT"`
	OR                         *[]PmemDimmWhereInput `json:"OR"`
	Capacity                   *float64              `json:"capacity"`
	CapacityGt                 *float64              `json:"capacity_gt"`
	CapacityGte                *float64              `json:"capacity_gte"`
	CapacityIn                 *[]float64            `json:"capacity_in"`
	CapacityLt                 *float64              `json:"capacity_lt"`
	CapacityLte                *float64              `json:"capacity_lte"`
	CapacityNot                *float64              `json:"capacity_not"`
	CapacityNotIn              *[]float64            `json:"capacity_not_in"`
	DeviceLocator              *string               `json:"device_locator"`
	DeviceLocatorContains      *string               `json:"device_locator_contains"`
	DeviceLocatorEndsWith      *string               `json:"device_locator_ends_with"`
	DeviceLocatorGt            *string               `json:"device_locator_gt"`
	DeviceLocatorGte           *string               `json:"device_locator_gte"`
	DeviceLocatorIn            *[]string             `json:"device_locator_in"`
	DeviceLocatorLt            *string               `json:"device_locator_lt"`
	DeviceLocatorLte           *string               `json:"device_locator_lte"`
	DeviceLocatorNot           *string               `json:"device_locator_not"`
	DeviceLocatorNotContains   *string               `json:"device_locator_not_contains"`
	DeviceLocatorNotEndsWith   *string               `json:"device_locator_not_ends_with"`
	DeviceLocatorNotIn         *[]string             `json:"device_locator_not_in"`
	DeviceLocatorNotStartsWith *string               `json:"device_locator_not_starts_with"`
	DeviceLocatorStartsWith    *string               `json:"device_locator_starts_with"`
	Disk                       *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskWhereInput)
		DiskWhereInput `yaml:",inline"`
	} `json:"disk"`
	HealthStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskHealthStatus)
		DiskHealthStatus `yaml:",inline"`
	} `json:"health_status"`
	HealthStatusIn  *[]DiskHealthStatus `json:"health_status_in"`
	HealthStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/DiskHealthStatus)
		DiskHealthStatus `yaml:",inline"`
	} `json:"health_status_not"`
	HealthStatusNotIn *[]DiskHealthStatus `json:"health_status_not_in"`
	Host              *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Id                        *string    `json:"id"`
	IdContains                *string    `json:"id_contains"`
	IdEndsWith                *string    `json:"id_ends_with"`
	IdGt                      *string    `json:"id_gt"`
	IdGte                     *string    `json:"id_gte"`
	IdIn                      *[]string  `json:"id_in"`
	IdLt                      *string    `json:"id_lt"`
	IdLte                     *string    `json:"id_lte"`
	IdNot                     *string    `json:"id_not"`
	IdNotContains             *string    `json:"id_not_contains"`
	IdNotEndsWith             *string    `json:"id_not_ends_with"`
	IdNotIn                   *[]string  `json:"id_not_in"`
	IdNotStartsWith           *string    `json:"id_not_starts_with"`
	IdStartsWith              *string    `json:"id_starts_with"`
	LocalId                   *string    `json:"local_id"`
	LocalIdContains           *string    `json:"local_id_contains"`
	LocalIdEndsWith           *string    `json:"local_id_ends_with"`
	LocalIdGt                 *string    `json:"local_id_gt"`
	LocalIdGte                *string    `json:"local_id_gte"`
	LocalIdIn                 *[]string  `json:"local_id_in"`
	LocalIdLt                 *string    `json:"local_id_lt"`
	LocalIdLte                *string    `json:"local_id_lte"`
	LocalIdNot                *string    `json:"local_id_not"`
	LocalIdNotContains        *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith        *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn              *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith      *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith         *string    `json:"local_id_starts_with"`
	Name                      *string    `json:"name"`
	NameContains              *string    `json:"name_contains"`
	NameEndsWith              *string    `json:"name_ends_with"`
	NameGt                    *string    `json:"name_gt"`
	NameGte                   *string    `json:"name_gte"`
	NameIn                    *[]string  `json:"name_in"`
	NameLt                    *string    `json:"name_lt"`
	NameLte                   *string    `json:"name_lte"`
	NameNot                   *string    `json:"name_not"`
	NameNotContains           *string    `json:"name_not_contains"`
	NameNotEndsWith           *string    `json:"name_not_ends_with"`
	NameNotIn                 *[]string  `json:"name_not_in"`
	NameNotStartsWith         *string    `json:"name_not_starts_with"`
	NameStartsWith            *string    `json:"name_starts_with"`
	NumaNode                  *float64   `json:"numa_node"`
	NumaNodeGt                *float64   `json:"numa_node_gt"`
	NumaNodeGte               *float64   `json:"numa_node_gte"`
	NumaNodeIn                *[]float64 `json:"numa_node_in"`
	NumaNodeLt                *float64   `json:"numa_node_lt"`
	NumaNodeLte               *float64   `json:"numa_node_lte"`
	NumaNodeNot               *float64   `json:"numa_node_not"`
	NumaNodeNotIn             *[]float64 `json:"numa_node_not_in"`
	PartNumber                *string    `json:"part_number"`
	PartNumberContains        *string    `json:"part_number_contains"`
	PartNumberEndsWith        *string    `json:"part_number_ends_with"`
	PartNumberGt              *string    `json:"part_number_gt"`
	PartNumberGte             *string    `json:"part_number_gte"`
	PartNumberIn              *[]string  `json:"part_number_in"`
	PartNumberLt              *string    `json:"part_number_lt"`
	PartNumberLte             *string    `json:"part_number_lte"`
	PartNumberNot             *string    `json:"part_number_not"`
	PartNumberNotContains     *string    `json:"part_number_not_contains"`
	PartNumberNotEndsWith     *string    `json:"part_number_not_ends_with"`
	PartNumberNotIn           *[]string  `json:"part_number_not_in"`
	PartNumberNotStartsWith   *string    `json:"part_number_not_starts_with"`
	PartNumberStartsWith      *string    `json:"part_number_starts_with"`
	RemainingLifePercent      *float64   `json:"remaining_life_percent"`
	RemainingLifePercentGt    *float64   `json:"remaining_life_percent_gt"`
	RemainingLifePercentGte   *float64   `json:"remaining_life_percent_gte"`
	RemainingLifePercentIn    *[]float64 `json:"remaining_life_percent_in"`
	RemainingLifePercentLt    *float64   `json:"remaining_life_percent_lt"`
	RemainingLifePercentLte   *float64   `json:"remaining_life_percent_lte"`
	RemainingLifePercentNot   *float64   `json:"remaining_life_percent_not"`
	RemainingLifePercentNotIn *[]float64 `json:"remaining_life_percent_not_in"`
	Version                   *string    `json:"version"`
	VersionContains           *string    `json:"version_contains"`
	VersionEndsWith           *string    `json:"version_ends_with"`
	VersionGt                 *string    `json:"version_gt"`
	VersionGte                *string    `json:"version_gte"`
	VersionIn                 *[]string  `json:"version_in"`
	VersionLt                 *string    `json:"version_lt"`
	VersionLte                *string    `json:"version_lte"`
	VersionNot                *string    `json:"version_not"`
	VersionNotContains        *string    `json:"version_not_contains"`
	VersionNotEndsWith        *string    `json:"version_not_ends_with"`
	VersionNotIn              *[]string  `json:"version_not_in"`
	VersionNotStartsWith      *string    `json:"version_not_starts_with"`
	VersionStartsWith         *string    `json:"version_starts_with"`
}

// Position defines model for Position.
type Position struct {
	Typename *PositionTypename  `json:"__typename,omitempty"`
	Column   *MaybeScalarsAtInt `json:"column"`
	Row      *MaybeScalarsAtInt `json:"row"`
}

// PositionTypename defines model for Position.Typename.
type PositionTypename string

// PowerPosition defines model for PowerPosition.
type PowerPosition string

// ProtectSnapshotStatus defines model for ProtectSnapshotStatus.
type ProtectSnapshotStatus string

// RackTopo defines model for RackTopo.
type RackTopo struct {
	BrickTopoes *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"brick_topoes"`
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Height   float64 `json:"height"`
	Id       string  `json:"id"`
	LocalId  string  `json:"local_id"`
	Name     string  `json:"name"`
	ZoneTopo struct {
		Id string `json:"id"`
	} `json:"zone_topo"`
}

// RackTopoConnection defines model for RackTopoConnection.
type RackTopoConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// RackTopoCreationParams defines model for RackTopoCreationParams.
type RackTopoCreationParams struct {
	BrickTopoes *BrickTopoWhereInput `json:"brick_topoes,omitempty"`
	ClusterId   string               `json:"cluster_id"`
	Height      float64              `json:"height"`
	Name        string               `json:"name"`
	ZoneTopoId  string               `json:"zone_topo_id"`
}

// RackTopoDeletionParams defines model for RackTopoDeletionParams.
type RackTopoDeletionParams struct {
	Where RackTopoWhereInput `json:"where"`
}

// RackTopoOrderByInput defines model for RackTopoOrderByInput.
type RackTopoOrderByInput string

// RackTopoUpdationParams defines model for RackTopoUpdationParams.
type RackTopoUpdationParams struct {
	Data struct {
		BrickTopoes *BrickTopoWhereInput `json:"brick_topoes,omitempty"`
		ClusterId   *string              `json:"cluster_id,omitempty"`
		Height      *float64             `json:"height,omitempty"`
		Name        *string              `json:"name,omitempty"`
		ZoneTopoId  *string              `json:"zone_topo_id,omitempty"`
	} `json:"data"`
	Where RackTopoWhereInput `json:"where"`
}

// RackTopoWhereInput defines model for RackTopoWhereInput.
type RackTopoWhereInput struct {
	AND              *[]RackTopoWhereInput `json:"AND"`
	NOT              *[]RackTopoWhereInput `json:"NOT"`
	OR               *[]RackTopoWhereInput `json:"OR"`
	BrickTopoesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"brick_topoes_every"`
	BrickTopoesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"brick_topoes_none"`
	BrickTopoesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/BrickTopoWhereInput)
		BrickTopoWhereInput `yaml:",inline"`
	} `json:"brick_topoes_some"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Height               *float64   `json:"height"`
	HeightGt             *float64   `json:"height_gt"`
	HeightGte            *float64   `json:"height_gte"`
	HeightIn             *[]float64 `json:"height_in"`
	HeightLt             *float64   `json:"height_lt"`
	HeightLte            *float64   `json:"height_lte"`
	HeightNot            *float64   `json:"height_not"`
	HeightNotIn          *[]float64 `json:"height_not_in"`
	Id                   *string    `json:"id"`
	IdContains           *string    `json:"id_contains"`
	IdEndsWith           *string    `json:"id_ends_with"`
	IdGt                 *string    `json:"id_gt"`
	IdGte                *string    `json:"id_gte"`
	IdIn                 *[]string  `json:"id_in"`
	IdLt                 *string    `json:"id_lt"`
	IdLte                *string    `json:"id_lte"`
	IdNot                *string    `json:"id_not"`
	IdNotContains        *string    `json:"id_not_contains"`
	IdNotEndsWith        *string    `json:"id_not_ends_with"`
	IdNotIn              *[]string  `json:"id_not_in"`
	IdNotStartsWith      *string    `json:"id_not_starts_with"`
	IdStartsWith         *string    `json:"id_starts_with"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	Name                 *string    `json:"name"`
	NameContains         *string    `json:"name_contains"`
	NameEndsWith         *string    `json:"name_ends_with"`
	NameGt               *string    `json:"name_gt"`
	NameGte              *string    `json:"name_gte"`
	NameIn               *[]string  `json:"name_in"`
	NameLt               *string    `json:"name_lt"`
	NameLte              *string    `json:"name_lte"`
	NameNot              *string    `json:"name_not"`
	NameNotContains      *string    `json:"name_not_contains"`
	NameNotEndsWith      *string    `json:"name_not_ends_with"`
	NameNotIn            *[]string  `json:"name_not_in"`
	NameNotStartsWith    *string    `json:"name_not_starts_with"`
	NameStartsWith       *string    `json:"name_starts_with"`
	ZoneTopo             *struct {
		// Embedded struct due to allOf(#/components/schemas/ZoneTopoWhereInput)
		ZoneTopoWhereInput `yaml:",inline"`
	} `json:"zone_topo"`
}

// RemoveLabelsFromResourcesParams defines model for RemoveLabelsFromResourcesParams.
type RemoveLabelsFromResourcesParams AddLabelsToResourcesParams

// ReportResourceInputEnum defines model for ReportResourceInputEnum.
type ReportResourceInputEnum string

// ReportTask defines model for ReportTask.
type ReportTask struct {
	CreatedAt string     `json:"createdAt"`
	Id        string     `json:"id"`
	Internal  bool       `json:"internal"`
	Name      string     `json:"name"`
	PlanId    *string    `json:"plan_id"`
	Status    TaskStatus `json:"status"`
	Template  struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"template"`
}

// ReportTaskConnection defines model for ReportTaskConnection.
type ReportTaskConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ReportTaskOrderByInput defines model for ReportTaskOrderByInput.
type ReportTaskOrderByInput string

// ReportTaskWhereInput defines model for ReportTaskWhereInput.
type ReportTaskWhereInput struct {
	AND                 *[]ReportTaskWhereInput `json:"AND"`
	NOT                 *[]ReportTaskWhereInput `json:"NOT"`
	OR                  *[]ReportTaskWhereInput `json:"OR"`
	CreatedAt           *string                 `json:"createdAt"`
	CreatedAtGt         *string                 `json:"createdAt_gt"`
	CreatedAtGte        *string                 `json:"createdAt_gte"`
	CreatedAtIn         *[]string               `json:"createdAt_in"`
	CreatedAtLt         *string                 `json:"createdAt_lt"`
	CreatedAtLte        *string                 `json:"createdAt_lte"`
	CreatedAtNot        *string                 `json:"createdAt_not"`
	CreatedAtNotIn      *[]string               `json:"createdAt_not_in"`
	Id                  *string                 `json:"id"`
	IdContains          *string                 `json:"id_contains"`
	IdEndsWith          *string                 `json:"id_ends_with"`
	IdGt                *string                 `json:"id_gt"`
	IdGte               *string                 `json:"id_gte"`
	IdIn                *[]string               `json:"id_in"`
	IdLt                *string                 `json:"id_lt"`
	IdLte               *string                 `json:"id_lte"`
	IdNot               *string                 `json:"id_not"`
	IdNotContains       *string                 `json:"id_not_contains"`
	IdNotEndsWith       *string                 `json:"id_not_ends_with"`
	IdNotIn             *[]string               `json:"id_not_in"`
	IdNotStartsWith     *string                 `json:"id_not_starts_with"`
	IdStartsWith        *string                 `json:"id_starts_with"`
	Internal            *bool                   `json:"internal"`
	InternalNot         *bool                   `json:"internal_not"`
	Name                *string                 `json:"name"`
	NameContains        *string                 `json:"name_contains"`
	NameEndsWith        *string                 `json:"name_ends_with"`
	NameGt              *string                 `json:"name_gt"`
	NameGte             *string                 `json:"name_gte"`
	NameIn              *[]string               `json:"name_in"`
	NameLt              *string                 `json:"name_lt"`
	NameLte             *string                 `json:"name_lte"`
	NameNot             *string                 `json:"name_not"`
	NameNotContains     *string                 `json:"name_not_contains"`
	NameNotEndsWith     *string                 `json:"name_not_ends_with"`
	NameNotIn           *[]string               `json:"name_not_in"`
	NameNotStartsWith   *string                 `json:"name_not_starts_with"`
	NameStartsWith      *string                 `json:"name_starts_with"`
	PlanId              *string                 `json:"plan_id"`
	PlanIdContains      *string                 `json:"plan_id_contains"`
	PlanIdEndsWith      *string                 `json:"plan_id_ends_with"`
	PlanIdGt            *string                 `json:"plan_id_gt"`
	PlanIdGte           *string                 `json:"plan_id_gte"`
	PlanIdIn            *[]string               `json:"plan_id_in"`
	PlanIdLt            *string                 `json:"plan_id_lt"`
	PlanIdLte           *string                 `json:"plan_id_lte"`
	PlanIdNot           *string                 `json:"plan_id_not"`
	PlanIdNotContains   *string                 `json:"plan_id_not_contains"`
	PlanIdNotEndsWith   *string                 `json:"plan_id_not_ends_with"`
	PlanIdNotIn         *[]string               `json:"plan_id_not_in"`
	PlanIdNotStartsWith *string                 `json:"plan_id_not_starts_with"`
	PlanIdStartsWith    *string                 `json:"plan_id_starts_with"`
	Status              *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskStatus)
		TaskStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]TaskStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskStatus)
		TaskStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn *[]TaskStatus `json:"status_not_in"`
	Template    *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTemplateWhereInput)
		ReportTemplateWhereInput `yaml:",inline"`
	} `json:"template"`
}

// ReportTemplate defines model for ReportTemplate.
type ReportTemplate struct {
	CreatedAt   string `json:"createdAt"`
	Description string `json:"description"`
	ExecutePlan []struct {
		Id string `json:"id"`
	} `json:"execute_plan"`
	Id           string  `json:"id"`
	Name         string  `json:"name"`
	Preset       *string `json:"preset"`
	ResourceMeta []struct {
		Fields []string                `json:"fields"`
		Filter map[string]interface{}  `json:"filter"`
		Name   string                  `json:"name"`
		Type   ReportResourceInputEnum `json:"type"`
	} `json:"resource_meta"`
	TaskNum float64 `json:"task_num"`
	Tasks   *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"tasks"`
}

// ReportTemplateConnection defines model for ReportTemplateConnection.
type ReportTemplateConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ReportTemplateCreationParams defines model for ReportTemplateCreationParams.
type ReportTemplateCreationParams struct {
	Description *string `json:"description,omitempty"`
	ExecutePlan []struct {
		Enabled *bool   `json:"enabled,omitempty"`
		Period  string  `json:"period"`
		Retain  float64 `json:"retain"`
		StartAt *string `json:"start_at,omitempty"`
	} `json:"execute_plan"`
	Name         string `json:"name"`
	ResourceMeta []struct {
		Fields []string                `json:"fields"`
		Filter map[string]interface{}  `json:"filter"`
		Name   string                  `json:"name"`
		Type   ReportResourceInputEnum `json:"type"`
	} `json:"resource_meta"`
}

// ReportTemplateDeletionParams defines model for ReportTemplateDeletionParams.
type ReportTemplateDeletionParams struct {
	Where ReportTemplateWhereInput `json:"where"`
}

// ReportTemplateOrderByInput defines model for ReportTemplateOrderByInput.
type ReportTemplateOrderByInput string

// ReportTemplateUpdationParams defines model for ReportTemplateUpdationParams.
type ReportTemplateUpdationParams struct {
	Data struct {
		Description *string `json:"description,omitempty"`
		ExecutePlan *[]struct {
			Enabled *bool   `json:"enabled,omitempty"`
			Period  string  `json:"period"`
			Retain  float64 `json:"retain"`
			StartAt *string `json:"start_at,omitempty"`
		} `json:"execute_plan,omitempty"`
		Name         *string `json:"name,omitempty"`
		ResourceMeta *[]struct {
			Fields []string                `json:"fields"`
			Filter map[string]interface{}  `json:"filter"`
			Name   string                  `json:"name"`
			Type   ReportResourceInputEnum `json:"type"`
		} `json:"resource_meta,omitempty"`
	} `json:"data"`
	Where ReportTemplateWhereInput `json:"where"`
}

// ReportTemplateWhereInput defines model for ReportTemplateWhereInput.
type ReportTemplateWhereInput struct {
	AND                      *[]ReportTemplateWhereInput `json:"AND"`
	NOT                      *[]ReportTemplateWhereInput `json:"NOT"`
	OR                       *[]ReportTemplateWhereInput `json:"OR"`
	CreatedAt                *string                     `json:"createdAt"`
	CreatedAtGt              *string                     `json:"createdAt_gt"`
	CreatedAtGte             *string                     `json:"createdAt_gte"`
	CreatedAtIn              *[]string                   `json:"createdAt_in"`
	CreatedAtLt              *string                     `json:"createdAt_lt"`
	CreatedAtLte             *string                     `json:"createdAt_lte"`
	CreatedAtNot             *string                     `json:"createdAt_not"`
	CreatedAtNotIn           *[]string                   `json:"createdAt_not_in"`
	Description              *string                     `json:"description"`
	DescriptionContains      *string                     `json:"description_contains"`
	DescriptionEndsWith      *string                     `json:"description_ends_with"`
	DescriptionGt            *string                     `json:"description_gt"`
	DescriptionGte           *string                     `json:"description_gte"`
	DescriptionIn            *[]string                   `json:"description_in"`
	DescriptionLt            *string                     `json:"description_lt"`
	DescriptionLte           *string                     `json:"description_lte"`
	DescriptionNot           *string                     `json:"description_not"`
	DescriptionNotContains   *string                     `json:"description_not_contains"`
	DescriptionNotEndsWith   *string                     `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string                   `json:"description_not_in"`
	DescriptionNotStartsWith *string                     `json:"description_not_starts_with"`
	DescriptionStartsWith    *string                     `json:"description_starts_with"`
	Id                       *string                     `json:"id"`
	IdContains               *string                     `json:"id_contains"`
	IdEndsWith               *string                     `json:"id_ends_with"`
	IdGt                     *string                     `json:"id_gt"`
	IdGte                    *string                     `json:"id_gte"`
	IdIn                     *[]string                   `json:"id_in"`
	IdLt                     *string                     `json:"id_lt"`
	IdLte                    *string                     `json:"id_lte"`
	IdNot                    *string                     `json:"id_not"`
	IdNotContains            *string                     `json:"id_not_contains"`
	IdNotEndsWith            *string                     `json:"id_not_ends_with"`
	IdNotIn                  *[]string                   `json:"id_not_in"`
	IdNotStartsWith          *string                     `json:"id_not_starts_with"`
	IdStartsWith             *string                     `json:"id_starts_with"`
	Name                     *string                     `json:"name"`
	NameContains             *string                     `json:"name_contains"`
	NameEndsWith             *string                     `json:"name_ends_with"`
	NameGt                   *string                     `json:"name_gt"`
	NameGte                  *string                     `json:"name_gte"`
	NameIn                   *[]string                   `json:"name_in"`
	NameLt                   *string                     `json:"name_lt"`
	NameLte                  *string                     `json:"name_lte"`
	NameNot                  *string                     `json:"name_not"`
	NameNotContains          *string                     `json:"name_not_contains"`
	NameNotEndsWith          *string                     `json:"name_not_ends_with"`
	NameNotIn                *[]string                   `json:"name_not_in"`
	NameNotStartsWith        *string                     `json:"name_not_starts_with"`
	NameStartsWith           *string                     `json:"name_starts_with"`
	Preset                   *string                     `json:"preset"`
	PresetContains           *string                     `json:"preset_contains"`
	PresetEndsWith           *string                     `json:"preset_ends_with"`
	PresetGt                 *string                     `json:"preset_gt"`
	PresetGte                *string                     `json:"preset_gte"`
	PresetIn                 *[]string                   `json:"preset_in"`
	PresetLt                 *string                     `json:"preset_lt"`
	PresetLte                *string                     `json:"preset_lte"`
	PresetNot                *string                     `json:"preset_not"`
	PresetNotContains        *string                     `json:"preset_not_contains"`
	PresetNotEndsWith        *string                     `json:"preset_not_ends_with"`
	PresetNotIn              *[]string                   `json:"preset_not_in"`
	PresetNotStartsWith      *string                     `json:"preset_not_starts_with"`
	PresetStartsWith         *string                     `json:"preset_starts_with"`
	TaskNum                  *float64                    `json:"task_num"`
	TaskNumGt                *float64                    `json:"task_num_gt"`
	TaskNumGte               *float64                    `json:"task_num_gte"`
	TaskNumIn                *[]float64                  `json:"task_num_in"`
	TaskNumLt                *float64                    `json:"task_num_lt"`
	TaskNumLte               *float64                    `json:"task_num_lte"`
	TaskNumNot               *float64                    `json:"task_num_not"`
	TaskNumNotIn             *[]float64                  `json:"task_num_not_in"`
	TasksEvery               *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTaskWhereInput)
		ReportTaskWhereInput `yaml:",inline"`
	} `json:"tasks_every"`
	TasksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTaskWhereInput)
		ReportTaskWhereInput `yaml:",inline"`
	} `json:"tasks_none"`
	TasksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/ReportTaskWhereInput)
		ReportTaskWhereInput `yaml:",inline"`
	} `json:"tasks_some"`
}

// ReporteTemplateGenerationParams defines model for ReporteTemplateGenerationParams.
type ReporteTemplateGenerationParams struct {
	Where ReportTemplateWhereInput `json:"where"`
}

// ResolveAlertParams defines model for ResolveAlertParams.
type ResolveAlertParams struct {
	Where AlertWhereInput `json:"where"`
}

// RoleCreationParams defines model for RoleCreationParams.
type RoleCreationParams struct {
	Actions []string `json:"actions"`
	Name    string   `json:"name"`
}

// RoleDeletionParams defines model for RoleDeletionParams.
type RoleDeletionParams struct {
	Where UserRoleNextWhereInput `json:"where"`
}

// RoleUpdationParams defines model for RoleUpdationParams.
type RoleUpdationParams struct {
	Data struct {
		Actions *[]string `json:"actions,omitempty"`
		Name    *string   `json:"name,omitempty"`
	} `json:"data"`
	Where UserRoleNextWhereInput `json:"where"`
}

// SeverityEnum defines model for SeverityEnum.
type SeverityEnum string

// SnapshotGroup defines model for SnapshotGroup.
type SnapshotGroup struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Deleted           bool `json:"deleted"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EstimatedRecyclingTime *string `json:"estimated_recycling_time"`
	Id                     string  `json:"id"`
	Internal               *bool   `json:"internal"`
	Keep                   bool    `json:"keep"`
	LocalCreatedAt         string  `json:"local_created_at"`
	LocalId                string  `json:"local_id"`
	LogicalSizeBytes       float64 `json:"logical_size_bytes"`
	Name                   string  `json:"name"`
	ObjectNum              float64 `json:"object_num"`
	SnapshotPlanTask       struct {
		Id string `json:"id"`
	} `json:"snapshotPlanTask"`
	VmInfo []struct {
		Disks []struct {
			DiskId             string                `json:"disk_id"`
			DiskSnapshotStatus ProtectSnapshotStatus `json:"disk_snapshot_status"`
		} `json:"disks"`
		VmId             string                `json:"vm_id"`
		VmName           string                `json:"vm_name"`
		VmSnapshotStatus ProtectSnapshotStatus `json:"vm_snapshot_status"`
	} `json:"vm_info"`
	VmSnapshots *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_snapshots"`
}

// SnapshotGroupCloneParams defines model for SnapshotGroupCloneParams.
type SnapshotGroupCloneParams struct {
	Clone []struct {
		FromSourceVmId string `json:"from_source_vm_id"`
		ToClonedVmName string `json:"to_cloned_vm_name"`
	} `json:"clone"`
	Id string `json:"id"`
}

// SnapshotGroupConnection defines model for SnapshotGroupConnection.
type SnapshotGroupConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// SnapshotGroupDeletionParams defines model for SnapshotGroupDeletionParams.
type SnapshotGroupDeletionParams struct {
	Where SnapshotGroupWhereInput `json:"where"`
}

// SnapshotGroupKeepParams defines model for SnapshotGroupKeepParams.
type SnapshotGroupKeepParams struct {
	Where SnapshotGroupWhereInput `json:"where"`
}

// SnapshotGroupOrderByInput defines model for SnapshotGroupOrderByInput.
type SnapshotGroupOrderByInput string

// SnapshotGroupRollbackParams defines model for SnapshotGroupRollbackParams.
type SnapshotGroupRollbackParams struct {
	Where SnapshotGroupWhereInput `json:"where"`
}

// SnapshotGroupWhereInput defines model for SnapshotGroupWhereInput.
type SnapshotGroupWhereInput struct {
	AND     *[]SnapshotGroupWhereInput `json:"AND"`
	NOT     *[]SnapshotGroupWhereInput `json:"NOT"`
	OR      *[]SnapshotGroupWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Deleted           *bool `json:"deleted"`
	DeletedNot        *bool `json:"deleted_not"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn      *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	EstimatedRecyclingTime      *string              `json:"estimated_recycling_time"`
	EstimatedRecyclingTimeGt    *string              `json:"estimated_recycling_time_gt"`
	EstimatedRecyclingTimeGte   *string              `json:"estimated_recycling_time_gte"`
	EstimatedRecyclingTimeIn    *[]string            `json:"estimated_recycling_time_in"`
	EstimatedRecyclingTimeLt    *string              `json:"estimated_recycling_time_lt"`
	EstimatedRecyclingTimeLte   *string              `json:"estimated_recycling_time_lte"`
	EstimatedRecyclingTimeNot   *string              `json:"estimated_recycling_time_not"`
	EstimatedRecyclingTimeNotIn *[]string            `json:"estimated_recycling_time_not_in"`
	Id                          *string              `json:"id"`
	IdContains                  *string              `json:"id_contains"`
	IdEndsWith                  *string              `json:"id_ends_with"`
	IdGt                        *string              `json:"id_gt"`
	IdGte                       *string              `json:"id_gte"`
	IdIn                        *[]string            `json:"id_in"`
	IdLt                        *string              `json:"id_lt"`
	IdLte                       *string              `json:"id_lte"`
	IdNot                       *string              `json:"id_not"`
	IdNotContains               *string              `json:"id_not_contains"`
	IdNotEndsWith               *string              `json:"id_not_ends_with"`
	IdNotIn                     *[]string            `json:"id_not_in"`
	IdNotStartsWith             *string              `json:"id_not_starts_with"`
	IdStartsWith                *string              `json:"id_starts_with"`
	Internal                    *bool                `json:"internal"`
	InternalNot                 *bool                `json:"internal_not"`
	Keep                        *bool                `json:"keep"`
	KeepNot                     *bool                `json:"keep_not"`
	LocalCreatedAt              *string              `json:"local_created_at"`
	LocalCreatedAtGt            *string              `json:"local_created_at_gt"`
	LocalCreatedAtGte           *string              `json:"local_created_at_gte"`
	LocalCreatedAtIn            *[]string            `json:"local_created_at_in"`
	LocalCreatedAtLt            *string              `json:"local_created_at_lt"`
	LocalCreatedAtLte           *string              `json:"local_created_at_lte"`
	LocalCreatedAtNot           *string              `json:"local_created_at_not"`
	LocalCreatedAtNotIn         *[]string            `json:"local_created_at_not_in"`
	LocalId                     *string              `json:"local_id"`
	LocalIdContains             *string              `json:"local_id_contains"`
	LocalIdEndsWith             *string              `json:"local_id_ends_with"`
	LocalIdGt                   *string              `json:"local_id_gt"`
	LocalIdGte                  *string              `json:"local_id_gte"`
	LocalIdIn                   *[]string            `json:"local_id_in"`
	LocalIdLt                   *string              `json:"local_id_lt"`
	LocalIdLte                  *string              `json:"local_id_lte"`
	LocalIdNot                  *string              `json:"local_id_not"`
	LocalIdNotContains          *string              `json:"local_id_not_contains"`
	LocalIdNotEndsWith          *string              `json:"local_id_not_ends_with"`
	LocalIdNotIn                *[]string            `json:"local_id_not_in"`
	LocalIdNotStartsWith        *string              `json:"local_id_not_starts_with"`
	LocalIdStartsWith           *string              `json:"local_id_starts_with"`
	LogicalSizeBytes            *float64             `json:"logical_size_bytes"`
	LogicalSizeBytesGt          *float64             `json:"logical_size_bytes_gt"`
	LogicalSizeBytesGte         *float64             `json:"logical_size_bytes_gte"`
	LogicalSizeBytesIn          *[]float64           `json:"logical_size_bytes_in"`
	LogicalSizeBytesLt          *float64             `json:"logical_size_bytes_lt"`
	LogicalSizeBytesLte         *float64             `json:"logical_size_bytes_lte"`
	LogicalSizeBytesNot         *float64             `json:"logical_size_bytes_not"`
	LogicalSizeBytesNotIn       *[]float64           `json:"logical_size_bytes_not_in"`
	Name                        *string              `json:"name"`
	NameContains                *string              `json:"name_contains"`
	NameEndsWith                *string              `json:"name_ends_with"`
	NameGt                      *string              `json:"name_gt"`
	NameGte                     *string              `json:"name_gte"`
	NameIn                      *[]string            `json:"name_in"`
	NameLt                      *string              `json:"name_lt"`
	NameLte                     *string              `json:"name_lte"`
	NameNot                     *string              `json:"name_not"`
	NameNotContains             *string              `json:"name_not_contains"`
	NameNotEndsWith             *string              `json:"name_not_ends_with"`
	NameNotIn                   *[]string            `json:"name_not_in"`
	NameNotStartsWith           *string              `json:"name_not_starts_with"`
	NameStartsWith              *string              `json:"name_starts_with"`
	ObjectNum                   *float64             `json:"object_num"`
	ObjectNumGt                 *float64             `json:"object_num_gt"`
	ObjectNumGte                *float64             `json:"object_num_gte"`
	ObjectNumIn                 *[]float64           `json:"object_num_in"`
	ObjectNumLt                 *float64             `json:"object_num_lt"`
	ObjectNumLte                *float64             `json:"object_num_lte"`
	ObjectNumNot                *float64             `json:"object_num_not"`
	ObjectNumNotIn              *[]float64           `json:"object_num_not_in"`
	SnapshotPlanTask            *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskWhereInput)
		SnapshotPlanTaskWhereInput `yaml:",inline"`
	} `json:"snapshotPlanTask"`
	VmSnapshotsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_every"`
	VmSnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_none"`
	VmSnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"vm_snapshots_some"`
}

// SnapshotPlan defines model for SnapshotPlan.
type SnapshotPlan struct {
	AutoDeleteNum  float64 `json:"auto_delete_num"`
	AutoExecuteNum float64 `json:"auto_execute_num"`
	Cluster        struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description       string  `json:"description"`
	EndTime           *string `json:"end_time"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	ExecHM           *map[string]interface{} `json:"exec_h_m"`
	ExecuteIntervals []float64               `json:"execute_intervals"`
	ExecutePlanType  SnapshotPlanExecuteType `json:"execute_plan_type"`
	ExecutionTasks   *[]struct {
		Id string `json:"id"`
	} `json:"execution_tasks"`
	Healthy            bool                      `json:"healthy"`
	Id                 string                    `json:"id"`
	LastExecuteEndTime *string                   `json:"last_execute_end_time"`
	LastExecuteStatus  SnapshotPlanExecuteStatus `json:"last_execute_status"`
	LastExecuteTime    *string                   `json:"last_execute_time"`
	LocalId            string                    `json:"local_id"`
	LogicalSizeBytes   float64                   `json:"logical_size_bytes"`
	ManualDeleteNum    float64                   `json:"manual_delete_num"`
	ManualExecuteNum   float64                   `json:"manual_execute_num"`
	Mirror             bool                      `json:"mirror"`
	Name               string                    `json:"name"`
	NextExecuteTime    *string                   `json:"next_execute_time"`
	ObjectNum          float64                   `json:"object_num"`
	PhysicalSizeBytes  float64                   `json:"physical_size_bytes"`
	RemainSnapshotNum  float64                   `json:"remain_snapshot_num"`
	SnapshotGroupNum   float64                   `json:"snapshot_group_num"`
	StartTime          string                    `json:"start_time"`
	Status             SnapshotPlanStatus        `json:"status"`
	Vms                *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vms"`
}

// SnapshotPlanConnection defines model for SnapshotPlanConnection.
type SnapshotPlanConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// SnapshotPlanCreationParams defines model for SnapshotPlanCreationParams.
type SnapshotPlanCreationParams struct {
	ClusterId         string                  `json:"cluster_id"`
	EndTime           *string                 `json:"end_time,omitempty"`
	ExecHM            *string                 `json:"exec_h_m,omitempty"`
	ExecuteIntervals  []float64               `json:"execute_intervals"`
	ExecutePlanType   SnapshotPlanExecuteType `json:"execute_plan_type"`
	Name              string                  `json:"name"`
	RemainSnapshotNum float64                 `json:"remain_snapshot_num"`
	StartTime         string                  `json:"start_time"`
	VmIds             []string                `json:"vm_ids"`
}

// SnapshotPlanDeletionParams defines model for SnapshotPlanDeletionParams.
type SnapshotPlanDeletionParams struct {
	Where SnapshotPlanWhereInput `json:"where"`
}

// SnapshotPlanExecuteStatus defines model for SnapshotPlanExecuteStatus.
type SnapshotPlanExecuteStatus string

// SnapshotPlanExecuteType defines model for SnapshotPlanExecuteType.
type SnapshotPlanExecuteType string

// SnapshotPlanExecutionParams defines model for SnapshotPlanExecutionParams.
type SnapshotPlanExecutionParams struct {
	Data struct {
		TaskName string `json:"task_name"`
	} `json:"data"`
	Where SnapshotPlanWhereInput `json:"where"`
}

// SnapshotPlanOrderByInput defines model for SnapshotPlanOrderByInput.
type SnapshotPlanOrderByInput string

// SnapshotPlanResumeParams defines model for SnapshotPlanResumeParams.
type SnapshotPlanResumeParams struct {
	Where SnapshotPlanWhereInput `json:"where"`
}

// SnapshotPlanStatus defines model for SnapshotPlanStatus.
type SnapshotPlanStatus string

// SnapshotPlanSuspendedParams defines model for SnapshotPlanSuspendedParams.
type SnapshotPlanSuspendedParams struct {
	Where SnapshotPlanWhereInput `json:"where"`
}

// SnapshotPlanTask defines model for SnapshotPlanTask.
type SnapshotPlanTask struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	EndTime           *string `json:"end_time"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id            string `json:"id"`
	Internal      *bool  `json:"internal"`
	LocalId       string `json:"local_id"`
	SnapshotGroup *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"snapshotGroup"`
	SnapshotPlan struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"snapshotPlan"`
	StartTime string                    `json:"start_time"`
	Status    SnapshotPlanExecuteStatus `json:"status"`
	Type      SnapshotPlanTaskType      `json:"type"`
}

// SnapshotPlanTaskConnection defines model for SnapshotPlanTaskConnection.
type SnapshotPlanTaskConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// SnapshotPlanTaskOrderByInput defines model for SnapshotPlanTaskOrderByInput.
type SnapshotPlanTaskOrderByInput string

// SnapshotPlanTaskType defines model for SnapshotPlanTaskType.
type SnapshotPlanTaskType string

// SnapshotPlanTaskWhereInput defines model for SnapshotPlanTaskWhereInput.
type SnapshotPlanTaskWhereInput struct {
	AND     *[]SnapshotPlanTaskWhereInput `json:"AND"`
	NOT     *[]SnapshotPlanTaskWhereInput `json:"NOT"`
	OR      *[]SnapshotPlanTaskWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	EndTime           *string   `json:"end_time"`
	EndTimeGt         *string   `json:"end_time_gt"`
	EndTimeGte        *string   `json:"end_time_gte"`
	EndTimeIn         *[]string `json:"end_time_in"`
	EndTimeLt         *string   `json:"end_time_lt"`
	EndTimeLte        *string   `json:"end_time_lte"`
	EndTimeNot        *string   `json:"end_time_not"`
	EndTimeNotIn      *[]string `json:"end_time_not_in"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	Internal               *bool                `json:"internal"`
	InternalNot            *bool                `json:"internal_not"`
	LocalId                *string              `json:"local_id"`
	LocalIdContains        *string              `json:"local_id_contains"`
	LocalIdEndsWith        *string              `json:"local_id_ends_with"`
	LocalIdGt              *string              `json:"local_id_gt"`
	LocalIdGte             *string              `json:"local_id_gte"`
	LocalIdIn              *[]string            `json:"local_id_in"`
	LocalIdLt              *string              `json:"local_id_lt"`
	LocalIdLte             *string              `json:"local_id_lte"`
	LocalIdNot             *string              `json:"local_id_not"`
	LocalIdNotContains     *string              `json:"local_id_not_contains"`
	LocalIdNotEndsWith     *string              `json:"local_id_not_ends_with"`
	LocalIdNotIn           *[]string            `json:"local_id_not_in"`
	LocalIdNotStartsWith   *string              `json:"local_id_not_starts_with"`
	LocalIdStartsWith      *string              `json:"local_id_starts_with"`
	SnapshotGroup          *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotGroupWhereInput)
		SnapshotGroupWhereInput `yaml:",inline"`
	} `json:"snapshotGroup"`
	SnapshotPlan *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanWhereInput)
		SnapshotPlanWhereInput `yaml:",inline"`
	} `json:"snapshotPlan"`
	StartTime      *string   `json:"start_time"`
	StartTimeGt    *string   `json:"start_time_gt"`
	StartTimeGte   *string   `json:"start_time_gte"`
	StartTimeIn    *[]string `json:"start_time_in"`
	StartTimeLt    *string   `json:"start_time_lt"`
	StartTimeLte   *string   `json:"start_time_lte"`
	StartTimeNot   *string   `json:"start_time_not"`
	StartTimeNotIn *[]string `json:"start_time_not_in"`
	Status         *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanExecuteStatus)
		SnapshotPlanExecuteStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]SnapshotPlanExecuteStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanExecuteStatus)
		SnapshotPlanExecuteStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn *[]SnapshotPlanExecuteStatus `json:"status_not_in"`
	Type        *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskType)
		SnapshotPlanTaskType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]SnapshotPlanTaskType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskType)
		SnapshotPlanTaskType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn *[]SnapshotPlanTaskType `json:"type_not_in"`
}

// SnapshotPlanUpdationParams defines model for SnapshotPlanUpdationParams.
type SnapshotPlanUpdationParams struct {
	Data *struct {
		EndTime           *string                  `json:"end_time,omitempty"`
		ExecHM            *string                  `json:"exec_h_m,omitempty"`
		ExecuteIntervals  *[]float64               `json:"execute_intervals,omitempty"`
		ExecutePlanType   *SnapshotPlanExecuteType `json:"execute_plan_type,omitempty"`
		Name              *string                  `json:"name,omitempty"`
		RemainSnapshotNum *float64                 `json:"remain_snapshot_num,omitempty"`
		VmIds             *[]string                `json:"vm_ids,omitempty"`
	} `json:"data,omitempty"`
	Where SnapshotPlanWhereInput `json:"where"`
}

// SnapshotPlanWhereInput defines model for SnapshotPlanWhereInput.
type SnapshotPlanWhereInput struct {
	AND                 *[]SnapshotPlanWhereInput `json:"AND"`
	NOT                 *[]SnapshotPlanWhereInput `json:"NOT"`
	OR                  *[]SnapshotPlanWhereInput `json:"OR"`
	AutoDeleteNum       *float64                  `json:"auto_delete_num"`
	AutoDeleteNumGt     *float64                  `json:"auto_delete_num_gt"`
	AutoDeleteNumGte    *float64                  `json:"auto_delete_num_gte"`
	AutoDeleteNumIn     *[]float64                `json:"auto_delete_num_in"`
	AutoDeleteNumLt     *float64                  `json:"auto_delete_num_lt"`
	AutoDeleteNumLte    *float64                  `json:"auto_delete_num_lte"`
	AutoDeleteNumNot    *float64                  `json:"auto_delete_num_not"`
	AutoDeleteNumNotIn  *[]float64                `json:"auto_delete_num_not_in"`
	AutoExecuteNum      *float64                  `json:"auto_execute_num"`
	AutoExecuteNumGt    *float64                  `json:"auto_execute_num_gt"`
	AutoExecuteNumGte   *float64                  `json:"auto_execute_num_gte"`
	AutoExecuteNumIn    *[]float64                `json:"auto_execute_num_in"`
	AutoExecuteNumLt    *float64                  `json:"auto_execute_num_lt"`
	AutoExecuteNumLte   *float64                  `json:"auto_execute_num_lte"`
	AutoExecuteNumNot   *float64                  `json:"auto_execute_num_not"`
	AutoExecuteNumNotIn *[]float64                `json:"auto_execute_num_not_in"`
	Cluster             *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	EndTime                  *string   `json:"end_time"`
	EndTimeGt                *string   `json:"end_time_gt"`
	EndTimeGte               *string   `json:"end_time_gte"`
	EndTimeIn                *[]string `json:"end_time_in"`
	EndTimeLt                *string   `json:"end_time_lt"`
	EndTimeLte               *string   `json:"end_time_lte"`
	EndTimeNot               *string   `json:"end_time_not"`
	EndTimeNotIn             *[]string `json:"end_time_not_in"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	ExecutePlanType        *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanExecuteType)
		SnapshotPlanExecuteType `yaml:",inline"`
	} `json:"execute_plan_type"`
	ExecutePlanTypeIn  *[]SnapshotPlanExecuteType `json:"execute_plan_type_in"`
	ExecutePlanTypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanExecuteType)
		SnapshotPlanExecuteType `yaml:",inline"`
	} `json:"execute_plan_type_not"`
	ExecutePlanTypeNotIn *[]SnapshotPlanExecuteType `json:"execute_plan_type_not_in"`
	ExecutionTasksEvery  *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskWhereInput)
		SnapshotPlanTaskWhereInput `yaml:",inline"`
	} `json:"execution_tasks_every"`
	ExecutionTasksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskWhereInput)
		SnapshotPlanTaskWhereInput `yaml:",inline"`
	} `json:"execution_tasks_none"`
	ExecutionTasksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanTaskWhereInput)
		SnapshotPlanTaskWhereInput `yaml:",inline"`
	} `json:"execution_tasks_some"`
	Healthy                 *bool     `json:"healthy"`
	HealthyNot              *bool     `json:"healthy_not"`
	Id                      *string   `json:"id"`
	IdContains              *string   `json:"id_contains"`
	IdEndsWith              *string   `json:"id_ends_with"`
	IdGt                    *string   `json:"id_gt"`
	IdGte                   *string   `json:"id_gte"`
	IdIn                    *[]string `json:"id_in"`
	IdLt                    *string   `json:"id_lt"`
	IdLte                   *string   `json:"id_lte"`
	IdNot                   *string   `json:"id_not"`
	IdNotContains           *string   `json:"id_not_contains"`
	IdNotEndsWith           *string   `json:"id_not_ends_with"`
	IdNotIn                 *[]string `json:"id_not_in"`
	IdNotStartsWith         *string   `json:"id_not_starts_with"`
	IdStartsWith            *string   `json:"id_starts_with"`
	LastExecuteEndTime      *string   `json:"last_execute_end_time"`
	LastExecuteEndTimeGt    *string   `json:"last_execute_end_time_gt"`
	LastExecuteEndTimeGte   *string   `json:"last_execute_end_time_gte"`
	LastExecuteEndTimeIn    *[]string `json:"last_execute_end_time_in"`
	LastExecuteEndTimeLt    *string   `json:"last_execute_end_time_lt"`
	LastExecuteEndTimeLte   *string   `json:"last_execute_end_time_lte"`
	LastExecuteEndTimeNot   *string   `json:"last_execute_end_time_not"`
	LastExecuteEndTimeNotIn *[]string `json:"last_execute_end_time_not_in"`
	LastExecuteStatus       *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanExecuteStatus)
		SnapshotPlanExecuteStatus `yaml:",inline"`
	} `json:"last_execute_status"`
	LastExecuteStatusIn  *[]SnapshotPlanExecuteStatus `json:"last_execute_status_in"`
	LastExecuteStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanExecuteStatus)
		SnapshotPlanExecuteStatus `yaml:",inline"`
	} `json:"last_execute_status_not"`
	LastExecuteStatusNotIn *[]SnapshotPlanExecuteStatus `json:"last_execute_status_not_in"`
	LastExecuteTime        *string                      `json:"last_execute_time"`
	LastExecuteTimeGt      *string                      `json:"last_execute_time_gt"`
	LastExecuteTimeGte     *string                      `json:"last_execute_time_gte"`
	LastExecuteTimeIn      *[]string                    `json:"last_execute_time_in"`
	LastExecuteTimeLt      *string                      `json:"last_execute_time_lt"`
	LastExecuteTimeLte     *string                      `json:"last_execute_time_lte"`
	LastExecuteTimeNot     *string                      `json:"last_execute_time_not"`
	LastExecuteTimeNotIn   *[]string                    `json:"last_execute_time_not_in"`
	LocalId                *string                      `json:"local_id"`
	LocalIdContains        *string                      `json:"local_id_contains"`
	LocalIdEndsWith        *string                      `json:"local_id_ends_with"`
	LocalIdGt              *string                      `json:"local_id_gt"`
	LocalIdGte             *string                      `json:"local_id_gte"`
	LocalIdIn              *[]string                    `json:"local_id_in"`
	LocalIdLt              *string                      `json:"local_id_lt"`
	LocalIdLte             *string                      `json:"local_id_lte"`
	LocalIdNot             *string                      `json:"local_id_not"`
	LocalIdNotContains     *string                      `json:"local_id_not_contains"`
	LocalIdNotEndsWith     *string                      `json:"local_id_not_ends_with"`
	LocalIdNotIn           *[]string                    `json:"local_id_not_in"`
	LocalIdNotStartsWith   *string                      `json:"local_id_not_starts_with"`
	LocalIdStartsWith      *string                      `json:"local_id_starts_with"`
	LogicalSizeBytes       *float64                     `json:"logical_size_bytes"`
	LogicalSizeBytesGt     *float64                     `json:"logical_size_bytes_gt"`
	LogicalSizeBytesGte    *float64                     `json:"logical_size_bytes_gte"`
	LogicalSizeBytesIn     *[]float64                   `json:"logical_size_bytes_in"`
	LogicalSizeBytesLt     *float64                     `json:"logical_size_bytes_lt"`
	LogicalSizeBytesLte    *float64                     `json:"logical_size_bytes_lte"`
	LogicalSizeBytesNot    *float64                     `json:"logical_size_bytes_not"`
	LogicalSizeBytesNotIn  *[]float64                   `json:"logical_size_bytes_not_in"`
	ManualDeleteNum        *float64                     `json:"manual_delete_num"`
	ManualDeleteNumGt      *float64                     `json:"manual_delete_num_gt"`
	ManualDeleteNumGte     *float64                     `json:"manual_delete_num_gte"`
	ManualDeleteNumIn      *[]float64                   `json:"manual_delete_num_in"`
	ManualDeleteNumLt      *float64                     `json:"manual_delete_num_lt"`
	ManualDeleteNumLte     *float64                     `json:"manual_delete_num_lte"`
	ManualDeleteNumNot     *float64                     `json:"manual_delete_num_not"`
	ManualDeleteNumNotIn   *[]float64                   `json:"manual_delete_num_not_in"`
	ManualExecuteNum       *float64                     `json:"manual_execute_num"`
	ManualExecuteNumGt     *float64                     `json:"manual_execute_num_gt"`
	ManualExecuteNumGte    *float64                     `json:"manual_execute_num_gte"`
	ManualExecuteNumIn     *[]float64                   `json:"manual_execute_num_in"`
	ManualExecuteNumLt     *float64                     `json:"manual_execute_num_lt"`
	ManualExecuteNumLte    *float64                     `json:"manual_execute_num_lte"`
	ManualExecuteNumNot    *float64                     `json:"manual_execute_num_not"`
	ManualExecuteNumNotIn  *[]float64                   `json:"manual_execute_num_not_in"`
	Mirror                 *bool                        `json:"mirror"`
	MirrorNot              *bool                        `json:"mirror_not"`
	Name                   *string                      `json:"name"`
	NameContains           *string                      `json:"name_contains"`
	NameEndsWith           *string                      `json:"name_ends_with"`
	NameGt                 *string                      `json:"name_gt"`
	NameGte                *string                      `json:"name_gte"`
	NameIn                 *[]string                    `json:"name_in"`
	NameLt                 *string                      `json:"name_lt"`
	NameLte                *string                      `json:"name_lte"`
	NameNot                *string                      `json:"name_not"`
	NameNotContains        *string                      `json:"name_not_contains"`
	NameNotEndsWith        *string                      `json:"name_not_ends_with"`
	NameNotIn              *[]string                    `json:"name_not_in"`
	NameNotStartsWith      *string                      `json:"name_not_starts_with"`
	NameStartsWith         *string                      `json:"name_starts_with"`
	NextExecuteTime        *string                      `json:"next_execute_time"`
	NextExecuteTimeGt      *string                      `json:"next_execute_time_gt"`
	NextExecuteTimeGte     *string                      `json:"next_execute_time_gte"`
	NextExecuteTimeIn      *[]string                    `json:"next_execute_time_in"`
	NextExecuteTimeLt      *string                      `json:"next_execute_time_lt"`
	NextExecuteTimeLte     *string                      `json:"next_execute_time_lte"`
	NextExecuteTimeNot     *string                      `json:"next_execute_time_not"`
	NextExecuteTimeNotIn   *[]string                    `json:"next_execute_time_not_in"`
	ObjectNum              *float64                     `json:"object_num"`
	ObjectNumGt            *float64                     `json:"object_num_gt"`
	ObjectNumGte           *float64                     `json:"object_num_gte"`
	ObjectNumIn            *[]float64                   `json:"object_num_in"`
	ObjectNumLt            *float64                     `json:"object_num_lt"`
	ObjectNumLte           *float64                     `json:"object_num_lte"`
	ObjectNumNot           *float64                     `json:"object_num_not"`
	ObjectNumNotIn         *[]float64                   `json:"object_num_not_in"`
	PhysicalSizeBytes      *float64                     `json:"physical_size_bytes"`
	PhysicalSizeBytesGt    *float64                     `json:"physical_size_bytes_gt"`
	PhysicalSizeBytesGte   *float64                     `json:"physical_size_bytes_gte"`
	PhysicalSizeBytesIn    *[]float64                   `json:"physical_size_bytes_in"`
	PhysicalSizeBytesLt    *float64                     `json:"physical_size_bytes_lt"`
	PhysicalSizeBytesLte   *float64                     `json:"physical_size_bytes_lte"`
	PhysicalSizeBytesNot   *float64                     `json:"physical_size_bytes_not"`
	PhysicalSizeBytesNotIn *[]float64                   `json:"physical_size_bytes_not_in"`
	RemainSnapshotNum      *float64                     `json:"remain_snapshot_num"`
	RemainSnapshotNumGt    *float64                     `json:"remain_snapshot_num_gt"`
	RemainSnapshotNumGte   *float64                     `json:"remain_snapshot_num_gte"`
	RemainSnapshotNumIn    *[]float64                   `json:"remain_snapshot_num_in"`
	RemainSnapshotNumLt    *float64                     `json:"remain_snapshot_num_lt"`
	RemainSnapshotNumLte   *float64                     `json:"remain_snapshot_num_lte"`
	RemainSnapshotNumNot   *float64                     `json:"remain_snapshot_num_not"`
	RemainSnapshotNumNotIn *[]float64                   `json:"remain_snapshot_num_not_in"`
	SnapshotGroupNum       *float64                     `json:"snapshot_group_num"`
	SnapshotGroupNumGt     *float64                     `json:"snapshot_group_num_gt"`
	SnapshotGroupNumGte    *float64                     `json:"snapshot_group_num_gte"`
	SnapshotGroupNumIn     *[]float64                   `json:"snapshot_group_num_in"`
	SnapshotGroupNumLt     *float64                     `json:"snapshot_group_num_lt"`
	SnapshotGroupNumLte    *float64                     `json:"snapshot_group_num_lte"`
	SnapshotGroupNumNot    *float64                     `json:"snapshot_group_num_not"`
	SnapshotGroupNumNotIn  *[]float64                   `json:"snapshot_group_num_not_in"`
	StartTime              *string                      `json:"start_time"`
	StartTimeGt            *string                      `json:"start_time_gt"`
	StartTimeGte           *string                      `json:"start_time_gte"`
	StartTimeIn            *[]string                    `json:"start_time_in"`
	StartTimeLt            *string                      `json:"start_time_lt"`
	StartTimeLte           *string                      `json:"start_time_lte"`
	StartTimeNot           *string                      `json:"start_time_not"`
	StartTimeNotIn         *[]string                    `json:"start_time_not_in"`
	Status                 *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanStatus)
		SnapshotPlanStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]SnapshotPlanStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanStatus)
		SnapshotPlanStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn *[]SnapshotPlanStatus `json:"status_not_in"`
	VmsEvery    *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_every"`
	VmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_none"`
	VmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_some"`
}

// SnmpAuthProtocol defines model for SnmpAuthProtocol.
type SnmpAuthProtocol string

// SnmpLanguageCode defines model for SnmpLanguageCode.
type SnmpLanguageCode string

// SnmpPrivacyProtocol defines model for SnmpPrivacyProtocol.
type SnmpPrivacyProtocol string

// SnmpProtocol defines model for SnmpProtocol.
type SnmpProtocol string

// SnmpTransport defines model for SnmpTransport.
type SnmpTransport struct {
	AuthPassPhrase *string `json:"auth_pass_phrase"`
	AuthProtocol   *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpAuthProtocol)
		SnmpAuthProtocol `yaml:",inline"`
	} `json:"auth_protocol"`
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Community         *string `json:"community"`
	Disabled          bool    `json:"disabled"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id                string  `json:"id"`
	LocalId           string  `json:"local_id"`
	Name              string  `json:"name"`
	Port              float64 `json:"port"`
	PrivacyPassPhrase *string `json:"privacy_pass_phrase"`
	PrivacyProtocol   *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpPrivacyProtocol)
		SnmpPrivacyProtocol `yaml:",inline"`
	} `json:"privacy_protocol"`
	Protocol SnmpProtocol `json:"protocol"`
	Username *string      `json:"username"`
	Version  SnmpVersion  `json:"version"`
}

// SnmpTransportConnection defines model for SnmpTransportConnection.
type SnmpTransportConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// SnmpTransportCreationParams defines model for SnmpTransportCreationParams.
type SnmpTransportCreationParams struct {
	AuthPassPhrase    *string              `json:"auth_pass_phrase,omitempty"`
	AuthProtocol      *SnmpAuthProtocol    `json:"auth_protocol,omitempty"`
	ClusterId         string               `json:"cluster_id"`
	Community         *string              `json:"community,omitempty"`
	Disabled          *bool                `json:"disabled,omitempty"`
	Name              string               `json:"name"`
	Port              float64              `json:"port"`
	PrivacyPassPhrase *string              `json:"privacy_pass_phrase,omitempty"`
	PrivacyProtocol   *SnmpPrivacyProtocol `json:"privacy_protocol,omitempty"`
	Protocol          SnmpProtocol         `json:"protocol"`
	Username          *string              `json:"username,omitempty"`
	Version           SnmpVersion          `json:"version"`
}

// SnmpTransportDeletionParams defines model for SnmpTransportDeletionParams.
type SnmpTransportDeletionParams struct {
	Where SnmpTransportWhereInput `json:"where"`
}

// SnmpTransportOrderByInput defines model for SnmpTransportOrderByInput.
type SnmpTransportOrderByInput string

// SnmpTransportUpdationParams defines model for SnmpTransportUpdationParams.
type SnmpTransportUpdationParams struct {
	Data struct {
		AuthPassPhrase    *string              `json:"auth_pass_phrase,omitempty"`
		AuthProtocol      *SnmpAuthProtocol    `json:"auth_protocol,omitempty"`
		Community         *string              `json:"community,omitempty"`
		Disabled          *bool                `json:"disabled,omitempty"`
		Name              *string              `json:"name,omitempty"`
		Port              *float64             `json:"port,omitempty"`
		PrivacyPassPhrase *string              `json:"privacy_pass_phrase,omitempty"`
		PrivacyProtocol   *SnmpPrivacyProtocol `json:"privacy_protocol,omitempty"`
		Protocol          *SnmpProtocol        `json:"protocol,omitempty"`
		Username          *string              `json:"username,omitempty"`
		Version           *SnmpVersion         `json:"version,omitempty"`
	} `json:"data"`
	Where SnmpTransportWhereInput `json:"where"`
}

// SnmpTransportWhereInput defines model for SnmpTransportWhereInput.
type SnmpTransportWhereInput struct {
	AND                         *[]SnmpTransportWhereInput `json:"AND"`
	NOT                         *[]SnmpTransportWhereInput `json:"NOT"`
	OR                          *[]SnmpTransportWhereInput `json:"OR"`
	AuthPassPhrase              *string                    `json:"auth_pass_phrase"`
	AuthPassPhraseContains      *string                    `json:"auth_pass_phrase_contains"`
	AuthPassPhraseEndsWith      *string                    `json:"auth_pass_phrase_ends_with"`
	AuthPassPhraseGt            *string                    `json:"auth_pass_phrase_gt"`
	AuthPassPhraseGte           *string                    `json:"auth_pass_phrase_gte"`
	AuthPassPhraseIn            *[]string                  `json:"auth_pass_phrase_in"`
	AuthPassPhraseLt            *string                    `json:"auth_pass_phrase_lt"`
	AuthPassPhraseLte           *string                    `json:"auth_pass_phrase_lte"`
	AuthPassPhraseNot           *string                    `json:"auth_pass_phrase_not"`
	AuthPassPhraseNotContains   *string                    `json:"auth_pass_phrase_not_contains"`
	AuthPassPhraseNotEndsWith   *string                    `json:"auth_pass_phrase_not_ends_with"`
	AuthPassPhraseNotIn         *[]string                  `json:"auth_pass_phrase_not_in"`
	AuthPassPhraseNotStartsWith *string                    `json:"auth_pass_phrase_not_starts_with"`
	AuthPassPhraseStartsWith    *string                    `json:"auth_pass_phrase_starts_with"`
	AuthProtocol                *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpAuthProtocol)
		SnmpAuthProtocol `yaml:",inline"`
	} `json:"auth_protocol"`
	AuthProtocolIn  *[]SnmpAuthProtocol `json:"auth_protocol_in"`
	AuthProtocolNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpAuthProtocol)
		SnmpAuthProtocol `yaml:",inline"`
	} `json:"auth_protocol_not"`
	AuthProtocolNotIn *[]SnmpAuthProtocol `json:"auth_protocol_not_in"`
	Cluster           *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Community              *string   `json:"community"`
	CommunityContains      *string   `json:"community_contains"`
	CommunityEndsWith      *string   `json:"community_ends_with"`
	CommunityGt            *string   `json:"community_gt"`
	CommunityGte           *string   `json:"community_gte"`
	CommunityIn            *[]string `json:"community_in"`
	CommunityLt            *string   `json:"community_lt"`
	CommunityLte           *string   `json:"community_lte"`
	CommunityNot           *string   `json:"community_not"`
	CommunityNotContains   *string   `json:"community_not_contains"`
	CommunityNotEndsWith   *string   `json:"community_not_ends_with"`
	CommunityNotIn         *[]string `json:"community_not_in"`
	CommunityNotStartsWith *string   `json:"community_not_starts_with"`
	CommunityStartsWith    *string   `json:"community_starts_with"`
	Disabled               *bool     `json:"disabled"`
	DisabledNot            *bool     `json:"disabled_not"`
	EntityAsyncStatus      *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn         *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                             *string              `json:"id"`
	IdContains                     *string              `json:"id_contains"`
	IdEndsWith                     *string              `json:"id_ends_with"`
	IdGt                           *string              `json:"id_gt"`
	IdGte                          *string              `json:"id_gte"`
	IdIn                           *[]string            `json:"id_in"`
	IdLt                           *string              `json:"id_lt"`
	IdLte                          *string              `json:"id_lte"`
	IdNot                          *string              `json:"id_not"`
	IdNotContains                  *string              `json:"id_not_contains"`
	IdNotEndsWith                  *string              `json:"id_not_ends_with"`
	IdNotIn                        *[]string            `json:"id_not_in"`
	IdNotStartsWith                *string              `json:"id_not_starts_with"`
	IdStartsWith                   *string              `json:"id_starts_with"`
	LocalId                        *string              `json:"local_id"`
	LocalIdContains                *string              `json:"local_id_contains"`
	LocalIdEndsWith                *string              `json:"local_id_ends_with"`
	LocalIdGt                      *string              `json:"local_id_gt"`
	LocalIdGte                     *string              `json:"local_id_gte"`
	LocalIdIn                      *[]string            `json:"local_id_in"`
	LocalIdLt                      *string              `json:"local_id_lt"`
	LocalIdLte                     *string              `json:"local_id_lte"`
	LocalIdNot                     *string              `json:"local_id_not"`
	LocalIdNotContains             *string              `json:"local_id_not_contains"`
	LocalIdNotEndsWith             *string              `json:"local_id_not_ends_with"`
	LocalIdNotIn                   *[]string            `json:"local_id_not_in"`
	LocalIdNotStartsWith           *string              `json:"local_id_not_starts_with"`
	LocalIdStartsWith              *string              `json:"local_id_starts_with"`
	Name                           *string              `json:"name"`
	NameContains                   *string              `json:"name_contains"`
	NameEndsWith                   *string              `json:"name_ends_with"`
	NameGt                         *string              `json:"name_gt"`
	NameGte                        *string              `json:"name_gte"`
	NameIn                         *[]string            `json:"name_in"`
	NameLt                         *string              `json:"name_lt"`
	NameLte                        *string              `json:"name_lte"`
	NameNot                        *string              `json:"name_not"`
	NameNotContains                *string              `json:"name_not_contains"`
	NameNotEndsWith                *string              `json:"name_not_ends_with"`
	NameNotIn                      *[]string            `json:"name_not_in"`
	NameNotStartsWith              *string              `json:"name_not_starts_with"`
	NameStartsWith                 *string              `json:"name_starts_with"`
	Port                           *float64             `json:"port"`
	PortGt                         *float64             `json:"port_gt"`
	PortGte                        *float64             `json:"port_gte"`
	PortIn                         *[]float64           `json:"port_in"`
	PortLt                         *float64             `json:"port_lt"`
	PortLte                        *float64             `json:"port_lte"`
	PortNot                        *float64             `json:"port_not"`
	PortNotIn                      *[]float64           `json:"port_not_in"`
	PrivacyPassPhrase              *string              `json:"privacy_pass_phrase"`
	PrivacyPassPhraseContains      *string              `json:"privacy_pass_phrase_contains"`
	PrivacyPassPhraseEndsWith      *string              `json:"privacy_pass_phrase_ends_with"`
	PrivacyPassPhraseGt            *string              `json:"privacy_pass_phrase_gt"`
	PrivacyPassPhraseGte           *string              `json:"privacy_pass_phrase_gte"`
	PrivacyPassPhraseIn            *[]string            `json:"privacy_pass_phrase_in"`
	PrivacyPassPhraseLt            *string              `json:"privacy_pass_phrase_lt"`
	PrivacyPassPhraseLte           *string              `json:"privacy_pass_phrase_lte"`
	PrivacyPassPhraseNot           *string              `json:"privacy_pass_phrase_not"`
	PrivacyPassPhraseNotContains   *string              `json:"privacy_pass_phrase_not_contains"`
	PrivacyPassPhraseNotEndsWith   *string              `json:"privacy_pass_phrase_not_ends_with"`
	PrivacyPassPhraseNotIn         *[]string            `json:"privacy_pass_phrase_not_in"`
	PrivacyPassPhraseNotStartsWith *string              `json:"privacy_pass_phrase_not_starts_with"`
	PrivacyPassPhraseStartsWith    *string              `json:"privacy_pass_phrase_starts_with"`
	PrivacyProtocol                *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpPrivacyProtocol)
		SnmpPrivacyProtocol `yaml:",inline"`
	} `json:"privacy_protocol"`
	PrivacyProtocolIn  *[]SnmpPrivacyProtocol `json:"privacy_protocol_in"`
	PrivacyProtocolNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpPrivacyProtocol)
		SnmpPrivacyProtocol `yaml:",inline"`
	} `json:"privacy_protocol_not"`
	PrivacyProtocolNotIn *[]SnmpPrivacyProtocol `json:"privacy_protocol_not_in"`
	Protocol             *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpProtocol)
		SnmpProtocol `yaml:",inline"`
	} `json:"protocol"`
	ProtocolIn  *[]SnmpProtocol `json:"protocol_in"`
	ProtocolNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpProtocol)
		SnmpProtocol `yaml:",inline"`
	} `json:"protocol_not"`
	ProtocolNotIn         *[]SnmpProtocol `json:"protocol_not_in"`
	Username              *string         `json:"username"`
	UsernameContains      *string         `json:"username_contains"`
	UsernameEndsWith      *string         `json:"username_ends_with"`
	UsernameGt            *string         `json:"username_gt"`
	UsernameGte           *string         `json:"username_gte"`
	UsernameIn            *[]string       `json:"username_in"`
	UsernameLt            *string         `json:"username_lt"`
	UsernameLte           *string         `json:"username_lte"`
	UsernameNot           *string         `json:"username_not"`
	UsernameNotContains   *string         `json:"username_not_contains"`
	UsernameNotEndsWith   *string         `json:"username_not_ends_with"`
	UsernameNotIn         *[]string       `json:"username_not_in"`
	UsernameNotStartsWith *string         `json:"username_not_starts_with"`
	UsernameStartsWith    *string         `json:"username_starts_with"`
	Version               *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpVersion)
		SnmpVersion `yaml:",inline"`
	} `json:"version"`
	VersionIn  *[]SnmpVersion `json:"version_in"`
	VersionNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpVersion)
		SnmpVersion `yaml:",inline"`
	} `json:"version_not"`
	VersionNotIn *[]SnmpVersion `json:"version_not_in"`
}

// SnmpTrapReceiver defines model for SnmpTrapReceiver.
type SnmpTrapReceiver struct {
	AuthPassPhrase *string `json:"auth_pass_phrase"`
	AuthProtocol   *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpAuthProtocol)
		SnmpAuthProtocol `yaml:",inline"`
	} `json:"auth_protocol"`
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Community         *string `json:"community"`
	Disabled          bool    `json:"disabled"`
	EngineId          *string `json:"engine_id"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Host              string           `json:"host"`
	Id                string           `json:"id"`
	Inform            bool             `json:"inform"`
	LanguageCode      SnmpLanguageCode `json:"language_code"`
	LocalId           string           `json:"local_id"`
	Name              string           `json:"name"`
	Port              float64          `json:"port"`
	PrivacyPassPhrase *string          `json:"privacy_pass_phrase"`
	PrivacyProtocol   *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpPrivacyProtocol)
		SnmpPrivacyProtocol `yaml:",inline"`
	} `json:"privacy_protocol"`
	Protocol SnmpProtocol `json:"protocol"`
	Username *string      `json:"username"`
	Version  SnmpVersion  `json:"version"`
}

// SnmpTrapReceiverConnection defines model for SnmpTrapReceiverConnection.
type SnmpTrapReceiverConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// SnmpTrapReceiverCreationParams defines model for SnmpTrapReceiverCreationParams.
type SnmpTrapReceiverCreationParams struct {
	AuthPassPhrase    *string              `json:"auth_pass_phrase,omitempty"`
	AuthProtocol      *SnmpAuthProtocol    `json:"auth_protocol,omitempty"`
	ClusterId         string               `json:"cluster_id"`
	Community         *string              `json:"community,omitempty"`
	Disabled          *bool                `json:"disabled,omitempty"`
	EngineId          *string              `json:"engine_id,omitempty"`
	Host              string               `json:"host"`
	Inform            *bool                `json:"inform,omitempty"`
	LanguageCode      SnmpLanguageCode     `json:"language_code"`
	Name              string               `json:"name"`
	Port              float64              `json:"port"`
	PrivacyPassPhrase *string              `json:"privacy_pass_phrase,omitempty"`
	PrivacyProtocol   *SnmpPrivacyProtocol `json:"privacy_protocol,omitempty"`
	Protocol          SnmpProtocol         `json:"protocol"`
	Username          *string              `json:"username,omitempty"`
	Version           SnmpVersion          `json:"version"`
}

// SnmpTrapReceiverDeletionParams defines model for SnmpTrapReceiverDeletionParams.
type SnmpTrapReceiverDeletionParams struct {
	Where SnmpTrapReceiverWhereInput `json:"where"`
}

// SnmpTrapReceiverOrderByInput defines model for SnmpTrapReceiverOrderByInput.
type SnmpTrapReceiverOrderByInput string

// SnmpTrapReceiverUpdationParams defines model for SnmpTrapReceiverUpdationParams.
type SnmpTrapReceiverUpdationParams struct {
	Data struct {
		AuthPassPhrase    *string              `json:"auth_pass_phrase,omitempty"`
		AuthProtocol      *SnmpAuthProtocol    `json:"auth_protocol,omitempty"`
		Community         *string              `json:"community,omitempty"`
		Disabled          *bool                `json:"disabled,omitempty"`
		EngineId          *string              `json:"engine_id,omitempty"`
		Host              *string              `json:"host,omitempty"`
		Inform            *bool                `json:"inform,omitempty"`
		LanguageCode      *SnmpLanguageCode    `json:"language_code,omitempty"`
		Name              *string              `json:"name,omitempty"`
		Port              *float64             `json:"port,omitempty"`
		PrivacyPassPhrase *string              `json:"privacy_pass_phrase,omitempty"`
		PrivacyProtocol   *SnmpPrivacyProtocol `json:"privacy_protocol,omitempty"`
		Protocol          *SnmpProtocol        `json:"protocol,omitempty"`
		Username          *string              `json:"username,omitempty"`
		Version           *SnmpVersion         `json:"version,omitempty"`
	} `json:"data"`
	Where SnmpTrapReceiverWhereInput `json:"where"`
}

// SnmpTrapReceiverWhereInput defines model for SnmpTrapReceiverWhereInput.
type SnmpTrapReceiverWhereInput struct {
	AND                         *[]SnmpTrapReceiverWhereInput `json:"AND"`
	NOT                         *[]SnmpTrapReceiverWhereInput `json:"NOT"`
	OR                          *[]SnmpTrapReceiverWhereInput `json:"OR"`
	AuthPassPhrase              *string                       `json:"auth_pass_phrase"`
	AuthPassPhraseContains      *string                       `json:"auth_pass_phrase_contains"`
	AuthPassPhraseEndsWith      *string                       `json:"auth_pass_phrase_ends_with"`
	AuthPassPhraseGt            *string                       `json:"auth_pass_phrase_gt"`
	AuthPassPhraseGte           *string                       `json:"auth_pass_phrase_gte"`
	AuthPassPhraseIn            *[]string                     `json:"auth_pass_phrase_in"`
	AuthPassPhraseLt            *string                       `json:"auth_pass_phrase_lt"`
	AuthPassPhraseLte           *string                       `json:"auth_pass_phrase_lte"`
	AuthPassPhraseNot           *string                       `json:"auth_pass_phrase_not"`
	AuthPassPhraseNotContains   *string                       `json:"auth_pass_phrase_not_contains"`
	AuthPassPhraseNotEndsWith   *string                       `json:"auth_pass_phrase_not_ends_with"`
	AuthPassPhraseNotIn         *[]string                     `json:"auth_pass_phrase_not_in"`
	AuthPassPhraseNotStartsWith *string                       `json:"auth_pass_phrase_not_starts_with"`
	AuthPassPhraseStartsWith    *string                       `json:"auth_pass_phrase_starts_with"`
	AuthProtocol                *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpAuthProtocol)
		SnmpAuthProtocol `yaml:",inline"`
	} `json:"auth_protocol"`
	AuthProtocolIn  *[]SnmpAuthProtocol `json:"auth_protocol_in"`
	AuthProtocolNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpAuthProtocol)
		SnmpAuthProtocol `yaml:",inline"`
	} `json:"auth_protocol_not"`
	AuthProtocolNotIn *[]SnmpAuthProtocol `json:"auth_protocol_not_in"`
	Cluster           *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Community              *string   `json:"community"`
	CommunityContains      *string   `json:"community_contains"`
	CommunityEndsWith      *string   `json:"community_ends_with"`
	CommunityGt            *string   `json:"community_gt"`
	CommunityGte           *string   `json:"community_gte"`
	CommunityIn            *[]string `json:"community_in"`
	CommunityLt            *string   `json:"community_lt"`
	CommunityLte           *string   `json:"community_lte"`
	CommunityNot           *string   `json:"community_not"`
	CommunityNotContains   *string   `json:"community_not_contains"`
	CommunityNotEndsWith   *string   `json:"community_not_ends_with"`
	CommunityNotIn         *[]string `json:"community_not_in"`
	CommunityNotStartsWith *string   `json:"community_not_starts_with"`
	CommunityStartsWith    *string   `json:"community_starts_with"`
	Disabled               *bool     `json:"disabled"`
	DisabledNot            *bool     `json:"disabled_not"`
	EngineId               *string   `json:"engine_id"`
	EngineIdContains       *string   `json:"engine_id_contains"`
	EngineIdEndsWith       *string   `json:"engine_id_ends_with"`
	EngineIdGt             *string   `json:"engine_id_gt"`
	EngineIdGte            *string   `json:"engine_id_gte"`
	EngineIdIn             *[]string `json:"engine_id_in"`
	EngineIdLt             *string   `json:"engine_id_lt"`
	EngineIdLte            *string   `json:"engine_id_lte"`
	EngineIdNot            *string   `json:"engine_id_not"`
	EngineIdNotContains    *string   `json:"engine_id_not_contains"`
	EngineIdNotEndsWith    *string   `json:"engine_id_not_ends_with"`
	EngineIdNotIn          *[]string `json:"engine_id_not_in"`
	EngineIdNotStartsWith  *string   `json:"engine_id_not_starts_with"`
	EngineIdStartsWith     *string   `json:"engine_id_starts_with"`
	EntityAsyncStatus      *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Host                   *string              `json:"host"`
	HostContains           *string              `json:"host_contains"`
	HostEndsWith           *string              `json:"host_ends_with"`
	HostGt                 *string              `json:"host_gt"`
	HostGte                *string              `json:"host_gte"`
	HostIn                 *[]string            `json:"host_in"`
	HostLt                 *string              `json:"host_lt"`
	HostLte                *string              `json:"host_lte"`
	HostNot                *string              `json:"host_not"`
	HostNotContains        *string              `json:"host_not_contains"`
	HostNotEndsWith        *string              `json:"host_not_ends_with"`
	HostNotIn              *[]string            `json:"host_not_in"`
	HostNotStartsWith      *string              `json:"host_not_starts_with"`
	HostStartsWith         *string              `json:"host_starts_with"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	Inform                 *bool                `json:"inform"`
	InformNot              *bool                `json:"inform_not"`
	LanguageCode           *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpLanguageCode)
		SnmpLanguageCode `yaml:",inline"`
	} `json:"language_code"`
	LanguageCodeIn  *[]SnmpLanguageCode `json:"language_code_in"`
	LanguageCodeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpLanguageCode)
		SnmpLanguageCode `yaml:",inline"`
	} `json:"language_code_not"`
	LanguageCodeNotIn              *[]SnmpLanguageCode `json:"language_code_not_in"`
	LocalId                        *string             `json:"local_id"`
	LocalIdContains                *string             `json:"local_id_contains"`
	LocalIdEndsWith                *string             `json:"local_id_ends_with"`
	LocalIdGt                      *string             `json:"local_id_gt"`
	LocalIdGte                     *string             `json:"local_id_gte"`
	LocalIdIn                      *[]string           `json:"local_id_in"`
	LocalIdLt                      *string             `json:"local_id_lt"`
	LocalIdLte                     *string             `json:"local_id_lte"`
	LocalIdNot                     *string             `json:"local_id_not"`
	LocalIdNotContains             *string             `json:"local_id_not_contains"`
	LocalIdNotEndsWith             *string             `json:"local_id_not_ends_with"`
	LocalIdNotIn                   *[]string           `json:"local_id_not_in"`
	LocalIdNotStartsWith           *string             `json:"local_id_not_starts_with"`
	LocalIdStartsWith              *string             `json:"local_id_starts_with"`
	Name                           *string             `json:"name"`
	NameContains                   *string             `json:"name_contains"`
	NameEndsWith                   *string             `json:"name_ends_with"`
	NameGt                         *string             `json:"name_gt"`
	NameGte                        *string             `json:"name_gte"`
	NameIn                         *[]string           `json:"name_in"`
	NameLt                         *string             `json:"name_lt"`
	NameLte                        *string             `json:"name_lte"`
	NameNot                        *string             `json:"name_not"`
	NameNotContains                *string             `json:"name_not_contains"`
	NameNotEndsWith                *string             `json:"name_not_ends_with"`
	NameNotIn                      *[]string           `json:"name_not_in"`
	NameNotStartsWith              *string             `json:"name_not_starts_with"`
	NameStartsWith                 *string             `json:"name_starts_with"`
	Port                           *float64            `json:"port"`
	PortGt                         *float64            `json:"port_gt"`
	PortGte                        *float64            `json:"port_gte"`
	PortIn                         *[]float64          `json:"port_in"`
	PortLt                         *float64            `json:"port_lt"`
	PortLte                        *float64            `json:"port_lte"`
	PortNot                        *float64            `json:"port_not"`
	PortNotIn                      *[]float64          `json:"port_not_in"`
	PrivacyPassPhrase              *string             `json:"privacy_pass_phrase"`
	PrivacyPassPhraseContains      *string             `json:"privacy_pass_phrase_contains"`
	PrivacyPassPhraseEndsWith      *string             `json:"privacy_pass_phrase_ends_with"`
	PrivacyPassPhraseGt            *string             `json:"privacy_pass_phrase_gt"`
	PrivacyPassPhraseGte           *string             `json:"privacy_pass_phrase_gte"`
	PrivacyPassPhraseIn            *[]string           `json:"privacy_pass_phrase_in"`
	PrivacyPassPhraseLt            *string             `json:"privacy_pass_phrase_lt"`
	PrivacyPassPhraseLte           *string             `json:"privacy_pass_phrase_lte"`
	PrivacyPassPhraseNot           *string             `json:"privacy_pass_phrase_not"`
	PrivacyPassPhraseNotContains   *string             `json:"privacy_pass_phrase_not_contains"`
	PrivacyPassPhraseNotEndsWith   *string             `json:"privacy_pass_phrase_not_ends_with"`
	PrivacyPassPhraseNotIn         *[]string           `json:"privacy_pass_phrase_not_in"`
	PrivacyPassPhraseNotStartsWith *string             `json:"privacy_pass_phrase_not_starts_with"`
	PrivacyPassPhraseStartsWith    *string             `json:"privacy_pass_phrase_starts_with"`
	PrivacyProtocol                *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpPrivacyProtocol)
		SnmpPrivacyProtocol `yaml:",inline"`
	} `json:"privacy_protocol"`
	PrivacyProtocolIn  *[]SnmpPrivacyProtocol `json:"privacy_protocol_in"`
	PrivacyProtocolNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpPrivacyProtocol)
		SnmpPrivacyProtocol `yaml:",inline"`
	} `json:"privacy_protocol_not"`
	PrivacyProtocolNotIn *[]SnmpPrivacyProtocol `json:"privacy_protocol_not_in"`
	Protocol             *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpProtocol)
		SnmpProtocol `yaml:",inline"`
	} `json:"protocol"`
	ProtocolIn  *[]SnmpProtocol `json:"protocol_in"`
	ProtocolNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpProtocol)
		SnmpProtocol `yaml:",inline"`
	} `json:"protocol_not"`
	ProtocolNotIn         *[]SnmpProtocol `json:"protocol_not_in"`
	Username              *string         `json:"username"`
	UsernameContains      *string         `json:"username_contains"`
	UsernameEndsWith      *string         `json:"username_ends_with"`
	UsernameGt            *string         `json:"username_gt"`
	UsernameGte           *string         `json:"username_gte"`
	UsernameIn            *[]string       `json:"username_in"`
	UsernameLt            *string         `json:"username_lt"`
	UsernameLte           *string         `json:"username_lte"`
	UsernameNot           *string         `json:"username_not"`
	UsernameNotContains   *string         `json:"username_not_contains"`
	UsernameNotEndsWith   *string         `json:"username_not_ends_with"`
	UsernameNotIn         *[]string       `json:"username_not_in"`
	UsernameNotStartsWith *string         `json:"username_not_starts_with"`
	UsernameStartsWith    *string         `json:"username_starts_with"`
	Version               *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpVersion)
		SnmpVersion `yaml:",inline"`
	} `json:"version"`
	VersionIn  *[]SnmpVersion `json:"version_in"`
	VersionNot *struct {
		// Embedded struct due to allOf(#/components/schemas/SnmpVersion)
		SnmpVersion `yaml:",inline"`
	} `json:"version_not"`
	VersionNotIn *[]SnmpVersion `json:"version_not_in"`
}

// SnmpVersion defines model for SnmpVersion.
type SnmpVersion string

// SoftwareEdition defines model for SoftwareEdition.
type SoftwareEdition string

// StepUnit defines model for StepUnit.
type StepUnit string

// StoragePolicyConector defines model for StoragePolicyConector.
type StoragePolicyConector struct {
	Name          string  `json:"name"`
	ReplicaNum    float64 `json:"replica_num"`
	ThinProvision bool    `json:"thin_provision"`
	Uuid          string  `json:"uuid"`
}

// StoreConnectionType defines model for StoreConnectionType.
type StoreConnectionType string

// SvtImage defines model for SvtImage.
type SvtImage struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id             string  `json:"id"`
	LocalCreatedAt string  `json:"local_created_at"`
	LocalId        string  `json:"local_id"`
	Name           string  `json:"name"`
	Path           string  `json:"path"`
	Size           float64 `json:"size"`
	Version        float64 `json:"version"`
	VmDisks        *[]struct {
		Id string `json:"id"`
	} `json:"vm_disks"`
}

// SvtImageConnection defines model for SvtImageConnection.
type SvtImageConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// SvtImageOrderByInput defines model for SvtImageOrderByInput.
type SvtImageOrderByInput string

// SvtImageWhereInput defines model for SvtImageWhereInput.
type SvtImageWhereInput struct {
	AND     *[]SvtImageWhereInput `json:"AND"`
	NOT     *[]SvtImageWhereInput `json:"NOT"`
	OR      *[]SvtImageWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	LocalCreatedAt         *string              `json:"local_created_at"`
	LocalCreatedAtGt       *string              `json:"local_created_at_gt"`
	LocalCreatedAtGte      *string              `json:"local_created_at_gte"`
	LocalCreatedAtIn       *[]string            `json:"local_created_at_in"`
	LocalCreatedAtLt       *string              `json:"local_created_at_lt"`
	LocalCreatedAtLte      *string              `json:"local_created_at_lte"`
	LocalCreatedAtNot      *string              `json:"local_created_at_not"`
	LocalCreatedAtNotIn    *[]string            `json:"local_created_at_not_in"`
	LocalId                *string              `json:"local_id"`
	LocalIdContains        *string              `json:"local_id_contains"`
	LocalIdEndsWith        *string              `json:"local_id_ends_with"`
	LocalIdGt              *string              `json:"local_id_gt"`
	LocalIdGte             *string              `json:"local_id_gte"`
	LocalIdIn              *[]string            `json:"local_id_in"`
	LocalIdLt              *string              `json:"local_id_lt"`
	LocalIdLte             *string              `json:"local_id_lte"`
	LocalIdNot             *string              `json:"local_id_not"`
	LocalIdNotContains     *string              `json:"local_id_not_contains"`
	LocalIdNotEndsWith     *string              `json:"local_id_not_ends_with"`
	LocalIdNotIn           *[]string            `json:"local_id_not_in"`
	LocalIdNotStartsWith   *string              `json:"local_id_not_starts_with"`
	LocalIdStartsWith      *string              `json:"local_id_starts_with"`
	Name                   *string              `json:"name"`
	NameContains           *string              `json:"name_contains"`
	NameEndsWith           *string              `json:"name_ends_with"`
	NameGt                 *string              `json:"name_gt"`
	NameGte                *string              `json:"name_gte"`
	NameIn                 *[]string            `json:"name_in"`
	NameLt                 *string              `json:"name_lt"`
	NameLte                *string              `json:"name_lte"`
	NameNot                *string              `json:"name_not"`
	NameNotContains        *string              `json:"name_not_contains"`
	NameNotEndsWith        *string              `json:"name_not_ends_with"`
	NameNotIn              *[]string            `json:"name_not_in"`
	NameNotStartsWith      *string              `json:"name_not_starts_with"`
	NameStartsWith         *string              `json:"name_starts_with"`
	Path                   *string              `json:"path"`
	PathContains           *string              `json:"path_contains"`
	PathEndsWith           *string              `json:"path_ends_with"`
	PathGt                 *string              `json:"path_gt"`
	PathGte                *string              `json:"path_gte"`
	PathIn                 *[]string            `json:"path_in"`
	PathLt                 *string              `json:"path_lt"`
	PathLte                *string              `json:"path_lte"`
	PathNot                *string              `json:"path_not"`
	PathNotContains        *string              `json:"path_not_contains"`
	PathNotEndsWith        *string              `json:"path_not_ends_with"`
	PathNotIn              *[]string            `json:"path_not_in"`
	PathNotStartsWith      *string              `json:"path_not_starts_with"`
	PathStartsWith         *string              `json:"path_starts_with"`
	Size                   *float64             `json:"size"`
	SizeGt                 *float64             `json:"size_gt"`
	SizeGte                *float64             `json:"size_gte"`
	SizeIn                 *[]float64           `json:"size_in"`
	SizeLt                 *float64             `json:"size_lt"`
	SizeLte                *float64             `json:"size_lte"`
	SizeNot                *float64             `json:"size_not"`
	SizeNotIn              *[]float64           `json:"size_not_in"`
	Version                *float64             `json:"version"`
	VersionGt              *float64             `json:"version_gt"`
	VersionGte             *float64             `json:"version_gte"`
	VersionIn              *[]float64           `json:"version_in"`
	VersionLt              *float64             `json:"version_lt"`
	VersionLte             *float64             `json:"version_lte"`
	VersionNot             *float64             `json:"version_not"`
	VersionNotIn           *[]float64           `json:"version_not_in"`
	VmDisksEvery           *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_every"`
	VmDisksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_none"`
	VmDisksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_some"`
}

// SystemAuditLog defines model for SystemAuditLog.
type SystemAuditLog struct {
	Action  string `json:"action"`
	Cluster *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	FinishedAt     *string `json:"finished_at"`
	Id             string  `json:"id"`
	LocalCreatedAt *string `json:"local_created_at"`
	LocalId        string  `json:"local_id"`
	Message        string  `json:"message"`
	ResourceId     *string `json:"resource_id"`
	Status         *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogStatus)
		UserAuditLogStatus `yaml:",inline"`
	} `json:"status"`
}

// SystemAuditLogConnection defines model for SystemAuditLogConnection.
type SystemAuditLogConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// SystemAuditLogOrderByInput defines model for SystemAuditLogOrderByInput.
type SystemAuditLogOrderByInput string

// SystemAuditLogWhereInput defines model for SystemAuditLogWhereInput.
type SystemAuditLogWhereInput struct {
	AND                 *[]SystemAuditLogWhereInput `json:"AND"`
	NOT                 *[]SystemAuditLogWhereInput `json:"NOT"`
	OR                  *[]SystemAuditLogWhereInput `json:"OR"`
	Action              *string                     `json:"action"`
	ActionContains      *string                     `json:"action_contains"`
	ActionEndsWith      *string                     `json:"action_ends_with"`
	ActionGt            *string                     `json:"action_gt"`
	ActionGte           *string                     `json:"action_gte"`
	ActionIn            *[]string                   `json:"action_in"`
	ActionLt            *string                     `json:"action_lt"`
	ActionLte           *string                     `json:"action_lte"`
	ActionNot           *string                     `json:"action_not"`
	ActionNotContains   *string                     `json:"action_not_contains"`
	ActionNotEndsWith   *string                     `json:"action_not_ends_with"`
	ActionNotIn         *[]string                   `json:"action_not_in"`
	ActionNotStartsWith *string                     `json:"action_not_starts_with"`
	ActionStartsWith    *string                     `json:"action_starts_with"`
	Cluster             *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	FinishedAt              *string   `json:"finished_at"`
	FinishedAtGt            *string   `json:"finished_at_gt"`
	FinishedAtGte           *string   `json:"finished_at_gte"`
	FinishedAtIn            *[]string `json:"finished_at_in"`
	FinishedAtLt            *string   `json:"finished_at_lt"`
	FinishedAtLte           *string   `json:"finished_at_lte"`
	FinishedAtNot           *string   `json:"finished_at_not"`
	FinishedAtNotIn         *[]string `json:"finished_at_not_in"`
	Id                      *string   `json:"id"`
	IdContains              *string   `json:"id_contains"`
	IdEndsWith              *string   `json:"id_ends_with"`
	IdGt                    *string   `json:"id_gt"`
	IdGte                   *string   `json:"id_gte"`
	IdIn                    *[]string `json:"id_in"`
	IdLt                    *string   `json:"id_lt"`
	IdLte                   *string   `json:"id_lte"`
	IdNot                   *string   `json:"id_not"`
	IdNotContains           *string   `json:"id_not_contains"`
	IdNotEndsWith           *string   `json:"id_not_ends_with"`
	IdNotIn                 *[]string `json:"id_not_in"`
	IdNotStartsWith         *string   `json:"id_not_starts_with"`
	IdStartsWith            *string   `json:"id_starts_with"`
	LocalCreatedAt          *string   `json:"local_created_at"`
	LocalCreatedAtGt        *string   `json:"local_created_at_gt"`
	LocalCreatedAtGte       *string   `json:"local_created_at_gte"`
	LocalCreatedAtIn        *[]string `json:"local_created_at_in"`
	LocalCreatedAtLt        *string   `json:"local_created_at_lt"`
	LocalCreatedAtLte       *string   `json:"local_created_at_lte"`
	LocalCreatedAtNot       *string   `json:"local_created_at_not"`
	LocalCreatedAtNotIn     *[]string `json:"local_created_at_not_in"`
	LocalId                 *string   `json:"local_id"`
	LocalIdContains         *string   `json:"local_id_contains"`
	LocalIdEndsWith         *string   `json:"local_id_ends_with"`
	LocalIdGt               *string   `json:"local_id_gt"`
	LocalIdGte              *string   `json:"local_id_gte"`
	LocalIdIn               *[]string `json:"local_id_in"`
	LocalIdLt               *string   `json:"local_id_lt"`
	LocalIdLte              *string   `json:"local_id_lte"`
	LocalIdNot              *string   `json:"local_id_not"`
	LocalIdNotContains      *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith      *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn            *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith    *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith       *string   `json:"local_id_starts_with"`
	Message                 *string   `json:"message"`
	MessageContains         *string   `json:"message_contains"`
	MessageEndsWith         *string   `json:"message_ends_with"`
	MessageGt               *string   `json:"message_gt"`
	MessageGte              *string   `json:"message_gte"`
	MessageIn               *[]string `json:"message_in"`
	MessageLt               *string   `json:"message_lt"`
	MessageLte              *string   `json:"message_lte"`
	MessageNot              *string   `json:"message_not"`
	MessageNotContains      *string   `json:"message_not_contains"`
	MessageNotEndsWith      *string   `json:"message_not_ends_with"`
	MessageNotIn            *[]string `json:"message_not_in"`
	MessageNotStartsWith    *string   `json:"message_not_starts_with"`
	MessageStartsWith       *string   `json:"message_starts_with"`
	ResourceId              *string   `json:"resource_id"`
	ResourceIdContains      *string   `json:"resource_id_contains"`
	ResourceIdEndsWith      *string   `json:"resource_id_ends_with"`
	ResourceIdGt            *string   `json:"resource_id_gt"`
	ResourceIdGte           *string   `json:"resource_id_gte"`
	ResourceIdIn            *[]string `json:"resource_id_in"`
	ResourceIdLt            *string   `json:"resource_id_lt"`
	ResourceIdLte           *string   `json:"resource_id_lte"`
	ResourceIdNot           *string   `json:"resource_id_not"`
	ResourceIdNotContains   *string   `json:"resource_id_not_contains"`
	ResourceIdNotEndsWith   *string   `json:"resource_id_not_ends_with"`
	ResourceIdNotIn         *[]string `json:"resource_id_not_in"`
	ResourceIdNotStartsWith *string   `json:"resource_id_not_starts_with"`
	ResourceIdStartsWith    *string   `json:"resource_id_starts_with"`
	Status                  *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogStatus)
		UserAuditLogStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]UserAuditLogStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogStatus)
		UserAuditLogStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn *[]UserAuditLogStatus `json:"status_not_in"`
}

// Task defines model for Task.
type Task struct {
	Args    map[string]interface{} `json:"args"`
	Cluster *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description           string     `json:"description"`
	ErrorCode             *string    `json:"error_code"`
	ErrorMessage          *string    `json:"error_message"`
	FinishedAt            *string    `json:"finished_at"`
	Id                    string     `json:"id"`
	Internal              bool       `json:"internal"`
	LocalCreatedAt        string     `json:"local_created_at"`
	Progress              float64    `json:"progress"`
	ResourceId            *string    `json:"resource_id"`
	ResourceMutation      *string    `json:"resource_mutation"`
	ResourceRollbackError *string    `json:"resource_rollback_error"`
	ResourceRollbacked    *bool      `json:"resource_rollbacked"`
	ResourceType          *string    `json:"resource_type"`
	Snapshot              string     `json:"snapshot"`
	StartedAt             *string    `json:"started_at"`
	Status                TaskStatus `json:"status"`
	Steps                 []struct {
		Current   *float64 `json:"current"`
		Finished  *bool    `json:"finished"`
		Key       *string  `json:"key"`
		PerSecond *float64 `json:"per_second"`
		Total     *float64 `json:"total"`
		Unit      *struct {
			// Embedded struct due to allOf(#/components/schemas/StepUnit)
			StepUnit `yaml:",inline"`
		} `json:"unit"`
	} `json:"steps"`
	User *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"user"`
}

// TaskConnection defines model for TaskConnection.
type TaskConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// TaskOrderByInput defines model for TaskOrderByInput.
type TaskOrderByInput string

// TaskStatus defines model for TaskStatus.
type TaskStatus string

// TaskWhereInput defines model for TaskWhereInput.
type TaskWhereInput struct {
	AND     *[]TaskWhereInput `json:"AND"`
	NOT     *[]TaskWhereInput `json:"NOT"`
	OR      *[]TaskWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description                        *string    `json:"description"`
	DescriptionContains                *string    `json:"description_contains"`
	DescriptionEndsWith                *string    `json:"description_ends_with"`
	DescriptionGt                      *string    `json:"description_gt"`
	DescriptionGte                     *string    `json:"description_gte"`
	DescriptionIn                      *[]string  `json:"description_in"`
	DescriptionLt                      *string    `json:"description_lt"`
	DescriptionLte                     *string    `json:"description_lte"`
	DescriptionNot                     *string    `json:"description_not"`
	DescriptionNotContains             *string    `json:"description_not_contains"`
	DescriptionNotEndsWith             *string    `json:"description_not_ends_with"`
	DescriptionNotIn                   *[]string  `json:"description_not_in"`
	DescriptionNotStartsWith           *string    `json:"description_not_starts_with"`
	DescriptionStartsWith              *string    `json:"description_starts_with"`
	ErrorCode                          *string    `json:"error_code"`
	ErrorCodeContains                  *string    `json:"error_code_contains"`
	ErrorCodeEndsWith                  *string    `json:"error_code_ends_with"`
	ErrorCodeGt                        *string    `json:"error_code_gt"`
	ErrorCodeGte                       *string    `json:"error_code_gte"`
	ErrorCodeIn                        *[]string  `json:"error_code_in"`
	ErrorCodeLt                        *string    `json:"error_code_lt"`
	ErrorCodeLte                       *string    `json:"error_code_lte"`
	ErrorCodeNot                       *string    `json:"error_code_not"`
	ErrorCodeNotContains               *string    `json:"error_code_not_contains"`
	ErrorCodeNotEndsWith               *string    `json:"error_code_not_ends_with"`
	ErrorCodeNotIn                     *[]string  `json:"error_code_not_in"`
	ErrorCodeNotStartsWith             *string    `json:"error_code_not_starts_with"`
	ErrorCodeStartsWith                *string    `json:"error_code_starts_with"`
	ErrorMessage                       *string    `json:"error_message"`
	ErrorMessageContains               *string    `json:"error_message_contains"`
	ErrorMessageEndsWith               *string    `json:"error_message_ends_with"`
	ErrorMessageGt                     *string    `json:"error_message_gt"`
	ErrorMessageGte                    *string    `json:"error_message_gte"`
	ErrorMessageIn                     *[]string  `json:"error_message_in"`
	ErrorMessageLt                     *string    `json:"error_message_lt"`
	ErrorMessageLte                    *string    `json:"error_message_lte"`
	ErrorMessageNot                    *string    `json:"error_message_not"`
	ErrorMessageNotContains            *string    `json:"error_message_not_contains"`
	ErrorMessageNotEndsWith            *string    `json:"error_message_not_ends_with"`
	ErrorMessageNotIn                  *[]string  `json:"error_message_not_in"`
	ErrorMessageNotStartsWith          *string    `json:"error_message_not_starts_with"`
	ErrorMessageStartsWith             *string    `json:"error_message_starts_with"`
	FinishedAt                         *string    `json:"finished_at"`
	FinishedAtGt                       *string    `json:"finished_at_gt"`
	FinishedAtGte                      *string    `json:"finished_at_gte"`
	FinishedAtIn                       *[]string  `json:"finished_at_in"`
	FinishedAtLt                       *string    `json:"finished_at_lt"`
	FinishedAtLte                      *string    `json:"finished_at_lte"`
	FinishedAtNot                      *string    `json:"finished_at_not"`
	FinishedAtNotIn                    *[]string  `json:"finished_at_not_in"`
	Id                                 *string    `json:"id"`
	IdContains                         *string    `json:"id_contains"`
	IdEndsWith                         *string    `json:"id_ends_with"`
	IdGt                               *string    `json:"id_gt"`
	IdGte                              *string    `json:"id_gte"`
	IdIn                               *[]string  `json:"id_in"`
	IdLt                               *string    `json:"id_lt"`
	IdLte                              *string    `json:"id_lte"`
	IdNot                              *string    `json:"id_not"`
	IdNotContains                      *string    `json:"id_not_contains"`
	IdNotEndsWith                      *string    `json:"id_not_ends_with"`
	IdNotIn                            *[]string  `json:"id_not_in"`
	IdNotStartsWith                    *string    `json:"id_not_starts_with"`
	IdStartsWith                       *string    `json:"id_starts_with"`
	Internal                           *bool      `json:"internal"`
	InternalNot                        *bool      `json:"internal_not"`
	LocalCreatedAt                     *string    `json:"local_created_at"`
	LocalCreatedAtGt                   *string    `json:"local_created_at_gt"`
	LocalCreatedAtGte                  *string    `json:"local_created_at_gte"`
	LocalCreatedAtIn                   *[]string  `json:"local_created_at_in"`
	LocalCreatedAtLt                   *string    `json:"local_created_at_lt"`
	LocalCreatedAtLte                  *string    `json:"local_created_at_lte"`
	LocalCreatedAtNot                  *string    `json:"local_created_at_not"`
	LocalCreatedAtNotIn                *[]string  `json:"local_created_at_not_in"`
	Progress                           *float64   `json:"progress"`
	ProgressGt                         *float64   `json:"progress_gt"`
	ProgressGte                        *float64   `json:"progress_gte"`
	ProgressIn                         *[]float64 `json:"progress_in"`
	ProgressLt                         *float64   `json:"progress_lt"`
	ProgressLte                        *float64   `json:"progress_lte"`
	ProgressNot                        *float64   `json:"progress_not"`
	ProgressNotIn                      *[]float64 `json:"progress_not_in"`
	ResourceId                         *string    `json:"resource_id"`
	ResourceIdContains                 *string    `json:"resource_id_contains"`
	ResourceIdEndsWith                 *string    `json:"resource_id_ends_with"`
	ResourceIdGt                       *string    `json:"resource_id_gt"`
	ResourceIdGte                      *string    `json:"resource_id_gte"`
	ResourceIdIn                       *[]string  `json:"resource_id_in"`
	ResourceIdLt                       *string    `json:"resource_id_lt"`
	ResourceIdLte                      *string    `json:"resource_id_lte"`
	ResourceIdNot                      *string    `json:"resource_id_not"`
	ResourceIdNotContains              *string    `json:"resource_id_not_contains"`
	ResourceIdNotEndsWith              *string    `json:"resource_id_not_ends_with"`
	ResourceIdNotIn                    *[]string  `json:"resource_id_not_in"`
	ResourceIdNotStartsWith            *string    `json:"resource_id_not_starts_with"`
	ResourceIdStartsWith               *string    `json:"resource_id_starts_with"`
	ResourceMutation                   *string    `json:"resource_mutation"`
	ResourceMutationContains           *string    `json:"resource_mutation_contains"`
	ResourceMutationEndsWith           *string    `json:"resource_mutation_ends_with"`
	ResourceMutationGt                 *string    `json:"resource_mutation_gt"`
	ResourceMutationGte                *string    `json:"resource_mutation_gte"`
	ResourceMutationIn                 *[]string  `json:"resource_mutation_in"`
	ResourceMutationLt                 *string    `json:"resource_mutation_lt"`
	ResourceMutationLte                *string    `json:"resource_mutation_lte"`
	ResourceMutationNot                *string    `json:"resource_mutation_not"`
	ResourceMutationNotContains        *string    `json:"resource_mutation_not_contains"`
	ResourceMutationNotEndsWith        *string    `json:"resource_mutation_not_ends_with"`
	ResourceMutationNotIn              *[]string  `json:"resource_mutation_not_in"`
	ResourceMutationNotStartsWith      *string    `json:"resource_mutation_not_starts_with"`
	ResourceMutationStartsWith         *string    `json:"resource_mutation_starts_with"`
	ResourceRollbackError              *string    `json:"resource_rollback_error"`
	ResourceRollbackErrorContains      *string    `json:"resource_rollback_error_contains"`
	ResourceRollbackErrorEndsWith      *string    `json:"resource_rollback_error_ends_with"`
	ResourceRollbackErrorGt            *string    `json:"resource_rollback_error_gt"`
	ResourceRollbackErrorGte           *string    `json:"resource_rollback_error_gte"`
	ResourceRollbackErrorIn            *[]string  `json:"resource_rollback_error_in"`
	ResourceRollbackErrorLt            *string    `json:"resource_rollback_error_lt"`
	ResourceRollbackErrorLte           *string    `json:"resource_rollback_error_lte"`
	ResourceRollbackErrorNot           *string    `json:"resource_rollback_error_not"`
	ResourceRollbackErrorNotContains   *string    `json:"resource_rollback_error_not_contains"`
	ResourceRollbackErrorNotEndsWith   *string    `json:"resource_rollback_error_not_ends_with"`
	ResourceRollbackErrorNotIn         *[]string  `json:"resource_rollback_error_not_in"`
	ResourceRollbackErrorNotStartsWith *string    `json:"resource_rollback_error_not_starts_with"`
	ResourceRollbackErrorStartsWith    *string    `json:"resource_rollback_error_starts_with"`
	ResourceRollbacked                 *bool      `json:"resource_rollbacked"`
	ResourceRollbackedNot              *bool      `json:"resource_rollbacked_not"`
	ResourceType                       *string    `json:"resource_type"`
	ResourceTypeContains               *string    `json:"resource_type_contains"`
	ResourceTypeEndsWith               *string    `json:"resource_type_ends_with"`
	ResourceTypeGt                     *string    `json:"resource_type_gt"`
	ResourceTypeGte                    *string    `json:"resource_type_gte"`
	ResourceTypeIn                     *[]string  `json:"resource_type_in"`
	ResourceTypeLt                     *string    `json:"resource_type_lt"`
	ResourceTypeLte                    *string    `json:"resource_type_lte"`
	ResourceTypeNot                    *string    `json:"resource_type_not"`
	ResourceTypeNotContains            *string    `json:"resource_type_not_contains"`
	ResourceTypeNotEndsWith            *string    `json:"resource_type_not_ends_with"`
	ResourceTypeNotIn                  *[]string  `json:"resource_type_not_in"`
	ResourceTypeNotStartsWith          *string    `json:"resource_type_not_starts_with"`
	ResourceTypeStartsWith             *string    `json:"resource_type_starts_with"`
	Snapshot                           *string    `json:"snapshot"`
	SnapshotContains                   *string    `json:"snapshot_contains"`
	SnapshotEndsWith                   *string    `json:"snapshot_ends_with"`
	SnapshotGt                         *string    `json:"snapshot_gt"`
	SnapshotGte                        *string    `json:"snapshot_gte"`
	SnapshotIn                         *[]string  `json:"snapshot_in"`
	SnapshotLt                         *string    `json:"snapshot_lt"`
	SnapshotLte                        *string    `json:"snapshot_lte"`
	SnapshotNot                        *string    `json:"snapshot_not"`
	SnapshotNotContains                *string    `json:"snapshot_not_contains"`
	SnapshotNotEndsWith                *string    `json:"snapshot_not_ends_with"`
	SnapshotNotIn                      *[]string  `json:"snapshot_not_in"`
	SnapshotNotStartsWith              *string    `json:"snapshot_not_starts_with"`
	SnapshotStartsWith                 *string    `json:"snapshot_starts_with"`
	StartedAt                          *string    `json:"started_at"`
	StartedAtGt                        *string    `json:"started_at_gt"`
	StartedAtGte                       *string    `json:"started_at_gte"`
	StartedAtIn                        *[]string  `json:"started_at_in"`
	StartedAtLt                        *string    `json:"started_at_lt"`
	StartedAtLte                       *string    `json:"started_at_lte"`
	StartedAtNot                       *string    `json:"started_at_not"`
	StartedAtNotIn                     *[]string  `json:"started_at_not_in"`
	Status                             *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskStatus)
		TaskStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]TaskStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskStatus)
		TaskStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn *[]TaskStatus `json:"status_not_in"`
	User        *struct {
		// Embedded struct due to allOf(#/components/schemas/UserWhereInput)
		UserWhereInput `yaml:",inline"`
	} `json:"user"`
}

// TimeUnit defines model for TimeUnit.
type TimeUnit string

// TriggerDiskBlinkParams defines model for TriggerDiskBlinkParams.
type TriggerDiskBlinkParams struct {
	DiskName  string                           `json:"disk_name"`
	HostId    string                           `json:"host_id"`
	LedStatus *TriggerDiskBlinkParamsLedStatus `json:"led_status,omitempty"`
}

// TriggerDiskBlinkParamsLedStatus defines model for TriggerDiskBlinkParams.LedStatus.
type TriggerDiskBlinkParamsLedStatus string

// UploadResourceType defines model for UploadResourceType.
type UploadResourceType string

// UploadTask defines model for UploadTask.
type UploadTask struct {
	Args         map[string]interface{} `json:"args"`
	ChunkSize    float64                `json:"chunk_size"`
	CurrentChunk float64                `json:"current_chunk"`
	FinishedAt   *string                `json:"finished_at"`
	Id           string                 `json:"id"`
	ResourceType UploadResourceType     `json:"resource_type"`
	Size         float64                `json:"size"`
	StartedAt    *string                `json:"started_at"`
	Status       UploadTaskStatus       `json:"status"`
	UpdatedAt    string                 `json:"updatedAt"`
}

// UploadTaskConnection defines model for UploadTaskConnection.
type UploadTaskConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// UploadTaskOrderByInput defines model for UploadTaskOrderByInput.
type UploadTaskOrderByInput string

// UploadTaskStatus defines model for UploadTaskStatus.
type UploadTaskStatus string

// UploadTaskWhereInput defines model for UploadTaskWhereInput.
type UploadTaskWhereInput struct {
	AND               *[]UploadTaskWhereInput `json:"AND"`
	NOT               *[]UploadTaskWhereInput `json:"NOT"`
	OR                *[]UploadTaskWhereInput `json:"OR"`
	ChunkSize         *float64                `json:"chunk_size"`
	ChunkSizeGt       *float64                `json:"chunk_size_gt"`
	ChunkSizeGte      *float64                `json:"chunk_size_gte"`
	ChunkSizeIn       *[]float64              `json:"chunk_size_in"`
	ChunkSizeLt       *float64                `json:"chunk_size_lt"`
	ChunkSizeLte      *float64                `json:"chunk_size_lte"`
	ChunkSizeNot      *float64                `json:"chunk_size_not"`
	ChunkSizeNotIn    *[]float64              `json:"chunk_size_not_in"`
	CurrentChunk      *float64                `json:"current_chunk"`
	CurrentChunkGt    *float64                `json:"current_chunk_gt"`
	CurrentChunkGte   *float64                `json:"current_chunk_gte"`
	CurrentChunkIn    *[]float64              `json:"current_chunk_in"`
	CurrentChunkLt    *float64                `json:"current_chunk_lt"`
	CurrentChunkLte   *float64                `json:"current_chunk_lte"`
	CurrentChunkNot   *float64                `json:"current_chunk_not"`
	CurrentChunkNotIn *[]float64              `json:"current_chunk_not_in"`
	FinishedAt        *string                 `json:"finished_at"`
	FinishedAtGt      *string                 `json:"finished_at_gt"`
	FinishedAtGte     *string                 `json:"finished_at_gte"`
	FinishedAtIn      *[]string               `json:"finished_at_in"`
	FinishedAtLt      *string                 `json:"finished_at_lt"`
	FinishedAtLte     *string                 `json:"finished_at_lte"`
	FinishedAtNot     *string                 `json:"finished_at_not"`
	FinishedAtNotIn   *[]string               `json:"finished_at_not_in"`
	Id                *string                 `json:"id"`
	IdContains        *string                 `json:"id_contains"`
	IdEndsWith        *string                 `json:"id_ends_with"`
	IdGt              *string                 `json:"id_gt"`
	IdGte             *string                 `json:"id_gte"`
	IdIn              *[]string               `json:"id_in"`
	IdLt              *string                 `json:"id_lt"`
	IdLte             *string                 `json:"id_lte"`
	IdNot             *string                 `json:"id_not"`
	IdNotContains     *string                 `json:"id_not_contains"`
	IdNotEndsWith     *string                 `json:"id_not_ends_with"`
	IdNotIn           *[]string               `json:"id_not_in"`
	IdNotStartsWith   *string                 `json:"id_not_starts_with"`
	IdStartsWith      *string                 `json:"id_starts_with"`
	ResourceType      *struct {
		// Embedded struct due to allOf(#/components/schemas/UploadResourceType)
		UploadResourceType `yaml:",inline"`
	} `json:"resource_type"`
	ResourceTypeIn  *[]UploadResourceType `json:"resource_type_in"`
	ResourceTypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UploadResourceType)
		UploadResourceType `yaml:",inline"`
	} `json:"resource_type_not"`
	ResourceTypeNotIn *[]UploadResourceType `json:"resource_type_not_in"`
	Size              *float64              `json:"size"`
	SizeGt            *float64              `json:"size_gt"`
	SizeGte           *float64              `json:"size_gte"`
	SizeIn            *[]float64            `json:"size_in"`
	SizeLt            *float64              `json:"size_lt"`
	SizeLte           *float64              `json:"size_lte"`
	SizeNot           *float64              `json:"size_not"`
	SizeNotIn         *[]float64            `json:"size_not_in"`
	StartedAt         *string               `json:"started_at"`
	StartedAtGt       *string               `json:"started_at_gt"`
	StartedAtGte      *string               `json:"started_at_gte"`
	StartedAtIn       *[]string             `json:"started_at_in"`
	StartedAtLt       *string               `json:"started_at_lt"`
	StartedAtLte      *string               `json:"started_at_lte"`
	StartedAtNot      *string               `json:"started_at_not"`
	StartedAtNotIn    *[]string             `json:"started_at_not_in"`
	Status            *struct {
		// Embedded struct due to allOf(#/components/schemas/UploadTaskStatus)
		UploadTaskStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]UploadTaskStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UploadTaskStatus)
		UploadTaskStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn    *[]UploadTaskStatus `json:"status_not_in"`
	UpdatedAt      *string             `json:"updatedAt"`
	UpdatedAtGt    *string             `json:"updatedAt_gt"`
	UpdatedAtGte   *string             `json:"updatedAt_gte"`
	UpdatedAtIn    *[]string           `json:"updatedAt_in"`
	UpdatedAtLt    *string             `json:"updatedAt_lt"`
	UpdatedAtLte   *string             `json:"updatedAt_lte"`
	UpdatedAtNot   *string             `json:"updatedAt_not"`
	UpdatedAtNotIn *[]string           `json:"updatedAt_not_in"`
}

// UsbDevice defines model for UsbDevice.
type UsbDevice struct {
	Binded      bool   `json:"binded"`
	Description string `json:"description"`
	Host        struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Id             string          `json:"id"`
	LocalCreatedAt string          `json:"local_created_at"`
	LocalId        string          `json:"local_id"`
	Manufacturer   string          `json:"manufacturer"`
	Name           string          `json:"name"`
	Size           float64         `json:"size"`
	Status         UsbDeviceStatus `json:"status"`
	UsbType        string          `json:"usb_type"`
	Vm             *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm"`
}

// UsbDeviceConnection defines model for UsbDeviceConnection.
type UsbDeviceConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// UsbDeviceMountParams defines model for UsbDeviceMountParams.
type UsbDeviceMountParams struct {
	Data struct {
		VmId string `json:"vm_id"`
	} `json:"data"`
	Where UsbDeviceWhereInput `json:"where"`
}

// UsbDeviceOrderByInput defines model for UsbDeviceOrderByInput.
type UsbDeviceOrderByInput string

// UsbDeviceStatus defines model for UsbDeviceStatus.
type UsbDeviceStatus string

// UsbDeviceUnmountParams defines model for UsbDeviceUnmountParams.
type UsbDeviceUnmountParams struct {
	Where UsbDeviceWhereInput `json:"where"`
}

// UsbDeviceWhereInput defines model for UsbDeviceWhereInput.
type UsbDeviceWhereInput struct {
	AND                      *[]UsbDeviceWhereInput `json:"AND"`
	NOT                      *[]UsbDeviceWhereInput `json:"NOT"`
	OR                       *[]UsbDeviceWhereInput `json:"OR"`
	Binded                   *bool                  `json:"binded"`
	BindedNot                *bool                  `json:"binded_not"`
	Description              *string                `json:"description"`
	DescriptionContains      *string                `json:"description_contains"`
	DescriptionEndsWith      *string                `json:"description_ends_with"`
	DescriptionGt            *string                `json:"description_gt"`
	DescriptionGte           *string                `json:"description_gte"`
	DescriptionIn            *[]string              `json:"description_in"`
	DescriptionLt            *string                `json:"description_lt"`
	DescriptionLte           *string                `json:"description_lte"`
	DescriptionNot           *string                `json:"description_not"`
	DescriptionNotContains   *string                `json:"description_not_contains"`
	DescriptionNotEndsWith   *string                `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string              `json:"description_not_in"`
	DescriptionNotStartsWith *string                `json:"description_not_starts_with"`
	DescriptionStartsWith    *string                `json:"description_starts_with"`
	Host                     *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Id                        *string    `json:"id"`
	IdContains                *string    `json:"id_contains"`
	IdEndsWith                *string    `json:"id_ends_with"`
	IdGt                      *string    `json:"id_gt"`
	IdGte                     *string    `json:"id_gte"`
	IdIn                      *[]string  `json:"id_in"`
	IdLt                      *string    `json:"id_lt"`
	IdLte                     *string    `json:"id_lte"`
	IdNot                     *string    `json:"id_not"`
	IdNotContains             *string    `json:"id_not_contains"`
	IdNotEndsWith             *string    `json:"id_not_ends_with"`
	IdNotIn                   *[]string  `json:"id_not_in"`
	IdNotStartsWith           *string    `json:"id_not_starts_with"`
	IdStartsWith              *string    `json:"id_starts_with"`
	LocalCreatedAt            *string    `json:"local_created_at"`
	LocalCreatedAtGt          *string    `json:"local_created_at_gt"`
	LocalCreatedAtGte         *string    `json:"local_created_at_gte"`
	LocalCreatedAtIn          *[]string  `json:"local_created_at_in"`
	LocalCreatedAtLt          *string    `json:"local_created_at_lt"`
	LocalCreatedAtLte         *string    `json:"local_created_at_lte"`
	LocalCreatedAtNot         *string    `json:"local_created_at_not"`
	LocalCreatedAtNotIn       *[]string  `json:"local_created_at_not_in"`
	LocalId                   *string    `json:"local_id"`
	LocalIdContains           *string    `json:"local_id_contains"`
	LocalIdEndsWith           *string    `json:"local_id_ends_with"`
	LocalIdGt                 *string    `json:"local_id_gt"`
	LocalIdGte                *string    `json:"local_id_gte"`
	LocalIdIn                 *[]string  `json:"local_id_in"`
	LocalIdLt                 *string    `json:"local_id_lt"`
	LocalIdLte                *string    `json:"local_id_lte"`
	LocalIdNot                *string    `json:"local_id_not"`
	LocalIdNotContains        *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith        *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn              *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith      *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith         *string    `json:"local_id_starts_with"`
	Manufacturer              *string    `json:"manufacturer"`
	ManufacturerContains      *string    `json:"manufacturer_contains"`
	ManufacturerEndsWith      *string    `json:"manufacturer_ends_with"`
	ManufacturerGt            *string    `json:"manufacturer_gt"`
	ManufacturerGte           *string    `json:"manufacturer_gte"`
	ManufacturerIn            *[]string  `json:"manufacturer_in"`
	ManufacturerLt            *string    `json:"manufacturer_lt"`
	ManufacturerLte           *string    `json:"manufacturer_lte"`
	ManufacturerNot           *string    `json:"manufacturer_not"`
	ManufacturerNotContains   *string    `json:"manufacturer_not_contains"`
	ManufacturerNotEndsWith   *string    `json:"manufacturer_not_ends_with"`
	ManufacturerNotIn         *[]string  `json:"manufacturer_not_in"`
	ManufacturerNotStartsWith *string    `json:"manufacturer_not_starts_with"`
	ManufacturerStartsWith    *string    `json:"manufacturer_starts_with"`
	Name                      *string    `json:"name"`
	NameContains              *string    `json:"name_contains"`
	NameEndsWith              *string    `json:"name_ends_with"`
	NameGt                    *string    `json:"name_gt"`
	NameGte                   *string    `json:"name_gte"`
	NameIn                    *[]string  `json:"name_in"`
	NameLt                    *string    `json:"name_lt"`
	NameLte                   *string    `json:"name_lte"`
	NameNot                   *string    `json:"name_not"`
	NameNotContains           *string    `json:"name_not_contains"`
	NameNotEndsWith           *string    `json:"name_not_ends_with"`
	NameNotIn                 *[]string  `json:"name_not_in"`
	NameNotStartsWith         *string    `json:"name_not_starts_with"`
	NameStartsWith            *string    `json:"name_starts_with"`
	Size                      *float64   `json:"size"`
	SizeGt                    *float64   `json:"size_gt"`
	SizeGte                   *float64   `json:"size_gte"`
	SizeIn                    *[]float64 `json:"size_in"`
	SizeLt                    *float64   `json:"size_lt"`
	SizeLte                   *float64   `json:"size_lte"`
	SizeNot                   *float64   `json:"size_not"`
	SizeNotIn                 *[]float64 `json:"size_not_in"`
	Status                    *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceStatus)
		UsbDeviceStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]UsbDeviceStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceStatus)
		UsbDeviceStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn          *[]UsbDeviceStatus `json:"status_not_in"`
	UsbType              *string            `json:"usb_type"`
	UsbTypeContains      *string            `json:"usb_type_contains"`
	UsbTypeEndsWith      *string            `json:"usb_type_ends_with"`
	UsbTypeGt            *string            `json:"usb_type_gt"`
	UsbTypeGte           *string            `json:"usb_type_gte"`
	UsbTypeIn            *[]string          `json:"usb_type_in"`
	UsbTypeLt            *string            `json:"usb_type_lt"`
	UsbTypeLte           *string            `json:"usb_type_lte"`
	UsbTypeNot           *string            `json:"usb_type_not"`
	UsbTypeNotContains   *string            `json:"usb_type_not_contains"`
	UsbTypeNotEndsWith   *string            `json:"usb_type_not_ends_with"`
	UsbTypeNotIn         *[]string          `json:"usb_type_not_in"`
	UsbTypeNotStartsWith *string            `json:"usb_type_not_starts_with"`
	UsbTypeStartsWith    *string            `json:"usb_type_starts_with"`
	Vm                   *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vm"`
}

// User defines model for User.
type User struct {
	EmailAddress *string `json:"email_address"`
	Id           string  `json:"id"`
	LdapDn       *string `json:"ldap_dn"`
	MobilePhone  *string `json:"mobile_phone"`
	Name         string  `json:"name"`
	Role         *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRole)
		UserRole `yaml:",inline"`
	} `json:"role"`
	Roles *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"roles"`
	Source   UserSource `json:"source"`
	Username string     `json:"username"`
}

// UserAuditLog defines model for UserAuditLog.
type UserAuditLog struct {
	Action  string `json:"action"`
	Cluster *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	CreatedAt    string  `json:"createdAt"`
	FinishedAt   *string `json:"finished_at"`
	Id           string  `json:"id"`
	IpAddress    string  `json:"ip_address"`
	Message      string  `json:"message"`
	ResourceId   *string `json:"resource_id"`
	ResourceType *string `json:"resource_type"`
	Status       *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogStatus)
		UserAuditLogStatus `yaml:",inline"`
	} `json:"status"`
	User *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"user"`
}

// UserAuditLogConnection defines model for UserAuditLogConnection.
type UserAuditLogConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// UserAuditLogOrderByInput defines model for UserAuditLogOrderByInput.
type UserAuditLogOrderByInput string

// UserAuditLogStatus defines model for UserAuditLogStatus.
type UserAuditLogStatus string

// UserAuditLogWhereInput defines model for UserAuditLogWhereInput.
type UserAuditLogWhereInput struct {
	AND                 *[]UserAuditLogWhereInput `json:"AND"`
	NOT                 *[]UserAuditLogWhereInput `json:"NOT"`
	OR                  *[]UserAuditLogWhereInput `json:"OR"`
	Action              *string                   `json:"action"`
	ActionContains      *string                   `json:"action_contains"`
	ActionEndsWith      *string                   `json:"action_ends_with"`
	ActionGt            *string                   `json:"action_gt"`
	ActionGte           *string                   `json:"action_gte"`
	ActionIn            *[]string                 `json:"action_in"`
	ActionLt            *string                   `json:"action_lt"`
	ActionLte           *string                   `json:"action_lte"`
	ActionNot           *string                   `json:"action_not"`
	ActionNotContains   *string                   `json:"action_not_contains"`
	ActionNotEndsWith   *string                   `json:"action_not_ends_with"`
	ActionNotIn         *[]string                 `json:"action_not_in"`
	ActionNotStartsWith *string                   `json:"action_not_starts_with"`
	ActionStartsWith    *string                   `json:"action_starts_with"`
	Cluster             *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	CreatedAt                 *string   `json:"createdAt"`
	CreatedAtGt               *string   `json:"createdAt_gt"`
	CreatedAtGte              *string   `json:"createdAt_gte"`
	CreatedAtIn               *[]string `json:"createdAt_in"`
	CreatedAtLt               *string   `json:"createdAt_lt"`
	CreatedAtLte              *string   `json:"createdAt_lte"`
	CreatedAtNot              *string   `json:"createdAt_not"`
	CreatedAtNotIn            *[]string `json:"createdAt_not_in"`
	FinishedAt                *string   `json:"finished_at"`
	FinishedAtGt              *string   `json:"finished_at_gt"`
	FinishedAtGte             *string   `json:"finished_at_gte"`
	FinishedAtIn              *[]string `json:"finished_at_in"`
	FinishedAtLt              *string   `json:"finished_at_lt"`
	FinishedAtLte             *string   `json:"finished_at_lte"`
	FinishedAtNot             *string   `json:"finished_at_not"`
	FinishedAtNotIn           *[]string `json:"finished_at_not_in"`
	Id                        *string   `json:"id"`
	IdContains                *string   `json:"id_contains"`
	IdEndsWith                *string   `json:"id_ends_with"`
	IdGt                      *string   `json:"id_gt"`
	IdGte                     *string   `json:"id_gte"`
	IdIn                      *[]string `json:"id_in"`
	IdLt                      *string   `json:"id_lt"`
	IdLte                     *string   `json:"id_lte"`
	IdNot                     *string   `json:"id_not"`
	IdNotContains             *string   `json:"id_not_contains"`
	IdNotEndsWith             *string   `json:"id_not_ends_with"`
	IdNotIn                   *[]string `json:"id_not_in"`
	IdNotStartsWith           *string   `json:"id_not_starts_with"`
	IdStartsWith              *string   `json:"id_starts_with"`
	IpAddress                 *string   `json:"ip_address"`
	IpAddressContains         *string   `json:"ip_address_contains"`
	IpAddressEndsWith         *string   `json:"ip_address_ends_with"`
	IpAddressGt               *string   `json:"ip_address_gt"`
	IpAddressGte              *string   `json:"ip_address_gte"`
	IpAddressIn               *[]string `json:"ip_address_in"`
	IpAddressLt               *string   `json:"ip_address_lt"`
	IpAddressLte              *string   `json:"ip_address_lte"`
	IpAddressNot              *string   `json:"ip_address_not"`
	IpAddressNotContains      *string   `json:"ip_address_not_contains"`
	IpAddressNotEndsWith      *string   `json:"ip_address_not_ends_with"`
	IpAddressNotIn            *[]string `json:"ip_address_not_in"`
	IpAddressNotStartsWith    *string   `json:"ip_address_not_starts_with"`
	IpAddressStartsWith       *string   `json:"ip_address_starts_with"`
	Message                   *string   `json:"message"`
	MessageContains           *string   `json:"message_contains"`
	MessageEndsWith           *string   `json:"message_ends_with"`
	MessageGt                 *string   `json:"message_gt"`
	MessageGte                *string   `json:"message_gte"`
	MessageIn                 *[]string `json:"message_in"`
	MessageLt                 *string   `json:"message_lt"`
	MessageLte                *string   `json:"message_lte"`
	MessageNot                *string   `json:"message_not"`
	MessageNotContains        *string   `json:"message_not_contains"`
	MessageNotEndsWith        *string   `json:"message_not_ends_with"`
	MessageNotIn              *[]string `json:"message_not_in"`
	MessageNotStartsWith      *string   `json:"message_not_starts_with"`
	MessageStartsWith         *string   `json:"message_starts_with"`
	ResourceId                *string   `json:"resource_id"`
	ResourceIdContains        *string   `json:"resource_id_contains"`
	ResourceIdEndsWith        *string   `json:"resource_id_ends_with"`
	ResourceIdGt              *string   `json:"resource_id_gt"`
	ResourceIdGte             *string   `json:"resource_id_gte"`
	ResourceIdIn              *[]string `json:"resource_id_in"`
	ResourceIdLt              *string   `json:"resource_id_lt"`
	ResourceIdLte             *string   `json:"resource_id_lte"`
	ResourceIdNot             *string   `json:"resource_id_not"`
	ResourceIdNotContains     *string   `json:"resource_id_not_contains"`
	ResourceIdNotEndsWith     *string   `json:"resource_id_not_ends_with"`
	ResourceIdNotIn           *[]string `json:"resource_id_not_in"`
	ResourceIdNotStartsWith   *string   `json:"resource_id_not_starts_with"`
	ResourceIdStartsWith      *string   `json:"resource_id_starts_with"`
	ResourceType              *string   `json:"resource_type"`
	ResourceTypeContains      *string   `json:"resource_type_contains"`
	ResourceTypeEndsWith      *string   `json:"resource_type_ends_with"`
	ResourceTypeGt            *string   `json:"resource_type_gt"`
	ResourceTypeGte           *string   `json:"resource_type_gte"`
	ResourceTypeIn            *[]string `json:"resource_type_in"`
	ResourceTypeLt            *string   `json:"resource_type_lt"`
	ResourceTypeLte           *string   `json:"resource_type_lte"`
	ResourceTypeNot           *string   `json:"resource_type_not"`
	ResourceTypeNotContains   *string   `json:"resource_type_not_contains"`
	ResourceTypeNotEndsWith   *string   `json:"resource_type_not_ends_with"`
	ResourceTypeNotIn         *[]string `json:"resource_type_not_in"`
	ResourceTypeNotStartsWith *string   `json:"resource_type_not_starts_with"`
	ResourceTypeStartsWith    *string   `json:"resource_type_starts_with"`
	Status                    *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogStatus)
		UserAuditLogStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]UserAuditLogStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAuditLogStatus)
		UserAuditLogStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn *[]UserAuditLogStatus `json:"status_not_in"`
	User        *struct {
		// Embedded struct due to allOf(#/components/schemas/UserWhereInput)
		UserWhereInput `yaml:",inline"`
	} `json:"user"`
}

// UserConnection defines model for UserConnection.
type UserConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// UserCreationParams defines model for UserCreationParams.
type UserCreationParams struct {
	EmailAddress *string `json:"email_address,omitempty"`
	MobilePhone  *string `json:"mobile_phone,omitempty"`
	Name         string  `json:"name"`
	Password     string  `json:"password"`
	RoleId       string  `json:"role_id"`
	Username     string  `json:"username"`
}

// UserDeletionParams defines model for UserDeletionParams.
type UserDeletionParams struct {
	Where UserWhereInput `json:"where"`
}

// UserOrderByInput defines model for UserOrderByInput.
type UserOrderByInput string

// UserRole defines model for UserRole.
type UserRole string

// UserRoleNext defines model for UserRoleNext.
type UserRoleNext struct {
	Actions  []string         `json:"actions"`
	Id       string           `json:"id"`
	Name     string           `json:"name"`
	Platform UserRolePlatform `json:"platform"`
	Preset   *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRolePreset)
		UserRolePreset `yaml:",inline"`
	} `json:"preset"`
	Users *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"users"`
}

// UserRoleNextConnection defines model for UserRoleNextConnection.
type UserRoleNextConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// UserRoleNextOrderByInput defines model for UserRoleNextOrderByInput.
type UserRoleNextOrderByInput string

// UserRoleNextWhereInput defines model for UserRoleNextWhereInput.
type UserRoleNextWhereInput struct {
	AND               *[]UserRoleNextWhereInput `json:"AND"`
	NOT               *[]UserRoleNextWhereInput `json:"NOT"`
	OR                *[]UserRoleNextWhereInput `json:"OR"`
	Id                *string                   `json:"id"`
	IdContains        *string                   `json:"id_contains"`
	IdEndsWith        *string                   `json:"id_ends_with"`
	IdGt              *string                   `json:"id_gt"`
	IdGte             *string                   `json:"id_gte"`
	IdIn              *[]string                 `json:"id_in"`
	IdLt              *string                   `json:"id_lt"`
	IdLte             *string                   `json:"id_lte"`
	IdNot             *string                   `json:"id_not"`
	IdNotContains     *string                   `json:"id_not_contains"`
	IdNotEndsWith     *string                   `json:"id_not_ends_with"`
	IdNotIn           *[]string                 `json:"id_not_in"`
	IdNotStartsWith   *string                   `json:"id_not_starts_with"`
	IdStartsWith      *string                   `json:"id_starts_with"`
	Name              *string                   `json:"name"`
	NameContains      *string                   `json:"name_contains"`
	NameEndsWith      *string                   `json:"name_ends_with"`
	NameGt            *string                   `json:"name_gt"`
	NameGte           *string                   `json:"name_gte"`
	NameIn            *[]string                 `json:"name_in"`
	NameLt            *string                   `json:"name_lt"`
	NameLte           *string                   `json:"name_lte"`
	NameNot           *string                   `json:"name_not"`
	NameNotContains   *string                   `json:"name_not_contains"`
	NameNotEndsWith   *string                   `json:"name_not_ends_with"`
	NameNotIn         *[]string                 `json:"name_not_in"`
	NameNotStartsWith *string                   `json:"name_not_starts_with"`
	NameStartsWith    *string                   `json:"name_starts_with"`
	Platform          *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRolePlatform)
		UserRolePlatform `yaml:",inline"`
	} `json:"platform"`
	PlatformIn  *[]UserRolePlatform `json:"platform_in"`
	PlatformNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRolePlatform)
		UserRolePlatform `yaml:",inline"`
	} `json:"platform_not"`
	PlatformNotIn *[]UserRolePlatform `json:"platform_not_in"`
	Preset        *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRolePreset)
		UserRolePreset `yaml:",inline"`
	} `json:"preset"`
	PresetIn  *[]UserRolePreset `json:"preset_in"`
	PresetNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRolePreset)
		UserRolePreset `yaml:",inline"`
	} `json:"preset_not"`
	PresetNotIn *[]UserRolePreset `json:"preset_not_in"`
	UsersEvery  *struct {
		// Embedded struct due to allOf(#/components/schemas/UserWhereInput)
		UserWhereInput `yaml:",inline"`
	} `json:"users_every"`
	UsersNone *struct {
		// Embedded struct due to allOf(#/components/schemas/UserWhereInput)
		UserWhereInput `yaml:",inline"`
	} `json:"users_none"`
	UsersSome *struct {
		// Embedded struct due to allOf(#/components/schemas/UserWhereInput)
		UserWhereInput `yaml:",inline"`
	} `json:"users_some"`
}

// UserRolePlatform defines model for UserRolePlatform.
type UserRolePlatform string

// UserRolePreset defines model for UserRolePreset.
type UserRolePreset string

// UserSource defines model for UserSource.
type UserSource string

// UserUpdationParams defines model for UserUpdationParams.
type UserUpdationParams struct {
	Data struct {
		EmailAddress *string `json:"email_address,omitempty"`
		MobilePhone  *string `json:"mobile_phone,omitempty"`
		Name         *string `json:"name,omitempty"`
		Password     *string `json:"password,omitempty"`
		RoleId       *string `json:"role_id,omitempty"`
		Username     *string `json:"username,omitempty"`
	} `json:"data"`
	Where UserWhereInput `json:"where"`
}

// UserWhereInput defines model for UserWhereInput.
type UserWhereInput struct {
	AND                       *[]UserWhereInput `json:"AND"`
	NOT                       *[]UserWhereInput `json:"NOT"`
	OR                        *[]UserWhereInput `json:"OR"`
	EmailAddress              *string           `json:"email_address"`
	EmailAddressContains      *string           `json:"email_address_contains"`
	EmailAddressEndsWith      *string           `json:"email_address_ends_with"`
	EmailAddressGt            *string           `json:"email_address_gt"`
	EmailAddressGte           *string           `json:"email_address_gte"`
	EmailAddressIn            *[]string         `json:"email_address_in"`
	EmailAddressLt            *string           `json:"email_address_lt"`
	EmailAddressLte           *string           `json:"email_address_lte"`
	EmailAddressNot           *string           `json:"email_address_not"`
	EmailAddressNotContains   *string           `json:"email_address_not_contains"`
	EmailAddressNotEndsWith   *string           `json:"email_address_not_ends_with"`
	EmailAddressNotIn         *[]string         `json:"email_address_not_in"`
	EmailAddressNotStartsWith *string           `json:"email_address_not_starts_with"`
	EmailAddressStartsWith    *string           `json:"email_address_starts_with"`
	Id                        *string           `json:"id"`
	IdContains                *string           `json:"id_contains"`
	IdEndsWith                *string           `json:"id_ends_with"`
	IdGt                      *string           `json:"id_gt"`
	IdGte                     *string           `json:"id_gte"`
	IdIn                      *[]string         `json:"id_in"`
	IdLt                      *string           `json:"id_lt"`
	IdLte                     *string           `json:"id_lte"`
	IdNot                     *string           `json:"id_not"`
	IdNotContains             *string           `json:"id_not_contains"`
	IdNotEndsWith             *string           `json:"id_not_ends_with"`
	IdNotIn                   *[]string         `json:"id_not_in"`
	IdNotStartsWith           *string           `json:"id_not_starts_with"`
	IdStartsWith              *string           `json:"id_starts_with"`
	LdapDn                    *string           `json:"ldap_dn"`
	LdapDnContains            *string           `json:"ldap_dn_contains"`
	LdapDnEndsWith            *string           `json:"ldap_dn_ends_with"`
	LdapDnGt                  *string           `json:"ldap_dn_gt"`
	LdapDnGte                 *string           `json:"ldap_dn_gte"`
	LdapDnIn                  *[]string         `json:"ldap_dn_in"`
	LdapDnLt                  *string           `json:"ldap_dn_lt"`
	LdapDnLte                 *string           `json:"ldap_dn_lte"`
	LdapDnNot                 *string           `json:"ldap_dn_not"`
	LdapDnNotContains         *string           `json:"ldap_dn_not_contains"`
	LdapDnNotEndsWith         *string           `json:"ldap_dn_not_ends_with"`
	LdapDnNotIn               *[]string         `json:"ldap_dn_not_in"`
	LdapDnNotStartsWith       *string           `json:"ldap_dn_not_starts_with"`
	LdapDnStartsWith          *string           `json:"ldap_dn_starts_with"`
	MobilePhone               *string           `json:"mobile_phone"`
	MobilePhoneContains       *string           `json:"mobile_phone_contains"`
	MobilePhoneEndsWith       *string           `json:"mobile_phone_ends_with"`
	MobilePhoneGt             *string           `json:"mobile_phone_gt"`
	MobilePhoneGte            *string           `json:"mobile_phone_gte"`
	MobilePhoneIn             *[]string         `json:"mobile_phone_in"`
	MobilePhoneLt             *string           `json:"mobile_phone_lt"`
	MobilePhoneLte            *string           `json:"mobile_phone_lte"`
	MobilePhoneNot            *string           `json:"mobile_phone_not"`
	MobilePhoneNotContains    *string           `json:"mobile_phone_not_contains"`
	MobilePhoneNotEndsWith    *string           `json:"mobile_phone_not_ends_with"`
	MobilePhoneNotIn          *[]string         `json:"mobile_phone_not_in"`
	MobilePhoneNotStartsWith  *string           `json:"mobile_phone_not_starts_with"`
	MobilePhoneStartsWith     *string           `json:"mobile_phone_starts_with"`
	Name                      *string           `json:"name"`
	NameContains              *string           `json:"name_contains"`
	NameEndsWith              *string           `json:"name_ends_with"`
	NameGt                    *string           `json:"name_gt"`
	NameGte                   *string           `json:"name_gte"`
	NameIn                    *[]string         `json:"name_in"`
	NameLt                    *string           `json:"name_lt"`
	NameLte                   *string           `json:"name_lte"`
	NameNot                   *string           `json:"name_not"`
	NameNotContains           *string           `json:"name_not_contains"`
	NameNotEndsWith           *string           `json:"name_not_ends_with"`
	NameNotIn                 *[]string         `json:"name_not_in"`
	NameNotStartsWith         *string           `json:"name_not_starts_with"`
	NameStartsWith            *string           `json:"name_starts_with"`
	Password                  *string           `json:"password"`
	PasswordContains          *string           `json:"password_contains"`
	PasswordEndsWith          *string           `json:"password_ends_with"`
	PasswordGt                *string           `json:"password_gt"`
	PasswordGte               *string           `json:"password_gte"`
	PasswordIn                *[]string         `json:"password_in"`
	PasswordLt                *string           `json:"password_lt"`
	PasswordLte               *string           `json:"password_lte"`
	PasswordNot               *string           `json:"password_not"`
	PasswordNotContains       *string           `json:"password_not_contains"`
	PasswordNotEndsWith       *string           `json:"password_not_ends_with"`
	PasswordNotIn             *[]string         `json:"password_not_in"`
	PasswordNotStartsWith     *string           `json:"password_not_starts_with"`
	PasswordStartsWith        *string           `json:"password_starts_with"`
	Role                      *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRole)
		UserRole `yaml:",inline"`
	} `json:"role"`
	RoleIn  *[]UserRole `json:"role_in"`
	RoleNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRole)
		UserRole `yaml:",inline"`
	} `json:"role_not"`
	RoleNotIn  *[]UserRole `json:"role_not_in"`
	RolesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRoleNextWhereInput)
		UserRoleNextWhereInput `yaml:",inline"`
	} `json:"roles_every"`
	RolesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRoleNextWhereInput)
		UserRoleNextWhereInput `yaml:",inline"`
	} `json:"roles_none"`
	RolesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/UserRoleNextWhereInput)
		UserRoleNextWhereInput `yaml:",inline"`
	} `json:"roles_some"`
	Source *struct {
		// Embedded struct due to allOf(#/components/schemas/UserSource)
		UserSource `yaml:",inline"`
	} `json:"source"`
	SourceIn  *[]UserSource `json:"source_in"`
	SourceNot *struct {
		// Embedded struct due to allOf(#/components/schemas/UserSource)
		UserSource `yaml:",inline"`
	} `json:"source_not"`
	SourceNotIn           *[]UserSource `json:"source_not_in"`
	Username              *string       `json:"username"`
	UsernameContains      *string       `json:"username_contains"`
	UsernameEndsWith      *string       `json:"username_ends_with"`
	UsernameGt            *string       `json:"username_gt"`
	UsernameGte           *string       `json:"username_gte"`
	UsernameIn            *[]string     `json:"username_in"`
	UsernameLt            *string       `json:"username_lt"`
	UsernameLte           *string       `json:"username_lte"`
	UsernameNot           *string       `json:"username_not"`
	UsernameNotContains   *string       `json:"username_not_contains"`
	UsernameNotEndsWith   *string       `json:"username_not_ends_with"`
	UsernameNotIn         *[]string     `json:"username_not_in"`
	UsernameNotStartsWith *string       `json:"username_not_starts_with"`
	UsernameStartsWith    *string       `json:"username_starts_with"`
}

// VcenterAccount defines model for VcenterAccount.
type VcenterAccount struct {
	Cluster *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Id       string  `json:"id"`
	Ip       string  `json:"ip"`
	IsValid  bool    `json:"is_valid"`
	LocalId  string  `json:"local_id"`
	Password string  `json:"password"`
	Port     float64 `json:"port"`
	Username string  `json:"username"`
}

// VcenterAccountConnection defines model for VcenterAccountConnection.
type VcenterAccountConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VcenterAccountOrderByInput defines model for VcenterAccountOrderByInput.
type VcenterAccountOrderByInput string

// VcenterAccountWhereInput defines model for VcenterAccountWhereInput.
type VcenterAccountWhereInput struct {
	AND     *[]VcenterAccountWhereInput `json:"AND"`
	NOT     *[]VcenterAccountWhereInput `json:"NOT"`
	OR      *[]VcenterAccountWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Id                    *string    `json:"id"`
	IdContains            *string    `json:"id_contains"`
	IdEndsWith            *string    `json:"id_ends_with"`
	IdGt                  *string    `json:"id_gt"`
	IdGte                 *string    `json:"id_gte"`
	IdIn                  *[]string  `json:"id_in"`
	IdLt                  *string    `json:"id_lt"`
	IdLte                 *string    `json:"id_lte"`
	IdNot                 *string    `json:"id_not"`
	IdNotContains         *string    `json:"id_not_contains"`
	IdNotEndsWith         *string    `json:"id_not_ends_with"`
	IdNotIn               *[]string  `json:"id_not_in"`
	IdNotStartsWith       *string    `json:"id_not_starts_with"`
	IdStartsWith          *string    `json:"id_starts_with"`
	Ip                    *string    `json:"ip"`
	IpContains            *string    `json:"ip_contains"`
	IpEndsWith            *string    `json:"ip_ends_with"`
	IpGt                  *string    `json:"ip_gt"`
	IpGte                 *string    `json:"ip_gte"`
	IpIn                  *[]string  `json:"ip_in"`
	IpLt                  *string    `json:"ip_lt"`
	IpLte                 *string    `json:"ip_lte"`
	IpNot                 *string    `json:"ip_not"`
	IpNotContains         *string    `json:"ip_not_contains"`
	IpNotEndsWith         *string    `json:"ip_not_ends_with"`
	IpNotIn               *[]string  `json:"ip_not_in"`
	IpNotStartsWith       *string    `json:"ip_not_starts_with"`
	IpStartsWith          *string    `json:"ip_starts_with"`
	IsValid               *bool      `json:"is_valid"`
	IsValidNot            *bool      `json:"is_valid_not"`
	LocalId               *string    `json:"local_id"`
	LocalIdContains       *string    `json:"local_id_contains"`
	LocalIdEndsWith       *string    `json:"local_id_ends_with"`
	LocalIdGt             *string    `json:"local_id_gt"`
	LocalIdGte            *string    `json:"local_id_gte"`
	LocalIdIn             *[]string  `json:"local_id_in"`
	LocalIdLt             *string    `json:"local_id_lt"`
	LocalIdLte            *string    `json:"local_id_lte"`
	LocalIdNot            *string    `json:"local_id_not"`
	LocalIdNotContains    *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith    *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn          *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith  *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith     *string    `json:"local_id_starts_with"`
	Password              *string    `json:"password"`
	PasswordContains      *string    `json:"password_contains"`
	PasswordEndsWith      *string    `json:"password_ends_with"`
	PasswordGt            *string    `json:"password_gt"`
	PasswordGte           *string    `json:"password_gte"`
	PasswordIn            *[]string  `json:"password_in"`
	PasswordLt            *string    `json:"password_lt"`
	PasswordLte           *string    `json:"password_lte"`
	PasswordNot           *string    `json:"password_not"`
	PasswordNotContains   *string    `json:"password_not_contains"`
	PasswordNotEndsWith   *string    `json:"password_not_ends_with"`
	PasswordNotIn         *[]string  `json:"password_not_in"`
	PasswordNotStartsWith *string    `json:"password_not_starts_with"`
	PasswordStartsWith    *string    `json:"password_starts_with"`
	Port                  *float64   `json:"port"`
	PortGt                *float64   `json:"port_gt"`
	PortGte               *float64   `json:"port_gte"`
	PortIn                *[]float64 `json:"port_in"`
	PortLt                *float64   `json:"port_lt"`
	PortLte               *float64   `json:"port_lte"`
	PortNot               *float64   `json:"port_not"`
	PortNotIn             *[]float64 `json:"port_not_in"`
	Username              *string    `json:"username"`
	UsernameContains      *string    `json:"username_contains"`
	UsernameEndsWith      *string    `json:"username_ends_with"`
	UsernameGt            *string    `json:"username_gt"`
	UsernameGte           *string    `json:"username_gte"`
	UsernameIn            *[]string  `json:"username_in"`
	UsernameLt            *string    `json:"username_lt"`
	UsernameLte           *string    `json:"username_lte"`
	UsernameNot           *string    `json:"username_not"`
	UsernameNotContains   *string    `json:"username_not_contains"`
	UsernameNotEndsWith   *string    `json:"username_not_ends_with"`
	UsernameNotIn         *[]string  `json:"username_not_in"`
	UsernameNotStartsWith *string    `json:"username_not_starts_with"`
	UsernameStartsWith    *string    `json:"username_starts_with"`
}

// Vds defines model for Vds.
type Vds struct {
	BondMode string `json:"bond_mode"`
	Cluster  struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id       string `json:"id"`
	Internal bool   `json:"internal"`
	Labels   *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId string `json:"local_id"`
	Name    string `json:"name"`
	Nics    *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nics"`
	OvsbrName string      `json:"ovsbr_name"`
	Type      NetworkType `json:"type"`
	Vlans     *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vlans"`
	VlansNum float64 `json:"vlans_num"`
}

// VdsConnection defines model for VdsConnection.
type VdsConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VdsCreationParams defines model for VdsCreationParams.
type VdsCreationParams struct {
	BondMode  *string  `json:"bond_mode,omitempty"`
	ClusterId string   `json:"cluster_id"`
	Name      string   `json:"name"`
	NicIds    []string `json:"nic_ids"`
}

// VdsCreationWithMAccessVlanParams defines model for VdsCreationWithMAccessVlanParams.
type VdsCreationWithMAccessVlanParams struct {
	// Embedded struct due to allOf(#/components/schemas/VdsCreationParams)
	VdsCreationParams `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Vlan struct {
		ExtraIp []struct {
			HostId       string `json:"host_id"`
			ManagementIp string `json:"management_ip"`
		} `json:"extra_ip"`
		GatewayIp         *string `json:"gateway_ip,omitempty"`
		GatewaySubnetmask *string `json:"gateway_subnetmask,omitempty"`
		Subnetmask        string  `json:"subnetmask"`
		VlanId            float64 `json:"vlan_id"`
	} `json:"vlan"`
}

// VdsCreationWithMigrateVlanParams defines model for VdsCreationWithMigrateVlanParams.
type VdsCreationWithMigrateVlanParams struct {
	// Embedded struct due to allOf(#/components/schemas/VdsCreationParams)
	VdsCreationParams `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Vlan struct {
		ExtraIp []struct {
			HostId       string `json:"host_id"`
			ManagementIp string `json:"management_ip"`
		} `json:"extra_ip"`
		GatewayIp         *string `json:"gateway_ip,omitempty"`
		GatewaySubnetmask *string `json:"gateway_subnetmask,omitempty"`
		Subnetmask        string  `json:"subnetmask"`
		VlanId            float64 `json:"vlan_id"`
	} `json:"vlan"`
}

// VdsDeletionParams defines model for VdsDeletionParams.
type VdsDeletionParams struct {
	Where VdsWhereInput `json:"where"`
}

// VdsOrderByInput defines model for VdsOrderByInput.
type VdsOrderByInput string

// VdsUpdationParams defines model for VdsUpdationParams.
type VdsUpdationParams struct {
	Data struct {
		BondMode *string   `json:"bond_mode,omitempty"`
		Name     *string   `json:"name,omitempty"`
		NicIds   *[]string `json:"nicIds,omitempty"`
	} `json:"data"`
	Where VdsWhereInput `json:"where"`
}

// VdsWhereInput defines model for VdsWhereInput.
type VdsWhereInput struct {
	AND                   *[]VdsWhereInput `json:"AND"`
	NOT                   *[]VdsWhereInput `json:"NOT"`
	OR                    *[]VdsWhereInput `json:"OR"`
	BondMode              *string          `json:"bond_mode"`
	BondModeContains      *string          `json:"bond_mode_contains"`
	BondModeEndsWith      *string          `json:"bond_mode_ends_with"`
	BondModeGt            *string          `json:"bond_mode_gt"`
	BondModeGte           *string          `json:"bond_mode_gte"`
	BondModeIn            *[]string        `json:"bond_mode_in"`
	BondModeLt            *string          `json:"bond_mode_lt"`
	BondModeLte           *string          `json:"bond_mode_lte"`
	BondModeNot           *string          `json:"bond_mode_not"`
	BondModeNotContains   *string          `json:"bond_mode_not_contains"`
	BondModeNotEndsWith   *string          `json:"bond_mode_not_ends_with"`
	BondModeNotIn         *[]string        `json:"bond_mode_not_in"`
	BondModeNotStartsWith *string          `json:"bond_mode_not_starts_with"`
	BondModeStartsWith    *string          `json:"bond_mode_starts_with"`
	Cluster               *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                     *string              `json:"id"`
	IdContains             *string              `json:"id_contains"`
	IdEndsWith             *string              `json:"id_ends_with"`
	IdGt                   *string              `json:"id_gt"`
	IdGte                  *string              `json:"id_gte"`
	IdIn                   *[]string            `json:"id_in"`
	IdLt                   *string              `json:"id_lt"`
	IdLte                  *string              `json:"id_lte"`
	IdNot                  *string              `json:"id_not"`
	IdNotContains          *string              `json:"id_not_contains"`
	IdNotEndsWith          *string              `json:"id_not_ends_with"`
	IdNotIn                *[]string            `json:"id_not_in"`
	IdNotStartsWith        *string              `json:"id_not_starts_with"`
	IdStartsWith           *string              `json:"id_starts_with"`
	Internal               *bool                `json:"internal"`
	InternalNot            *bool                `json:"internal_not"`
	LabelsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Name                 *string   `json:"name"`
	NameContains         *string   `json:"name_contains"`
	NameEndsWith         *string   `json:"name_ends_with"`
	NameGt               *string   `json:"name_gt"`
	NameGte              *string   `json:"name_gte"`
	NameIn               *[]string `json:"name_in"`
	NameLt               *string   `json:"name_lt"`
	NameLte              *string   `json:"name_lte"`
	NameNot              *string   `json:"name_not"`
	NameNotContains      *string   `json:"name_not_contains"`
	NameNotEndsWith      *string   `json:"name_not_ends_with"`
	NameNotIn            *[]string `json:"name_not_in"`
	NameNotStartsWith    *string   `json:"name_not_starts_with"`
	NameStartsWith       *string   `json:"name_starts_with"`
	NicsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_every"`
	NicsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_none"`
	NicsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nics_some"`
	OvsbrName              *string   `json:"ovsbr_name"`
	OvsbrNameContains      *string   `json:"ovsbr_name_contains"`
	OvsbrNameEndsWith      *string   `json:"ovsbr_name_ends_with"`
	OvsbrNameGt            *string   `json:"ovsbr_name_gt"`
	OvsbrNameGte           *string   `json:"ovsbr_name_gte"`
	OvsbrNameIn            *[]string `json:"ovsbr_name_in"`
	OvsbrNameLt            *string   `json:"ovsbr_name_lt"`
	OvsbrNameLte           *string   `json:"ovsbr_name_lte"`
	OvsbrNameNot           *string   `json:"ovsbr_name_not"`
	OvsbrNameNotContains   *string   `json:"ovsbr_name_not_contains"`
	OvsbrNameNotEndsWith   *string   `json:"ovsbr_name_not_ends_with"`
	OvsbrNameNotIn         *[]string `json:"ovsbr_name_not_in"`
	OvsbrNameNotStartsWith *string   `json:"ovsbr_name_not_starts_with"`
	OvsbrNameStartsWith    *string   `json:"ovsbr_name_starts_with"`
	Type                   *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]NetworkType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn  *[]NetworkType `json:"type_not_in"`
	VlansEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"vlans_every"`
	VlansNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"vlans_none"`
	VlansNum      *float64   `json:"vlans_num"`
	VlansNumGt    *float64   `json:"vlans_num_gt"`
	VlansNumGte   *float64   `json:"vlans_num_gte"`
	VlansNumIn    *[]float64 `json:"vlans_num_in"`
	VlansNumLt    *float64   `json:"vlans_num_lt"`
	VlansNumLte   *float64   `json:"vlans_num_lte"`
	VlansNumNot   *float64   `json:"vlans_num_not"`
	VlansNumNotIn *[]float64 `json:"vlans_num_not_in"`
	VlansSome     *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"vlans_some"`
}

// View defines model for View.
type View struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Graphs *[]struct {
		Id string `json:"id"`
	} `json:"graphs"`
	Id       string   `json:"id"`
	LocalId  string   `json:"local_id"`
	Name     string   `json:"name"`
	TimeSpan float64  `json:"time_span"`
	TimeUnit TimeUnit `json:"time_unit"`
}

// ViewConnection defines model for ViewConnection.
type ViewConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ViewCreationParams defines model for ViewCreationParams.
type ViewCreationParams struct {
	ClusterId string   `json:"cluster_id"`
	Name      string   `json:"name"`
	TimeSpan  float64  `json:"time_span"`
	TimeUnit  TimeUnit `json:"time_unit"`
}

// ViewDeletionParams defines model for ViewDeletionParams.
type ViewDeletionParams struct {
	Where ViewWhereInput `json:"where"`
}

// ViewOrderByInput defines model for ViewOrderByInput.
type ViewOrderByInput string

// ViewUpdationParams defines model for ViewUpdationParams.
type ViewUpdationParams struct {
	Data *struct {
		Name     *string   `json:"name,omitempty"`
		TimeSpan *float64  `json:"time_span,omitempty"`
		TimeUnit *TimeUnit `json:"time_unit,omitempty"`
	} `json:"data,omitempty"`
	Where ViewWhereInput `json:"where"`
}

// ViewWhereInput defines model for ViewWhereInput.
type ViewWhereInput struct {
	AND     *[]ViewWhereInput `json:"AND"`
	NOT     *[]ViewWhereInput `json:"NOT"`
	OR      *[]ViewWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	GraphsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphWhereInput)
		GraphWhereInput `yaml:",inline"`
	} `json:"graphs_every"`
	GraphsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphWhereInput)
		GraphWhereInput `yaml:",inline"`
	} `json:"graphs_none"`
	GraphsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/GraphWhereInput)
		GraphWhereInput `yaml:",inline"`
	} `json:"graphs_some"`
	Id                   *string    `json:"id"`
	IdContains           *string    `json:"id_contains"`
	IdEndsWith           *string    `json:"id_ends_with"`
	IdGt                 *string    `json:"id_gt"`
	IdGte                *string    `json:"id_gte"`
	IdIn                 *[]string  `json:"id_in"`
	IdLt                 *string    `json:"id_lt"`
	IdLte                *string    `json:"id_lte"`
	IdNot                *string    `json:"id_not"`
	IdNotContains        *string    `json:"id_not_contains"`
	IdNotEndsWith        *string    `json:"id_not_ends_with"`
	IdNotIn              *[]string  `json:"id_not_in"`
	IdNotStartsWith      *string    `json:"id_not_starts_with"`
	IdStartsWith         *string    `json:"id_starts_with"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	Name                 *string    `json:"name"`
	NameContains         *string    `json:"name_contains"`
	NameEndsWith         *string    `json:"name_ends_with"`
	NameGt               *string    `json:"name_gt"`
	NameGte              *string    `json:"name_gte"`
	NameIn               *[]string  `json:"name_in"`
	NameLt               *string    `json:"name_lt"`
	NameLte              *string    `json:"name_lte"`
	NameNot              *string    `json:"name_not"`
	NameNotContains      *string    `json:"name_not_contains"`
	NameNotEndsWith      *string    `json:"name_not_ends_with"`
	NameNotIn            *[]string  `json:"name_not_in"`
	NameNotStartsWith    *string    `json:"name_not_starts_with"`
	NameStartsWith       *string    `json:"name_starts_with"`
	TimeSpan             *float64   `json:"time_span"`
	TimeSpanGt           *float64   `json:"time_span_gt"`
	TimeSpanGte          *float64   `json:"time_span_gte"`
	TimeSpanIn           *[]float64 `json:"time_span_in"`
	TimeSpanLt           *float64   `json:"time_span_lt"`
	TimeSpanLte          *float64   `json:"time_span_lte"`
	TimeSpanNot          *float64   `json:"time_span_not"`
	TimeSpanNotIn        *[]float64 `json:"time_span_not_in"`
	TimeUnit             *struct {
		// Embedded struct due to allOf(#/components/schemas/TimeUnit)
		TimeUnit `yaml:",inline"`
	} `json:"time_unit"`
	TimeUnitIn  *[]TimeUnit `json:"time_unit_in"`
	TimeUnitNot *struct {
		// Embedded struct due to allOf(#/components/schemas/TimeUnit)
		TimeUnit `yaml:",inline"`
	} `json:"time_unit_not"`
	TimeUnitNotIn *[]TimeUnit `json:"time_unit_not_in"`
}

// Vlan defines model for Vlan.
type Vlan struct {
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	GatewayIp         *string `json:"gateway_ip"`
	GatewaySubnetmask *string `json:"gateway_subnetmask"`
	Id                string  `json:"id"`
	Labels            *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalId    string      `json:"local_id"`
	Name       string      `json:"name"`
	Subnetmask *string     `json:"subnetmask"`
	Type       NetworkType `json:"type"`
	Vds        struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vds"`
	VlanId float64 `json:"vlan_id"`
	VmNics *[]struct {
		Id string `json:"id"`
	} `json:"vm_nics"`
}

// VlanConnection defines model for VlanConnection.
type VlanConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VlanDeletionParams defines model for VlanDeletionParams.
type VlanDeletionParams struct {
	Where VlanWhereInput `json:"where"`
}

// VlanOrderByInput defines model for VlanOrderByInput.
type VlanOrderByInput string

// VlanWhereInput defines model for VlanWhereInput.
type VlanWhereInput struct {
	AND               *[]VlanWhereInput `json:"AND"`
	NOT               *[]VlanWhereInput `json:"NOT"`
	OR                *[]VlanWhereInput `json:"OR"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn         *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	GatewayIp                      *string              `json:"gateway_ip"`
	GatewayIpContains              *string              `json:"gateway_ip_contains"`
	GatewayIpEndsWith              *string              `json:"gateway_ip_ends_with"`
	GatewayIpGt                    *string              `json:"gateway_ip_gt"`
	GatewayIpGte                   *string              `json:"gateway_ip_gte"`
	GatewayIpIn                    *[]string            `json:"gateway_ip_in"`
	GatewayIpLt                    *string              `json:"gateway_ip_lt"`
	GatewayIpLte                   *string              `json:"gateway_ip_lte"`
	GatewayIpNot                   *string              `json:"gateway_ip_not"`
	GatewayIpNotContains           *string              `json:"gateway_ip_not_contains"`
	GatewayIpNotEndsWith           *string              `json:"gateway_ip_not_ends_with"`
	GatewayIpNotIn                 *[]string            `json:"gateway_ip_not_in"`
	GatewayIpNotStartsWith         *string              `json:"gateway_ip_not_starts_with"`
	GatewayIpStartsWith            *string              `json:"gateway_ip_starts_with"`
	GatewaySubnetmask              *string              `json:"gateway_subnetmask"`
	GatewaySubnetmaskContains      *string              `json:"gateway_subnetmask_contains"`
	GatewaySubnetmaskEndsWith      *string              `json:"gateway_subnetmask_ends_with"`
	GatewaySubnetmaskGt            *string              `json:"gateway_subnetmask_gt"`
	GatewaySubnetmaskGte           *string              `json:"gateway_subnetmask_gte"`
	GatewaySubnetmaskIn            *[]string            `json:"gateway_subnetmask_in"`
	GatewaySubnetmaskLt            *string              `json:"gateway_subnetmask_lt"`
	GatewaySubnetmaskLte           *string              `json:"gateway_subnetmask_lte"`
	GatewaySubnetmaskNot           *string              `json:"gateway_subnetmask_not"`
	GatewaySubnetmaskNotContains   *string              `json:"gateway_subnetmask_not_contains"`
	GatewaySubnetmaskNotEndsWith   *string              `json:"gateway_subnetmask_not_ends_with"`
	GatewaySubnetmaskNotIn         *[]string            `json:"gateway_subnetmask_not_in"`
	GatewaySubnetmaskNotStartsWith *string              `json:"gateway_subnetmask_not_starts_with"`
	GatewaySubnetmaskStartsWith    *string              `json:"gateway_subnetmask_starts_with"`
	Id                             *string              `json:"id"`
	IdContains                     *string              `json:"id_contains"`
	IdEndsWith                     *string              `json:"id_ends_with"`
	IdGt                           *string              `json:"id_gt"`
	IdGte                          *string              `json:"id_gte"`
	IdIn                           *[]string            `json:"id_in"`
	IdLt                           *string              `json:"id_lt"`
	IdLte                          *string              `json:"id_lte"`
	IdNot                          *string              `json:"id_not"`
	IdNotContains                  *string              `json:"id_not_contains"`
	IdNotEndsWith                  *string              `json:"id_not_ends_with"`
	IdNotIn                        *[]string            `json:"id_not_in"`
	IdNotStartsWith                *string              `json:"id_not_starts_with"`
	IdStartsWith                   *string              `json:"id_starts_with"`
	LabelsEvery                    *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalId                 *string   `json:"local_id"`
	LocalIdContains         *string   `json:"local_id_contains"`
	LocalIdEndsWith         *string   `json:"local_id_ends_with"`
	LocalIdGt               *string   `json:"local_id_gt"`
	LocalIdGte              *string   `json:"local_id_gte"`
	LocalIdIn               *[]string `json:"local_id_in"`
	LocalIdLt               *string   `json:"local_id_lt"`
	LocalIdLte              *string   `json:"local_id_lte"`
	LocalIdNot              *string   `json:"local_id_not"`
	LocalIdNotContains      *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith      *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn            *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith    *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith       *string   `json:"local_id_starts_with"`
	Name                    *string   `json:"name"`
	NameContains            *string   `json:"name_contains"`
	NameEndsWith            *string   `json:"name_ends_with"`
	NameGt                  *string   `json:"name_gt"`
	NameGte                 *string   `json:"name_gte"`
	NameIn                  *[]string `json:"name_in"`
	NameLt                  *string   `json:"name_lt"`
	NameLte                 *string   `json:"name_lte"`
	NameNot                 *string   `json:"name_not"`
	NameNotContains         *string   `json:"name_not_contains"`
	NameNotEndsWith         *string   `json:"name_not_ends_with"`
	NameNotIn               *[]string `json:"name_not_in"`
	NameNotStartsWith       *string   `json:"name_not_starts_with"`
	NameStartsWith          *string   `json:"name_starts_with"`
	Subnetmask              *string   `json:"subnetmask"`
	SubnetmaskContains      *string   `json:"subnetmask_contains"`
	SubnetmaskEndsWith      *string   `json:"subnetmask_ends_with"`
	SubnetmaskGt            *string   `json:"subnetmask_gt"`
	SubnetmaskGte           *string   `json:"subnetmask_gte"`
	SubnetmaskIn            *[]string `json:"subnetmask_in"`
	SubnetmaskLt            *string   `json:"subnetmask_lt"`
	SubnetmaskLte           *string   `json:"subnetmask_lte"`
	SubnetmaskNot           *string   `json:"subnetmask_not"`
	SubnetmaskNotContains   *string   `json:"subnetmask_not_contains"`
	SubnetmaskNotEndsWith   *string   `json:"subnetmask_not_ends_with"`
	SubnetmaskNotIn         *[]string `json:"subnetmask_not_in"`
	SubnetmaskNotStartsWith *string   `json:"subnetmask_not_starts_with"`
	SubnetmaskStartsWith    *string   `json:"subnetmask_starts_with"`
	Type                    *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]NetworkType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/NetworkType)
		NetworkType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn *[]NetworkType `json:"type_not_in"`
	Vds       *struct {
		// Embedded struct due to allOf(#/components/schemas/VdsWhereInput)
		VdsWhereInput `yaml:",inline"`
	} `json:"vds"`
	VlanId      *float64   `json:"vlan_id"`
	VlanIdGt    *float64   `json:"vlan_id_gt"`
	VlanIdGte   *float64   `json:"vlan_id_gte"`
	VlanIdIn    *[]float64 `json:"vlan_id_in"`
	VlanIdLt    *float64   `json:"vlan_id_lt"`
	VlanIdLte   *float64   `json:"vlan_id_lte"`
	VlanIdNot   *float64   `json:"vlan_id_not"`
	VlanIdNotIn *[]float64 `json:"vlan_id_not_in"`
	VmNicsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vm_nics_every"`
	VmNicsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vm_nics_none"`
	VmNicsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vm_nics_some"`
}

// Vm defines model for Vm.
type Vm struct {
	ClockOffset VmClockOffset `json:"clock_offset"`
	Cluster     *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Cpu struct {
		Cores   float64 `json:"cores"`
		Sockets float64 `json:"sockets"`
	} `json:"cpu"`
	CpuModel          string   `json:"cpu_model"`
	CpuUsage          *float64 `json:"cpu_usage"`
	DeletedAt         *string  `json:"deleted_at"`
	Description       string   `json:"description"`
	DnsServers        *string  `json:"dns_servers"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityFilterResults *[]struct {
		Id string `json:"id"`
	} `json:"entity_filter_results"`
	Firmware VmFirmware `json:"firmware"`
	Folder   *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"folder"`
	GuestCpuModel *string `json:"guest_cpu_model"`
	GuestOsType   *struct {
		// Embedded struct due to allOf(#/components/schemas/VmGuestsOperationSystem)
		VmGuestsOperationSystem `yaml:",inline"`
	} `json:"guest_os_type"`
	GuestSizeUsage *float64 `json:"guest_size_usage"`
	GuestUsedSize  *float64 `json:"guest_used_size"`
	Ha             bool     `json:"ha"`
	Host           *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Hostname     *string `json:"hostname"`
	Id           string  `json:"id"`
	InRecycleBin bool    `json:"in_recycle_bin"`
	Internal     bool    `json:"internal"`
	IoPolicy     *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy"`
	Ips        string  `json:"ips"`
	KernelInfo *string `json:"kernel_info"`
	Labels     *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LastShutdownTime   *string  `json:"last_shutdown_time"`
	LocalCreatedAt     *string  `json:"local_created_at"`
	LocalId            string   `json:"local_id"`
	LogicalSizeBytes   *float64 `json:"logical_size_bytes"`
	MaxBandwidth       *float64 `json:"max_bandwidth"`
	MaxBandwidthPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy"`
	MaxIops       *float64 `json:"max_iops"`
	MaxIopsPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy"`
	Memory               float64  `json:"memory"`
	MemoryUsage          *float64 `json:"memory_usage"`
	Name                 string   `json:"name"`
	NestedVirtualization bool     `json:"nested_virtualization"`
	NodeIp               string   `json:"node_ip"`
	OriginalName         *string  `json:"original_name"`
	Os                   *string  `json:"os"`
	OutUninstallUsb      []string `json:"out_uninstall_usb"`
	Protected            bool     `json:"protected"`
	ProvisionedSize      *float64 `json:"provisioned_size"`
	Size                 *float64 `json:"size"`
	SnapshotPlan         *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"snapshot_plan"`
	Snapshots *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"snapshots"`
	Status     VmStatus `json:"status"`
	UniqueSize *float64 `json:"unique_size"`
	UsbDevices *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"usb_devices"`
	Vcpu      float64 `json:"vcpu"`
	VideoType *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVideoType)
		VmVideoType `yaml:",inline"`
	} `json:"video_type"`
	VmDisks *[]struct {
		Id string `json:"id"`
	} `json:"vm_disks"`
	VmNics *[]struct {
		Id string `json:"id"`
	} `json:"vm_nics"`
	VmPlacementGroup *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_placement_group"`
	VmToolsStatus  VmToolsStatus `json:"vm_tools_status"`
	VmToolsVersion *string       `json:"vm_tools_version"`
	WinOpt         bool          `json:"win_opt"`
}

// VmAddCdRomParams defines model for VmAddCdRomParams.
type VmAddCdRomParams struct {
	Data struct {
		VmCdRoms VmCdRomParams `json:"vm_cd_roms"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmAddDiskParams defines model for VmAddDiskParams.
type VmAddDiskParams struct {
	Data struct {
		IoPolicy           *VmDiskIoPolicy       `json:"io_policy,omitempty"`
		MaxBandwidth       *float64              `json:"max_bandwidth,omitempty"`
		MaxBandwidthPolicy *VmDiskIoRestrictType `json:"max_bandwidth_policy,omitempty"`
		MaxIops            *float64              `json:"max_iops,omitempty"`
		MaxIopsPolicy      *VmDiskIoRestrictType `json:"max_iops_policy,omitempty"`
		VmDisks            struct {
			MountDisks          *MountDisksParams          `json:"mount_disks,omitempty"`
			MountNewCreateDisks *MountNewCreateDisksParams `json:"mount_new_create_disks,omitempty"`
		} `json:"vm_disks"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmAddFolderParams defines model for VmAddFolderParams.
type VmAddFolderParams struct {
	Data struct {
		FolderId string `json:"folder_id"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmAddNicParams defines model for VmAddNicParams.
type VmAddNicParams struct {
	Data struct {
		VmNics VmNicParams `json:"vm_nics"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmCdRomParams defines model for VmCdRomParams.
type VmCdRomParams []struct {
	Boot       float64  `json:"boot"`
	ElfImageId *string  `json:"elf_image_id,omitempty"`
	Index      float64  `json:"index"`
	Key        *float64 `json:"key,omitempty"`
}

// VmClockOffset defines model for VmClockOffset.
type VmClockOffset string

// VmCloneParams defines model for VmCloneParams.
type VmCloneParams struct {
	ClusterId          string                   `json:"cluster_id"`
	CpuCores           *float64                 `json:"cpu_cores,omitempty"`
	CpuSockets         *float64                 `json:"cpu_sockets,omitempty"`
	Description        *string                  `json:"description,omitempty"`
	Firmware           *VmFirmware              `json:"firmware,omitempty"`
	FolderId           *string                  `json:"folder_id,omitempty"`
	GuestOsType        *VmGuestsOperationSystem `json:"guest_os_type,omitempty"`
	Ha                 *bool                    `json:"ha,omitempty"`
	HostId             *string                  `json:"host_id,omitempty"`
	IoPolicy           *VmDiskIoPolicy          `json:"io_policy,omitempty"`
	MaxBandwidth       *float64                 `json:"max_bandwidth,omitempty"`
	MaxBandwidthPolicy *VmDiskIoRestrictType    `json:"max_bandwidth_policy,omitempty"`
	MaxIops            *float64                 `json:"max_iops,omitempty"`
	MaxIopsPolicy      *VmDiskIoRestrictType    `json:"max_iops_policy,omitempty"`
	Memory             *float64                 `json:"memory,omitempty"`
	Name               string                   `json:"name"`
	SrcVmId            string                   `json:"src_vm_id"`
	Status             *VmStatus                `json:"status,omitempty"`
	Vcpu               *float64                 `json:"vcpu,omitempty"`
	VmDisks            *VmDiskParams            `json:"vm_disks,omitempty"`
	VmNics             *VmNicParams             `json:"vm_nics,omitempty"`
}

// VmConnection defines model for VmConnection.
type VmConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmCreateVmFromTemplateParams defines model for VmCreateVmFromTemplateParams.
type VmCreateVmFromTemplateParams struct {
	CloudInit *struct {
		DefaultUserPassword *string   `json:"default_user_password,omitempty"`
		Hostname            *string   `json:"hostname,omitempty"`
		Nameservers         *[]string `json:"nameservers,omitempty"`
		Networks            *[]struct {
			IpAddress *string `json:"ip_address,omitempty"`
			Netmask   *string `json:"netmask,omitempty"`
			NicIndex  float64 `json:"nic_index"`
			Routes    *[]struct {
				Gateway string `json:"gateway"`
				Netmask string `json:"netmask"`
				Network string `json:"network"`
			} `json:"routes,omitempty"`
			Type CloudInitNetworkTypeEnum `json:"type"`
		} `json:"networks,omitempty"`
		PublicKeys *[]string `json:"public_keys,omitempty"`
		UserData   *string   `json:"user_data,omitempty"`
	} `json:"cloud_init,omitempty"`
	ClusterId   string   `json:"cluster_id"`
	CpuCores    *float64 `json:"cpu_cores,omitempty"`
	CpuSockets  *float64 `json:"cpu_sockets,omitempty"`
	Description *string  `json:"description,omitempty"`
	DiskOperate *struct {
		ModifyDisks *[]struct {
			Bus        *Bus    `json:"bus,omitempty"`
			DiskIndex  float64 `json:"disk_index"`
			VmVolumeId *string `json:"vm_volume_id,omitempty"`
		} `json:"modify_disks,omitempty"`
		NewDisks    *VmDiskParams `json:"new_disks,omitempty"`
		RemoveDisks *struct {
			DiskIndex []float64 `json:"disk_index"`
		} `json:"remove_disks,omitempty"`
	} `json:"disk_operate,omitempty"`
	Firmware           *VmFirmware              `json:"firmware,omitempty"`
	FolderId           *string                  `json:"folder_id,omitempty"`
	GuestOsType        *VmGuestsOperationSystem `json:"guest_os_type,omitempty"`
	Ha                 *bool                    `json:"ha,omitempty"`
	HostId             *string                  `json:"host_id,omitempty"`
	IoPolicy           *VmDiskIoPolicy          `json:"io_policy,omitempty"`
	IsFullCopy         *bool                    `json:"is_full_copy,omitempty"`
	MaxBandwidth       *float64                 `json:"max_bandwidth,omitempty"`
	MaxBandwidthPolicy *VmDiskIoRestrictType    `json:"max_bandwidth_policy,omitempty"`
	MaxIops            *float64                 `json:"max_iops,omitempty"`
	MaxIopsPolicy      *VmDiskIoRestrictType    `json:"max_iops_policy,omitempty"`
	Memory             *float64                 `json:"memory,omitempty"`
	Name               string                   `json:"name"`
	Status             *VmStatus                `json:"status,omitempty"`
	TemplateId         string                   `json:"template_id"`
	Vcpu               *float64                 `json:"vcpu,omitempty"`
	VmNics             *VmNicParams             `json:"vm_nics,omitempty"`
}

// VmCreationParams defines model for VmCreationParams.
type VmCreationParams struct {
	ClusterId          string                   `json:"cluster_id"`
	CpuCores           float64                  `json:"cpu_cores"`
	CpuSockets         float64                  `json:"cpu_sockets"`
	Description        *string                  `json:"description,omitempty"`
	Firmware           VmFirmware               `json:"firmware"`
	FolderId           *string                  `json:"folder_id,omitempty"`
	GuestOsType        *VmGuestsOperationSystem `json:"guest_os_type,omitempty"`
	Ha                 bool                     `json:"ha"`
	HostId             *string                  `json:"host_id,omitempty"`
	IoPolicy           *VmDiskIoPolicy          `json:"io_policy,omitempty"`
	MaxBandwidth       *float64                 `json:"max_bandwidth,omitempty"`
	MaxBandwidthPolicy *VmDiskIoRestrictType    `json:"max_bandwidth_policy,omitempty"`
	MaxIops            *float64                 `json:"max_iops,omitempty"`
	MaxIopsPolicy      *VmDiskIoRestrictType    `json:"max_iops_policy,omitempty"`
	Memory             float64                  `json:"memory"`
	Name               string                   `json:"name"`
	Status             VmStatus                 `json:"status"`
	Vcpu               float64                  `json:"vcpu"`
	VmDisks            VmDiskParams             `json:"vm_disks"`
	VmNics             VmNicParams              `json:"vm_nics"`
}

// VmDisk defines model for VmDisk.
type VmDisk struct {
	Boot               float64 `json:"boot"`
	Bus                Bus     `json:"bus"`
	CloudInitImageName *string `json:"cloud_init_image_name"`
	CloudInitImagePath *string `json:"cloud_init_image_path"`
	Device             *string `json:"device"`
	Disabled           *bool   `json:"disabled"`
	ElfImage           *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"elf_image"`
	Id                 string   `json:"id"`
	Key                *float64 `json:"key"`
	MaxBandwidth       *float64 `json:"max_bandwidth"`
	MaxBandwidthPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy"`
	MaxIops       *float64 `json:"max_iops"`
	MaxIopsPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy"`
	Serial   *string `json:"serial"`
	SvtImage *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"svt_image"`
	Type            VmDiskType `json:"type"`
	UnsafeImagePath *string    `json:"unsafe_image_path"`
	UnsafeImageUuid *string    `json:"unsafe_image_uuid"`
	UnsafeProvision *string    `json:"unsafe_provision"`
	Vm              struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm"`
	VmVolume *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_volume"`
}

// VmDiskConnection defines model for VmDiskConnection.
type VmDiskConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmDiskIoPolicy defines model for VmDiskIoPolicy.
type VmDiskIoPolicy string

// VmDiskIoRestrictType defines model for VmDiskIoRestrictType.
type VmDiskIoRestrictType string

// VmDiskOrderByInput defines model for VmDiskOrderByInput.
type VmDiskOrderByInput string

// VmDiskParams defines model for VmDiskParams.
type VmDiskParams struct {
	MountCdRoms         *VmCdRomParams             `json:"mount_cd_roms,omitempty"`
	MountDisks          *MountDisksParams          `json:"mount_disks,omitempty"`
	MountNewCreateDisks *MountNewCreateDisksParams `json:"mount_new_create_disks,omitempty"`
}

// VmDiskType defines model for VmDiskType.
type VmDiskType string

// VmDiskWhereInput defines model for VmDiskWhereInput.
type VmDiskWhereInput struct {
	AND       *[]VmDiskWhereInput `json:"AND"`
	NOT       *[]VmDiskWhereInput `json:"NOT"`
	OR        *[]VmDiskWhereInput `json:"OR"`
	Boot      *float64            `json:"boot"`
	BootGt    *float64            `json:"boot_gt"`
	BootGte   *float64            `json:"boot_gte"`
	BootIn    *[]float64          `json:"boot_in"`
	BootLt    *float64            `json:"boot_lt"`
	BootLte   *float64            `json:"boot_lte"`
	BootNot   *float64            `json:"boot_not"`
	BootNotIn *[]float64          `json:"boot_not_in"`
	Bus       *struct {
		// Embedded struct due to allOf(#/components/schemas/Bus)
		Bus `yaml:",inline"`
	} `json:"bus"`
	BusIn  *[]Bus `json:"bus_in"`
	BusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/Bus)
		Bus `yaml:",inline"`
	} `json:"bus_not"`
	BusNotIn                        *[]Bus    `json:"bus_not_in"`
	CloudInitImageName              *string   `json:"cloud_init_image_name"`
	CloudInitImageNameContains      *string   `json:"cloud_init_image_name_contains"`
	CloudInitImageNameEndsWith      *string   `json:"cloud_init_image_name_ends_with"`
	CloudInitImageNameGt            *string   `json:"cloud_init_image_name_gt"`
	CloudInitImageNameGte           *string   `json:"cloud_init_image_name_gte"`
	CloudInitImageNameIn            *[]string `json:"cloud_init_image_name_in"`
	CloudInitImageNameLt            *string   `json:"cloud_init_image_name_lt"`
	CloudInitImageNameLte           *string   `json:"cloud_init_image_name_lte"`
	CloudInitImageNameNot           *string   `json:"cloud_init_image_name_not"`
	CloudInitImageNameNotContains   *string   `json:"cloud_init_image_name_not_contains"`
	CloudInitImageNameNotEndsWith   *string   `json:"cloud_init_image_name_not_ends_with"`
	CloudInitImageNameNotIn         *[]string `json:"cloud_init_image_name_not_in"`
	CloudInitImageNameNotStartsWith *string   `json:"cloud_init_image_name_not_starts_with"`
	CloudInitImageNameStartsWith    *string   `json:"cloud_init_image_name_starts_with"`
	CloudInitImagePath              *string   `json:"cloud_init_image_path"`
	CloudInitImagePathContains      *string   `json:"cloud_init_image_path_contains"`
	CloudInitImagePathEndsWith      *string   `json:"cloud_init_image_path_ends_with"`
	CloudInitImagePathGt            *string   `json:"cloud_init_image_path_gt"`
	CloudInitImagePathGte           *string   `json:"cloud_init_image_path_gte"`
	CloudInitImagePathIn            *[]string `json:"cloud_init_image_path_in"`
	CloudInitImagePathLt            *string   `json:"cloud_init_image_path_lt"`
	CloudInitImagePathLte           *string   `json:"cloud_init_image_path_lte"`
	CloudInitImagePathNot           *string   `json:"cloud_init_image_path_not"`
	CloudInitImagePathNotContains   *string   `json:"cloud_init_image_path_not_contains"`
	CloudInitImagePathNotEndsWith   *string   `json:"cloud_init_image_path_not_ends_with"`
	CloudInitImagePathNotIn         *[]string `json:"cloud_init_image_path_not_in"`
	CloudInitImagePathNotStartsWith *string   `json:"cloud_init_image_path_not_starts_with"`
	CloudInitImagePathStartsWith    *string   `json:"cloud_init_image_path_starts_with"`
	Device                          *string   `json:"device"`
	DeviceContains                  *string   `json:"device_contains"`
	DeviceEndsWith                  *string   `json:"device_ends_with"`
	DeviceGt                        *string   `json:"device_gt"`
	DeviceGte                       *string   `json:"device_gte"`
	DeviceIn                        *[]string `json:"device_in"`
	DeviceLt                        *string   `json:"device_lt"`
	DeviceLte                       *string   `json:"device_lte"`
	DeviceNot                       *string   `json:"device_not"`
	DeviceNotContains               *string   `json:"device_not_contains"`
	DeviceNotEndsWith               *string   `json:"device_not_ends_with"`
	DeviceNotIn                     *[]string `json:"device_not_in"`
	DeviceNotStartsWith             *string   `json:"device_not_starts_with"`
	DeviceStartsWith                *string   `json:"device_starts_with"`
	Disabled                        *bool     `json:"disabled"`
	DisabledNot                     *bool     `json:"disabled_not"`
	ElfImage                        *struct {
		// Embedded struct due to allOf(#/components/schemas/ElfImageWhereInput)
		ElfImageWhereInput `yaml:",inline"`
	} `json:"elf_image"`
	Id                 *string    `json:"id"`
	IdContains         *string    `json:"id_contains"`
	IdEndsWith         *string    `json:"id_ends_with"`
	IdGt               *string    `json:"id_gt"`
	IdGte              *string    `json:"id_gte"`
	IdIn               *[]string  `json:"id_in"`
	IdLt               *string    `json:"id_lt"`
	IdLte              *string    `json:"id_lte"`
	IdNot              *string    `json:"id_not"`
	IdNotContains      *string    `json:"id_not_contains"`
	IdNotEndsWith      *string    `json:"id_not_ends_with"`
	IdNotIn            *[]string  `json:"id_not_in"`
	IdNotStartsWith    *string    `json:"id_not_starts_with"`
	IdStartsWith       *string    `json:"id_starts_with"`
	Key                *float64   `json:"key"`
	KeyGt              *float64   `json:"key_gt"`
	KeyGte             *float64   `json:"key_gte"`
	KeyIn              *[]float64 `json:"key_in"`
	KeyLt              *float64   `json:"key_lt"`
	KeyLte             *float64   `json:"key_lte"`
	KeyNot             *float64   `json:"key_not"`
	KeyNotIn           *[]float64 `json:"key_not_in"`
	MaxBandwidth       *float64   `json:"max_bandwidth"`
	MaxBandwidthGt     *float64   `json:"max_bandwidth_gt"`
	MaxBandwidthGte    *float64   `json:"max_bandwidth_gte"`
	MaxBandwidthIn     *[]float64 `json:"max_bandwidth_in"`
	MaxBandwidthLt     *float64   `json:"max_bandwidth_lt"`
	MaxBandwidthLte    *float64   `json:"max_bandwidth_lte"`
	MaxBandwidthNot    *float64   `json:"max_bandwidth_not"`
	MaxBandwidthNotIn  *[]float64 `json:"max_bandwidth_not_in"`
	MaxBandwidthPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy"`
	MaxBandwidthPolicyIn  *[]VmDiskIoRestrictType `json:"max_bandwidth_policy_in"`
	MaxBandwidthPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy_not"`
	MaxBandwidthPolicyNotIn *[]VmDiskIoRestrictType `json:"max_bandwidth_policy_not_in"`
	MaxIops                 *float64                `json:"max_iops"`
	MaxIopsGt               *float64                `json:"max_iops_gt"`
	MaxIopsGte              *float64                `json:"max_iops_gte"`
	MaxIopsIn               *[]float64              `json:"max_iops_in"`
	MaxIopsLt               *float64                `json:"max_iops_lt"`
	MaxIopsLte              *float64                `json:"max_iops_lte"`
	MaxIopsNot              *float64                `json:"max_iops_not"`
	MaxIopsNotIn            *[]float64              `json:"max_iops_not_in"`
	MaxIopsPolicy           *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy"`
	MaxIopsPolicyIn  *[]VmDiskIoRestrictType `json:"max_iops_policy_in"`
	MaxIopsPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy_not"`
	MaxIopsPolicyNotIn  *[]VmDiskIoRestrictType `json:"max_iops_policy_not_in"`
	Serial              *string                 `json:"serial"`
	SerialContains      *string                 `json:"serial_contains"`
	SerialEndsWith      *string                 `json:"serial_ends_with"`
	SerialGt            *string                 `json:"serial_gt"`
	SerialGte           *string                 `json:"serial_gte"`
	SerialIn            *[]string               `json:"serial_in"`
	SerialLt            *string                 `json:"serial_lt"`
	SerialLte           *string                 `json:"serial_lte"`
	SerialNot           *string                 `json:"serial_not"`
	SerialNotContains   *string                 `json:"serial_not_contains"`
	SerialNotEndsWith   *string                 `json:"serial_not_ends_with"`
	SerialNotIn         *[]string               `json:"serial_not_in"`
	SerialNotStartsWith *string                 `json:"serial_not_starts_with"`
	SerialStartsWith    *string                 `json:"serial_starts_with"`
	SvtImage            *struct {
		// Embedded struct due to allOf(#/components/schemas/SvtImageWhereInput)
		SvtImageWhereInput `yaml:",inline"`
	} `json:"svt_image"`
	Type *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskType)
		VmDiskType `yaml:",inline"`
	} `json:"type"`
	TypeIn  *[]VmDiskType `json:"type_in"`
	TypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskType)
		VmDiskType `yaml:",inline"`
	} `json:"type_not"`
	TypeNotIn                    *[]VmDiskType `json:"type_not_in"`
	UnsafeImagePath              *string       `json:"unsafe_image_path"`
	UnsafeImagePathContains      *string       `json:"unsafe_image_path_contains"`
	UnsafeImagePathEndsWith      *string       `json:"unsafe_image_path_ends_with"`
	UnsafeImagePathGt            *string       `json:"unsafe_image_path_gt"`
	UnsafeImagePathGte           *string       `json:"unsafe_image_path_gte"`
	UnsafeImagePathIn            *[]string     `json:"unsafe_image_path_in"`
	UnsafeImagePathLt            *string       `json:"unsafe_image_path_lt"`
	UnsafeImagePathLte           *string       `json:"unsafe_image_path_lte"`
	UnsafeImagePathNot           *string       `json:"unsafe_image_path_not"`
	UnsafeImagePathNotContains   *string       `json:"unsafe_image_path_not_contains"`
	UnsafeImagePathNotEndsWith   *string       `json:"unsafe_image_path_not_ends_with"`
	UnsafeImagePathNotIn         *[]string     `json:"unsafe_image_path_not_in"`
	UnsafeImagePathNotStartsWith *string       `json:"unsafe_image_path_not_starts_with"`
	UnsafeImagePathStartsWith    *string       `json:"unsafe_image_path_starts_with"`
	UnsafeImageUuid              *string       `json:"unsafe_image_uuid"`
	UnsafeImageUuidContains      *string       `json:"unsafe_image_uuid_contains"`
	UnsafeImageUuidEndsWith      *string       `json:"unsafe_image_uuid_ends_with"`
	UnsafeImageUuidGt            *string       `json:"unsafe_image_uuid_gt"`
	UnsafeImageUuidGte           *string       `json:"unsafe_image_uuid_gte"`
	UnsafeImageUuidIn            *[]string     `json:"unsafe_image_uuid_in"`
	UnsafeImageUuidLt            *string       `json:"unsafe_image_uuid_lt"`
	UnsafeImageUuidLte           *string       `json:"unsafe_image_uuid_lte"`
	UnsafeImageUuidNot           *string       `json:"unsafe_image_uuid_not"`
	UnsafeImageUuidNotContains   *string       `json:"unsafe_image_uuid_not_contains"`
	UnsafeImageUuidNotEndsWith   *string       `json:"unsafe_image_uuid_not_ends_with"`
	UnsafeImageUuidNotIn         *[]string     `json:"unsafe_image_uuid_not_in"`
	UnsafeImageUuidNotStartsWith *string       `json:"unsafe_image_uuid_not_starts_with"`
	UnsafeImageUuidStartsWith    *string       `json:"unsafe_image_uuid_starts_with"`
	UnsafeProvision              *string       `json:"unsafe_provision"`
	UnsafeProvisionContains      *string       `json:"unsafe_provision_contains"`
	UnsafeProvisionEndsWith      *string       `json:"unsafe_provision_ends_with"`
	UnsafeProvisionGt            *string       `json:"unsafe_provision_gt"`
	UnsafeProvisionGte           *string       `json:"unsafe_provision_gte"`
	UnsafeProvisionIn            *[]string     `json:"unsafe_provision_in"`
	UnsafeProvisionLt            *string       `json:"unsafe_provision_lt"`
	UnsafeProvisionLte           *string       `json:"unsafe_provision_lte"`
	UnsafeProvisionNot           *string       `json:"unsafe_provision_not"`
	UnsafeProvisionNotContains   *string       `json:"unsafe_provision_not_contains"`
	UnsafeProvisionNotEndsWith   *string       `json:"unsafe_provision_not_ends_with"`
	UnsafeProvisionNotIn         *[]string     `json:"unsafe_provision_not_in"`
	UnsafeProvisionNotStartsWith *string       `json:"unsafe_provision_not_starts_with"`
	UnsafeProvisionStartsWith    *string       `json:"unsafe_provision_starts_with"`
	Vm                           *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vm"`
	VmVolume *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeWhereInput)
		VmVolumeWhereInput `yaml:",inline"`
	} `json:"vm_volume"`
}

// VmEntityFilterResult defines model for VmEntityFilterResult.
type VmEntityFilterResult struct {
	EntityFilter struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"entityFilter"`
	Id     string    `json:"id"`
	Result []float64 `json:"result"`
	Vm     struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm"`
}

// VmEntityFilterResultConnection defines model for VmEntityFilterResultConnection.
type VmEntityFilterResultConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmEntityFilterResultOrderByInput defines model for VmEntityFilterResultOrderByInput.
type VmEntityFilterResultOrderByInput string

// VmEntityFilterResultWhereInput defines model for VmEntityFilterResultWhereInput.
type VmEntityFilterResultWhereInput struct {
	AND          *[]VmEntityFilterResultWhereInput `json:"AND"`
	NOT          *[]VmEntityFilterResultWhereInput `json:"NOT"`
	OR           *[]VmEntityFilterResultWhereInput `json:"OR"`
	EntityFilter *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityFilterWhereInput)
		EntityFilterWhereInput `yaml:",inline"`
	} `json:"entityFilter"`
	Id              *string   `json:"id"`
	IdContains      *string   `json:"id_contains"`
	IdEndsWith      *string   `json:"id_ends_with"`
	IdGt            *string   `json:"id_gt"`
	IdGte           *string   `json:"id_gte"`
	IdIn            *[]string `json:"id_in"`
	IdLt            *string   `json:"id_lt"`
	IdLte           *string   `json:"id_lte"`
	IdNot           *string   `json:"id_not"`
	IdNotContains   *string   `json:"id_not_contains"`
	IdNotEndsWith   *string   `json:"id_not_ends_with"`
	IdNotIn         *[]string `json:"id_not_in"`
	IdNotStartsWith *string   `json:"id_not_starts_with"`
	IdStartsWith    *string   `json:"id_starts_with"`
	Vm              *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vm"`
}

// VmFirmware defines model for VmFirmware.
type VmFirmware string

// VmFolder defines model for VmFolder.
type VmFolder struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Id      string   `json:"id"`
	LocalId *string  `json:"local_id"`
	Name    string   `json:"name"`
	VmNum   *float64 `json:"vm_num"`
	Vms     *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vms"`
}

// VmFolderConnection defines model for VmFolderConnection.
type VmFolderConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmFolderCreationParams defines model for VmFolderCreationParams.
type VmFolderCreationParams struct {
	ClusterId string `json:"cluster_id"`
	Name      string `json:"name"`
}

// VmFolderDeletionParams defines model for VmFolderDeletionParams.
type VmFolderDeletionParams struct {
	Where VmFolderWhereInput `json:"where"`
}

// VmFolderOrderByInput defines model for VmFolderOrderByInput.
type VmFolderOrderByInput string

// VmFolderUpdationParams defines model for VmFolderUpdationParams.
type VmFolderUpdationParams struct {
	Data struct {
		Name string `json:"name"`
	} `json:"data"`
	Where VmFolderWhereInput `json:"where"`
}

// VmFolderWhereInput defines model for VmFolderWhereInput.
type VmFolderWhereInput struct {
	AND     *[]VmFolderWhereInput `json:"AND"`
	NOT     *[]VmFolderWhereInput `json:"NOT"`
	OR      *[]VmFolderWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Id                   *string    `json:"id"`
	IdContains           *string    `json:"id_contains"`
	IdEndsWith           *string    `json:"id_ends_with"`
	IdGt                 *string    `json:"id_gt"`
	IdGte                *string    `json:"id_gte"`
	IdIn                 *[]string  `json:"id_in"`
	IdLt                 *string    `json:"id_lt"`
	IdLte                *string    `json:"id_lte"`
	IdNot                *string    `json:"id_not"`
	IdNotContains        *string    `json:"id_not_contains"`
	IdNotEndsWith        *string    `json:"id_not_ends_with"`
	IdNotIn              *[]string  `json:"id_not_in"`
	IdNotStartsWith      *string    `json:"id_not_starts_with"`
	IdStartsWith         *string    `json:"id_starts_with"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	Name                 *string    `json:"name"`
	NameContains         *string    `json:"name_contains"`
	NameEndsWith         *string    `json:"name_ends_with"`
	NameGt               *string    `json:"name_gt"`
	NameGte              *string    `json:"name_gte"`
	NameIn               *[]string  `json:"name_in"`
	NameLt               *string    `json:"name_lt"`
	NameLte              *string    `json:"name_lte"`
	NameNot              *string    `json:"name_not"`
	NameNotContains      *string    `json:"name_not_contains"`
	NameNotEndsWith      *string    `json:"name_not_ends_with"`
	NameNotIn            *[]string  `json:"name_not_in"`
	NameNotStartsWith    *string    `json:"name_not_starts_with"`
	NameStartsWith       *string    `json:"name_starts_with"`
	VmNum                *float64   `json:"vm_num"`
	VmNumGt              *float64   `json:"vm_num_gt"`
	VmNumGte             *float64   `json:"vm_num_gte"`
	VmNumIn              *[]float64 `json:"vm_num_in"`
	VmNumLt              *float64   `json:"vm_num_lt"`
	VmNumLte             *float64   `json:"vm_num_lte"`
	VmNumNot             *float64   `json:"vm_num_not"`
	VmNumNotIn           *[]float64 `json:"vm_num_not_in"`
	VmsEvery             *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_every"`
	VmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_none"`
	VmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_some"`
}

// VmGuestsOperationSystem defines model for VmGuestsOperationSystem.
type VmGuestsOperationSystem string

// VmMigrateParams defines model for VmMigrateParams.
type VmMigrateParams struct {
	Data *struct {
		HostId string `json:"host_id"`
	} `json:"data,omitempty"`
	Where VmWhereInput `json:"where"`
}

// VmNic defines model for VmNic.
type VmNic struct {
	Enabled     *bool   `json:"enabled"`
	Gateway     *string `json:"gateway"`
	Id          string  `json:"id"`
	InterfaceId *string `json:"interface_id"`
	IpAddress   *string `json:"ip_address"`
	LocalId     string  `json:"local_id"`
	MacAddress  *string `json:"mac_address"`
	Mirror      *bool   `json:"mirror"`
	Model       *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicModel)
		VmNicModel `yaml:",inline"`
	} `json:"model"`
	Nic *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"nic"`
	Order      *float64 `json:"order"`
	SubnetMask *string  `json:"subnet_mask"`
	Vlan       *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vlan"`
	Vm struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm"`
}

// VmNicConnection defines model for VmNicConnection.
type VmNicConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmNicModel defines model for VmNicModel.
type VmNicModel string

// VmNicOrderByInput defines model for VmNicOrderByInput.
type VmNicOrderByInput string

// VmNicParams defines model for VmNicParams.
type VmNicParams []struct {
	ConnectVlanId string      `json:"connect_vlan_id"`
	Enabled       *bool       `json:"enabled,omitempty"`
	Gateway       *string     `json:"gateway,omitempty"`
	IpAddress     *string     `json:"ip_address,omitempty"`
	LocalId       *string     `json:"local_id,omitempty"`
	MacAddress    *string     `json:"mac_address,omitempty"`
	Mirror        *bool       `json:"mirror,omitempty"`
	Model         *VmNicModel `json:"model,omitempty"`
	NicId         *string     `json:"nic_id,omitempty"`
	SubnetMask    *string     `json:"subnet_mask,omitempty"`
}

// VmNicWhereInput defines model for VmNicWhereInput.
type VmNicWhereInput struct {
	AND                      *[]VmNicWhereInput `json:"AND"`
	NOT                      *[]VmNicWhereInput `json:"NOT"`
	OR                       *[]VmNicWhereInput `json:"OR"`
	Enabled                  *bool              `json:"enabled"`
	EnabledNot               *bool              `json:"enabled_not"`
	Gateway                  *string            `json:"gateway"`
	GatewayContains          *string            `json:"gateway_contains"`
	GatewayEndsWith          *string            `json:"gateway_ends_with"`
	GatewayGt                *string            `json:"gateway_gt"`
	GatewayGte               *string            `json:"gateway_gte"`
	GatewayIn                *[]string          `json:"gateway_in"`
	GatewayLt                *string            `json:"gateway_lt"`
	GatewayLte               *string            `json:"gateway_lte"`
	GatewayNot               *string            `json:"gateway_not"`
	GatewayNotContains       *string            `json:"gateway_not_contains"`
	GatewayNotEndsWith       *string            `json:"gateway_not_ends_with"`
	GatewayNotIn             *[]string          `json:"gateway_not_in"`
	GatewayNotStartsWith     *string            `json:"gateway_not_starts_with"`
	GatewayStartsWith        *string            `json:"gateway_starts_with"`
	Id                       *string            `json:"id"`
	IdContains               *string            `json:"id_contains"`
	IdEndsWith               *string            `json:"id_ends_with"`
	IdGt                     *string            `json:"id_gt"`
	IdGte                    *string            `json:"id_gte"`
	IdIn                     *[]string          `json:"id_in"`
	IdLt                     *string            `json:"id_lt"`
	IdLte                    *string            `json:"id_lte"`
	IdNot                    *string            `json:"id_not"`
	IdNotContains            *string            `json:"id_not_contains"`
	IdNotEndsWith            *string            `json:"id_not_ends_with"`
	IdNotIn                  *[]string          `json:"id_not_in"`
	IdNotStartsWith          *string            `json:"id_not_starts_with"`
	IdStartsWith             *string            `json:"id_starts_with"`
	InterfaceId              *string            `json:"interface_id"`
	InterfaceIdContains      *string            `json:"interface_id_contains"`
	InterfaceIdEndsWith      *string            `json:"interface_id_ends_with"`
	InterfaceIdGt            *string            `json:"interface_id_gt"`
	InterfaceIdGte           *string            `json:"interface_id_gte"`
	InterfaceIdIn            *[]string          `json:"interface_id_in"`
	InterfaceIdLt            *string            `json:"interface_id_lt"`
	InterfaceIdLte           *string            `json:"interface_id_lte"`
	InterfaceIdNot           *string            `json:"interface_id_not"`
	InterfaceIdNotContains   *string            `json:"interface_id_not_contains"`
	InterfaceIdNotEndsWith   *string            `json:"interface_id_not_ends_with"`
	InterfaceIdNotIn         *[]string          `json:"interface_id_not_in"`
	InterfaceIdNotStartsWith *string            `json:"interface_id_not_starts_with"`
	InterfaceIdStartsWith    *string            `json:"interface_id_starts_with"`
	IpAddress                *string            `json:"ip_address"`
	IpAddressContains        *string            `json:"ip_address_contains"`
	IpAddressEndsWith        *string            `json:"ip_address_ends_with"`
	IpAddressGt              *string            `json:"ip_address_gt"`
	IpAddressGte             *string            `json:"ip_address_gte"`
	IpAddressIn              *[]string          `json:"ip_address_in"`
	IpAddressLt              *string            `json:"ip_address_lt"`
	IpAddressLte             *string            `json:"ip_address_lte"`
	IpAddressNot             *string            `json:"ip_address_not"`
	IpAddressNotContains     *string            `json:"ip_address_not_contains"`
	IpAddressNotEndsWith     *string            `json:"ip_address_not_ends_with"`
	IpAddressNotIn           *[]string          `json:"ip_address_not_in"`
	IpAddressNotStartsWith   *string            `json:"ip_address_not_starts_with"`
	IpAddressStartsWith      *string            `json:"ip_address_starts_with"`
	LocalId                  *string            `json:"local_id"`
	LocalIdContains          *string            `json:"local_id_contains"`
	LocalIdEndsWith          *string            `json:"local_id_ends_with"`
	LocalIdGt                *string            `json:"local_id_gt"`
	LocalIdGte               *string            `json:"local_id_gte"`
	LocalIdIn                *[]string          `json:"local_id_in"`
	LocalIdLt                *string            `json:"local_id_lt"`
	LocalIdLte               *string            `json:"local_id_lte"`
	LocalIdNot               *string            `json:"local_id_not"`
	LocalIdNotContains       *string            `json:"local_id_not_contains"`
	LocalIdNotEndsWith       *string            `json:"local_id_not_ends_with"`
	LocalIdNotIn             *[]string          `json:"local_id_not_in"`
	LocalIdNotStartsWith     *string            `json:"local_id_not_starts_with"`
	LocalIdStartsWith        *string            `json:"local_id_starts_with"`
	MacAddress               *string            `json:"mac_address"`
	MacAddressContains       *string            `json:"mac_address_contains"`
	MacAddressEndsWith       *string            `json:"mac_address_ends_with"`
	MacAddressGt             *string            `json:"mac_address_gt"`
	MacAddressGte            *string            `json:"mac_address_gte"`
	MacAddressIn             *[]string          `json:"mac_address_in"`
	MacAddressLt             *string            `json:"mac_address_lt"`
	MacAddressLte            *string            `json:"mac_address_lte"`
	MacAddressNot            *string            `json:"mac_address_not"`
	MacAddressNotContains    *string            `json:"mac_address_not_contains"`
	MacAddressNotEndsWith    *string            `json:"mac_address_not_ends_with"`
	MacAddressNotIn          *[]string          `json:"mac_address_not_in"`
	MacAddressNotStartsWith  *string            `json:"mac_address_not_starts_with"`
	MacAddressStartsWith     *string            `json:"mac_address_starts_with"`
	Mirror                   *bool              `json:"mirror"`
	MirrorNot                *bool              `json:"mirror_not"`
	Model                    *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicModel)
		VmNicModel `yaml:",inline"`
	} `json:"model"`
	ModelIn  *[]VmNicModel `json:"model_in"`
	ModelNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicModel)
		VmNicModel `yaml:",inline"`
	} `json:"model_not"`
	ModelNotIn *[]VmNicModel `json:"model_not_in"`
	Nic        *struct {
		// Embedded struct due to allOf(#/components/schemas/NicWhereInput)
		NicWhereInput `yaml:",inline"`
	} `json:"nic"`
	Order                   *float64   `json:"order"`
	OrderGt                 *float64   `json:"order_gt"`
	OrderGte                *float64   `json:"order_gte"`
	OrderIn                 *[]float64 `json:"order_in"`
	OrderLt                 *float64   `json:"order_lt"`
	OrderLte                *float64   `json:"order_lte"`
	OrderNot                *float64   `json:"order_not"`
	OrderNotIn              *[]float64 `json:"order_not_in"`
	SubnetMask              *string    `json:"subnet_mask"`
	SubnetMaskContains      *string    `json:"subnet_mask_contains"`
	SubnetMaskEndsWith      *string    `json:"subnet_mask_ends_with"`
	SubnetMaskGt            *string    `json:"subnet_mask_gt"`
	SubnetMaskGte           *string    `json:"subnet_mask_gte"`
	SubnetMaskIn            *[]string  `json:"subnet_mask_in"`
	SubnetMaskLt            *string    `json:"subnet_mask_lt"`
	SubnetMaskLte           *string    `json:"subnet_mask_lte"`
	SubnetMaskNot           *string    `json:"subnet_mask_not"`
	SubnetMaskNotContains   *string    `json:"subnet_mask_not_contains"`
	SubnetMaskNotEndsWith   *string    `json:"subnet_mask_not_ends_with"`
	SubnetMaskNotIn         *[]string  `json:"subnet_mask_not_in"`
	SubnetMaskNotStartsWith *string    `json:"subnet_mask_not_starts_with"`
	SubnetMaskStartsWith    *string    `json:"subnet_mask_starts_with"`
	Vlan                    *struct {
		// Embedded struct due to allOf(#/components/schemas/VlanWhereInput)
		VlanWhereInput `yaml:",inline"`
	} `json:"vlan"`
	Vm *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vm"`
}

// VmOperateParams defines model for VmOperateParams.
type VmOperateParams struct {
	Where VmWhereInput `json:"where"`
}

// VmOrderByInput defines model for VmOrderByInput.
type VmOrderByInput string

// VmPlacementGroup defines model for VmPlacementGroup.
type VmPlacementGroup struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description       string `json:"description"`
	Enabled           bool   `json:"enabled"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Id                  string `json:"id"`
	LocalCreatedAt      string `json:"local_created_at"`
	LocalId             string `json:"local_id"`
	LocalUpdatedAt      string `json:"local_updated_at"`
	Name                string `json:"name"`
	VmHostMustEnabled   bool   `json:"vm_host_must_enabled"`
	VmHostMustHostUuids *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_host_must_host_uuids"`
	VmHostMustPolicy      bool `json:"vm_host_must_policy"`
	VmHostPreferEnabled   bool `json:"vm_host_prefer_enabled"`
	VmHostPreferHostUuids *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm_host_prefer_host_uuids"`
	VmHostPreferPolicy bool       `json:"vm_host_prefer_policy"`
	VmVmPolicy         VmVmPolicy `json:"vm_vm_policy"`
	VmVmPolicyEnabled  bool       `json:"vm_vm_policy_enabled"`
	Vms                *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vms"`
}

// VmPlacementGroupConnection defines model for VmPlacementGroupConnection.
type VmPlacementGroupConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmPlacementGroupCreationParams defines model for VmPlacementGroupCreationParams.
type VmPlacementGroupCreationParams struct {
	ClusterId           string          `json:"cluster_id"`
	Description         *string         `json:"description,omitempty"`
	Enabled             bool            `json:"enabled"`
	MustHosts           *HostWhereInput `json:"must_hosts,omitempty"`
	Name                string          `json:"name"`
	PreferHosts         *HostWhereInput `json:"prefer_hosts,omitempty"`
	VmHostMustEnabled   *bool           `json:"vm_host_must_enabled,omitempty"`
	VmHostMustPolicy    *bool           `json:"vm_host_must_policy,omitempty"`
	VmHostPreferEnabled *bool           `json:"vm_host_prefer_enabled,omitempty"`
	VmHostPreferPolicy  *bool           `json:"vm_host_prefer_policy,omitempty"`
	VmVmPolicy          *VmVmPolicy     `json:"vm_vm_policy,omitempty"`
	VmVmPolicyEnabled   *bool           `json:"vm_vm_policy_enabled,omitempty"`
	Vms                 *VmWhereInput   `json:"vms,omitempty"`
}

// VmPlacementGroupDeletionParams defines model for VmPlacementGroupDeletionParams.
type VmPlacementGroupDeletionParams struct {
	Where VmPlacementGroupWhereInput `json:"where"`
}

// VmPlacementGroupOrderByInput defines model for VmPlacementGroupOrderByInput.
type VmPlacementGroupOrderByInput string

// VmPlacementGroupUpdationParams defines model for VmPlacementGroupUpdationParams.
type VmPlacementGroupUpdationParams struct {
	Data struct {
		Description         *string         `json:"description,omitempty"`
		Enabled             *bool           `json:"enabled,omitempty"`
		MustHosts           *HostWhereInput `json:"must_hosts,omitempty"`
		Name                *string         `json:"name,omitempty"`
		PreferHosts         *HostWhereInput `json:"prefer_hosts,omitempty"`
		VmHostMustEnabled   *bool           `json:"vm_host_must_enabled,omitempty"`
		VmHostMustPolicy    *bool           `json:"vm_host_must_policy,omitempty"`
		VmHostPreferEnabled *bool           `json:"vm_host_prefer_enabled,omitempty"`
		VmHostPreferPolicy  *bool           `json:"vm_host_prefer_policy,omitempty"`
		VmVmPolicy          *VmVmPolicy     `json:"vm_vm_policy,omitempty"`
		VmVmPolicyEnabled   *bool           `json:"vm_vm_policy_enabled,omitempty"`
		Vms                 *VmWhereInput   `json:"vms,omitempty"`
	} `json:"data"`
	Where VmPlacementGroupWhereInput `json:"where"`
}

// VmPlacementGroupWhereInput defines model for VmPlacementGroupWhereInput.
type VmPlacementGroupWhereInput struct {
	AND     *[]VmPlacementGroupWhereInput `json:"AND"`
	NOT     *[]VmPlacementGroupWhereInput `json:"NOT"`
	OR      *[]VmPlacementGroupWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	Enabled                  *bool     `json:"enabled"`
	EnabledNot               *bool     `json:"enabled_not"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn   *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Id                       *string              `json:"id"`
	IdContains               *string              `json:"id_contains"`
	IdEndsWith               *string              `json:"id_ends_with"`
	IdGt                     *string              `json:"id_gt"`
	IdGte                    *string              `json:"id_gte"`
	IdIn                     *[]string            `json:"id_in"`
	IdLt                     *string              `json:"id_lt"`
	IdLte                    *string              `json:"id_lte"`
	IdNot                    *string              `json:"id_not"`
	IdNotContains            *string              `json:"id_not_contains"`
	IdNotEndsWith            *string              `json:"id_not_ends_with"`
	IdNotIn                  *[]string            `json:"id_not_in"`
	IdNotStartsWith          *string              `json:"id_not_starts_with"`
	IdStartsWith             *string              `json:"id_starts_with"`
	LocalCreatedAt           *string              `json:"local_created_at"`
	LocalCreatedAtGt         *string              `json:"local_created_at_gt"`
	LocalCreatedAtGte        *string              `json:"local_created_at_gte"`
	LocalCreatedAtIn         *[]string            `json:"local_created_at_in"`
	LocalCreatedAtLt         *string              `json:"local_created_at_lt"`
	LocalCreatedAtLte        *string              `json:"local_created_at_lte"`
	LocalCreatedAtNot        *string              `json:"local_created_at_not"`
	LocalCreatedAtNotIn      *[]string            `json:"local_created_at_not_in"`
	LocalId                  *string              `json:"local_id"`
	LocalIdContains          *string              `json:"local_id_contains"`
	LocalIdEndsWith          *string              `json:"local_id_ends_with"`
	LocalIdGt                *string              `json:"local_id_gt"`
	LocalIdGte               *string              `json:"local_id_gte"`
	LocalIdIn                *[]string            `json:"local_id_in"`
	LocalIdLt                *string              `json:"local_id_lt"`
	LocalIdLte               *string              `json:"local_id_lte"`
	LocalIdNot               *string              `json:"local_id_not"`
	LocalIdNotContains       *string              `json:"local_id_not_contains"`
	LocalIdNotEndsWith       *string              `json:"local_id_not_ends_with"`
	LocalIdNotIn             *[]string            `json:"local_id_not_in"`
	LocalIdNotStartsWith     *string              `json:"local_id_not_starts_with"`
	LocalIdStartsWith        *string              `json:"local_id_starts_with"`
	LocalUpdatedAt           *string              `json:"local_updated_at"`
	LocalUpdatedAtGt         *string              `json:"local_updated_at_gt"`
	LocalUpdatedAtGte        *string              `json:"local_updated_at_gte"`
	LocalUpdatedAtIn         *[]string            `json:"local_updated_at_in"`
	LocalUpdatedAtLt         *string              `json:"local_updated_at_lt"`
	LocalUpdatedAtLte        *string              `json:"local_updated_at_lte"`
	LocalUpdatedAtNot        *string              `json:"local_updated_at_not"`
	LocalUpdatedAtNotIn      *[]string            `json:"local_updated_at_not_in"`
	Name                     *string              `json:"name"`
	NameContains             *string              `json:"name_contains"`
	NameEndsWith             *string              `json:"name_ends_with"`
	NameGt                   *string              `json:"name_gt"`
	NameGte                  *string              `json:"name_gte"`
	NameIn                   *[]string            `json:"name_in"`
	NameLt                   *string              `json:"name_lt"`
	NameLte                  *string              `json:"name_lte"`
	NameNot                  *string              `json:"name_not"`
	NameNotContains          *string              `json:"name_not_contains"`
	NameNotEndsWith          *string              `json:"name_not_ends_with"`
	NameNotIn                *[]string            `json:"name_not_in"`
	NameNotStartsWith        *string              `json:"name_not_starts_with"`
	NameStartsWith           *string              `json:"name_starts_with"`
	VmHostMustEnabled        *bool                `json:"vm_host_must_enabled"`
	VmHostMustEnabledNot     *bool                `json:"vm_host_must_enabled_not"`
	VmHostMustHostUuidsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"vm_host_must_host_uuids_every"`
	VmHostMustHostUuidsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"vm_host_must_host_uuids_none"`
	VmHostMustHostUuidsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"vm_host_must_host_uuids_some"`
	VmHostMustPolicy           *bool `json:"vm_host_must_policy"`
	VmHostMustPolicyNot        *bool `json:"vm_host_must_policy_not"`
	VmHostPreferEnabled        *bool `json:"vm_host_prefer_enabled"`
	VmHostPreferEnabledNot     *bool `json:"vm_host_prefer_enabled_not"`
	VmHostPreferHostUuidsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"vm_host_prefer_host_uuids_every"`
	VmHostPreferHostUuidsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"vm_host_prefer_host_uuids_none"`
	VmHostPreferHostUuidsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"vm_host_prefer_host_uuids_some"`
	VmHostPreferPolicy    *bool `json:"vm_host_prefer_policy"`
	VmHostPreferPolicyNot *bool `json:"vm_host_prefer_policy_not"`
	VmVmPolicy            *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVmPolicy)
		VmVmPolicy `yaml:",inline"`
	} `json:"vm_vm_policy"`
	VmVmPolicyEnabled    *bool         `json:"vm_vm_policy_enabled"`
	VmVmPolicyEnabledNot *bool         `json:"vm_vm_policy_enabled_not"`
	VmVmPolicyIn         *[]VmVmPolicy `json:"vm_vm_policy_in"`
	VmVmPolicyNot        *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVmPolicy)
		VmVmPolicy `yaml:",inline"`
	} `json:"vm_vm_policy_not"`
	VmVmPolicyNotIn *[]VmVmPolicy `json:"vm_vm_policy_not_in"`
	VmsEvery        *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_every"`
	VmsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_none"`
	VmsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vms_some"`
}

// VmRebuildParams defines model for VmRebuildParams.
type VmRebuildParams struct {
	ClusterId             string                   `json:"cluster_id"`
	CpuCores              *float64                 `json:"cpu_cores,omitempty"`
	CpuSockets            *float64                 `json:"cpu_sockets,omitempty"`
	Description           *string                  `json:"description,omitempty"`
	Firmware              *VmFirmware              `json:"firmware,omitempty"`
	FolderId              *string                  `json:"folder_id,omitempty"`
	GuestOsType           *VmGuestsOperationSystem `json:"guest_os_type,omitempty"`
	Ha                    *bool                    `json:"ha,omitempty"`
	HostId                *string                  `json:"host_id,omitempty"`
	IoPolicy              *VmDiskIoPolicy          `json:"io_policy,omitempty"`
	MaxBandwidth          *float64                 `json:"max_bandwidth,omitempty"`
	MaxBandwidthPolicy    *VmDiskIoRestrictType    `json:"max_bandwidth_policy,omitempty"`
	MaxIops               *float64                 `json:"max_iops,omitempty"`
	MaxIopsPolicy         *VmDiskIoRestrictType    `json:"max_iops_policy,omitempty"`
	Memory                *float64                 `json:"memory,omitempty"`
	Name                  string                   `json:"name"`
	RebuildFromSnapshotId string                   `json:"rebuild_from_snapshot_id"`
	Status                *VmStatus                `json:"status,omitempty"`
	Vcpu                  *float64                 `json:"vcpu,omitempty"`
	VmDisks               *VmDiskParams            `json:"vm_disks,omitempty"`
	VmNics                *VmNicParams             `json:"vm_nics,omitempty"`
}

// VmRemoveCdRomParams defines model for VmRemoveCdRomParams.
type VmRemoveCdRomParams struct {
	Data struct {
		CdRomIds []string `json:"cd_rom_ids"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmRemoveDiskParams defines model for VmRemoveDiskParams.
type VmRemoveDiskParams struct {
	Data struct {
		DiskIds []string `json:"disk_ids"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmRemoveNicParams defines model for VmRemoveNicParams.
type VmRemoveNicParams struct {
	Data struct {
		NicIndex []float64 `json:"nic_index"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmRollbackParams defines model for VmRollbackParams.
type VmRollbackParams struct {
	Data struct {
		SnapshotId string `json:"snapshot_id"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmSnapshot defines model for VmSnapshot.
type VmSnapshot struct {
	ClockOffset VmClockOffset `json:"clock_offset"`
	Cluster     struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	ConsistentType ConsistentType `json:"consistent_type"`
	Cpu            struct {
		Cores   float64 `json:"cores"`
		Sockets float64 `json:"sockets"`
	} `json:"cpu"`
	CpuModel          string `json:"cpu_model"`
	Description       string `json:"description"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Firmware VmFirmware `json:"firmware"`
	Ha       bool       `json:"ha"`
	Id       string     `json:"id"`
	IoPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt     *string  `json:"local_created_at"`
	LocalId            string   `json:"local_id"`
	MaxBandwidth       *float64 `json:"max_bandwidth"`
	MaxBandwidthPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy"`
	MaxIops       *float64 `json:"max_iops"`
	MaxIopsPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy"`
	Memory        float64 `json:"memory"`
	Name          string  `json:"name"`
	Size          float64 `json:"size"`
	SnapshotGroup *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"snapshot_group"`
	Vcpu float64 `json:"vcpu"`
	Vm   *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"vm"`
	VmDisks *[]struct {
		Boot               float64  `json:"boot"`
		Bus                Bus      `json:"bus"`
		Disabled           *bool    `json:"disabled"`
		DiskName           *string  `json:"disk_name"`
		ElfImageLocalId    string   `json:"elf_image_local_id"`
		ImageName          *string  `json:"image_name"`
		Index              float64  `json:"index"`
		Key                *float64 `json:"key"`
		MaxBandwidth       *float64 `json:"max_bandwidth"`
		MaxBandwidthPolicy *struct {
			// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
			VmDiskIoRestrictType `yaml:",inline"`
		} `json:"max_bandwidth_policy"`
		MaxIops       *float64 `json:"max_iops"`
		MaxIopsPolicy *struct {
			// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
			VmDiskIoRestrictType `yaml:",inline"`
		} `json:"max_iops_policy"`
		Path              string     `json:"path"`
		Size              float64    `json:"size"`
		SnapshotLocalId   *string    `json:"snapshot_local_id"`
		StoragePolicyUuid string     `json:"storage_policy_uuid"`
		SvtImageLocalId   string     `json:"svt_image_local_id"`
		Type              VmDiskType `json:"type"`
		VmVolumeLocalId   string     `json:"vm_volume_local_id"`
	} `json:"vm_disks"`
	VmNics *[]struct {
		Enabled    *bool   `json:"enabled"`
		Gateway    string  `json:"gateway"`
		Index      float64 `json:"index"`
		IpAddress  string  `json:"ip_address"`
		MacAddress string  `json:"mac_address"`
		Mirror     *bool   `json:"mirror"`
		Model      *struct {
			// Embedded struct due to allOf(#/components/schemas/VmNicModel)
			VmNicModel `yaml:",inline"`
		} `json:"model"`
		SubnetMask string `json:"subnet_mask"`
		Vlan       struct {
			Name        string  `json:"name"`
			VdsOvs      string  `json:"vds_ovs"`
			VlanId      float64 `json:"vlan_id"`
			VlanLocalId string  `json:"vlan_local_id"`
		} `json:"vlan"`
	} `json:"vm_nics"`
	WinOpt bool `json:"win_opt"`
}

// VmSnapshotConnection defines model for VmSnapshotConnection.
type VmSnapshotConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmSnapshotCreationParams defines model for VmSnapshotCreationParams.
type VmSnapshotCreationParams struct {
	Data []struct {
		ConsistentType *ConsistentType `json:"consistent_type,omitempty"`
		Name           string          `json:"name"`
		VmId           string          `json:"vm_id"`
	} `json:"data"`
}

// VmSnapshotDeletionParams defines model for VmSnapshotDeletionParams.
type VmSnapshotDeletionParams struct {
	Where VmSnapshotWhereInput `json:"where"`
}

// VmSnapshotOrderByInput defines model for VmSnapshotOrderByInput.
type VmSnapshotOrderByInput string

// VmSnapshotWhereInput defines model for VmSnapshotWhereInput.
type VmSnapshotWhereInput struct {
	AND         *[]VmSnapshotWhereInput `json:"AND"`
	NOT         *[]VmSnapshotWhereInput `json:"NOT"`
	OR          *[]VmSnapshotWhereInput `json:"OR"`
	ClockOffset *struct {
		// Embedded struct due to allOf(#/components/schemas/VmClockOffset)
		VmClockOffset `yaml:",inline"`
	} `json:"clock_offset"`
	ClockOffsetIn  *[]VmClockOffset `json:"clock_offset_in"`
	ClockOffsetNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmClockOffset)
		VmClockOffset `yaml:",inline"`
	} `json:"clock_offset_not"`
	ClockOffsetNotIn *[]VmClockOffset `json:"clock_offset_not_in"`
	Cluster          *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	ConsistentType *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistentType)
		ConsistentType `yaml:",inline"`
	} `json:"consistent_type"`
	ConsistentTypeIn  *[]ConsistentType `json:"consistent_type_in"`
	ConsistentTypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/ConsistentType)
		ConsistentType `yaml:",inline"`
	} `json:"consistent_type_not"`
	ConsistentTypeNotIn      *[]ConsistentType `json:"consistent_type_not_in"`
	CpuModel                 *string           `json:"cpu_model"`
	CpuModelContains         *string           `json:"cpu_model_contains"`
	CpuModelEndsWith         *string           `json:"cpu_model_ends_with"`
	CpuModelGt               *string           `json:"cpu_model_gt"`
	CpuModelGte              *string           `json:"cpu_model_gte"`
	CpuModelIn               *[]string         `json:"cpu_model_in"`
	CpuModelLt               *string           `json:"cpu_model_lt"`
	CpuModelLte              *string           `json:"cpu_model_lte"`
	CpuModelNot              *string           `json:"cpu_model_not"`
	CpuModelNotContains      *string           `json:"cpu_model_not_contains"`
	CpuModelNotEndsWith      *string           `json:"cpu_model_not_ends_with"`
	CpuModelNotIn            *[]string         `json:"cpu_model_not_in"`
	CpuModelNotStartsWith    *string           `json:"cpu_model_not_starts_with"`
	CpuModelStartsWith       *string           `json:"cpu_model_starts_with"`
	Description              *string           `json:"description"`
	DescriptionContains      *string           `json:"description_contains"`
	DescriptionEndsWith      *string           `json:"description_ends_with"`
	DescriptionGt            *string           `json:"description_gt"`
	DescriptionGte           *string           `json:"description_gte"`
	DescriptionIn            *[]string         `json:"description_in"`
	DescriptionLt            *string           `json:"description_lt"`
	DescriptionLte           *string           `json:"description_lte"`
	DescriptionNot           *string           `json:"description_not"`
	DescriptionNotContains   *string           `json:"description_not_contains"`
	DescriptionNotEndsWith   *string           `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string         `json:"description_not_in"`
	DescriptionNotStartsWith *string           `json:"description_not_starts_with"`
	DescriptionStartsWith    *string           `json:"description_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Firmware               *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFirmware)
		VmFirmware `yaml:",inline"`
	} `json:"firmware"`
	FirmwareIn  *[]VmFirmware `json:"firmware_in"`
	FirmwareNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFirmware)
		VmFirmware `yaml:",inline"`
	} `json:"firmware_not"`
	FirmwareNotIn   *[]VmFirmware `json:"firmware_not_in"`
	Ha              *bool         `json:"ha"`
	HaNot           *bool         `json:"ha_not"`
	Id              *string       `json:"id"`
	IdContains      *string       `json:"id_contains"`
	IdEndsWith      *string       `json:"id_ends_with"`
	IdGt            *string       `json:"id_gt"`
	IdGte           *string       `json:"id_gte"`
	IdIn            *[]string     `json:"id_in"`
	IdLt            *string       `json:"id_lt"`
	IdLte           *string       `json:"id_lte"`
	IdNot           *string       `json:"id_not"`
	IdNotContains   *string       `json:"id_not_contains"`
	IdNotEndsWith   *string       `json:"id_not_ends_with"`
	IdNotIn         *[]string     `json:"id_not_in"`
	IdNotStartsWith *string       `json:"id_not_starts_with"`
	IdStartsWith    *string       `json:"id_starts_with"`
	IoPolicy        *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy"`
	IoPolicyIn  *[]VmDiskIoPolicy `json:"io_policy_in"`
	IoPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy_not"`
	IoPolicyNotIn *[]VmDiskIoPolicy `json:"io_policy_not_in"`
	LabelsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt       *string    `json:"local_created_at"`
	LocalCreatedAtGt     *string    `json:"local_created_at_gt"`
	LocalCreatedAtGte    *string    `json:"local_created_at_gte"`
	LocalCreatedAtIn     *[]string  `json:"local_created_at_in"`
	LocalCreatedAtLt     *string    `json:"local_created_at_lt"`
	LocalCreatedAtLte    *string    `json:"local_created_at_lte"`
	LocalCreatedAtNot    *string    `json:"local_created_at_not"`
	LocalCreatedAtNotIn  *[]string  `json:"local_created_at_not_in"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	MaxBandwidth         *float64   `json:"max_bandwidth"`
	MaxBandwidthGt       *float64   `json:"max_bandwidth_gt"`
	MaxBandwidthGte      *float64   `json:"max_bandwidth_gte"`
	MaxBandwidthIn       *[]float64 `json:"max_bandwidth_in"`
	MaxBandwidthLt       *float64   `json:"max_bandwidth_lt"`
	MaxBandwidthLte      *float64   `json:"max_bandwidth_lte"`
	MaxBandwidthNot      *float64   `json:"max_bandwidth_not"`
	MaxBandwidthNotIn    *[]float64 `json:"max_bandwidth_not_in"`
	MaxBandwidthPolicy   *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy"`
	MaxBandwidthPolicyIn  *[]VmDiskIoRestrictType `json:"max_bandwidth_policy_in"`
	MaxBandwidthPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy_not"`
	MaxBandwidthPolicyNotIn *[]VmDiskIoRestrictType `json:"max_bandwidth_policy_not_in"`
	MaxIops                 *float64                `json:"max_iops"`
	MaxIopsGt               *float64                `json:"max_iops_gt"`
	MaxIopsGte              *float64                `json:"max_iops_gte"`
	MaxIopsIn               *[]float64              `json:"max_iops_in"`
	MaxIopsLt               *float64                `json:"max_iops_lt"`
	MaxIopsLte              *float64                `json:"max_iops_lte"`
	MaxIopsNot              *float64                `json:"max_iops_not"`
	MaxIopsNotIn            *[]float64              `json:"max_iops_not_in"`
	MaxIopsPolicy           *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy"`
	MaxIopsPolicyIn  *[]VmDiskIoRestrictType `json:"max_iops_policy_in"`
	MaxIopsPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy_not"`
	MaxIopsPolicyNotIn *[]VmDiskIoRestrictType `json:"max_iops_policy_not_in"`
	Memory             *float64                `json:"memory"`
	MemoryGt           *float64                `json:"memory_gt"`
	MemoryGte          *float64                `json:"memory_gte"`
	MemoryIn           *[]float64              `json:"memory_in"`
	MemoryLt           *float64                `json:"memory_lt"`
	MemoryLte          *float64                `json:"memory_lte"`
	MemoryNot          *float64                `json:"memory_not"`
	MemoryNotIn        *[]float64              `json:"memory_not_in"`
	Name               *string                 `json:"name"`
	NameContains       *string                 `json:"name_contains"`
	NameEndsWith       *string                 `json:"name_ends_with"`
	NameGt             *string                 `json:"name_gt"`
	NameGte            *string                 `json:"name_gte"`
	NameIn             *[]string               `json:"name_in"`
	NameLt             *string                 `json:"name_lt"`
	NameLte            *string                 `json:"name_lte"`
	NameNot            *string                 `json:"name_not"`
	NameNotContains    *string                 `json:"name_not_contains"`
	NameNotEndsWith    *string                 `json:"name_not_ends_with"`
	NameNotIn          *[]string               `json:"name_not_in"`
	NameNotStartsWith  *string                 `json:"name_not_starts_with"`
	NameStartsWith     *string                 `json:"name_starts_with"`
	Size               *float64                `json:"size"`
	SizeGt             *float64                `json:"size_gt"`
	SizeGte            *float64                `json:"size_gte"`
	SizeIn             *[]float64              `json:"size_in"`
	SizeLt             *float64                `json:"size_lt"`
	SizeLte            *float64                `json:"size_lte"`
	SizeNot            *float64                `json:"size_not"`
	SizeNotIn          *[]float64              `json:"size_not_in"`
	SnapshotGroup      *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotGroupWhereInput)
		SnapshotGroupWhereInput `yaml:",inline"`
	} `json:"snapshot_group"`
	Vcpu      *float64   `json:"vcpu"`
	VcpuGt    *float64   `json:"vcpu_gt"`
	VcpuGte   *float64   `json:"vcpu_gte"`
	VcpuIn    *[]float64 `json:"vcpu_in"`
	VcpuLt    *float64   `json:"vcpu_lt"`
	VcpuLte   *float64   `json:"vcpu_lte"`
	VcpuNot   *float64   `json:"vcpu_not"`
	VcpuNotIn *[]float64 `json:"vcpu_not_in"`
	Vm        *struct {
		// Embedded struct due to allOf(#/components/schemas/VmWhereInput)
		VmWhereInput `yaml:",inline"`
	} `json:"vm"`
	WinOpt    *bool `json:"win_opt"`
	WinOptNot *bool `json:"win_opt_not"`
}

// VmStartParams defines model for VmStartParams.
type VmStartParams struct {
	Data *struct {
		HostId string `json:"host_id"`
	} `json:"data,omitempty"`
	Where VmWhereInput `json:"where"`
}

// VmStatus defines model for VmStatus.
type VmStatus string

// VmTemplate defines model for VmTemplate.
type VmTemplate struct {
	ClockOffset        VmClockOffset `json:"clock_offset"`
	CloudInitSupported bool          `json:"cloud_init_supported"`
	Cluster            struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Cpu struct {
		Cores   float64 `json:"cores"`
		Sockets float64 `json:"sockets"`
	} `json:"cpu"`
	CpuModel          string `json:"cpu_model"`
	Description       string `json:"description"`
	EntityAsyncStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	Firmware VmFirmware `json:"firmware"`
	Ha       bool       `json:"ha"`
	Id       string     `json:"id"`
	IoPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy"`
	Labels *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt     *string  `json:"local_created_at"`
	LocalId            string   `json:"local_id"`
	MaxBandwidth       *float64 `json:"max_bandwidth"`
	MaxBandwidthPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy"`
	MaxIops       *float64 `json:"max_iops"`
	MaxIopsPolicy *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy"`
	Memory    float64 `json:"memory"`
	Name      string  `json:"name"`
	Size      float64 `json:"size"`
	Vcpu      float64 `json:"vcpu"`
	VideoType *string `json:"video_type"`
	VmDisks   *[]struct {
		Boot               float64  `json:"boot"`
		Bus                Bus      `json:"bus"`
		Disabled           *bool    `json:"disabled"`
		DiskName           *string  `json:"disk_name"`
		ElfImageLocalId    string   `json:"elf_image_local_id"`
		ImageName          *string  `json:"image_name"`
		Index              float64  `json:"index"`
		Key                *float64 `json:"key"`
		MaxBandwidth       *float64 `json:"max_bandwidth"`
		MaxBandwidthPolicy *struct {
			// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
			VmDiskIoRestrictType `yaml:",inline"`
		} `json:"max_bandwidth_policy"`
		MaxIops       *float64 `json:"max_iops"`
		MaxIopsPolicy *struct {
			// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
			VmDiskIoRestrictType `yaml:",inline"`
		} `json:"max_iops_policy"`
		Path              string     `json:"path"`
		Size              float64    `json:"size"`
		SnapshotLocalId   *string    `json:"snapshot_local_id"`
		StoragePolicyUuid string     `json:"storage_policy_uuid"`
		SvtImageLocalId   string     `json:"svt_image_local_id"`
		Type              VmDiskType `json:"type"`
		VmVolumeLocalId   string     `json:"vm_volume_local_id"`
	} `json:"vm_disks"`
	VmNics *[]struct {
		Enabled    *bool   `json:"enabled"`
		Index      float64 `json:"index"`
		IpAddress  *string `json:"ip_address"`
		MacAddress *string `json:"mac_address"`
		Mirror     *bool   `json:"mirror"`
		Model      *struct {
			// Embedded struct due to allOf(#/components/schemas/VmNicModel)
			VmNicModel `yaml:",inline"`
		} `json:"model"`
		Vlan struct {
			Name        string  `json:"name"`
			VdsOvs      string  `json:"vds_ovs"`
			VlanId      float64 `json:"vlan_id"`
			VlanLocalId string  `json:"vlan_local_id"`
		} `json:"vlan"`
	} `json:"vm_nics"`
	WinOpt bool `json:"win_opt"`
}

// VmTemplateConnection defines model for VmTemplateConnection.
type VmTemplateConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmTemplateCreationParams defines model for VmTemplateCreationParams.
type VmTemplateCreationParams struct {
	CloudInitSupported bool    `json:"cloud_init_supported"`
	ClusterId          string  `json:"cluster_id"`
	Description        *string `json:"description,omitempty"`
	Name               string  `json:"name"`
	VmId               string  `json:"vm_id"`
}

// VmTemplateDeletionParams defines model for VmTemplateDeletionParams.
type VmTemplateDeletionParams struct {
	Where VmTemplateWhereInput `json:"where"`
}

// VmTemplateOrderByInput defines model for VmTemplateOrderByInput.
type VmTemplateOrderByInput string

// VmTemplateUpdationParams defines model for VmTemplateUpdationParams.
type VmTemplateUpdationParams struct {
	Data *struct {
		CloudInitSupported *bool   `json:"cloud_init_supported,omitempty"`
		Description        *string `json:"description,omitempty"`
		Name               *string `json:"name,omitempty"`
	} `json:"data,omitempty"`
	Where VmTemplateWhereInput `json:"where"`
}

// VmTemplateWhereInput defines model for VmTemplateWhereInput.
type VmTemplateWhereInput struct {
	AND         *[]VmTemplateWhereInput `json:"AND"`
	NOT         *[]VmTemplateWhereInput `json:"NOT"`
	OR          *[]VmTemplateWhereInput `json:"OR"`
	ClockOffset *struct {
		// Embedded struct due to allOf(#/components/schemas/VmClockOffset)
		VmClockOffset `yaml:",inline"`
	} `json:"clock_offset"`
	ClockOffsetIn  *[]VmClockOffset `json:"clock_offset_in"`
	ClockOffsetNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmClockOffset)
		VmClockOffset `yaml:",inline"`
	} `json:"clock_offset_not"`
	ClockOffsetNotIn      *[]VmClockOffset `json:"clock_offset_not_in"`
	CloudInitSupported    *bool            `json:"cloud_init_supported"`
	CloudInitSupportedNot *bool            `json:"cloud_init_supported_not"`
	Cluster               *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	CpuModel                 *string   `json:"cpu_model"`
	CpuModelContains         *string   `json:"cpu_model_contains"`
	CpuModelEndsWith         *string   `json:"cpu_model_ends_with"`
	CpuModelGt               *string   `json:"cpu_model_gt"`
	CpuModelGte              *string   `json:"cpu_model_gte"`
	CpuModelIn               *[]string `json:"cpu_model_in"`
	CpuModelLt               *string   `json:"cpu_model_lt"`
	CpuModelLte              *string   `json:"cpu_model_lte"`
	CpuModelNot              *string   `json:"cpu_model_not"`
	CpuModelNotContains      *string   `json:"cpu_model_not_contains"`
	CpuModelNotEndsWith      *string   `json:"cpu_model_not_ends_with"`
	CpuModelNotIn            *[]string `json:"cpu_model_not_in"`
	CpuModelNotStartsWith    *string   `json:"cpu_model_not_starts_with"`
	CpuModelStartsWith       *string   `json:"cpu_model_starts_with"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	Firmware               *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFirmware)
		VmFirmware `yaml:",inline"`
	} `json:"firmware"`
	FirmwareIn  *[]VmFirmware `json:"firmware_in"`
	FirmwareNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFirmware)
		VmFirmware `yaml:",inline"`
	} `json:"firmware_not"`
	FirmwareNotIn   *[]VmFirmware `json:"firmware_not_in"`
	Ha              *bool         `json:"ha"`
	HaNot           *bool         `json:"ha_not"`
	Id              *string       `json:"id"`
	IdContains      *string       `json:"id_contains"`
	IdEndsWith      *string       `json:"id_ends_with"`
	IdGt            *string       `json:"id_gt"`
	IdGte           *string       `json:"id_gte"`
	IdIn            *[]string     `json:"id_in"`
	IdLt            *string       `json:"id_lt"`
	IdLte           *string       `json:"id_lte"`
	IdNot           *string       `json:"id_not"`
	IdNotContains   *string       `json:"id_not_contains"`
	IdNotEndsWith   *string       `json:"id_not_ends_with"`
	IdNotIn         *[]string     `json:"id_not_in"`
	IdNotStartsWith *string       `json:"id_not_starts_with"`
	IdStartsWith    *string       `json:"id_starts_with"`
	IoPolicy        *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy"`
	IoPolicyIn  *[]VmDiskIoPolicy `json:"io_policy_in"`
	IoPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy_not"`
	IoPolicyNotIn *[]VmDiskIoPolicy `json:"io_policy_not_in"`
	LabelsEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt       *string    `json:"local_created_at"`
	LocalCreatedAtGt     *string    `json:"local_created_at_gt"`
	LocalCreatedAtGte    *string    `json:"local_created_at_gte"`
	LocalCreatedAtIn     *[]string  `json:"local_created_at_in"`
	LocalCreatedAtLt     *string    `json:"local_created_at_lt"`
	LocalCreatedAtLte    *string    `json:"local_created_at_lte"`
	LocalCreatedAtNot    *string    `json:"local_created_at_not"`
	LocalCreatedAtNotIn  *[]string  `json:"local_created_at_not_in"`
	LocalId              *string    `json:"local_id"`
	LocalIdContains      *string    `json:"local_id_contains"`
	LocalIdEndsWith      *string    `json:"local_id_ends_with"`
	LocalIdGt            *string    `json:"local_id_gt"`
	LocalIdGte           *string    `json:"local_id_gte"`
	LocalIdIn            *[]string  `json:"local_id_in"`
	LocalIdLt            *string    `json:"local_id_lt"`
	LocalIdLte           *string    `json:"local_id_lte"`
	LocalIdNot           *string    `json:"local_id_not"`
	LocalIdNotContains   *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string    `json:"local_id_starts_with"`
	MaxBandwidth         *float64   `json:"max_bandwidth"`
	MaxBandwidthGt       *float64   `json:"max_bandwidth_gt"`
	MaxBandwidthGte      *float64   `json:"max_bandwidth_gte"`
	MaxBandwidthIn       *[]float64 `json:"max_bandwidth_in"`
	MaxBandwidthLt       *float64   `json:"max_bandwidth_lt"`
	MaxBandwidthLte      *float64   `json:"max_bandwidth_lte"`
	MaxBandwidthNot      *float64   `json:"max_bandwidth_not"`
	MaxBandwidthNotIn    *[]float64 `json:"max_bandwidth_not_in"`
	MaxBandwidthPolicy   *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy"`
	MaxBandwidthPolicyIn  *[]VmDiskIoRestrictType `json:"max_bandwidth_policy_in"`
	MaxBandwidthPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy_not"`
	MaxBandwidthPolicyNotIn *[]VmDiskIoRestrictType `json:"max_bandwidth_policy_not_in"`
	MaxIops                 *float64                `json:"max_iops"`
	MaxIopsGt               *float64                `json:"max_iops_gt"`
	MaxIopsGte              *float64                `json:"max_iops_gte"`
	MaxIopsIn               *[]float64              `json:"max_iops_in"`
	MaxIopsLt               *float64                `json:"max_iops_lt"`
	MaxIopsLte              *float64                `json:"max_iops_lte"`
	MaxIopsNot              *float64                `json:"max_iops_not"`
	MaxIopsNotIn            *[]float64              `json:"max_iops_not_in"`
	MaxIopsPolicy           *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy"`
	MaxIopsPolicyIn  *[]VmDiskIoRestrictType `json:"max_iops_policy_in"`
	MaxIopsPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy_not"`
	MaxIopsPolicyNotIn     *[]VmDiskIoRestrictType `json:"max_iops_policy_not_in"`
	Memory                 *float64                `json:"memory"`
	MemoryGt               *float64                `json:"memory_gt"`
	MemoryGte              *float64                `json:"memory_gte"`
	MemoryIn               *[]float64              `json:"memory_in"`
	MemoryLt               *float64                `json:"memory_lt"`
	MemoryLte              *float64                `json:"memory_lte"`
	MemoryNot              *float64                `json:"memory_not"`
	MemoryNotIn            *[]float64              `json:"memory_not_in"`
	Name                   *string                 `json:"name"`
	NameContains           *string                 `json:"name_contains"`
	NameEndsWith           *string                 `json:"name_ends_with"`
	NameGt                 *string                 `json:"name_gt"`
	NameGte                *string                 `json:"name_gte"`
	NameIn                 *[]string               `json:"name_in"`
	NameLt                 *string                 `json:"name_lt"`
	NameLte                *string                 `json:"name_lte"`
	NameNot                *string                 `json:"name_not"`
	NameNotContains        *string                 `json:"name_not_contains"`
	NameNotEndsWith        *string                 `json:"name_not_ends_with"`
	NameNotIn              *[]string               `json:"name_not_in"`
	NameNotStartsWith      *string                 `json:"name_not_starts_with"`
	NameStartsWith         *string                 `json:"name_starts_with"`
	Size                   *float64                `json:"size"`
	SizeGt                 *float64                `json:"size_gt"`
	SizeGte                *float64                `json:"size_gte"`
	SizeIn                 *[]float64              `json:"size_in"`
	SizeLt                 *float64                `json:"size_lt"`
	SizeLte                *float64                `json:"size_lte"`
	SizeNot                *float64                `json:"size_not"`
	SizeNotIn              *[]float64              `json:"size_not_in"`
	Vcpu                   *float64                `json:"vcpu"`
	VcpuGt                 *float64                `json:"vcpu_gt"`
	VcpuGte                *float64                `json:"vcpu_gte"`
	VcpuIn                 *[]float64              `json:"vcpu_in"`
	VcpuLt                 *float64                `json:"vcpu_lt"`
	VcpuLte                *float64                `json:"vcpu_lte"`
	VcpuNot                *float64                `json:"vcpu_not"`
	VcpuNotIn              *[]float64              `json:"vcpu_not_in"`
	VideoType              *string                 `json:"video_type"`
	VideoTypeContains      *string                 `json:"video_type_contains"`
	VideoTypeEndsWith      *string                 `json:"video_type_ends_with"`
	VideoTypeGt            *string                 `json:"video_type_gt"`
	VideoTypeGte           *string                 `json:"video_type_gte"`
	VideoTypeIn            *[]string               `json:"video_type_in"`
	VideoTypeLt            *string                 `json:"video_type_lt"`
	VideoTypeLte           *string                 `json:"video_type_lte"`
	VideoTypeNot           *string                 `json:"video_type_not"`
	VideoTypeNotContains   *string                 `json:"video_type_not_contains"`
	VideoTypeNotEndsWith   *string                 `json:"video_type_not_ends_with"`
	VideoTypeNotIn         *[]string               `json:"video_type_not_in"`
	VideoTypeNotStartsWith *string                 `json:"video_type_not_starts_with"`
	VideoTypeStartsWith    *string                 `json:"video_type_starts_with"`
	WinOpt                 *bool                   `json:"win_opt"`
	WinOptNot              *bool                   `json:"win_opt_not"`
}

// VmToolsStatus defines model for VmToolsStatus.
type VmToolsStatus string

// VmUpdateDiskParams defines model for VmUpdateDiskParams.
type VmUpdateDiskParams struct {
	Data struct {
		Bus        *Bus    `json:"bus,omitempty"`
		ElfImageId *string `json:"elf_image_id"`
		VmDiskId   string  `json:"vm_disk_id"`
		VmVolumeId *string `json:"vm_volume_id,omitempty"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmUpdateNicParams defines model for VmUpdateNicParams.
type VmUpdateNicParams struct {
	Data struct {
		ConnectVlanId *string     `json:"connect_vlan_id,omitempty"`
		Enabled       *bool       `json:"enabled,omitempty"`
		Gateway       *string     `json:"gateway,omitempty"`
		IpAddress     *string     `json:"ip_address,omitempty"`
		MacAddress    *string     `json:"mac_address,omitempty"`
		Mirror        *bool       `json:"mirror,omitempty"`
		Model         *VmNicModel `json:"model,omitempty"`
		NicId         *string     `json:"nic_id,omitempty"`
		NicIndex      float64     `json:"nic_index"`
		SubnetMask    *string     `json:"subnet_mask,omitempty"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmUpdateParams defines model for VmUpdateParams.
type VmUpdateParams struct {
	Data struct {
		CpuCores    *float64 `json:"cpu_cores,omitempty"`
		CpuSockets  *float64 `json:"cpu_sockets,omitempty"`
		Description *string  `json:"description,omitempty"`
		Ha          *bool    `json:"ha,omitempty"`
		Memory      *float64 `json:"memory,omitempty"`
		Name        *string  `json:"name,omitempty"`
		Vcpu        *float64 `json:"vcpu,omitempty"`
	} `json:"data"`
	Where VmWhereInput `json:"where"`
}

// VmVideoType defines model for VmVideoType.
type VmVideoType string

// VmVlanCreationParams defines model for VmVlanCreationParams.
type VmVlanCreationParams struct {
	Name   string  `json:"name"`
	VdsId  string  `json:"vds_id"`
	VlanId float64 `json:"vlan_id"`
}

// VmVlanUpdationParams defines model for VmVlanUpdationParams.
type VmVlanUpdationParams struct {
	Data struct {
		Name   *string  `json:"name,omitempty"`
		VlanId *float64 `json:"vlan_id,omitempty"`
	} `json:"data"`
	Where VlanWhereInput `json:"where"`
}

// VmVmPolicy defines model for VmVmPolicy.
type VmVmPolicy string

// VmVolume defines model for VmVolume.
type VmVolume struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Description      *string                      `json:"description"`
	ElfStoragePolicy VmVolumeElfStoragePolicyType `json:"elf_storage_policy"`
	GuestSizeUsage   *float64                     `json:"guest_size_usage"`
	GuestUsedSize    *float64                     `json:"guest_used_size"`
	Id               string                       `json:"id"`
	Labels           *[]struct {
		Id string `json:"id"`
	} `json:"labels"`
	LocalCreatedAt string `json:"local_created_at"`
	LocalId        string `json:"local_id"`
	Lun            *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"lun"`
	Mounting   bool     `json:"mounting"`
	Name       string   `json:"name"`
	Path       string   `json:"path"`
	Sharing    bool     `json:"sharing"`
	Size       float64  `json:"size"`
	UniqueSize *float64 `json:"unique_size"`
	VmDisks    *[]struct {
		Id string `json:"id"`
	} `json:"vm_disks"`
}

// VmVolumeConnection defines model for VmVolumeConnection.
type VmVolumeConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VmVolumeCreationParams defines model for VmVolumeCreationParams.
type VmVolumeCreationParams struct {
	ClusterId        string                       `json:"cluster_id"`
	ElfStoragePolicy VmVolumeElfStoragePolicyType `json:"elf_storage_policy"`
	Name             string                       `json:"name"`
	Sharing          bool                         `json:"sharing"`
	Size             float64                      `json:"size"`
}

// VmVolumeDeletionParams defines model for VmVolumeDeletionParams.
type VmVolumeDeletionParams struct {
	Where VmVolumeWhereInput `json:"where"`
}

// VmVolumeElfStoragePolicyType defines model for VmVolumeElfStoragePolicyType.
type VmVolumeElfStoragePolicyType string

// VmVolumeOrderByInput defines model for VmVolumeOrderByInput.
type VmVolumeOrderByInput string

// VmVolumeWhereInput defines model for VmVolumeWhereInput.
type VmVolumeWhereInput struct {
	AND     *[]VmVolumeWhereInput `json:"AND"`
	NOT     *[]VmVolumeWhereInput `json:"NOT"`
	OR      *[]VmVolumeWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Description              *string   `json:"description"`
	DescriptionContains      *string   `json:"description_contains"`
	DescriptionEndsWith      *string   `json:"description_ends_with"`
	DescriptionGt            *string   `json:"description_gt"`
	DescriptionGte           *string   `json:"description_gte"`
	DescriptionIn            *[]string `json:"description_in"`
	DescriptionLt            *string   `json:"description_lt"`
	DescriptionLte           *string   `json:"description_lte"`
	DescriptionNot           *string   `json:"description_not"`
	DescriptionNotContains   *string   `json:"description_not_contains"`
	DescriptionNotEndsWith   *string   `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string `json:"description_not_in"`
	DescriptionNotStartsWith *string   `json:"description_not_starts_with"`
	DescriptionStartsWith    *string   `json:"description_starts_with"`
	ElfStoragePolicy         *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeElfStoragePolicyType)
		VmVolumeElfStoragePolicyType `yaml:",inline"`
	} `json:"elf_storage_policy"`
	ElfStoragePolicyIn  *[]VmVolumeElfStoragePolicyType `json:"elf_storage_policy_in"`
	ElfStoragePolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVolumeElfStoragePolicyType)
		VmVolumeElfStoragePolicyType `yaml:",inline"`
	} `json:"elf_storage_policy_not"`
	ElfStoragePolicyNotIn *[]VmVolumeElfStoragePolicyType `json:"elf_storage_policy_not_in"`
	GuestSizeUsage        *float64                        `json:"guest_size_usage"`
	GuestSizeUsageGt      *float64                        `json:"guest_size_usage_gt"`
	GuestSizeUsageGte     *float64                        `json:"guest_size_usage_gte"`
	GuestSizeUsageIn      *[]float64                      `json:"guest_size_usage_in"`
	GuestSizeUsageLt      *float64                        `json:"guest_size_usage_lt"`
	GuestSizeUsageLte     *float64                        `json:"guest_size_usage_lte"`
	GuestSizeUsageNot     *float64                        `json:"guest_size_usage_not"`
	GuestSizeUsageNotIn   *[]float64                      `json:"guest_size_usage_not_in"`
	GuestUsedSize         *float64                        `json:"guest_used_size"`
	GuestUsedSizeGt       *float64                        `json:"guest_used_size_gt"`
	GuestUsedSizeGte      *float64                        `json:"guest_used_size_gte"`
	GuestUsedSizeIn       *[]float64                      `json:"guest_used_size_in"`
	GuestUsedSizeLt       *float64                        `json:"guest_used_size_lt"`
	GuestUsedSizeLte      *float64                        `json:"guest_used_size_lte"`
	GuestUsedSizeNot      *float64                        `json:"guest_used_size_not"`
	GuestUsedSizeNotIn    *[]float64                      `json:"guest_used_size_not_in"`
	Id                    *string                         `json:"id"`
	IdContains            *string                         `json:"id_contains"`
	IdEndsWith            *string                         `json:"id_ends_with"`
	IdGt                  *string                         `json:"id_gt"`
	IdGte                 *string                         `json:"id_gte"`
	IdIn                  *[]string                       `json:"id_in"`
	IdLt                  *string                         `json:"id_lt"`
	IdLte                 *string                         `json:"id_lte"`
	IdNot                 *string                         `json:"id_not"`
	IdNotContains         *string                         `json:"id_not_contains"`
	IdNotEndsWith         *string                         `json:"id_not_ends_with"`
	IdNotIn               *[]string                       `json:"id_not_in"`
	IdNotStartsWith       *string                         `json:"id_not_starts_with"`
	IdStartsWith          *string                         `json:"id_starts_with"`
	LabelsEvery           *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LocalCreatedAt       *string   `json:"local_created_at"`
	LocalCreatedAtGt     *string   `json:"local_created_at_gt"`
	LocalCreatedAtGte    *string   `json:"local_created_at_gte"`
	LocalCreatedAtIn     *[]string `json:"local_created_at_in"`
	LocalCreatedAtLt     *string   `json:"local_created_at_lt"`
	LocalCreatedAtLte    *string   `json:"local_created_at_lte"`
	LocalCreatedAtNot    *string   `json:"local_created_at_not"`
	LocalCreatedAtNotIn  *[]string `json:"local_created_at_not_in"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	Lun                  *struct {
		// Embedded struct due to allOf(#/components/schemas/IscsiLunWhereInput)
		IscsiLunWhereInput `yaml:",inline"`
	} `json:"lun"`
	Mounting          *bool      `json:"mounting"`
	MountingNot       *bool      `json:"mounting_not"`
	Name              *string    `json:"name"`
	NameContains      *string    `json:"name_contains"`
	NameEndsWith      *string    `json:"name_ends_with"`
	NameGt            *string    `json:"name_gt"`
	NameGte           *string    `json:"name_gte"`
	NameIn            *[]string  `json:"name_in"`
	NameLt            *string    `json:"name_lt"`
	NameLte           *string    `json:"name_lte"`
	NameNot           *string    `json:"name_not"`
	NameNotContains   *string    `json:"name_not_contains"`
	NameNotEndsWith   *string    `json:"name_not_ends_with"`
	NameNotIn         *[]string  `json:"name_not_in"`
	NameNotStartsWith *string    `json:"name_not_starts_with"`
	NameStartsWith    *string    `json:"name_starts_with"`
	Path              *string    `json:"path"`
	PathContains      *string    `json:"path_contains"`
	PathEndsWith      *string    `json:"path_ends_with"`
	PathGt            *string    `json:"path_gt"`
	PathGte           *string    `json:"path_gte"`
	PathIn            *[]string  `json:"path_in"`
	PathLt            *string    `json:"path_lt"`
	PathLte           *string    `json:"path_lte"`
	PathNot           *string    `json:"path_not"`
	PathNotContains   *string    `json:"path_not_contains"`
	PathNotEndsWith   *string    `json:"path_not_ends_with"`
	PathNotIn         *[]string  `json:"path_not_in"`
	PathNotStartsWith *string    `json:"path_not_starts_with"`
	PathStartsWith    *string    `json:"path_starts_with"`
	Sharing           *bool      `json:"sharing"`
	SharingNot        *bool      `json:"sharing_not"`
	Size              *float64   `json:"size"`
	SizeGt            *float64   `json:"size_gt"`
	SizeGte           *float64   `json:"size_gte"`
	SizeIn            *[]float64 `json:"size_in"`
	SizeLt            *float64   `json:"size_lt"`
	SizeLte           *float64   `json:"size_lte"`
	SizeNot           *float64   `json:"size_not"`
	SizeNotIn         *[]float64 `json:"size_not_in"`
	UniqueSize        *float64   `json:"unique_size"`
	UniqueSizeGt      *float64   `json:"unique_size_gt"`
	UniqueSizeGte     *float64   `json:"unique_size_gte"`
	UniqueSizeIn      *[]float64 `json:"unique_size_in"`
	UniqueSizeLt      *float64   `json:"unique_size_lt"`
	UniqueSizeLte     *float64   `json:"unique_size_lte"`
	UniqueSizeNot     *float64   `json:"unique_size_not"`
	UniqueSizeNotIn   *[]float64 `json:"unique_size_not_in"`
	VmDisksEvery      *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_every"`
	VmDisksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_none"`
	VmDisksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_some"`
}

// VmWhereInput defines model for VmWhereInput.
type VmWhereInput struct {
	AND         *[]VmWhereInput `json:"AND"`
	NOT         *[]VmWhereInput `json:"NOT"`
	OR          *[]VmWhereInput `json:"OR"`
	ClockOffset *struct {
		// Embedded struct due to allOf(#/components/schemas/VmClockOffset)
		VmClockOffset `yaml:",inline"`
	} `json:"clock_offset"`
	ClockOffsetIn  *[]VmClockOffset `json:"clock_offset_in"`
	ClockOffsetNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmClockOffset)
		VmClockOffset `yaml:",inline"`
	} `json:"clock_offset_not"`
	ClockOffsetNotIn *[]VmClockOffset `json:"clock_offset_not_in"`
	Cluster          *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	CpuModel                 *string    `json:"cpu_model"`
	CpuModelContains         *string    `json:"cpu_model_contains"`
	CpuModelEndsWith         *string    `json:"cpu_model_ends_with"`
	CpuModelGt               *string    `json:"cpu_model_gt"`
	CpuModelGte              *string    `json:"cpu_model_gte"`
	CpuModelIn               *[]string  `json:"cpu_model_in"`
	CpuModelLt               *string    `json:"cpu_model_lt"`
	CpuModelLte              *string    `json:"cpu_model_lte"`
	CpuModelNot              *string    `json:"cpu_model_not"`
	CpuModelNotContains      *string    `json:"cpu_model_not_contains"`
	CpuModelNotEndsWith      *string    `json:"cpu_model_not_ends_with"`
	CpuModelNotIn            *[]string  `json:"cpu_model_not_in"`
	CpuModelNotStartsWith    *string    `json:"cpu_model_not_starts_with"`
	CpuModelStartsWith       *string    `json:"cpu_model_starts_with"`
	CpuUsage                 *float64   `json:"cpu_usage"`
	CpuUsageGt               *float64   `json:"cpu_usage_gt"`
	CpuUsageGte              *float64   `json:"cpu_usage_gte"`
	CpuUsageIn               *[]float64 `json:"cpu_usage_in"`
	CpuUsageLt               *float64   `json:"cpu_usage_lt"`
	CpuUsageLte              *float64   `json:"cpu_usage_lte"`
	CpuUsageNot              *float64   `json:"cpu_usage_not"`
	CpuUsageNotIn            *[]float64 `json:"cpu_usage_not_in"`
	DeletedAt                *string    `json:"deleted_at"`
	DeletedAtGt              *string    `json:"deleted_at_gt"`
	DeletedAtGte             *string    `json:"deleted_at_gte"`
	DeletedAtIn              *[]string  `json:"deleted_at_in"`
	DeletedAtLt              *string    `json:"deleted_at_lt"`
	DeletedAtLte             *string    `json:"deleted_at_lte"`
	DeletedAtNot             *string    `json:"deleted_at_not"`
	DeletedAtNotIn           *[]string  `json:"deleted_at_not_in"`
	Description              *string    `json:"description"`
	DescriptionContains      *string    `json:"description_contains"`
	DescriptionEndsWith      *string    `json:"description_ends_with"`
	DescriptionGt            *string    `json:"description_gt"`
	DescriptionGte           *string    `json:"description_gte"`
	DescriptionIn            *[]string  `json:"description_in"`
	DescriptionLt            *string    `json:"description_lt"`
	DescriptionLte           *string    `json:"description_lte"`
	DescriptionNot           *string    `json:"description_not"`
	DescriptionNotContains   *string    `json:"description_not_contains"`
	DescriptionNotEndsWith   *string    `json:"description_not_ends_with"`
	DescriptionNotIn         *[]string  `json:"description_not_in"`
	DescriptionNotStartsWith *string    `json:"description_not_starts_with"`
	DescriptionStartsWith    *string    `json:"description_starts_with"`
	DnsServers               *string    `json:"dns_servers"`
	DnsServersContains       *string    `json:"dns_servers_contains"`
	DnsServersEndsWith       *string    `json:"dns_servers_ends_with"`
	DnsServersGt             *string    `json:"dns_servers_gt"`
	DnsServersGte            *string    `json:"dns_servers_gte"`
	DnsServersIn             *[]string  `json:"dns_servers_in"`
	DnsServersLt             *string    `json:"dns_servers_lt"`
	DnsServersLte            *string    `json:"dns_servers_lte"`
	DnsServersNot            *string    `json:"dns_servers_not"`
	DnsServersNotContains    *string    `json:"dns_servers_not_contains"`
	DnsServersNotEndsWith    *string    `json:"dns_servers_not_ends_with"`
	DnsServersNotIn          *[]string  `json:"dns_servers_not_in"`
	DnsServersNotStartsWith  *string    `json:"dns_servers_not_starts_with"`
	DnsServersStartsWith     *string    `json:"dns_servers_starts_with"`
	EntityAsyncStatus        *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus"`
	EntityAsyncStatusIn  *[]EntityAsyncStatus `json:"entityAsyncStatus_in"`
	EntityAsyncStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/EntityAsyncStatus)
		EntityAsyncStatus `yaml:",inline"`
	} `json:"entityAsyncStatus_not"`
	EntityAsyncStatusNotIn   *[]EntityAsyncStatus `json:"entityAsyncStatus_not_in"`
	EntityFilterResultsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmEntityFilterResultWhereInput)
		VmEntityFilterResultWhereInput `yaml:",inline"`
	} `json:"entity_filter_results_every"`
	EntityFilterResultsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmEntityFilterResultWhereInput)
		VmEntityFilterResultWhereInput `yaml:",inline"`
	} `json:"entity_filter_results_none"`
	EntityFilterResultsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmEntityFilterResultWhereInput)
		VmEntityFilterResultWhereInput `yaml:",inline"`
	} `json:"entity_filter_results_some"`
	Firmware *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFirmware)
		VmFirmware `yaml:",inline"`
	} `json:"firmware"`
	FirmwareIn  *[]VmFirmware `json:"firmware_in"`
	FirmwareNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFirmware)
		VmFirmware `yaml:",inline"`
	} `json:"firmware_not"`
	FirmwareNotIn *[]VmFirmware `json:"firmware_not_in"`
	Folder        *struct {
		// Embedded struct due to allOf(#/components/schemas/VmFolderWhereInput)
		VmFolderWhereInput `yaml:",inline"`
	} `json:"folder"`
	GuestCpuModel              *string   `json:"guest_cpu_model"`
	GuestCpuModelContains      *string   `json:"guest_cpu_model_contains"`
	GuestCpuModelEndsWith      *string   `json:"guest_cpu_model_ends_with"`
	GuestCpuModelGt            *string   `json:"guest_cpu_model_gt"`
	GuestCpuModelGte           *string   `json:"guest_cpu_model_gte"`
	GuestCpuModelIn            *[]string `json:"guest_cpu_model_in"`
	GuestCpuModelLt            *string   `json:"guest_cpu_model_lt"`
	GuestCpuModelLte           *string   `json:"guest_cpu_model_lte"`
	GuestCpuModelNot           *string   `json:"guest_cpu_model_not"`
	GuestCpuModelNotContains   *string   `json:"guest_cpu_model_not_contains"`
	GuestCpuModelNotEndsWith   *string   `json:"guest_cpu_model_not_ends_with"`
	GuestCpuModelNotIn         *[]string `json:"guest_cpu_model_not_in"`
	GuestCpuModelNotStartsWith *string   `json:"guest_cpu_model_not_starts_with"`
	GuestCpuModelStartsWith    *string   `json:"guest_cpu_model_starts_with"`
	GuestOsType                *struct {
		// Embedded struct due to allOf(#/components/schemas/VmGuestsOperationSystem)
		VmGuestsOperationSystem `yaml:",inline"`
	} `json:"guest_os_type"`
	GuestOsTypeIn  *[]VmGuestsOperationSystem `json:"guest_os_type_in"`
	GuestOsTypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmGuestsOperationSystem)
		VmGuestsOperationSystem `yaml:",inline"`
	} `json:"guest_os_type_not"`
	GuestOsTypeNotIn    *[]VmGuestsOperationSystem `json:"guest_os_type_not_in"`
	GuestSizeUsage      *float64                   `json:"guest_size_usage"`
	GuestSizeUsageGt    *float64                   `json:"guest_size_usage_gt"`
	GuestSizeUsageGte   *float64                   `json:"guest_size_usage_gte"`
	GuestSizeUsageIn    *[]float64                 `json:"guest_size_usage_in"`
	GuestSizeUsageLt    *float64                   `json:"guest_size_usage_lt"`
	GuestSizeUsageLte   *float64                   `json:"guest_size_usage_lte"`
	GuestSizeUsageNot   *float64                   `json:"guest_size_usage_not"`
	GuestSizeUsageNotIn *[]float64                 `json:"guest_size_usage_not_in"`
	GuestUsedSize       *float64                   `json:"guest_used_size"`
	GuestUsedSizeGt     *float64                   `json:"guest_used_size_gt"`
	GuestUsedSizeGte    *float64                   `json:"guest_used_size_gte"`
	GuestUsedSizeIn     *[]float64                 `json:"guest_used_size_in"`
	GuestUsedSizeLt     *float64                   `json:"guest_used_size_lt"`
	GuestUsedSizeLte    *float64                   `json:"guest_used_size_lte"`
	GuestUsedSizeNot    *float64                   `json:"guest_used_size_not"`
	GuestUsedSizeNotIn  *[]float64                 `json:"guest_used_size_not_in"`
	Ha                  *bool                      `json:"ha"`
	HaNot               *bool                      `json:"ha_not"`
	Host                *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Hostname              *string   `json:"hostname"`
	HostnameContains      *string   `json:"hostname_contains"`
	HostnameEndsWith      *string   `json:"hostname_ends_with"`
	HostnameGt            *string   `json:"hostname_gt"`
	HostnameGte           *string   `json:"hostname_gte"`
	HostnameIn            *[]string `json:"hostname_in"`
	HostnameLt            *string   `json:"hostname_lt"`
	HostnameLte           *string   `json:"hostname_lte"`
	HostnameNot           *string   `json:"hostname_not"`
	HostnameNotContains   *string   `json:"hostname_not_contains"`
	HostnameNotEndsWith   *string   `json:"hostname_not_ends_with"`
	HostnameNotIn         *[]string `json:"hostname_not_in"`
	HostnameNotStartsWith *string   `json:"hostname_not_starts_with"`
	HostnameStartsWith    *string   `json:"hostname_starts_with"`
	Id                    *string   `json:"id"`
	IdContains            *string   `json:"id_contains"`
	IdEndsWith            *string   `json:"id_ends_with"`
	IdGt                  *string   `json:"id_gt"`
	IdGte                 *string   `json:"id_gte"`
	IdIn                  *[]string `json:"id_in"`
	IdLt                  *string   `json:"id_lt"`
	IdLte                 *string   `json:"id_lte"`
	IdNot                 *string   `json:"id_not"`
	IdNotContains         *string   `json:"id_not_contains"`
	IdNotEndsWith         *string   `json:"id_not_ends_with"`
	IdNotIn               *[]string `json:"id_not_in"`
	IdNotStartsWith       *string   `json:"id_not_starts_with"`
	IdStartsWith          *string   `json:"id_starts_with"`
	InRecycleBin          *bool     `json:"in_recycle_bin"`
	InRecycleBinNot       *bool     `json:"in_recycle_bin_not"`
	Internal              *bool     `json:"internal"`
	InternalNot           *bool     `json:"internal_not"`
	IoPolicy              *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy"`
	IoPolicyIn  *[]VmDiskIoPolicy `json:"io_policy_in"`
	IoPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoPolicy)
		VmDiskIoPolicy `yaml:",inline"`
	} `json:"io_policy_not"`
	IoPolicyNotIn           *[]VmDiskIoPolicy `json:"io_policy_not_in"`
	Ips                     *string           `json:"ips"`
	IpsContains             *string           `json:"ips_contains"`
	IpsEndsWith             *string           `json:"ips_ends_with"`
	IpsGt                   *string           `json:"ips_gt"`
	IpsGte                  *string           `json:"ips_gte"`
	IpsIn                   *[]string         `json:"ips_in"`
	IpsLt                   *string           `json:"ips_lt"`
	IpsLte                  *string           `json:"ips_lte"`
	IpsNot                  *string           `json:"ips_not"`
	IpsNotContains          *string           `json:"ips_not_contains"`
	IpsNotEndsWith          *string           `json:"ips_not_ends_with"`
	IpsNotIn                *[]string         `json:"ips_not_in"`
	IpsNotStartsWith        *string           `json:"ips_not_starts_with"`
	IpsStartsWith           *string           `json:"ips_starts_with"`
	KernelInfo              *string           `json:"kernel_info"`
	KernelInfoContains      *string           `json:"kernel_info_contains"`
	KernelInfoEndsWith      *string           `json:"kernel_info_ends_with"`
	KernelInfoGt            *string           `json:"kernel_info_gt"`
	KernelInfoGte           *string           `json:"kernel_info_gte"`
	KernelInfoIn            *[]string         `json:"kernel_info_in"`
	KernelInfoLt            *string           `json:"kernel_info_lt"`
	KernelInfoLte           *string           `json:"kernel_info_lte"`
	KernelInfoNot           *string           `json:"kernel_info_not"`
	KernelInfoNotContains   *string           `json:"kernel_info_not_contains"`
	KernelInfoNotEndsWith   *string           `json:"kernel_info_not_ends_with"`
	KernelInfoNotIn         *[]string         `json:"kernel_info_not_in"`
	KernelInfoNotStartsWith *string           `json:"kernel_info_not_starts_with"`
	KernelInfoStartsWith    *string           `json:"kernel_info_starts_with"`
	LabelsEvery             *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_every"`
	LabelsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_none"`
	LabelsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/LabelWhereInput)
		LabelWhereInput `yaml:",inline"`
	} `json:"labels_some"`
	LastShutdownTime      *string    `json:"last_shutdown_time"`
	LastShutdownTimeGt    *string    `json:"last_shutdown_time_gt"`
	LastShutdownTimeGte   *string    `json:"last_shutdown_time_gte"`
	LastShutdownTimeIn    *[]string  `json:"last_shutdown_time_in"`
	LastShutdownTimeLt    *string    `json:"last_shutdown_time_lt"`
	LastShutdownTimeLte   *string    `json:"last_shutdown_time_lte"`
	LastShutdownTimeNot   *string    `json:"last_shutdown_time_not"`
	LastShutdownTimeNotIn *[]string  `json:"last_shutdown_time_not_in"`
	LocalCreatedAt        *string    `json:"local_created_at"`
	LocalCreatedAtGt      *string    `json:"local_created_at_gt"`
	LocalCreatedAtGte     *string    `json:"local_created_at_gte"`
	LocalCreatedAtIn      *[]string  `json:"local_created_at_in"`
	LocalCreatedAtLt      *string    `json:"local_created_at_lt"`
	LocalCreatedAtLte     *string    `json:"local_created_at_lte"`
	LocalCreatedAtNot     *string    `json:"local_created_at_not"`
	LocalCreatedAtNotIn   *[]string  `json:"local_created_at_not_in"`
	LocalId               *string    `json:"local_id"`
	LocalIdContains       *string    `json:"local_id_contains"`
	LocalIdEndsWith       *string    `json:"local_id_ends_with"`
	LocalIdGt             *string    `json:"local_id_gt"`
	LocalIdGte            *string    `json:"local_id_gte"`
	LocalIdIn             *[]string  `json:"local_id_in"`
	LocalIdLt             *string    `json:"local_id_lt"`
	LocalIdLte            *string    `json:"local_id_lte"`
	LocalIdNot            *string    `json:"local_id_not"`
	LocalIdNotContains    *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith    *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn          *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith  *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith     *string    `json:"local_id_starts_with"`
	LogicalSizeBytes      *float64   `json:"logical_size_bytes"`
	LogicalSizeBytesGt    *float64   `json:"logical_size_bytes_gt"`
	LogicalSizeBytesGte   *float64   `json:"logical_size_bytes_gte"`
	LogicalSizeBytesIn    *[]float64 `json:"logical_size_bytes_in"`
	LogicalSizeBytesLt    *float64   `json:"logical_size_bytes_lt"`
	LogicalSizeBytesLte   *float64   `json:"logical_size_bytes_lte"`
	LogicalSizeBytesNot   *float64   `json:"logical_size_bytes_not"`
	LogicalSizeBytesNotIn *[]float64 `json:"logical_size_bytes_not_in"`
	MaxBandwidth          *float64   `json:"max_bandwidth"`
	MaxBandwidthGt        *float64   `json:"max_bandwidth_gt"`
	MaxBandwidthGte       *float64   `json:"max_bandwidth_gte"`
	MaxBandwidthIn        *[]float64 `json:"max_bandwidth_in"`
	MaxBandwidthLt        *float64   `json:"max_bandwidth_lt"`
	MaxBandwidthLte       *float64   `json:"max_bandwidth_lte"`
	MaxBandwidthNot       *float64   `json:"max_bandwidth_not"`
	MaxBandwidthNotIn     *[]float64 `json:"max_bandwidth_not_in"`
	MaxBandwidthPolicy    *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy"`
	MaxBandwidthPolicyIn  *[]VmDiskIoRestrictType `json:"max_bandwidth_policy_in"`
	MaxBandwidthPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_bandwidth_policy_not"`
	MaxBandwidthPolicyNotIn *[]VmDiskIoRestrictType `json:"max_bandwidth_policy_not_in"`
	MaxIops                 *float64                `json:"max_iops"`
	MaxIopsGt               *float64                `json:"max_iops_gt"`
	MaxIopsGte              *float64                `json:"max_iops_gte"`
	MaxIopsIn               *[]float64              `json:"max_iops_in"`
	MaxIopsLt               *float64                `json:"max_iops_lt"`
	MaxIopsLte              *float64                `json:"max_iops_lte"`
	MaxIopsNot              *float64                `json:"max_iops_not"`
	MaxIopsNotIn            *[]float64              `json:"max_iops_not_in"`
	MaxIopsPolicy           *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy"`
	MaxIopsPolicyIn  *[]VmDiskIoRestrictType `json:"max_iops_policy_in"`
	MaxIopsPolicyNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskIoRestrictType)
		VmDiskIoRestrictType `yaml:",inline"`
	} `json:"max_iops_policy_not"`
	MaxIopsPolicyNotIn        *[]VmDiskIoRestrictType `json:"max_iops_policy_not_in"`
	Memory                    *float64                `json:"memory"`
	MemoryGt                  *float64                `json:"memory_gt"`
	MemoryGte                 *float64                `json:"memory_gte"`
	MemoryIn                  *[]float64              `json:"memory_in"`
	MemoryLt                  *float64                `json:"memory_lt"`
	MemoryLte                 *float64                `json:"memory_lte"`
	MemoryNot                 *float64                `json:"memory_not"`
	MemoryNotIn               *[]float64              `json:"memory_not_in"`
	MemoryUsage               *float64                `json:"memory_usage"`
	MemoryUsageGt             *float64                `json:"memory_usage_gt"`
	MemoryUsageGte            *float64                `json:"memory_usage_gte"`
	MemoryUsageIn             *[]float64              `json:"memory_usage_in"`
	MemoryUsageLt             *float64                `json:"memory_usage_lt"`
	MemoryUsageLte            *float64                `json:"memory_usage_lte"`
	MemoryUsageNot            *float64                `json:"memory_usage_not"`
	MemoryUsageNotIn          *[]float64              `json:"memory_usage_not_in"`
	Name                      *string                 `json:"name"`
	NameContains              *string                 `json:"name_contains"`
	NameEndsWith              *string                 `json:"name_ends_with"`
	NameGt                    *string                 `json:"name_gt"`
	NameGte                   *string                 `json:"name_gte"`
	NameIn                    *[]string               `json:"name_in"`
	NameLt                    *string                 `json:"name_lt"`
	NameLte                   *string                 `json:"name_lte"`
	NameNot                   *string                 `json:"name_not"`
	NameNotContains           *string                 `json:"name_not_contains"`
	NameNotEndsWith           *string                 `json:"name_not_ends_with"`
	NameNotIn                 *[]string               `json:"name_not_in"`
	NameNotStartsWith         *string                 `json:"name_not_starts_with"`
	NameStartsWith            *string                 `json:"name_starts_with"`
	NestedVirtualization      *bool                   `json:"nested_virtualization"`
	NestedVirtualizationNot   *bool                   `json:"nested_virtualization_not"`
	NodeIp                    *string                 `json:"node_ip"`
	NodeIpContains            *string                 `json:"node_ip_contains"`
	NodeIpEndsWith            *string                 `json:"node_ip_ends_with"`
	NodeIpGt                  *string                 `json:"node_ip_gt"`
	NodeIpGte                 *string                 `json:"node_ip_gte"`
	NodeIpIn                  *[]string               `json:"node_ip_in"`
	NodeIpLt                  *string                 `json:"node_ip_lt"`
	NodeIpLte                 *string                 `json:"node_ip_lte"`
	NodeIpNot                 *string                 `json:"node_ip_not"`
	NodeIpNotContains         *string                 `json:"node_ip_not_contains"`
	NodeIpNotEndsWith         *string                 `json:"node_ip_not_ends_with"`
	NodeIpNotIn               *[]string               `json:"node_ip_not_in"`
	NodeIpNotStartsWith       *string                 `json:"node_ip_not_starts_with"`
	NodeIpStartsWith          *string                 `json:"node_ip_starts_with"`
	OriginalName              *string                 `json:"original_name"`
	OriginalNameContains      *string                 `json:"original_name_contains"`
	OriginalNameEndsWith      *string                 `json:"original_name_ends_with"`
	OriginalNameGt            *string                 `json:"original_name_gt"`
	OriginalNameGte           *string                 `json:"original_name_gte"`
	OriginalNameIn            *[]string               `json:"original_name_in"`
	OriginalNameLt            *string                 `json:"original_name_lt"`
	OriginalNameLte           *string                 `json:"original_name_lte"`
	OriginalNameNot           *string                 `json:"original_name_not"`
	OriginalNameNotContains   *string                 `json:"original_name_not_contains"`
	OriginalNameNotEndsWith   *string                 `json:"original_name_not_ends_with"`
	OriginalNameNotIn         *[]string               `json:"original_name_not_in"`
	OriginalNameNotStartsWith *string                 `json:"original_name_not_starts_with"`
	OriginalNameStartsWith    *string                 `json:"original_name_starts_with"`
	Os                        *string                 `json:"os"`
	OsContains                *string                 `json:"os_contains"`
	OsEndsWith                *string                 `json:"os_ends_with"`
	OsGt                      *string                 `json:"os_gt"`
	OsGte                     *string                 `json:"os_gte"`
	OsIn                      *[]string               `json:"os_in"`
	OsLt                      *string                 `json:"os_lt"`
	OsLte                     *string                 `json:"os_lte"`
	OsNot                     *string                 `json:"os_not"`
	OsNotContains             *string                 `json:"os_not_contains"`
	OsNotEndsWith             *string                 `json:"os_not_ends_with"`
	OsNotIn                   *[]string               `json:"os_not_in"`
	OsNotStartsWith           *string                 `json:"os_not_starts_with"`
	OsStartsWith              *string                 `json:"os_starts_with"`
	Protected                 *bool                   `json:"protected"`
	ProtectedNot              *bool                   `json:"protected_not"`
	ProvisionedSize           *float64                `json:"provisioned_size"`
	ProvisionedSizeGt         *float64                `json:"provisioned_size_gt"`
	ProvisionedSizeGte        *float64                `json:"provisioned_size_gte"`
	ProvisionedSizeIn         *[]float64              `json:"provisioned_size_in"`
	ProvisionedSizeLt         *float64                `json:"provisioned_size_lt"`
	ProvisionedSizeLte        *float64                `json:"provisioned_size_lte"`
	ProvisionedSizeNot        *float64                `json:"provisioned_size_not"`
	ProvisionedSizeNotIn      *[]float64              `json:"provisioned_size_not_in"`
	Size                      *float64                `json:"size"`
	SizeGt                    *float64                `json:"size_gt"`
	SizeGte                   *float64                `json:"size_gte"`
	SizeIn                    *[]float64              `json:"size_in"`
	SizeLt                    *float64                `json:"size_lt"`
	SizeLte                   *float64                `json:"size_lte"`
	SizeNot                   *float64                `json:"size_not"`
	SizeNotIn                 *[]float64              `json:"size_not_in"`
	SnapshotPlan              *struct {
		// Embedded struct due to allOf(#/components/schemas/SnapshotPlanWhereInput)
		SnapshotPlanWhereInput `yaml:",inline"`
	} `json:"snapshot_plan"`
	SnapshotsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"snapshots_every"`
	SnapshotsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"snapshots_none"`
	SnapshotsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmSnapshotWhereInput)
		VmSnapshotWhereInput `yaml:",inline"`
	} `json:"snapshots_some"`
	Status *struct {
		// Embedded struct due to allOf(#/components/schemas/VmStatus)
		VmStatus `yaml:",inline"`
	} `json:"status"`
	StatusIn  *[]VmStatus `json:"status_in"`
	StatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmStatus)
		VmStatus `yaml:",inline"`
	} `json:"status_not"`
	StatusNotIn     *[]VmStatus `json:"status_not_in"`
	UniqueSize      *float64    `json:"unique_size"`
	UniqueSizeGt    *float64    `json:"unique_size_gt"`
	UniqueSizeGte   *float64    `json:"unique_size_gte"`
	UniqueSizeIn    *[]float64  `json:"unique_size_in"`
	UniqueSizeLt    *float64    `json:"unique_size_lt"`
	UniqueSizeLte   *float64    `json:"unique_size_lte"`
	UniqueSizeNot   *float64    `json:"unique_size_not"`
	UniqueSizeNotIn *[]float64  `json:"unique_size_not_in"`
	UsbDevicesEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceWhereInput)
		UsbDeviceWhereInput `yaml:",inline"`
	} `json:"usb_devices_every"`
	UsbDevicesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceWhereInput)
		UsbDeviceWhereInput `yaml:",inline"`
	} `json:"usb_devices_none"`
	UsbDevicesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/UsbDeviceWhereInput)
		UsbDeviceWhereInput `yaml:",inline"`
	} `json:"usb_devices_some"`
	Vcpu      *float64   `json:"vcpu"`
	VcpuGt    *float64   `json:"vcpu_gt"`
	VcpuGte   *float64   `json:"vcpu_gte"`
	VcpuIn    *[]float64 `json:"vcpu_in"`
	VcpuLt    *float64   `json:"vcpu_lt"`
	VcpuLte   *float64   `json:"vcpu_lte"`
	VcpuNot   *float64   `json:"vcpu_not"`
	VcpuNotIn *[]float64 `json:"vcpu_not_in"`
	VideoType *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVideoType)
		VmVideoType `yaml:",inline"`
	} `json:"video_type"`
	VideoTypeIn  *[]VmVideoType `json:"video_type_in"`
	VideoTypeNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmVideoType)
		VmVideoType `yaml:",inline"`
	} `json:"video_type_not"`
	VideoTypeNotIn *[]VmVideoType `json:"video_type_not_in"`
	VmDisksEvery   *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_every"`
	VmDisksNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_none"`
	VmDisksSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmDiskWhereInput)
		VmDiskWhereInput `yaml:",inline"`
	} `json:"vm_disks_some"`
	VmNicsEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vm_nics_every"`
	VmNicsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vm_nics_none"`
	VmNicsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmNicWhereInput)
		VmNicWhereInput `yaml:",inline"`
	} `json:"vm_nics_some"`
	VmPlacementGroupEvery *struct {
		// Embedded struct due to allOf(#/components/schemas/VmPlacementGroupWhereInput)
		VmPlacementGroupWhereInput `yaml:",inline"`
	} `json:"vm_placement_group_every"`
	VmPlacementGroupNone *struct {
		// Embedded struct due to allOf(#/components/schemas/VmPlacementGroupWhereInput)
		VmPlacementGroupWhereInput `yaml:",inline"`
	} `json:"vm_placement_group_none"`
	VmPlacementGroupSome *struct {
		// Embedded struct due to allOf(#/components/schemas/VmPlacementGroupWhereInput)
		VmPlacementGroupWhereInput `yaml:",inline"`
	} `json:"vm_placement_group_some"`
	VmToolsStatus *struct {
		// Embedded struct due to allOf(#/components/schemas/VmToolsStatus)
		VmToolsStatus `yaml:",inline"`
	} `json:"vm_tools_status"`
	VmToolsStatusIn  *[]VmToolsStatus `json:"vm_tools_status_in"`
	VmToolsStatusNot *struct {
		// Embedded struct due to allOf(#/components/schemas/VmToolsStatus)
		VmToolsStatus `yaml:",inline"`
	} `json:"vm_tools_status_not"`
	VmToolsStatusNotIn          *[]VmToolsStatus `json:"vm_tools_status_not_in"`
	VmToolsVersion              *string          `json:"vm_tools_version"`
	VmToolsVersionContains      *string          `json:"vm_tools_version_contains"`
	VmToolsVersionEndsWith      *string          `json:"vm_tools_version_ends_with"`
	VmToolsVersionGt            *string          `json:"vm_tools_version_gt"`
	VmToolsVersionGte           *string          `json:"vm_tools_version_gte"`
	VmToolsVersionIn            *[]string        `json:"vm_tools_version_in"`
	VmToolsVersionLt            *string          `json:"vm_tools_version_lt"`
	VmToolsVersionLte           *string          `json:"vm_tools_version_lte"`
	VmToolsVersionNot           *string          `json:"vm_tools_version_not"`
	VmToolsVersionNotContains   *string          `json:"vm_tools_version_not_contains"`
	VmToolsVersionNotEndsWith   *string          `json:"vm_tools_version_not_ends_with"`
	VmToolsVersionNotIn         *[]string        `json:"vm_tools_version_not_in"`
	VmToolsVersionNotStartsWith *string          `json:"vm_tools_version_not_starts_with"`
	VmToolsVersionStartsWith    *string          `json:"vm_tools_version_starts_with"`
	WinOpt                      *bool            `json:"win_opt"`
	WinOptNot                   *bool            `json:"win_opt_not"`
}

// VsphereEsxiAccount defines model for VsphereEsxiAccount.
type VsphereEsxiAccount struct {
	Host struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"host"`
	Id       string  `json:"id"`
	Ip       string  `json:"ip"`
	IsValid  bool    `json:"is_valid"`
	LocalId  string  `json:"local_id"`
	Password string  `json:"password"`
	Port     float64 `json:"port"`
	Username string  `json:"username"`
}

// VsphereEsxiAccountConnection defines model for VsphereEsxiAccountConnection.
type VsphereEsxiAccountConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// VsphereEsxiAccountOrderByInput defines model for VsphereEsxiAccountOrderByInput.
type VsphereEsxiAccountOrderByInput string

// VsphereEsxiAccountWhereInput defines model for VsphereEsxiAccountWhereInput.
type VsphereEsxiAccountWhereInput struct {
	AND  *[]VsphereEsxiAccountWhereInput `json:"AND"`
	NOT  *[]VsphereEsxiAccountWhereInput `json:"NOT"`
	OR   *[]VsphereEsxiAccountWhereInput `json:"OR"`
	Host *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"host"`
	Id                    *string    `json:"id"`
	IdContains            *string    `json:"id_contains"`
	IdEndsWith            *string    `json:"id_ends_with"`
	IdGt                  *string    `json:"id_gt"`
	IdGte                 *string    `json:"id_gte"`
	IdIn                  *[]string  `json:"id_in"`
	IdLt                  *string    `json:"id_lt"`
	IdLte                 *string    `json:"id_lte"`
	IdNot                 *string    `json:"id_not"`
	IdNotContains         *string    `json:"id_not_contains"`
	IdNotEndsWith         *string    `json:"id_not_ends_with"`
	IdNotIn               *[]string  `json:"id_not_in"`
	IdNotStartsWith       *string    `json:"id_not_starts_with"`
	IdStartsWith          *string    `json:"id_starts_with"`
	Ip                    *string    `json:"ip"`
	IpContains            *string    `json:"ip_contains"`
	IpEndsWith            *string    `json:"ip_ends_with"`
	IpGt                  *string    `json:"ip_gt"`
	IpGte                 *string    `json:"ip_gte"`
	IpIn                  *[]string  `json:"ip_in"`
	IpLt                  *string    `json:"ip_lt"`
	IpLte                 *string    `json:"ip_lte"`
	IpNot                 *string    `json:"ip_not"`
	IpNotContains         *string    `json:"ip_not_contains"`
	IpNotEndsWith         *string    `json:"ip_not_ends_with"`
	IpNotIn               *[]string  `json:"ip_not_in"`
	IpNotStartsWith       *string    `json:"ip_not_starts_with"`
	IpStartsWith          *string    `json:"ip_starts_with"`
	IsValid               *bool      `json:"is_valid"`
	IsValidNot            *bool      `json:"is_valid_not"`
	LocalId               *string    `json:"local_id"`
	LocalIdContains       *string    `json:"local_id_contains"`
	LocalIdEndsWith       *string    `json:"local_id_ends_with"`
	LocalIdGt             *string    `json:"local_id_gt"`
	LocalIdGte            *string    `json:"local_id_gte"`
	LocalIdIn             *[]string  `json:"local_id_in"`
	LocalIdLt             *string    `json:"local_id_lt"`
	LocalIdLte            *string    `json:"local_id_lte"`
	LocalIdNot            *string    `json:"local_id_not"`
	LocalIdNotContains    *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith    *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn          *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith  *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith     *string    `json:"local_id_starts_with"`
	Password              *string    `json:"password"`
	PasswordContains      *string    `json:"password_contains"`
	PasswordEndsWith      *string    `json:"password_ends_with"`
	PasswordGt            *string    `json:"password_gt"`
	PasswordGte           *string    `json:"password_gte"`
	PasswordIn            *[]string  `json:"password_in"`
	PasswordLt            *string    `json:"password_lt"`
	PasswordLte           *string    `json:"password_lte"`
	PasswordNot           *string    `json:"password_not"`
	PasswordNotContains   *string    `json:"password_not_contains"`
	PasswordNotEndsWith   *string    `json:"password_not_ends_with"`
	PasswordNotIn         *[]string  `json:"password_not_in"`
	PasswordNotStartsWith *string    `json:"password_not_starts_with"`
	PasswordStartsWith    *string    `json:"password_starts_with"`
	Port                  *float64   `json:"port"`
	PortGt                *float64   `json:"port_gt"`
	PortGte               *float64   `json:"port_gte"`
	PortIn                *[]float64 `json:"port_in"`
	PortLt                *float64   `json:"port_lt"`
	PortLte               *float64   `json:"port_lte"`
	PortNot               *float64   `json:"port_not"`
	PortNotIn             *[]float64 `json:"port_not_in"`
	Username              *string    `json:"username"`
	UsernameContains      *string    `json:"username_contains"`
	UsernameEndsWith      *string    `json:"username_ends_with"`
	UsernameGt            *string    `json:"username_gt"`
	UsernameGte           *string    `json:"username_gte"`
	UsernameIn            *[]string  `json:"username_in"`
	UsernameLt            *string    `json:"username_lt"`
	UsernameLte           *string    `json:"username_lte"`
	UsernameNot           *string    `json:"username_not"`
	UsernameNotContains   *string    `json:"username_not_contains"`
	UsernameNotEndsWith   *string    `json:"username_not_ends_with"`
	UsernameNotIn         *[]string  `json:"username_not_in"`
	UsernameNotStartsWith *string    `json:"username_not_starts_with"`
	UsernameStartsWith    *string    `json:"username_starts_with"`
}

// WithTaskAlert defines model for WithTask_Alert_.
type WithTaskAlert struct {
	Data   Alert   `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskBatchHosts defines model for WithTask_BatchHosts_.
type WithTaskBatchHosts struct {
	Data   BatchHosts `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskBrickTopo defines model for WithTask_BrickTopo_.
type WithTaskBrickTopo struct {
	Data   BrickTopo `json:"data"`
	TaskId *string   `json:"task_id"`
}

// WithTaskClusterSettings defines model for WithTask_ClusterSettings_.
type WithTaskClusterSettings struct {
	Data   ClusterSettings `json:"data"`
	TaskId *string         `json:"task_id"`
}

// WithTaskCluster defines model for WithTask_Cluster_.
type WithTaskCluster struct {
	Data   Cluster `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskConsistencyGroupSnapshot defines model for WithTask_ConsistencyGroupSnapshot_.
type WithTaskConsistencyGroupSnapshot struct {
	Data   ConsistencyGroupSnapshot `json:"data"`
	TaskId *string                  `json:"task_id"`
}

// WithTaskConsistencyGroup defines model for WithTask_ConsistencyGroup_.
type WithTaskConsistencyGroup struct {
	Data   ConsistencyGroup `json:"data"`
	TaskId *string          `json:"task_id"`
}

// WithTaskDatacenter defines model for WithTask_Datacenter_.
type WithTaskDatacenter struct {
	Data   Datacenter `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskDeleteBrickTopo defines model for WithTask_DeleteBrickTopo_.
type WithTaskDeleteBrickTopo struct {
	Data   DeleteBrickTopo `json:"data"`
	TaskId *string         `json:"task_id"`
}

// WithTaskDeleteClusterRecycleBin defines model for WithTask_DeleteClusterRecycleBin_.
type WithTaskDeleteClusterRecycleBin struct {
	Data   DeleteClusterRecycleBin `json:"data"`
	TaskId *string                 `json:"task_id"`
}

// WithTaskDeleteCluster defines model for WithTask_DeleteCluster_.
type WithTaskDeleteCluster struct {
	Data   DeleteCluster `json:"data"`
	TaskId *string       `json:"task_id"`
}

// WithTaskDeleteConsistencyGroupSnapshot defines model for WithTask_DeleteConsistencyGroupSnapshot_.
type WithTaskDeleteConsistencyGroupSnapshot struct {
	Data   DeleteConsistencyGroupSnapshot `json:"data"`
	TaskId *string                        `json:"task_id"`
}

// WithTaskDeleteConsistencyGroup defines model for WithTask_DeleteConsistencyGroup_.
type WithTaskDeleteConsistencyGroup struct {
	Data   DeleteConsistencyGroup `json:"data"`
	TaskId *string                `json:"task_id"`
}

// WithTaskDeleteDatacenter defines model for WithTask_DeleteDatacenter_.
type WithTaskDeleteDatacenter struct {
	Data   DeleteDatacenter `json:"data"`
	TaskId *string          `json:"task_id"`
}

// WithTaskDeleteElfImage defines model for WithTask_DeleteElfImage_.
type WithTaskDeleteElfImage struct {
	Data   DeleteElfImage `json:"data"`
	TaskId *string        `json:"task_id"`
}

// WithTaskDeleteEntityFilter defines model for WithTask_DeleteEntityFilter_.
type WithTaskDeleteEntityFilter struct {
	Data   DeleteEntityFilter `json:"data"`
	TaskId *string            `json:"task_id"`
}

// WithTaskDeleteGraph defines model for WithTask_DeleteGraph_.
type WithTaskDeleteGraph struct {
	Data   DeleteGraph `json:"data"`
	TaskId *string     `json:"task_id"`
}

// WithTaskDeleteIscsiLunSnapshot defines model for WithTask_DeleteIscsiLunSnapshot_.
type WithTaskDeleteIscsiLunSnapshot struct {
	Data   DeleteIscsiLunSnapshot `json:"data"`
	TaskId *string                `json:"task_id"`
}

// WithTaskDeleteIscsiLun defines model for WithTask_DeleteIscsiLun_.
type WithTaskDeleteIscsiLun struct {
	Data   DeleteIscsiLun `json:"data"`
	TaskId *string        `json:"task_id"`
}

// WithTaskDeleteIscsiTarget defines model for WithTask_DeleteIscsiTarget_.
type WithTaskDeleteIscsiTarget struct {
	Data   DeleteIscsiTarget `json:"data"`
	TaskId *string           `json:"task_id"`
}

// WithTaskDeleteLabel defines model for WithTask_DeleteLabel_.
type WithTaskDeleteLabel struct {
	Data   DeleteLabel `json:"data"`
	TaskId *string     `json:"task_id"`
}

// WithTaskDeleteNamespaceGroup defines model for WithTask_DeleteNamespaceGroup_.
type WithTaskDeleteNamespaceGroup struct {
	Data   DeleteNamespaceGroup `json:"data"`
	TaskId *string              `json:"task_id"`
}

// WithTaskDeleteNfsExport defines model for WithTask_DeleteNfsExport_.
type WithTaskDeleteNfsExport struct {
	Data   DeleteNfsExport `json:"data"`
	TaskId *string         `json:"task_id"`
}

// WithTaskDeleteNvmfNamespaceSnapshot defines model for WithTask_DeleteNvmfNamespaceSnapshot_.
type WithTaskDeleteNvmfNamespaceSnapshot struct {
	Data   DeleteNvmfNamespaceSnapshot `json:"data"`
	TaskId *string                     `json:"task_id"`
}

// WithTaskDeleteNvmfNamespace defines model for WithTask_DeleteNvmfNamespace_.
type WithTaskDeleteNvmfNamespace struct {
	Data   DeleteNvmfNamespace `json:"data"`
	TaskId *string             `json:"task_id"`
}

// WithTaskDeleteNvmfSubsystem defines model for WithTask_DeleteNvmfSubsystem_.
type WithTaskDeleteNvmfSubsystem struct {
	Data   DeleteNvmfSubsystem `json:"data"`
	TaskId *string             `json:"task_id"`
}

// WithTaskDeleteOrganization defines model for WithTask_DeleteOrganization_.
type WithTaskDeleteOrganization struct {
	Data   DeleteOrganization `json:"data"`
	TaskId *string            `json:"task_id"`
}

// WithTaskDeleteRackTopo defines model for WithTask_DeleteRackTopo_.
type WithTaskDeleteRackTopo struct {
	Data   DeleteRackTopo `json:"data"`
	TaskId *string        `json:"task_id"`
}

// WithTaskDeleteReportTemplate defines model for WithTask_DeleteReportTemplate_.
type WithTaskDeleteReportTemplate struct {
	Data   DeleteReportTemplate `json:"data"`
	TaskId *string              `json:"task_id"`
}

// WithTaskDeleteRole defines model for WithTask_DeleteRole_.
type WithTaskDeleteRole struct {
	Data   DeleteRole `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskDeleteSnapshotGroup defines model for WithTask_DeleteSnapshotGroup_.
type WithTaskDeleteSnapshotGroup struct {
	Data   DeleteSnapshotGroup `json:"data"`
	TaskId *string             `json:"task_id"`
}

// WithTaskDeleteSnapshotPlan defines model for WithTask_DeleteSnapshotPlan_.
type WithTaskDeleteSnapshotPlan struct {
	Data   DeleteSnapshotPlan `json:"data"`
	TaskId *string            `json:"task_id"`
}

// WithTaskDeleteSnmpTransport defines model for WithTask_DeleteSnmpTransport_.
type WithTaskDeleteSnmpTransport struct {
	Data   DeleteSnmpTransport `json:"data"`
	TaskId *string             `json:"task_id"`
}

// WithTaskDeleteSnmpTrapReceiver defines model for WithTask_DeleteSnmpTrapReceiver_.
type WithTaskDeleteSnmpTrapReceiver struct {
	Data   DeleteSnmpTrapReceiver `json:"data"`
	TaskId *string                `json:"task_id"`
}

// WithTaskDeleteUser defines model for WithTask_DeleteUser_.
type WithTaskDeleteUser struct {
	Data   DeleteUser `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskDeleteVds defines model for WithTask_DeleteVds_.
type WithTaskDeleteVds struct {
	Data   DeleteVds `json:"data"`
	TaskId *string   `json:"task_id"`
}

// WithTaskDeleteView defines model for WithTask_DeleteView_.
type WithTaskDeleteView struct {
	Data   DeleteView `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskDeleteVlan defines model for WithTask_DeleteVlan_.
type WithTaskDeleteVlan struct {
	Data   DeleteVlan `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskDeleteVmFolder defines model for WithTask_DeleteVmFolder_.
type WithTaskDeleteVmFolder struct {
	Data   DeleteVmFolder `json:"data"`
	TaskId *string        `json:"task_id"`
}

// WithTaskDeleteVmPlacementGroup defines model for WithTask_DeleteVmPlacementGroup_.
type WithTaskDeleteVmPlacementGroup struct {
	Data   DeleteVmPlacementGroup `json:"data"`
	TaskId *string                `json:"task_id"`
}

// WithTaskDeleteVmSnapshot defines model for WithTask_DeleteVmSnapshot_.
type WithTaskDeleteVmSnapshot struct {
	Data   DeleteVmSnapshot `json:"data"`
	TaskId *string          `json:"task_id"`
}

// WithTaskDeleteVmTemplate defines model for WithTask_DeleteVmTemplate_.
type WithTaskDeleteVmTemplate struct {
	Data   DeleteVmTemplate `json:"data"`
	TaskId *string          `json:"task_id"`
}

// WithTaskDeleteVmVolume defines model for WithTask_DeleteVmVolume_.
type WithTaskDeleteVmVolume struct {
	Data   DeleteVmVolume `json:"data"`
	TaskId *string        `json:"task_id"`
}

// WithTaskDisk defines model for WithTask_Disk_.
type WithTaskDisk struct {
	Data   Disk    `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskElfImage defines model for WithTask_ElfImage_.
type WithTaskElfImage struct {
	Data   ElfImage `json:"data"`
	TaskId *string  `json:"task_id"`
}

// WithTaskEntityFilter defines model for WithTask_EntityFilter_.
type WithTaskEntityFilter struct {
	Data   EntityFilter `json:"data"`
	TaskId *string      `json:"task_id"`
}

// WithTaskGlobalAlertRule defines model for WithTask_GlobalAlertRule_.
type WithTaskGlobalAlertRule struct {
	Data   GlobalAlertRule `json:"data"`
	TaskId *string         `json:"task_id"`
}

// WithTaskGlobalSettings defines model for WithTask_GlobalSettings_.
type WithTaskGlobalSettings struct {
	Data   GlobalSettings `json:"data"`
	TaskId *string        `json:"task_id"`
}

// WithTaskGraph defines model for WithTask_Graph_.
type WithTaskGraph struct {
	Data   Graph   `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskHost defines model for WithTask_Host_.
type WithTaskHost struct {
	Data   Host    `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskIscsiLunSnapshot defines model for WithTask_IscsiLunSnapshot_.
type WithTaskIscsiLunSnapshot struct {
	Data   IscsiLunSnapshot `json:"data"`
	TaskId *string          `json:"task_id"`
}

// WithTaskIscsiLun defines model for WithTask_IscsiLun_.
type WithTaskIscsiLun struct {
	Data   IscsiLun `json:"data"`
	TaskId *string  `json:"task_id"`
}

// WithTaskIscsiTarget defines model for WithTask_IscsiTarget_.
type WithTaskIscsiTarget struct {
	Data   IscsiTarget `json:"data"`
	TaskId *string     `json:"task_id"`
}

// WithTaskLabel defines model for WithTask_Label_.
type WithTaskLabel struct {
	Data   Label   `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskLicense defines model for WithTask_License_.
type WithTaskLicense struct {
	Data   License `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskNamespaceGroup defines model for WithTask_NamespaceGroup_.
type WithTaskNamespaceGroup struct {
	Data   NamespaceGroup `json:"data"`
	TaskId *string        `json:"task_id"`
}

// WithTaskNfsExport defines model for WithTask_NfsExport_.
type WithTaskNfsExport struct {
	Data   NfsExport `json:"data"`
	TaskId *string   `json:"task_id"`
}

// WithTaskNic defines model for WithTask_Nic_.
type WithTaskNic struct {
	Data   Nic     `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskNodeTopo defines model for WithTask_NodeTopo_.
type WithTaskNodeTopo struct {
	Data   NodeTopo `json:"data"`
	TaskId *string  `json:"task_id"`
}

// WithTaskNvmfNamespaceSnapshot defines model for WithTask_NvmfNamespaceSnapshot_.
type WithTaskNvmfNamespaceSnapshot struct {
	Data   NvmfNamespaceSnapshot `json:"data"`
	TaskId *string               `json:"task_id"`
}

// WithTaskNvmfNamespace defines model for WithTask_NvmfNamespace_.
type WithTaskNvmfNamespace struct {
	Data   NvmfNamespace `json:"data"`
	TaskId *string       `json:"task_id"`
}

// WithTaskNvmfSubsystem defines model for WithTask_NvmfSubsystem_.
type WithTaskNvmfSubsystem struct {
	Data   NvmfSubsystem `json:"data"`
	TaskId *string       `json:"task_id"`
}

// WithTaskOrganization defines model for WithTask_Organization_.
type WithTaskOrganization struct {
	Data   Organization `json:"data"`
	TaskId *string      `json:"task_id"`
}

// WithTaskRackTopo defines model for WithTask_RackTopo_.
type WithTaskRackTopo struct {
	Data   RackTopo `json:"data"`
	TaskId *string  `json:"task_id"`
}

// WithTaskReportTask defines model for WithTask_ReportTask_.
type WithTaskReportTask struct {
	Data   ReportTask `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskReportTemplate defines model for WithTask_ReportTemplate_.
type WithTaskReportTemplate struct {
	Data   ReportTemplate `json:"data"`
	TaskId *string        `json:"task_id"`
}

// WithTaskSnapshotGroup defines model for WithTask_SnapshotGroup_.
type WithTaskSnapshotGroup struct {
	Data   SnapshotGroup `json:"data"`
	TaskId *string       `json:"task_id"`
}

// WithTaskSnapshotPlan defines model for WithTask_SnapshotPlan_.
type WithTaskSnapshotPlan struct {
	Data   SnapshotPlan `json:"data"`
	TaskId *string      `json:"task_id"`
}

// WithTaskSnmpTransport defines model for WithTask_SnmpTransport_.
type WithTaskSnmpTransport struct {
	Data   SnmpTransport `json:"data"`
	TaskId *string       `json:"task_id"`
}

// WithTaskSnmpTrapReceiver defines model for WithTask_SnmpTrapReceiver_.
type WithTaskSnmpTrapReceiver struct {
	Data   SnmpTrapReceiver `json:"data"`
	TaskId *string          `json:"task_id"`
}

// WithTaskUsbDevice defines model for WithTask_UsbDevice_.
type WithTaskUsbDevice struct {
	Data   UsbDevice `json:"data"`
	TaskId *string   `json:"task_id"`
}

// WithTaskUserRoleNext defines model for WithTask_UserRoleNext_.
type WithTaskUserRoleNext struct {
	Data   UserRoleNext `json:"data"`
	TaskId *string      `json:"task_id"`
}

// WithTaskUser defines model for WithTask_User_.
type WithTaskUser struct {
	Data   User    `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskVds defines model for WithTask_Vds_.
type WithTaskVds struct {
	Data   Vds     `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskView defines model for WithTask_View_.
type WithTaskView struct {
	Data   View    `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskVlan defines model for WithTask_Vlan_.
type WithTaskVlan struct {
	Data   Vlan    `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskVmFolder defines model for WithTask_VmFolder_.
type WithTaskVmFolder struct {
	Data   VmFolder `json:"data"`
	TaskId *string  `json:"task_id"`
}

// WithTaskVmPlacementGroup defines model for WithTask_VmPlacementGroup_.
type WithTaskVmPlacementGroup struct {
	Data   VmPlacementGroup `json:"data"`
	TaskId *string          `json:"task_id"`
}

// WithTaskVmSnapshot defines model for WithTask_VmSnapshot_.
type WithTaskVmSnapshot struct {
	Data   VmSnapshot `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskVmTemplate defines model for WithTask_VmTemplate_.
type WithTaskVmTemplate struct {
	Data   VmTemplate `json:"data"`
	TaskId *string    `json:"task_id"`
}

// WithTaskVmVolume defines model for WithTask_VmVolume_.
type WithTaskVmVolume struct {
	Data   VmVolume `json:"data"`
	TaskId *string  `json:"task_id"`
}

// WithTaskVm defines model for WithTask_Vm_.
type WithTaskVm struct {
	Data   Vm      `json:"data"`
	TaskId *string `json:"task_id"`
}

// WithTaskTokenString defines model for WithTask__token-string__.
type WithTaskTokenString struct {
	Data struct {
		Token string `json:"token"`
	} `json:"data"`
	TaskId *string `json:"task_id"`
}

// Witness defines model for Witness.
type Witness struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	CpuHzPerCore        float64 `json:"cpu_hz_per_core"`
	DataIp              string  `json:"data_ip"`
	Id                  string  `json:"id"`
	LocalId             *string `json:"local_id"`
	Name                string  `json:"name"`
	SystemDataCapacity  float64 `json:"system_data_capacity"`
	SystemUsedDataSpace float64 `json:"system_used_data_space"`
	TotalCpuCores       float64 `json:"total_cpu_cores"`
	TotalCpuHz          float64 `json:"total_cpu_hz"`
	TotalMemoryBytes    float64 `json:"total_memory_bytes"`
}

// WitnessConnection defines model for WitnessConnection.
type WitnessConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// WitnessOrderByInput defines model for WitnessOrderByInput.
type WitnessOrderByInput string

// WitnessWhereInput defines model for WitnessWhereInput.
type WitnessWhereInput struct {
	AND     *[]WitnessWhereInput `json:"AND"`
	NOT     *[]WitnessWhereInput `json:"NOT"`
	OR      *[]WitnessWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	CpuHzPerCore             *float64   `json:"cpu_hz_per_core"`
	CpuHzPerCoreGt           *float64   `json:"cpu_hz_per_core_gt"`
	CpuHzPerCoreGte          *float64   `json:"cpu_hz_per_core_gte"`
	CpuHzPerCoreIn           *[]float64 `json:"cpu_hz_per_core_in"`
	CpuHzPerCoreLt           *float64   `json:"cpu_hz_per_core_lt"`
	CpuHzPerCoreLte          *float64   `json:"cpu_hz_per_core_lte"`
	CpuHzPerCoreNot          *float64   `json:"cpu_hz_per_core_not"`
	CpuHzPerCoreNotIn        *[]float64 `json:"cpu_hz_per_core_not_in"`
	DataIp                   *string    `json:"data_ip"`
	DataIpContains           *string    `json:"data_ip_contains"`
	DataIpEndsWith           *string    `json:"data_ip_ends_with"`
	DataIpGt                 *string    `json:"data_ip_gt"`
	DataIpGte                *string    `json:"data_ip_gte"`
	DataIpIn                 *[]string  `json:"data_ip_in"`
	DataIpLt                 *string    `json:"data_ip_lt"`
	DataIpLte                *string    `json:"data_ip_lte"`
	DataIpNot                *string    `json:"data_ip_not"`
	DataIpNotContains        *string    `json:"data_ip_not_contains"`
	DataIpNotEndsWith        *string    `json:"data_ip_not_ends_with"`
	DataIpNotIn              *[]string  `json:"data_ip_not_in"`
	DataIpNotStartsWith      *string    `json:"data_ip_not_starts_with"`
	DataIpStartsWith         *string    `json:"data_ip_starts_with"`
	Id                       *string    `json:"id"`
	IdContains               *string    `json:"id_contains"`
	IdEndsWith               *string    `json:"id_ends_with"`
	IdGt                     *string    `json:"id_gt"`
	IdGte                    *string    `json:"id_gte"`
	IdIn                     *[]string  `json:"id_in"`
	IdLt                     *string    `json:"id_lt"`
	IdLte                    *string    `json:"id_lte"`
	IdNot                    *string    `json:"id_not"`
	IdNotContains            *string    `json:"id_not_contains"`
	IdNotEndsWith            *string    `json:"id_not_ends_with"`
	IdNotIn                  *[]string  `json:"id_not_in"`
	IdNotStartsWith          *string    `json:"id_not_starts_with"`
	IdStartsWith             *string    `json:"id_starts_with"`
	LocalId                  *string    `json:"local_id"`
	LocalIdContains          *string    `json:"local_id_contains"`
	LocalIdEndsWith          *string    `json:"local_id_ends_with"`
	LocalIdGt                *string    `json:"local_id_gt"`
	LocalIdGte               *string    `json:"local_id_gte"`
	LocalIdIn                *[]string  `json:"local_id_in"`
	LocalIdLt                *string    `json:"local_id_lt"`
	LocalIdLte               *string    `json:"local_id_lte"`
	LocalIdNot               *string    `json:"local_id_not"`
	LocalIdNotContains       *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith       *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn             *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith     *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith        *string    `json:"local_id_starts_with"`
	Name                     *string    `json:"name"`
	NameContains             *string    `json:"name_contains"`
	NameEndsWith             *string    `json:"name_ends_with"`
	NameGt                   *string    `json:"name_gt"`
	NameGte                  *string    `json:"name_gte"`
	NameIn                   *[]string  `json:"name_in"`
	NameLt                   *string    `json:"name_lt"`
	NameLte                  *string    `json:"name_lte"`
	NameNot                  *string    `json:"name_not"`
	NameNotContains          *string    `json:"name_not_contains"`
	NameNotEndsWith          *string    `json:"name_not_ends_with"`
	NameNotIn                *[]string  `json:"name_not_in"`
	NameNotStartsWith        *string    `json:"name_not_starts_with"`
	NameStartsWith           *string    `json:"name_starts_with"`
	SystemDataCapacity       *float64   `json:"system_data_capacity"`
	SystemDataCapacityGt     *float64   `json:"system_data_capacity_gt"`
	SystemDataCapacityGte    *float64   `json:"system_data_capacity_gte"`
	SystemDataCapacityIn     *[]float64 `json:"system_data_capacity_in"`
	SystemDataCapacityLt     *float64   `json:"system_data_capacity_lt"`
	SystemDataCapacityLte    *float64   `json:"system_data_capacity_lte"`
	SystemDataCapacityNot    *float64   `json:"system_data_capacity_not"`
	SystemDataCapacityNotIn  *[]float64 `json:"system_data_capacity_not_in"`
	SystemUsedDataSpace      *float64   `json:"system_used_data_space"`
	SystemUsedDataSpaceGt    *float64   `json:"system_used_data_space_gt"`
	SystemUsedDataSpaceGte   *float64   `json:"system_used_data_space_gte"`
	SystemUsedDataSpaceIn    *[]float64 `json:"system_used_data_space_in"`
	SystemUsedDataSpaceLt    *float64   `json:"system_used_data_space_lt"`
	SystemUsedDataSpaceLte   *float64   `json:"system_used_data_space_lte"`
	SystemUsedDataSpaceNot   *float64   `json:"system_used_data_space_not"`
	SystemUsedDataSpaceNotIn *[]float64 `json:"system_used_data_space_not_in"`
	TotalCpuCores            *float64   `json:"total_cpu_cores"`
	TotalCpuCoresGt          *float64   `json:"total_cpu_cores_gt"`
	TotalCpuCoresGte         *float64   `json:"total_cpu_cores_gte"`
	TotalCpuCoresIn          *[]float64 `json:"total_cpu_cores_in"`
	TotalCpuCoresLt          *float64   `json:"total_cpu_cores_lt"`
	TotalCpuCoresLte         *float64   `json:"total_cpu_cores_lte"`
	TotalCpuCoresNot         *float64   `json:"total_cpu_cores_not"`
	TotalCpuCoresNotIn       *[]float64 `json:"total_cpu_cores_not_in"`
	TotalCpuHz               *float64   `json:"total_cpu_hz"`
	TotalCpuHzGt             *float64   `json:"total_cpu_hz_gt"`
	TotalCpuHzGte            *float64   `json:"total_cpu_hz_gte"`
	TotalCpuHzIn             *[]float64 `json:"total_cpu_hz_in"`
	TotalCpuHzLt             *float64   `json:"total_cpu_hz_lt"`
	TotalCpuHzLte            *float64   `json:"total_cpu_hz_lte"`
	TotalCpuHzNot            *float64   `json:"total_cpu_hz_not"`
	TotalCpuHzNotIn          *[]float64 `json:"total_cpu_hz_not_in"`
	TotalMemoryBytes         *float64   `json:"total_memory_bytes"`
	TotalMemoryBytesGt       *float64   `json:"total_memory_bytes_gt"`
	TotalMemoryBytesGte      *float64   `json:"total_memory_bytes_gte"`
	TotalMemoryBytesIn       *[]float64 `json:"total_memory_bytes_in"`
	TotalMemoryBytesLt       *float64   `json:"total_memory_bytes_lt"`
	TotalMemoryBytesLte      *float64   `json:"total_memory_bytes_lte"`
	TotalMemoryBytesNot      *float64   `json:"total_memory_bytes_not"`
	TotalMemoryBytesNotIn    *[]float64 `json:"total_memory_bytes_not_in"`
}

// Zone defines model for Zone.
type Zone struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	Datacenter struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"datacenter"`
	FailureDataSpace *float64 `json:"failure_data_space"`
	HostNum          *float64 `json:"host_num"`
	Hosts            *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"hosts"`
	Id                             string   `json:"id"`
	IsPreferred                    bool     `json:"is_preferred"`
	LocalId                        *string  `json:"local_id"`
	ProvisionedCpuCores            *float64 `json:"provisioned_cpu_cores"`
	ProvisionedCpuCoresForActiveVm *float64 `json:"provisioned_cpu_cores_for_active_vm"`
	ProvisionedDataSpace           *float64 `json:"provisioned_data_space"`
	ProvisionedMemoryBytes         *float64 `json:"provisioned_memory_bytes"`
	RunningVmNum                   *float64 `json:"running_vm_num"`
	StoppedVmNum                   *float64 `json:"stopped_vm_num"`
	SuspendedVmNum                 *float64 `json:"suspended_vm_num"`
	TotalCacheCapacity             *float64 `json:"total_cache_capacity"`
	TotalCpuCores                  *float64 `json:"total_cpu_cores"`
	TotalCpuHz                     *float64 `json:"total_cpu_hz"`
	TotalDataCapacity              *float64 `json:"total_data_capacity"`
	TotalMemoryBytes               *float64 `json:"total_memory_bytes"`
	UsedDataSpace                  *float64 `json:"used_data_space"`
	ValidDataSpace                 *float64 `json:"valid_data_space"`
	VmNum                          *float64 `json:"vm_num"`
}

// ZoneConnection defines model for ZoneConnection.
type ZoneConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ZoneOrderByInput defines model for ZoneOrderByInput.
type ZoneOrderByInput string

// ZoneTopo defines model for ZoneTopo.
type ZoneTopo struct {
	Cluster struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster"`
	ClusterTopo struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"cluster_topo"`
	Id         string `json:"id"`
	LocalId    string `json:"local_id"`
	RackTopoes *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"rack_topoes"`
}

// ZoneTopoConnection defines model for ZoneTopoConnection.
type ZoneTopoConnection struct {
	Aggregate struct {
		Count float64 `json:"count"`
	} `json:"aggregate"`
}

// ZoneTopoOrderByInput defines model for ZoneTopoOrderByInput.
type ZoneTopoOrderByInput string

// ZoneTopoWhereInput defines model for ZoneTopoWhereInput.
type ZoneTopoWhereInput struct {
	AND     *[]ZoneTopoWhereInput `json:"AND"`
	NOT     *[]ZoneTopoWhereInput `json:"NOT"`
	OR      *[]ZoneTopoWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	ClusterTopo *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterTopoWhereInput)
		ClusterTopoWhereInput `yaml:",inline"`
	} `json:"cluster_topo"`
	Id                   *string   `json:"id"`
	IdContains           *string   `json:"id_contains"`
	IdEndsWith           *string   `json:"id_ends_with"`
	IdGt                 *string   `json:"id_gt"`
	IdGte                *string   `json:"id_gte"`
	IdIn                 *[]string `json:"id_in"`
	IdLt                 *string   `json:"id_lt"`
	IdLte                *string   `json:"id_lte"`
	IdNot                *string   `json:"id_not"`
	IdNotContains        *string   `json:"id_not_contains"`
	IdNotEndsWith        *string   `json:"id_not_ends_with"`
	IdNotIn              *[]string `json:"id_not_in"`
	IdNotStartsWith      *string   `json:"id_not_starts_with"`
	IdStartsWith         *string   `json:"id_starts_with"`
	LocalId              *string   `json:"local_id"`
	LocalIdContains      *string   `json:"local_id_contains"`
	LocalIdEndsWith      *string   `json:"local_id_ends_with"`
	LocalIdGt            *string   `json:"local_id_gt"`
	LocalIdGte           *string   `json:"local_id_gte"`
	LocalIdIn            *[]string `json:"local_id_in"`
	LocalIdLt            *string   `json:"local_id_lt"`
	LocalIdLte           *string   `json:"local_id_lte"`
	LocalIdNot           *string   `json:"local_id_not"`
	LocalIdNotContains   *string   `json:"local_id_not_contains"`
	LocalIdNotEndsWith   *string   `json:"local_id_not_ends_with"`
	LocalIdNotIn         *[]string `json:"local_id_not_in"`
	LocalIdNotStartsWith *string   `json:"local_id_not_starts_with"`
	LocalIdStartsWith    *string   `json:"local_id_starts_with"`
	RackTopoesEvery      *struct {
		// Embedded struct due to allOf(#/components/schemas/RackTopoWhereInput)
		RackTopoWhereInput `yaml:",inline"`
	} `json:"rack_topoes_every"`
	RackTopoesNone *struct {
		// Embedded struct due to allOf(#/components/schemas/RackTopoWhereInput)
		RackTopoWhereInput `yaml:",inline"`
	} `json:"rack_topoes_none"`
	RackTopoesSome *struct {
		// Embedded struct due to allOf(#/components/schemas/RackTopoWhereInput)
		RackTopoWhereInput `yaml:",inline"`
	} `json:"rack_topoes_some"`
}

// ZoneWhereInput defines model for ZoneWhereInput.
type ZoneWhereInput struct {
	AND     *[]ZoneWhereInput `json:"AND"`
	NOT     *[]ZoneWhereInput `json:"NOT"`
	OR      *[]ZoneWhereInput `json:"OR"`
	Cluster *struct {
		// Embedded struct due to allOf(#/components/schemas/ClusterWhereInput)
		ClusterWhereInput `yaml:",inline"`
	} `json:"cluster"`
	Datacenter *struct {
		// Embedded struct due to allOf(#/components/schemas/DatacenterWhereInput)
		DatacenterWhereInput `yaml:",inline"`
	} `json:"datacenter"`
	FailureDataSpace      *float64   `json:"failure_data_space"`
	FailureDataSpaceGt    *float64   `json:"failure_data_space_gt"`
	FailureDataSpaceGte   *float64   `json:"failure_data_space_gte"`
	FailureDataSpaceIn    *[]float64 `json:"failure_data_space_in"`
	FailureDataSpaceLt    *float64   `json:"failure_data_space_lt"`
	FailureDataSpaceLte   *float64   `json:"failure_data_space_lte"`
	FailureDataSpaceNot   *float64   `json:"failure_data_space_not"`
	FailureDataSpaceNotIn *[]float64 `json:"failure_data_space_not_in"`
	HostNum               *float64   `json:"host_num"`
	HostNumGt             *float64   `json:"host_num_gt"`
	HostNumGte            *float64   `json:"host_num_gte"`
	HostNumIn             *[]float64 `json:"host_num_in"`
	HostNumLt             *float64   `json:"host_num_lt"`
	HostNumLte            *float64   `json:"host_num_lte"`
	HostNumNot            *float64   `json:"host_num_not"`
	HostNumNotIn          *[]float64 `json:"host_num_not_in"`
	HostsEvery            *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_every"`
	HostsNone *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_none"`
	HostsSome *struct {
		// Embedded struct due to allOf(#/components/schemas/HostWhereInput)
		HostWhereInput `yaml:",inline"`
	} `json:"hosts_some"`
	Id                                  *string    `json:"id"`
	IdContains                          *string    `json:"id_contains"`
	IdEndsWith                          *string    `json:"id_ends_with"`
	IdGt                                *string    `json:"id_gt"`
	IdGte                               *string    `json:"id_gte"`
	IdIn                                *[]string  `json:"id_in"`
	IdLt                                *string    `json:"id_lt"`
	IdLte                               *string    `json:"id_lte"`
	IdNot                               *string    `json:"id_not"`
	IdNotContains                       *string    `json:"id_not_contains"`
	IdNotEndsWith                       *string    `json:"id_not_ends_with"`
	IdNotIn                             *[]string  `json:"id_not_in"`
	IdNotStartsWith                     *string    `json:"id_not_starts_with"`
	IdStartsWith                        *string    `json:"id_starts_with"`
	IsPreferred                         *bool      `json:"is_preferred"`
	IsPreferredNot                      *bool      `json:"is_preferred_not"`
	LocalId                             *string    `json:"local_id"`
	LocalIdContains                     *string    `json:"local_id_contains"`
	LocalIdEndsWith                     *string    `json:"local_id_ends_with"`
	LocalIdGt                           *string    `json:"local_id_gt"`
	LocalIdGte                          *string    `json:"local_id_gte"`
	LocalIdIn                           *[]string  `json:"local_id_in"`
	LocalIdLt                           *string    `json:"local_id_lt"`
	LocalIdLte                          *string    `json:"local_id_lte"`
	LocalIdNot                          *string    `json:"local_id_not"`
	LocalIdNotContains                  *string    `json:"local_id_not_contains"`
	LocalIdNotEndsWith                  *string    `json:"local_id_not_ends_with"`
	LocalIdNotIn                        *[]string  `json:"local_id_not_in"`
	LocalIdNotStartsWith                *string    `json:"local_id_not_starts_with"`
	LocalIdStartsWith                   *string    `json:"local_id_starts_with"`
	ProvisionedCpuCores                 *float64   `json:"provisioned_cpu_cores"`
	ProvisionedCpuCoresForActiveVm      *float64   `json:"provisioned_cpu_cores_for_active_vm"`
	ProvisionedCpuCoresForActiveVmGt    *float64   `json:"provisioned_cpu_cores_for_active_vm_gt"`
	ProvisionedCpuCoresForActiveVmGte   *float64   `json:"provisioned_cpu_cores_for_active_vm_gte"`
	ProvisionedCpuCoresForActiveVmIn    *[]float64 `json:"provisioned_cpu_cores_for_active_vm_in"`
	ProvisionedCpuCoresForActiveVmLt    *float64   `json:"provisioned_cpu_cores_for_active_vm_lt"`
	ProvisionedCpuCoresForActiveVmLte   *float64   `json:"provisioned_cpu_cores_for_active_vm_lte"`
	ProvisionedCpuCoresForActiveVmNot   *float64   `json:"provisioned_cpu_cores_for_active_vm_not"`
	ProvisionedCpuCoresForActiveVmNotIn *[]float64 `json:"provisioned_cpu_cores_for_active_vm_not_in"`
	ProvisionedCpuCoresGt               *float64   `json:"provisioned_cpu_cores_gt"`
	ProvisionedCpuCoresGte              *float64   `json:"provisioned_cpu_cores_gte"`
	ProvisionedCpuCoresIn               *[]float64 `json:"provisioned_cpu_cores_in"`
	ProvisionedCpuCoresLt               *float64   `json:"provisioned_cpu_cores_lt"`
	ProvisionedCpuCoresLte              *float64   `json:"provisioned_cpu_cores_lte"`
	ProvisionedCpuCoresNot              *float64   `json:"provisioned_cpu_cores_not"`
	ProvisionedCpuCoresNotIn            *[]float64 `json:"provisioned_cpu_cores_not_in"`
	ProvisionedDataSpace                *float64   `json:"provisioned_data_space"`
	ProvisionedDataSpaceGt              *float64   `json:"provisioned_data_space_gt"`
	ProvisionedDataSpaceGte             *float64   `json:"provisioned_data_space_gte"`
	ProvisionedDataSpaceIn              *[]float64 `json:"provisioned_data_space_in"`
	ProvisionedDataSpaceLt              *float64   `json:"provisioned_data_space_lt"`
	ProvisionedDataSpaceLte             *float64   `json:"provisioned_data_space_lte"`
	ProvisionedDataSpaceNot             *float64   `json:"provisioned_data_space_not"`
	ProvisionedDataSpaceNotIn           *[]float64 `json:"provisioned_data_space_not_in"`
	ProvisionedMemoryBytes              *float64   `json:"provisioned_memory_bytes"`
	ProvisionedMemoryBytesGt            *float64   `json:"provisioned_memory_bytes_gt"`
	ProvisionedMemoryBytesGte           *float64   `json:"provisioned_memory_bytes_gte"`
	ProvisionedMemoryBytesIn            *[]float64 `json:"provisioned_memory_bytes_in"`
	ProvisionedMemoryBytesLt            *float64   `json:"provisioned_memory_bytes_lt"`
	ProvisionedMemoryBytesLte           *float64   `json:"provisioned_memory_bytes_lte"`
	ProvisionedMemoryBytesNot           *float64   `json:"provisioned_memory_bytes_not"`
	ProvisionedMemoryBytesNotIn         *[]float64 `json:"provisioned_memory_bytes_not_in"`
	RunningVmNum                        *float64   `json:"running_vm_num"`
	RunningVmNumGt                      *float64   `json:"running_vm_num_gt"`
	RunningVmNumGte                     *float64   `json:"running_vm_num_gte"`
	RunningVmNumIn                      *[]float64 `json:"running_vm_num_in"`
	RunningVmNumLt                      *float64   `json:"running_vm_num_lt"`
	RunningVmNumLte                     *float64   `json:"running_vm_num_lte"`
	RunningVmNumNot                     *float64   `json:"running_vm_num_not"`
	RunningVmNumNotIn                   *[]float64 `json:"running_vm_num_not_in"`
	StoppedVmNum                        *float64   `json:"stopped_vm_num"`
	StoppedVmNumGt                      *float64   `json:"stopped_vm_num_gt"`
	StoppedVmNumGte                     *float64   `json:"stopped_vm_num_gte"`
	StoppedVmNumIn                      *[]float64 `json:"stopped_vm_num_in"`
	StoppedVmNumLt                      *float64   `json:"stopped_vm_num_lt"`
	StoppedVmNumLte                     *float64   `json:"stopped_vm_num_lte"`
	StoppedVmNumNot                     *float64   `json:"stopped_vm_num_not"`
	StoppedVmNumNotIn                   *[]float64 `json:"stopped_vm_num_not_in"`
	SuspendedVmNum                      *float64   `json:"suspended_vm_num"`
	SuspendedVmNumGt                    *float64   `json:"suspended_vm_num_gt"`
	SuspendedVmNumGte                   *float64   `json:"suspended_vm_num_gte"`
	SuspendedVmNumIn                    *[]float64 `json:"suspended_vm_num_in"`
	SuspendedVmNumLt                    *float64   `json:"suspended_vm_num_lt"`
	SuspendedVmNumLte                   *float64   `json:"suspended_vm_num_lte"`
	SuspendedVmNumNot                   *float64   `json:"suspended_vm_num_not"`
	SuspendedVmNumNotIn                 *[]float64 `json:"suspended_vm_num_not_in"`
	TotalCacheCapacity                  *float64   `json:"total_cache_capacity"`
	TotalCacheCapacityGt                *float64   `json:"total_cache_capacity_gt"`
	TotalCacheCapacityGte               *float64   `json:"total_cache_capacity_gte"`
	TotalCacheCapacityIn                *[]float64 `json:"total_cache_capacity_in"`
	TotalCacheCapacityLt                *float64   `json:"total_cache_capacity_lt"`
	TotalCacheCapacityLte               *float64   `json:"total_cache_capacity_lte"`
	TotalCacheCapacityNot               *float64   `json:"total_cache_capacity_not"`
	TotalCacheCapacityNotIn             *[]float64 `json:"total_cache_capacity_not_in"`
	TotalCpuCores                       *float64   `json:"total_cpu_cores"`
	TotalCpuCoresGt                     *float64   `json:"total_cpu_cores_gt"`
	TotalCpuCoresGte                    *float64   `json:"total_cpu_cores_gte"`
	TotalCpuCoresIn                     *[]float64 `json:"total_cpu_cores_in"`
	TotalCpuCoresLt                     *float64   `json:"total_cpu_cores_lt"`
	TotalCpuCoresLte                    *float64   `json:"total_cpu_cores_lte"`
	TotalCpuCoresNot                    *float64   `json:"total_cpu_cores_not"`
	TotalCpuCoresNotIn                  *[]float64 `json:"total_cpu_cores_not_in"`
	TotalCpuHz                          *float64   `json:"total_cpu_hz"`
	TotalCpuHzGt                        *float64   `json:"total_cpu_hz_gt"`
	TotalCpuHzGte                       *float64   `json:"total_cpu_hz_gte"`
	TotalCpuHzIn                        *[]float64 `json:"total_cpu_hz_in"`
	TotalCpuHzLt                        *float64   `json:"total_cpu_hz_lt"`
	TotalCpuHzLte                       *float64   `json:"total_cpu_hz_lte"`
	TotalCpuHzNot                       *float64   `json:"total_cpu_hz_not"`
	TotalCpuHzNotIn                     *[]float64 `json:"total_cpu_hz_not_in"`
	TotalDataCapacity                   *float64   `json:"total_data_capacity"`
	TotalDataCapacityGt                 *float64   `json:"total_data_capacity_gt"`
	TotalDataCapacityGte                *float64   `json:"total_data_capacity_gte"`
	TotalDataCapacityIn                 *[]float64 `json:"total_data_capacity_in"`
	TotalDataCapacityLt                 *float64   `json:"total_data_capacity_lt"`
	TotalDataCapacityLte                *float64   `json:"total_data_capacity_lte"`
	TotalDataCapacityNot                *float64   `json:"total_data_capacity_not"`
	TotalDataCapacityNotIn              *[]float64 `json:"total_data_capacity_not_in"`
	TotalMemoryBytes                    *float64   `json:"total_memory_bytes"`
	TotalMemoryBytesGt                  *float64   `json:"total_memory_bytes_gt"`
	TotalMemoryBytesGte                 *float64   `json:"total_memory_bytes_gte"`
	TotalMemoryBytesIn                  *[]float64 `json:"total_memory_bytes_in"`
	TotalMemoryBytesLt                  *float64   `json:"total_memory_bytes_lt"`
	TotalMemoryBytesLte                 *float64   `json:"total_memory_bytes_lte"`
	TotalMemoryBytesNot                 *float64   `json:"total_memory_bytes_not"`
	TotalMemoryBytesNotIn               *[]float64 `json:"total_memory_bytes_not_in"`
	UsedDataSpace                       *float64   `json:"used_data_space"`
	UsedDataSpaceGt                     *float64   `json:"used_data_space_gt"`
	UsedDataSpaceGte                    *float64   `json:"used_data_space_gte"`
	UsedDataSpaceIn                     *[]float64 `json:"used_data_space_in"`
	UsedDataSpaceLt                     *float64   `json:"used_data_space_lt"`
	UsedDataSpaceLte                    *float64   `json:"used_data_space_lte"`
	UsedDataSpaceNot                    *float64   `json:"used_data_space_not"`
	UsedDataSpaceNotIn                  *[]float64 `json:"used_data_space_not_in"`
	ValidDataSpace                      *float64   `json:"valid_data_space"`
	ValidDataSpaceGt                    *float64   `json:"valid_data_space_gt"`
	ValidDataSpaceGte                   *float64   `json:"valid_data_space_gte"`
	ValidDataSpaceIn                    *[]float64 `json:"valid_data_space_in"`
	ValidDataSpaceLt                    *float64   `json:"valid_data_space_lt"`
	ValidDataSpaceLte                   *float64   `json:"valid_data_space_lte"`
	ValidDataSpaceNot                   *float64   `json:"valid_data_space_not"`
	ValidDataSpaceNotIn                 *[]float64 `json:"valid_data_space_not_in"`
	VmNum                               *float64   `json:"vm_num"`
	VmNumGt                             *float64   `json:"vm_num_gt"`
	VmNumGte                            *float64   `json:"vm_num_gte"`
	VmNumIn                             *[]float64 `json:"vm_num_in"`
	VmNumLt                             *float64   `json:"vm_num_lt"`
	VmNumLte                            *float64   `json:"vm_num_lte"`
	VmNumNot                            *float64   `json:"vm_num_not"`
	VmNumNotIn                          *[]float64 `json:"vm_num_not_in"`
}

// AddLabelsToResourcesJSONBody defines parameters for AddLabelsToResources.
type AddLabelsToResourcesJSONBody AddLabelsToResourcesParams

// AddVmCdRomJSONBody defines parameters for AddVmCdRom.
type AddVmCdRomJSONBody VmAddCdRomParams

// AddVmDiskJSONBody defines parameters for AddVmDisk.
type AddVmDiskJSONBody VmAddDiskParams

// AddVmNicJSONBody defines parameters for AddVmNic.
type AddVmNicJSONBody VmAddNicParams

// AddVmToFolderJSONBody defines parameters for AddVmToFolder.
type AddVmToFolderJSONBody VmAddFolderParams

// CloneIscsiLunFromSnapshotJSONBody defines parameters for CloneIscsiLunFromSnapshot.
type CloneIscsiLunFromSnapshotJSONBody []IscsiLunCloneParams

// CloneNvmfNamespaceFromSnapshotJSONBody defines parameters for CloneNvmfNamespaceFromSnapshot.
type CloneNvmfNamespaceFromSnapshotJSONBody []NvmfNamespaceCloneParams

// CloneSnapshotGroupJSONBody defines parameters for CloneSnapshotGroup.
type CloneSnapshotGroupJSONBody []SnapshotGroupCloneParams

// CloneVmJSONBody defines parameters for CloneVm.
type CloneVmJSONBody []VmCloneParams

// CloneVmTemplateFromVmJSONBody defines parameters for CloneVmTemplateFromVm.
type CloneVmTemplateFromVmJSONBody []VmTemplateCreationParams

// ConnectClusterJSONBody defines parameters for ConnectCluster.
type ConnectClusterJSONBody []ClusterCreationParams

// ConvertVmTemplateFromVmJSONBody defines parameters for ConvertVmTemplateFromVm.
type ConvertVmTemplateFromVmJSONBody []VmTemplateCreationParams

// ConvertVmTemplateToVmJSONBody defines parameters for ConvertVmTemplateToVm.
type ConvertVmTemplateToVmJSONBody []ConvertVmTemplateToVmParams

// CreateBrickTopoJSONBody defines parameters for CreateBrickTopo.
type CreateBrickTopoJSONBody []BrickTopoCreationParams

// CreateClusterRecycleBinSettingJSONBody defines parameters for CreateClusterRecycleBinSetting.
type CreateClusterRecycleBinSettingJSONBody ClusterRecycleBinCreationParams

// CreateConsistencyGroupJSONBody defines parameters for CreateConsistencyGroup.
type CreateConsistencyGroupJSONBody []ConsistencyGroupCreationParams

// CreateConsistencyGroupSnapshotJSONBody defines parameters for CreateConsistencyGroupSnapshot.
type CreateConsistencyGroupSnapshotJSONBody []ConsistencyGroupSnapshotCreationParams

// CreateDatacenterJSONBody defines parameters for CreateDatacenter.
type CreateDatacenterJSONBody []DatacenterCreationParams

// CreateEntityFilterJSONBody defines parameters for CreateEntityFilter.
type CreateEntityFilterJSONBody []EntityFilterCreationParams

// CreateGraphJSONBody defines parameters for CreateGraph.
type CreateGraphJSONBody []GraphCreationParams

// CreateHostJSONBody defines parameters for CreateHost.
type CreateHostJSONBody []HostCreationParams

// CreateIscsiLunJSONBody defines parameters for CreateIscsiLun.
type CreateIscsiLunJSONBody []IscsiLunCreationParams

// CreateIscsiLunSnapshotJSONBody defines parameters for CreateIscsiLunSnapshot.
type CreateIscsiLunSnapshotJSONBody []IscsiLunSnapshotCreationParams

// CreateIscsiTargetJSONBody defines parameters for CreateIscsiTarget.
type CreateIscsiTargetJSONBody []IscsiTargetCreationParams

// CreateLabelJSONBody defines parameters for CreateLabel.
type CreateLabelJSONBody []LabelCreationParams

// CreateNamespaceGroupJSONBody defines parameters for CreateNamespaceGroup.
type CreateNamespaceGroupJSONBody []NamespaceGroupCreationParams

// CreateNfsExportJSONBody defines parameters for CreateNfsExport.
type CreateNfsExportJSONBody []NfsExportCreationParams

// CreateNvmfNamespaceJSONBody defines parameters for CreateNvmfNamespace.
type CreateNvmfNamespaceJSONBody []NvmfNamespaceCreationParams

// CreateNvmfNamespaceSnapshotJSONBody defines parameters for CreateNvmfNamespaceSnapshot.
type CreateNvmfNamespaceSnapshotJSONBody []NvmfNamespaceSnapshotCreationParams

// CreateNvmfSubsystemJSONBody defines parameters for CreateNvmfSubsystem.
type CreateNvmfSubsystemJSONBody []NvmfSubsystemCreationParams

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody []OrganizationCreationParams

// CreateRackTopoJSONBody defines parameters for CreateRackTopo.
type CreateRackTopoJSONBody []RackTopoCreationParams

// CreateReportTemplateJSONBody defines parameters for CreateReportTemplate.
type CreateReportTemplateJSONBody []ReportTemplateCreationParams

// CreateRoleJSONBody defines parameters for CreateRole.
type CreateRoleJSONBody []RoleCreationParams

// CreateSnapshotPlanJSONBody defines parameters for CreateSnapshotPlan.
type CreateSnapshotPlanJSONBody []SnapshotPlanCreationParams

// CreateSnmpTransportJSONBody defines parameters for CreateSnmpTransport.
type CreateSnmpTransportJSONBody []SnmpTransportCreationParams

// CreateSnmpTrapReceiverJSONBody defines parameters for CreateSnmpTrapReceiver.
type CreateSnmpTrapReceiverJSONBody []SnmpTrapReceiverCreationParams

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody []UserCreationParams

// CreateVdsJSONBody defines parameters for CreateVds.
type CreateVdsJSONBody []VdsCreationParams

// CreateVdsWithAccessVlanJSONBody defines parameters for CreateVdsWithAccessVlan.
type CreateVdsWithAccessVlanJSONBody []VdsCreationWithMAccessVlanParams

// CreateVdsWithMigrateVlanJSONBody defines parameters for CreateVdsWithMigrateVlan.
type CreateVdsWithMigrateVlanJSONBody []VdsCreationWithMigrateVlanParams

// CreateViewJSONBody defines parameters for CreateView.
type CreateViewJSONBody []ViewCreationParams

// CreateVmJSONBody defines parameters for CreateVm.
type CreateVmJSONBody []VmCreationParams

// CreateVmFolderJSONBody defines parameters for CreateVmFolder.
type CreateVmFolderJSONBody []VmFolderCreationParams

// CreateVmFromTemplateJSONBody defines parameters for CreateVmFromTemplate.
type CreateVmFromTemplateJSONBody []VmCreateVmFromTemplateParams

// CreateVmPlacementGroupJSONBody defines parameters for CreateVmPlacementGroup.
type CreateVmPlacementGroupJSONBody []VmPlacementGroupCreationParams

// CreateVmSnapshotJSONBody defines parameters for CreateVmSnapshot.
type CreateVmSnapshotJSONBody VmSnapshotCreationParams

// CreateVmVlanJSONBody defines parameters for CreateVmVlan.
type CreateVmVlanJSONBody []VmVlanCreationParams

// CreateVmVolumeJSONBody defines parameters for CreateVmVolume.
type CreateVmVolumeJSONBody []VmVolumeCreationParams

// DeleteBrickTopoJSONBody defines parameters for DeleteBrickTopo.
type DeleteBrickTopoJSONBody BrickTopoDeletionParams

// DeleteClusterJSONBody defines parameters for DeleteCluster.
type DeleteClusterJSONBody ClusterDeletionParams

// DeleteClusterRecycleBinSettingJSONBody defines parameters for DeleteClusterRecycleBinSetting.
type DeleteClusterRecycleBinSettingJSONBody ClusterRecycleBinDeletionParams

// DeleteConsistencyGroupJSONBody defines parameters for DeleteConsistencyGroup.
type DeleteConsistencyGroupJSONBody ConsistencyGroupDeletionParams

// DeleteConsistencyGroupSnapshotJSONBody defines parameters for DeleteConsistencyGroupSnapshot.
type DeleteConsistencyGroupSnapshotJSONBody ConsistencyGroupSnapshotDeletionParams

// DeleteDatacenterJSONBody defines parameters for DeleteDatacenter.
type DeleteDatacenterJSONBody DatacenterDeletionParams

// DeleteElfImageJSONBody defines parameters for DeleteElfImage.
type DeleteElfImageJSONBody ElfImageDeletionParams

// DeleteEntityFilterJSONBody defines parameters for DeleteEntityFilter.
type DeleteEntityFilterJSONBody EntityFilterDeletionParams

// DeleteGraphJSONBody defines parameters for DeleteGraph.
type DeleteGraphJSONBody GraphDeletionParams

// DeleteIscsiLunJSONBody defines parameters for DeleteIscsiLun.
type DeleteIscsiLunJSONBody IscsiLunDeletionParams

// DeleteIscsiLunSnapshotJSONBody defines parameters for DeleteIscsiLunSnapshot.
type DeleteIscsiLunSnapshotJSONBody IscsiLunSnapshotDeletionParams

// DeleteIscsiTargetJSONBody defines parameters for DeleteIscsiTarget.
type DeleteIscsiTargetJSONBody IscsiTargetDeletionParams

// DeleteLabelJSONBody defines parameters for DeleteLabel.
type DeleteLabelJSONBody LabelDeletionParams

// DeleteNamespaceGroupJSONBody defines parameters for DeleteNamespaceGroup.
type DeleteNamespaceGroupJSONBody NamespaceGroupDeletionParams

// DeleteNfsExportJSONBody defines parameters for DeleteNfsExport.
type DeleteNfsExportJSONBody NfsExportDeletionParams

// DeleteNvmfNamespaceJSONBody defines parameters for DeleteNvmfNamespace.
type DeleteNvmfNamespaceJSONBody NvmfNamespaceDeletionParams

// DeleteNvmfNamespaceSnapshotJSONBody defines parameters for DeleteNvmfNamespaceSnapshot.
type DeleteNvmfNamespaceSnapshotJSONBody NvmfNamespaceSnapshotDeletionParams

// DeleteNvmfSubsystemJSONBody defines parameters for DeleteNvmfSubsystem.
type DeleteNvmfSubsystemJSONBody NvmfSubsystemDeletionParams

// DeleteOrganizationJSONBody defines parameters for DeleteOrganization.
type DeleteOrganizationJSONBody OrganizationDeletionParams

// DeleteRackTopoJSONBody defines parameters for DeleteRackTopo.
type DeleteRackTopoJSONBody RackTopoDeletionParams

// DeleteReportTemplateJSONBody defines parameters for DeleteReportTemplate.
type DeleteReportTemplateJSONBody ReportTemplateDeletionParams

// DeleteRoleJSONBody defines parameters for DeleteRole.
type DeleteRoleJSONBody RoleDeletionParams

// DeleteSnapshotGroupJSONBody defines parameters for DeleteSnapshotGroup.
type DeleteSnapshotGroupJSONBody SnapshotGroupDeletionParams

// DeleteSnapshotPlanJSONBody defines parameters for DeleteSnapshotPlan.
type DeleteSnapshotPlanJSONBody SnapshotPlanDeletionParams

// DeleteSnmpTransportJSONBody defines parameters for DeleteSnmpTransport.
type DeleteSnmpTransportJSONBody SnmpTransportDeletionParams

// DeleteSnmpTrapReceiverJSONBody defines parameters for DeleteSnmpTrapReceiver.
type DeleteSnmpTrapReceiverJSONBody SnmpTrapReceiverDeletionParams

// DeleteUserJSONBody defines parameters for DeleteUser.
type DeleteUserJSONBody UserDeletionParams

// DeleteVdsJSONBody defines parameters for DeleteVds.
type DeleteVdsJSONBody VdsDeletionParams

// DeleteViewJSONBody defines parameters for DeleteView.
type DeleteViewJSONBody ViewDeletionParams

// DeleteVmJSONBody defines parameters for DeleteVm.
type DeleteVmJSONBody VmOperateParams

// DeleteVmFolderJSONBody defines parameters for DeleteVmFolder.
type DeleteVmFolderJSONBody VmFolderDeletionParams

// DeleteVmPlacementGroupJSONBody defines parameters for DeleteVmPlacementGroup.
type DeleteVmPlacementGroupJSONBody VmPlacementGroupDeletionParams

// DeleteVmSnapshotJSONBody defines parameters for DeleteVmSnapshot.
type DeleteVmSnapshotJSONBody VmSnapshotDeletionParams

// DeleteVmTemplateFromVmJSONBody defines parameters for DeleteVmTemplateFromVm.
type DeleteVmTemplateFromVmJSONBody VmTemplateDeletionParams

// DeleteVlanJSONBody defines parameters for DeleteVlan.
type DeleteVlanJSONBody VlanDeletionParams

// DeleteVmVolumeFromVmJSONBody defines parameters for DeleteVmVolumeFromVm.
type DeleteVmVolumeFromVmJSONBody VmVolumeDeletionParams

// ExecuteSnapshotPlanJSONBody defines parameters for ExecuteSnapshotPlan.
type ExecuteSnapshotPlanJSONBody SnapshotPlanExecutionParams

// ForceRestartVmJSONBody defines parameters for ForceRestartVm.
type ForceRestartVmJSONBody VmOperateParams

// GenerateFromReportTemplateJSONBody defines parameters for GenerateFromReportTemplate.
type GenerateFromReportTemplateJSONBody ReporteTemplateGenerationParams

// GetAlertNotifiersJSONBody defines parameters for GetAlertNotifiers.
type GetAlertNotifiersJSONBody GetAlertNotifiersRequestBody

// GetAlertNotifiersConnectionJSONBody defines parameters for GetAlertNotifiersConnection.
type GetAlertNotifiersConnectionJSONBody GetAlertNotifiersConnectionRequestBody

// GetAlertRulesJSONBody defines parameters for GetAlertRules.
type GetAlertRulesJSONBody GetAlertRulesRequestBody

// GetAlertRulesConnectionJSONBody defines parameters for GetAlertRulesConnection.
type GetAlertRulesConnectionJSONBody GetAlertRulesConnectionRequestBody

// GetAlertsJSONBody defines parameters for GetAlerts.
type GetAlertsJSONBody GetAlertsRequestBody

// GetAlertsConnectionJSONBody defines parameters for GetAlertsConnection.
type GetAlertsConnectionJSONBody GetAlertsConnectionRequestBody

// GetApplicationsJSONBody defines parameters for GetApplications.
type GetApplicationsJSONBody GetApplicationsRequestBody

// GetApplicationsConnectionJSONBody defines parameters for GetApplicationsConnection.
type GetApplicationsConnectionJSONBody GetApplicationsConnectionRequestBody

// GetBrickTopoesJSONBody defines parameters for GetBrickTopoes.
type GetBrickTopoesJSONBody GetBrickTopoesRequestBody

// GetBrickTopoesConnectionJSONBody defines parameters for GetBrickTopoesConnection.
type GetBrickTopoesConnectionJSONBody GetBrickTopoesConnectionRequestBody

// GetClusterImagesJSONBody defines parameters for GetClusterImages.
type GetClusterImagesJSONBody GetClusterImagesRequestBody

// GetClusterImagesConnectionJSONBody defines parameters for GetClusterImagesConnection.
type GetClusterImagesConnectionJSONBody GetClusterImagesConnectionRequestBody

// GetClusterSettingsesJSONBody defines parameters for GetClusterSettingses.
type GetClusterSettingsesJSONBody GetClusterSettingsesRequestBody

// GetClusterSettingsesConnectionJSONBody defines parameters for GetClusterSettingsesConnection.
type GetClusterSettingsesConnectionJSONBody GetClusterSettingsesConnectionRequestBody

// GetClusterTopoesJSONBody defines parameters for GetClusterTopoes.
type GetClusterTopoesJSONBody GetClusterTopoesRequestBody

// GetClusterTopoesConnectionJSONBody defines parameters for GetClusterTopoesConnection.
type GetClusterTopoesConnectionJSONBody GetClusterTopoesConnectionRequestBody

// GetClusterUpgradeHistoriesJSONBody defines parameters for GetClusterUpgradeHistories.
type GetClusterUpgradeHistoriesJSONBody GetClusterUpgradeHistoriesRequestBody

// GetClusterUpgradeHistoriesConnectionJSONBody defines parameters for GetClusterUpgradeHistoriesConnection.
type GetClusterUpgradeHistoriesConnectionJSONBody GetClusterUpgradeHistoriesConnectionRequestBody

// GetClustersJSONBody defines parameters for GetClusters.
type GetClustersJSONBody GetClustersRequestBody

// GetClustersConnectionJSONBody defines parameters for GetClustersConnection.
type GetClustersConnectionJSONBody GetClustersConnectionRequestBody

// GetConsistencyGroupSnapshotsJSONBody defines parameters for GetConsistencyGroupSnapshots.
type GetConsistencyGroupSnapshotsJSONBody GetConsistencyGroupSnapshotsRequestBody

// GetConsistencyGroupSnapshotsConnectionJSONBody defines parameters for GetConsistencyGroupSnapshotsConnection.
type GetConsistencyGroupSnapshotsConnectionJSONBody GetConsistencyGroupSnapshotsConnectionRequestBody

// GetConsistencyGroupsJSONBody defines parameters for GetConsistencyGroups.
type GetConsistencyGroupsJSONBody GetConsistencyGroupsRequestBody

// GetConsistencyGroupsConnectionJSONBody defines parameters for GetConsistencyGroupsConnection.
type GetConsistencyGroupsConnectionJSONBody GetConsistencyGroupsConnectionRequestBody

// GetDatacentersJSONBody defines parameters for GetDatacenters.
type GetDatacentersJSONBody GetDatacentersRequestBody

// GetDatacentersConnectionJSONBody defines parameters for GetDatacentersConnection.
type GetDatacentersConnectionJSONBody GetDatacentersConnectionRequestBody

// GetDeploysJSONBody defines parameters for GetDeploys.
type GetDeploysJSONBody GetDeploysRequestBody

// GetDeploysConnectionJSONBody defines parameters for GetDeploysConnection.
type GetDeploysConnectionJSONBody GetDeploysConnectionRequestBody

// GetDiscoverHostsJSONBody defines parameters for GetDiscoverHosts.
type GetDiscoverHostsJSONBody GetDiscoverHostsRequestBody

// GetDisksJSONBody defines parameters for GetDisks.
type GetDisksJSONBody GetDisksRequestBody

// GetDisksConnectionJSONBody defines parameters for GetDisksConnection.
type GetDisksConnectionJSONBody GetDisksConnectionRequestBody

// GetElfDataStoresJSONBody defines parameters for GetElfDataStores.
type GetElfDataStoresJSONBody GetElfDataStoresRequestBody

// GetElfDataStoresConnectionJSONBody defines parameters for GetElfDataStoresConnection.
type GetElfDataStoresConnectionJSONBody GetElfDataStoresConnectionRequestBody

// GetElfImagesJSONBody defines parameters for GetElfImages.
type GetElfImagesJSONBody GetElfImagesRequestBody

// GetElfImagesConnectionJSONBody defines parameters for GetElfImagesConnection.
type GetElfImagesConnectionJSONBody GetElfImagesConnectionRequestBody

// GetElfStoragePoliciesJSONBody defines parameters for GetElfStoragePolicies.
type GetElfStoragePoliciesJSONBody GetElfStoragePoliciesRequestBody

// GetElfStoragePoliciesConnectionJSONBody defines parameters for GetElfStoragePoliciesConnection.
type GetElfStoragePoliciesConnectionJSONBody GetElfStoragePoliciesConnectionRequestBody

// GetEntityFiltersJSONBody defines parameters for GetEntityFilters.
type GetEntityFiltersJSONBody GetEntityFiltersRequestBody

// GetEntityFiltersConnectionJSONBody defines parameters for GetEntityFiltersConnection.
type GetEntityFiltersConnectionJSONBody GetEntityFiltersConnectionRequestBody

// GetGlobalAlertRulesJSONBody defines parameters for GetGlobalAlertRules.
type GetGlobalAlertRulesJSONBody GetGlobalAlertRulesRequestBody

// GetGlobalAlertRulesConnectionJSONBody defines parameters for GetGlobalAlertRulesConnection.
type GetGlobalAlertRulesConnectionJSONBody GetGlobalAlertRulesConnectionRequestBody

// GetGlobalSettingsesJSONBody defines parameters for GetGlobalSettingses.
type GetGlobalSettingsesJSONBody GetGlobalSettingsesRequestBody

// GetGlobalSettingsesConnectionJSONBody defines parameters for GetGlobalSettingsesConnection.
type GetGlobalSettingsesConnectionJSONBody GetGlobalSettingsesConnectionRequestBody

// GetGraphsJSONBody defines parameters for GetGraphs.
type GetGraphsJSONBody GetGraphsRequestBody

// GetGraphsConnectionJSONBody defines parameters for GetGraphsConnection.
type GetGraphsConnectionJSONBody GetGraphsConnectionRequestBody

// GetHostsJSONBody defines parameters for GetHosts.
type GetHostsJSONBody GetHostsRequestBody

// GetHostsConnectionJSONBody defines parameters for GetHostsConnection.
type GetHostsConnectionJSONBody GetHostsConnectionRequestBody

// GetImagesConnectorJSONBody defines parameters for GetImagesConnector.
type GetImagesConnectorJSONBody GetImagesConnectorRequestBody

// GetIpmisJSONBody defines parameters for GetIpmis.
type GetIpmisJSONBody GetIpmisRequestBody

// GetIscsiConnectionsJSONBody defines parameters for GetIscsiConnections.
type GetIscsiConnectionsJSONBody GetIscsiConnectionsRequestBody

// GetIscsiConnectionsConnectionJSONBody defines parameters for GetIscsiConnectionsConnection.
type GetIscsiConnectionsConnectionJSONBody GetIscsiConnectionsConnectionRequestBody

// GetIscsiLunSnapshotsJSONBody defines parameters for GetIscsiLunSnapshots.
type GetIscsiLunSnapshotsJSONBody GetIscsiLunSnapshotsRequestBody

// GetIscsiLunSnapshotsConnectionJSONBody defines parameters for GetIscsiLunSnapshotsConnection.
type GetIscsiLunSnapshotsConnectionJSONBody GetIscsiLunSnapshotsConnectionRequestBody

// GetIscsiLunsJSONBody defines parameters for GetIscsiLuns.
type GetIscsiLunsJSONBody GetIscsiLunsRequestBody

// GetIscsiLunsConnectionJSONBody defines parameters for GetIscsiLunsConnection.
type GetIscsiLunsConnectionJSONBody GetIscsiLunsConnectionRequestBody

// GetIscsiTargetsJSONBody defines parameters for GetIscsiTargets.
type GetIscsiTargetsJSONBody GetIscsiTargetsRequestBody

// GetIscsiTargetsConnectionJSONBody defines parameters for GetIscsiTargetsConnection.
type GetIscsiTargetsConnectionJSONBody GetIscsiTargetsConnectionRequestBody

// GetLabelsJSONBody defines parameters for GetLabels.
type GetLabelsJSONBody GetLabelsRequestBody

// GetLabelsConnectionJSONBody defines parameters for GetLabelsConnection.
type GetLabelsConnectionJSONBody GetLabelsConnectionRequestBody

// GetLicensesJSONBody defines parameters for GetLicenses.
type GetLicensesJSONBody GetLicensesRequestBody

// GetLicensesConnectionJSONBody defines parameters for GetLicensesConnection.
type GetLicensesConnectionJSONBody GetLicensesConnectionRequestBody

// GetLogCollectionsJSONBody defines parameters for GetLogCollections.
type GetLogCollectionsJSONBody GetLogCollectionsRequestBody

// GetLogCollectionsConnectionJSONBody defines parameters for GetLogCollectionsConnection.
type GetLogCollectionsConnectionJSONBody GetLogCollectionsConnectionRequestBody

// GetMigrateTransmittersJSONBody defines parameters for GetMigrateTransmitters.
type GetMigrateTransmittersJSONBody GetMigrateTransmittersRequestBody

// GetMigrateTransmittersConnectionJSONBody defines parameters for GetMigrateTransmittersConnection.
type GetMigrateTransmittersConnectionJSONBody GetMigrateTransmittersConnectionRequestBody

// GetNamespaceGroupsJSONBody defines parameters for GetNamespaceGroups.
type GetNamespaceGroupsJSONBody GetNamespaceGroupsRequestBody

// GetNamespaceGroupsConnectionJSONBody defines parameters for GetNamespaceGroupsConnection.
type GetNamespaceGroupsConnectionJSONBody GetNamespaceGroupsConnectionRequestBody

// GetNfsExportsJSONBody defines parameters for GetNfsExports.
type GetNfsExportsJSONBody GetNfsExportsRequestBody

// GetNfsExportsConnectionJSONBody defines parameters for GetNfsExportsConnection.
type GetNfsExportsConnectionJSONBody GetNfsExportsConnectionRequestBody

// GetNfsInodesJSONBody defines parameters for GetNfsInodes.
type GetNfsInodesJSONBody GetNfsInodesRequestBody

// GetNfsInodesConnectionJSONBody defines parameters for GetNfsInodesConnection.
type GetNfsInodesConnectionJSONBody GetNfsInodesConnectionRequestBody

// GetNicsJSONBody defines parameters for GetNics.
type GetNicsJSONBody GetNicsRequestBody

// GetNicsConnectionJSONBody defines parameters for GetNicsConnection.
type GetNicsConnectionJSONBody GetNicsConnectionRequestBody

// GetNodeTopoesJSONBody defines parameters for GetNodeTopoes.
type GetNodeTopoesJSONBody GetNodeTopoesRequestBody

// GetNodeTopoesConnectionJSONBody defines parameters for GetNodeTopoesConnection.
type GetNodeTopoesConnectionJSONBody GetNodeTopoesConnectionRequestBody

// GetNvmfNamespaceSnapshotsJSONBody defines parameters for GetNvmfNamespaceSnapshots.
type GetNvmfNamespaceSnapshotsJSONBody GetNvmfNamespaceSnapshotsRequestBody

// GetNvmfNamespaceSnapshotsConnectionJSONBody defines parameters for GetNvmfNamespaceSnapshotsConnection.
type GetNvmfNamespaceSnapshotsConnectionJSONBody GetNvmfNamespaceSnapshotsConnectionRequestBody

// GetNvmfNamespacesJSONBody defines parameters for GetNvmfNamespaces.
type GetNvmfNamespacesJSONBody GetNvmfNamespacesRequestBody

// GetNvmfNamespacesConnectionJSONBody defines parameters for GetNvmfNamespacesConnection.
type GetNvmfNamespacesConnectionJSONBody GetNvmfNamespacesConnectionRequestBody

// GetNvmfSubsystemsJSONBody defines parameters for GetNvmfSubsystems.
type GetNvmfSubsystemsJSONBody GetNvmfSubsystemsRequestBody

// GetNvmfSubsystemsConnectionJSONBody defines parameters for GetNvmfSubsystemsConnection.
type GetNvmfSubsystemsConnectionJSONBody GetNvmfSubsystemsConnectionRequestBody

// GetOrganizationsJSONBody defines parameters for GetOrganizations.
type GetOrganizationsJSONBody GetOrganizationsRequestBody

// GetOrganizationsConnectionJSONBody defines parameters for GetOrganizationsConnection.
type GetOrganizationsConnectionJSONBody GetOrganizationsConnectionRequestBody

// GetPmemDimmsJSONBody defines parameters for GetPmemDimms.
type GetPmemDimmsJSONBody GetPmemDimmsRequestBody

// GetPmemDimmsConnectionJSONBody defines parameters for GetPmemDimmsConnection.
type GetPmemDimmsConnectionJSONBody GetPmemDimmsConnectionRequestBody

// GetRackTopoesJSONBody defines parameters for GetRackTopoes.
type GetRackTopoesJSONBody GetRackTopoesRequestBody

// GetRackTopoesConnectionJSONBody defines parameters for GetRackTopoesConnection.
type GetRackTopoesConnectionJSONBody GetRackTopoesConnectionRequestBody

// GetReportTasksJSONBody defines parameters for GetReportTasks.
type GetReportTasksJSONBody GetReportTasksRequestBody

// GetReportTasksConnectionJSONBody defines parameters for GetReportTasksConnection.
type GetReportTasksConnectionJSONBody GetReportTasksConnectionRequestBody

// GetReportTemplatesJSONBody defines parameters for GetReportTemplates.
type GetReportTemplatesJSONBody GetReportTemplatesRequestBody

// GetReportTemplatesConnectionJSONBody defines parameters for GetReportTemplatesConnection.
type GetReportTemplatesConnectionJSONBody GetReportTemplatesConnectionRequestBody

// GetSnapshotGroupsJSONBody defines parameters for GetSnapshotGroups.
type GetSnapshotGroupsJSONBody GetSnapshotGroupsRequestBody

// GetSnapshotGroupsConnectionJSONBody defines parameters for GetSnapshotGroupsConnection.
type GetSnapshotGroupsConnectionJSONBody GetSnapshotGroupsConnectionRequestBody

// GetSnapshotPlanTasksJSONBody defines parameters for GetSnapshotPlanTasks.
type GetSnapshotPlanTasksJSONBody GetSnapshotPlanTasksRequestBody

// GetSnapshotPlanTasksConnectionJSONBody defines parameters for GetSnapshotPlanTasksConnection.
type GetSnapshotPlanTasksConnectionJSONBody GetSnapshotPlanTasksConnectionRequestBody

// GetSnapshotPlansJSONBody defines parameters for GetSnapshotPlans.
type GetSnapshotPlansJSONBody GetSnapshotPlansRequestBody

// GetSnapshotPlansConnectionJSONBody defines parameters for GetSnapshotPlansConnection.
type GetSnapshotPlansConnectionJSONBody GetSnapshotPlansConnectionRequestBody

// GetSnmpTransportsJSONBody defines parameters for GetSnmpTransports.
type GetSnmpTransportsJSONBody GetSnmpTransportsRequestBody

// GetSnmpTransportsConnectionJSONBody defines parameters for GetSnmpTransportsConnection.
type GetSnmpTransportsConnectionJSONBody GetSnmpTransportsConnectionRequestBody

// GetSnmpTrapReceiversJSONBody defines parameters for GetSnmpTrapReceivers.
type GetSnmpTrapReceiversJSONBody GetSnmpTrapReceiversRequestBody

// GetSnmpTrapReceiversConnectionJSONBody defines parameters for GetSnmpTrapReceiversConnection.
type GetSnmpTrapReceiversConnectionJSONBody GetSnmpTrapReceiversConnectionRequestBody

// GetStoragePoliciesConnectorJSONBody defines parameters for GetStoragePoliciesConnector.
type GetStoragePoliciesConnectorJSONBody GetStoragePoliciesConnectorRequestBody

// GetSvtImagesJSONBody defines parameters for GetSvtImages.
type GetSvtImagesJSONBody GetSvtImagesRequestBody

// GetSvtImagesConnectionJSONBody defines parameters for GetSvtImagesConnection.
type GetSvtImagesConnectionJSONBody GetSvtImagesConnectionRequestBody

// GetSystemAuditLogsJSONBody defines parameters for GetSystemAuditLogs.
type GetSystemAuditLogsJSONBody GetSystemAuditLogsRequestBody

// GetSystemAuditLogsConnectionJSONBody defines parameters for GetSystemAuditLogsConnection.
type GetSystemAuditLogsConnectionJSONBody GetSystemAuditLogsConnectionRequestBody

// GetTasksJSONBody defines parameters for GetTasks.
type GetTasksJSONBody GetTasksRequestBody

// GetTasksConnectionJSONBody defines parameters for GetTasksConnection.
type GetTasksConnectionJSONBody GetTasksConnectionRequestBody

// GetUploadTasksJSONBody defines parameters for GetUploadTasks.
type GetUploadTasksJSONBody GetUploadTasksRequestBody

// GetUploadTasksConnectionJSONBody defines parameters for GetUploadTasksConnection.
type GetUploadTasksConnectionJSONBody GetUploadTasksConnectionRequestBody

// GetUsbDevicesJSONBody defines parameters for GetUsbDevices.
type GetUsbDevicesJSONBody GetUsbDevicesRequestBody

// GetUsbDevicesConnectionJSONBody defines parameters for GetUsbDevicesConnection.
type GetUsbDevicesConnectionJSONBody GetUsbDevicesConnectionRequestBody

// GetUserAuditLogsJSONBody defines parameters for GetUserAuditLogs.
type GetUserAuditLogsJSONBody GetUserAuditLogsRequestBody

// GetUserAuditLogsConnectionJSONBody defines parameters for GetUserAuditLogsConnection.
type GetUserAuditLogsConnectionJSONBody GetUserAuditLogsConnectionRequestBody

// GetUserRoleNextsJSONBody defines parameters for GetUserRoleNexts.
type GetUserRoleNextsJSONBody GetUserRoleNextsRequestBody

// GetUserRoleNextsConnectionJSONBody defines parameters for GetUserRoleNextsConnection.
type GetUserRoleNextsConnectionJSONBody GetUserRoleNextsConnectionRequestBody

// GetUsersJSONBody defines parameters for GetUsers.
type GetUsersJSONBody GetUsersRequestBody

// GetUsersConnectionJSONBody defines parameters for GetUsersConnection.
type GetUsersConnectionJSONBody GetUsersConnectionRequestBody

// GetVcenterAccountsJSONBody defines parameters for GetVcenterAccounts.
type GetVcenterAccountsJSONBody GetVcenterAccountsRequestBody

// GetVcenterAccountsConnectionJSONBody defines parameters for GetVcenterAccountsConnection.
type GetVcenterAccountsConnectionJSONBody GetVcenterAccountsConnectionRequestBody

// GetVdsesJSONBody defines parameters for GetVdses.
type GetVdsesJSONBody GetVdsesRequestBody

// GetVdsesConnectionJSONBody defines parameters for GetVdsesConnection.
type GetVdsesConnectionJSONBody GetVdsesConnectionRequestBody

// GetViewsJSONBody defines parameters for GetViews.
type GetViewsJSONBody GetViewsRequestBody

// GetViewsConnectionJSONBody defines parameters for GetViewsConnection.
type GetViewsConnectionJSONBody GetViewsConnectionRequestBody

// GetVlansJSONBody defines parameters for GetVlans.
type GetVlansJSONBody GetVlansRequestBody

// GetVlansConnectionJSONBody defines parameters for GetVlansConnection.
type GetVlansConnectionJSONBody GetVlansConnectionRequestBody

// GetVmDisksJSONBody defines parameters for GetVmDisks.
type GetVmDisksJSONBody GetVmDisksRequestBody

// GetVmDisksConnectionJSONBody defines parameters for GetVmDisksConnection.
type GetVmDisksConnectionJSONBody GetVmDisksConnectionRequestBody

// GetVmEntityFilterResultsJSONBody defines parameters for GetVmEntityFilterResults.
type GetVmEntityFilterResultsJSONBody GetVmEntityFilterResultsRequestBody

// GetVmEntityFilterResultsConnectionJSONBody defines parameters for GetVmEntityFilterResultsConnection.
type GetVmEntityFilterResultsConnectionJSONBody GetVmEntityFilterResultsConnectionRequestBody

// GetVmFoldersJSONBody defines parameters for GetVmFolders.
type GetVmFoldersJSONBody GetVmFoldersRequestBody

// GetVmFoldersConnectionJSONBody defines parameters for GetVmFoldersConnection.
type GetVmFoldersConnectionJSONBody GetVmFoldersConnectionRequestBody

// GetVmNicsJSONBody defines parameters for GetVmNics.
type GetVmNicsJSONBody GetVmNicsRequestBody

// GetVmNicsConnectionJSONBody defines parameters for GetVmNicsConnection.
type GetVmNicsConnectionJSONBody GetVmNicsConnectionRequestBody

// GetVmPlacementGroupsJSONBody defines parameters for GetVmPlacementGroups.
type GetVmPlacementGroupsJSONBody GetVmPlacementGroupsRequestBody

// GetVmPlacementGroupsConnectionJSONBody defines parameters for GetVmPlacementGroupsConnection.
type GetVmPlacementGroupsConnectionJSONBody GetVmPlacementGroupsConnectionRequestBody

// GetVmSnapshotsJSONBody defines parameters for GetVmSnapshots.
type GetVmSnapshotsJSONBody GetVmSnapshotsRequestBody

// GetVmSnapshotsConnectionJSONBody defines parameters for GetVmSnapshotsConnection.
type GetVmSnapshotsConnectionJSONBody GetVmSnapshotsConnectionRequestBody

// GetVmTemplatesJSONBody defines parameters for GetVmTemplates.
type GetVmTemplatesJSONBody GetVmTemplatesRequestBody

// GetVmTemplatesConnectionJSONBody defines parameters for GetVmTemplatesConnection.
type GetVmTemplatesConnectionJSONBody GetVmTemplatesConnectionRequestBody

// GetVmVolumesJSONBody defines parameters for GetVmVolumes.
type GetVmVolumesJSONBody GetVmVolumesRequestBody

// GetVmVolumesConnectionJSONBody defines parameters for GetVmVolumesConnection.
type GetVmVolumesConnectionJSONBody GetVmVolumesConnectionRequestBody

// GetVmsJSONBody defines parameters for GetVms.
type GetVmsJSONBody GetVmsRequestBody

// GetVmsConnectionJSONBody defines parameters for GetVmsConnection.
type GetVmsConnectionJSONBody GetVmsConnectionRequestBody

// GetVsphereEsxiAccountsJSONBody defines parameters for GetVsphereEsxiAccounts.
type GetVsphereEsxiAccountsJSONBody GetVsphereEsxiAccountsRequestBody

// GetVsphereEsxiAccountsConnectionJSONBody defines parameters for GetVsphereEsxiAccountsConnection.
type GetVsphereEsxiAccountsConnectionJSONBody GetVsphereEsxiAccountsConnectionRequestBody

// GetWitnessesJSONBody defines parameters for GetWitnesses.
type GetWitnessesJSONBody GetWitnessesRequestBody

// GetWitnessesConnectionJSONBody defines parameters for GetWitnessesConnection.
type GetWitnessesConnectionJSONBody GetWitnessesConnectionRequestBody

// GetZoneTopoesJSONBody defines parameters for GetZoneTopoes.
type GetZoneTopoesJSONBody GetZoneTopoesRequestBody

// GetZoneTopoesConnectionJSONBody defines parameters for GetZoneTopoesConnection.
type GetZoneTopoesConnectionJSONBody GetZoneTopoesConnectionRequestBody

// GetZonesJSONBody defines parameters for GetZones.
type GetZonesJSONBody GetZonesRequestBody

// GetZonesConnectionJSONBody defines parameters for GetZonesConnection.
type GetZonesConnectionJSONBody GetZonesConnectionRequestBody

// InstallVmtoolsJSONBody defines parameters for InstallVmtools.
type InstallVmtoolsJSONBody InstallVmtoolsParams

// KeepSnapshotGroupJSONBody defines parameters for KeepSnapshotGroup.
type KeepSnapshotGroupJSONBody SnapshotGroupKeepParams

// LoginJSONBody defines parameters for Login.
type LoginJSONBody LoginInput

// MigRateVmJSONBody defines parameters for MigRateVm.
type MigRateVmJSONBody VmMigrateParams

// MountDiskJSONBody defines parameters for MountDisk.
type MountDiskJSONBody DiskMountParams

// MountUsbDeviceJSONBody defines parameters for MountUsbDevice.
type MountUsbDeviceJSONBody UsbDeviceMountParams

// MoveBrickTopoJSONBody defines parameters for MoveBrickTopo.
type MoveBrickTopoJSONBody BrickTopoMoveParams

// UpdateNodeTopoJSONBody defines parameters for UpdateNodeTopo.
type UpdateNodeTopoJSONBody NodeTopoUpdationParams

// MoveVmToRecycleBinJSONBody defines parameters for MoveVmToRecycleBin.
type MoveVmToRecycleBinJSONBody VmOperateParams

// ForceShutDownVmJSONBody defines parameters for ForceShutDownVm.
type ForceShutDownVmJSONBody VmOperateParams

// RebuildVmJSONBody defines parameters for RebuildVm.
type RebuildVmJSONBody []VmRebuildParams

// RecoverVmFromRecycleBinJSONBody defines parameters for RecoverVmFromRecycleBin.
type RecoverVmFromRecycleBinJSONBody VmOperateParams

// RemoveLabelsFromResourcesJSONBody defines parameters for RemoveLabelsFromResources.
type RemoveLabelsFromResourcesJSONBody RemoveLabelsFromResourcesParams

// RemoveVmCdRomJSONBody defines parameters for RemoveVmCdRom.
type RemoveVmCdRomJSONBody VmRemoveCdRomParams

// RemoveVmDiskJSONBody defines parameters for RemoveVmDisk.
type RemoveVmDiskJSONBody VmRemoveDiskParams

// RemoveVmToFolderJSONBody defines parameters for RemoveVmToFolder.
type RemoveVmToFolderJSONBody VmOperateParams

// RemoveVmNicJSONBody defines parameters for RemoveVmNic.
type RemoveVmNicJSONBody VmRemoveNicParams

// ResolveAlertJSONBody defines parameters for ResolveAlert.
type ResolveAlertJSONBody ResolveAlertParams

// RestartVmJSONBody defines parameters for RestartVm.
type RestartVmJSONBody VmOperateParams

// ResumeSnapshotPlanJSONBody defines parameters for ResumeSnapshotPlan.
type ResumeSnapshotPlanJSONBody SnapshotPlanResumeParams

// ResumeVmJSONBody defines parameters for ResumeVm.
type ResumeVmJSONBody VmOperateParams

// UpdateConsistencyGroupSnapshotJSONBody defines parameters for UpdateConsistencyGroupSnapshot.
type UpdateConsistencyGroupSnapshotJSONBody ConsistencyGroupSnapshotUpdationParams

// RollbackIscsiLunFromSnapshotJSONBody defines parameters for RollbackIscsiLunFromSnapshot.
type RollbackIscsiLunFromSnapshotJSONBody []IscsiLunRollbackParams

// RollbackNvmfNamespaceFromSnapshotJSONBody defines parameters for RollbackNvmfNamespaceFromSnapshot.
type RollbackNvmfNamespaceFromSnapshotJSONBody []NvmfNamespaceRollbackParams

// RollbackSnapshotGroupJSONBody defines parameters for RollbackSnapshotGroup.
type RollbackSnapshotGroupJSONBody SnapshotGroupRollbackParams

// RollbackVmJSONBody defines parameters for RollbackVm.
type RollbackVmJSONBody VmRollbackParams

// ShutDownVmJSONBody defines parameters for ShutDownVm.
type ShutDownVmJSONBody VmOperateParams

// StartVmJSONBody defines parameters for StartVm.
type StartVmJSONBody VmStartParams

// SuspendSnapshotPlanJSONBody defines parameters for SuspendSnapshotPlan.
type SuspendSnapshotPlanJSONBody SnapshotPlanSuspendedParams

// SuspendVmJSONBody defines parameters for SuspendVm.
type SuspendVmJSONBody VmOperateParams

// TriggerDiskBlinkJSONBody defines parameters for TriggerDiskBlink.
type TriggerDiskBlinkJSONBody []TriggerDiskBlinkParams

// UnmountDiskJSONBody defines parameters for UnmountDisk.
type UnmountDiskJSONBody DiskUnmountParams

// UnmountUsbDeviceJSONBody defines parameters for UnmountUsbDevice.
type UnmountUsbDeviceJSONBody UsbDeviceUnmountParams

// UpdateBrickTopoJSONBody defines parameters for UpdateBrickTopo.
type UpdateBrickTopoJSONBody BrickTopoUpdationParams

// UpdateClusterJSONBody defines parameters for UpdateCluster.
type UpdateClusterJSONBody ClusterUpdationParams

// UpdateClusterLicenseJSONBody defines parameters for UpdateClusterLicense.
type UpdateClusterLicenseJSONBody ClusterLicenseUpdationParams

// UpdateClusterRecycleBinSettingJSONBody defines parameters for UpdateClusterRecycleBinSetting.
type UpdateClusterRecycleBinSettingJSONBody ClusterRecycleBinUpdationParams

// UpdateConsistencyGroupJSONBody defines parameters for UpdateConsistencyGroup.
type UpdateConsistencyGroupJSONBody ConsistencyGroupUpdationParams

// UpdateCustomizeAlertRuleJSONBody defines parameters for UpdateCustomizeAlertRule.
type UpdateCustomizeAlertRuleJSONBody CustomizeAlertRuleUpdationParams

// UpdateDatacenterJSONBody defines parameters for UpdateDatacenter.
type UpdateDatacenterJSONBody DatacenterUpdationParams

// UpdateElfImageJSONBody defines parameters for UpdateElfImage.
type UpdateElfImageJSONBody ElfImageUpdationParams

// UpdateEntityFilterJSONBody defines parameters for UpdateEntityFilter.
type UpdateEntityFilterJSONBody EntityFilterUpdationParams

// UpdateGlobalAlertRuleJSONBody defines parameters for UpdateGlobalAlertRule.
type UpdateGlobalAlertRuleJSONBody GlobalAlertRuleUpdationParams

// UpdateGlobalRecycleBinSettingJSONBody defines parameters for UpdateGlobalRecycleBinSetting.
type UpdateGlobalRecycleBinSettingJSONBody GlobalRecycleBinUpdationParams

// UpdateGraphJSONBody defines parameters for UpdateGraph.
type UpdateGraphJSONBody GraphUpdationParams

// UpdateHostJSONBody defines parameters for UpdateHost.
type UpdateHostJSONBody HostUpdationParams

// UpdateIscsiLunJSONBody defines parameters for UpdateIscsiLun.
type UpdateIscsiLunJSONBody IscsiLunUpdationParams

// UpdateIscsiTargetJSONBody defines parameters for UpdateIscsiTarget.
type UpdateIscsiTargetJSONBody IscsiTargetUpdationParams

// UpdateLabelJSONBody defines parameters for UpdateLabel.
type UpdateLabelJSONBody LabelUpdationParams

// UpdateDeployJSONBody defines parameters for UpdateDeploy.
type UpdateDeployJSONBody LicenseUpdationParams

// UpdateManagementVlanJSONBody defines parameters for UpdateManagementVlan.
type UpdateManagementVlanJSONBody ManagementVlanUpdationParams

// UpdateMigrationVlanJSONBody defines parameters for UpdateMigrationVlan.
type UpdateMigrationVlanJSONBody MigrationVlanUpdationParams

// UpdateNamespaceGroupJSONBody defines parameters for UpdateNamespaceGroup.
type UpdateNamespaceGroupJSONBody NamespaceGroupUpdationParams

// UpdateNfsExportJSONBody defines parameters for UpdateNfsExport.
type UpdateNfsExportJSONBody NfsExportUpdationParams

// UpdateNicJSONBody defines parameters for UpdateNic.
type UpdateNicJSONBody NicUpdationParams

// UpdateNvmfNamespaceJSONBody defines parameters for UpdateNvmfNamespace.
type UpdateNvmfNamespaceJSONBody NvmfNamespaceUpdationParams

// UpdateNvmfSubsystemJSONBody defines parameters for UpdateNvmfSubsystem.
type UpdateNvmfSubsystemJSONBody NvmfSubsystemUpdationParams

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody OrganizationUpdationParams

// UpdateRackTopoJSONBody defines parameters for UpdateRackTopo.
type UpdateRackTopoJSONBody RackTopoUpdationParams

// UpdateReportTemplateJSONBody defines parameters for UpdateReportTemplate.
type UpdateReportTemplateJSONBody ReportTemplateUpdationParams

// UpdateRoleJSONBody defines parameters for UpdateRole.
type UpdateRoleJSONBody RoleUpdationParams

// UpdateSnapshotPlanJSONBody defines parameters for UpdateSnapshotPlan.
type UpdateSnapshotPlanJSONBody SnapshotPlanUpdationParams

// UpdateSnmpTransportJSONBody defines parameters for UpdateSnmpTransport.
type UpdateSnmpTransportJSONBody SnmpTransportUpdationParams

// UpdateSnmpTrapReceiverJSONBody defines parameters for UpdateSnmpTrapReceiver.
type UpdateSnmpTrapReceiverJSONBody SnmpTrapReceiverUpdationParams

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody UserUpdationParams

// UpdateVdsJSONBody defines parameters for UpdateVds.
type UpdateVdsJSONBody VdsUpdationParams

// UpdateViewJSONBody defines parameters for UpdateView.
type UpdateViewJSONBody ViewUpdationParams

// UpdateVmJSONBody defines parameters for UpdateVm.
type UpdateVmJSONBody VmUpdateParams

// UpdateVmDiskJSONBody defines parameters for UpdateVmDisk.
type UpdateVmDiskJSONBody VmUpdateDiskParams

// UpdateVmFolderJSONBody defines parameters for UpdateVmFolder.
type UpdateVmFolderJSONBody VmFolderUpdationParams

// UpdateVmNicJSONBody defines parameters for UpdateVmNic.
type UpdateVmNicJSONBody VmUpdateNicParams

// UpdateVmPlacementGroupJSONBody defines parameters for UpdateVmPlacementGroup.
type UpdateVmPlacementGroupJSONBody VmPlacementGroupUpdationParams

// UpdateVmTemplateFromVmJSONBody defines parameters for UpdateVmTemplateFromVm.
type UpdateVmTemplateFromVmJSONBody VmTemplateUpdationParams

// UpdateVlanJSONBody defines parameters for UpdateVlan.
type UpdateVlanJSONBody VmVlanUpdationParams

// AddLabelsToResourcesJSONRequestBody defines body for AddLabelsToResources for application/json ContentType.
type AddLabelsToResourcesJSONRequestBody AddLabelsToResourcesJSONBody

// AddVmCdRomJSONRequestBody defines body for AddVmCdRom for application/json ContentType.
type AddVmCdRomJSONRequestBody AddVmCdRomJSONBody

// AddVmDiskJSONRequestBody defines body for AddVmDisk for application/json ContentType.
type AddVmDiskJSONRequestBody AddVmDiskJSONBody

// AddVmNicJSONRequestBody defines body for AddVmNic for application/json ContentType.
type AddVmNicJSONRequestBody AddVmNicJSONBody

// AddVmToFolderJSONRequestBody defines body for AddVmToFolder for application/json ContentType.
type AddVmToFolderJSONRequestBody AddVmToFolderJSONBody

// CloneIscsiLunFromSnapshotJSONRequestBody defines body for CloneIscsiLunFromSnapshot for application/json ContentType.
type CloneIscsiLunFromSnapshotJSONRequestBody CloneIscsiLunFromSnapshotJSONBody

// CloneNvmfNamespaceFromSnapshotJSONRequestBody defines body for CloneNvmfNamespaceFromSnapshot for application/json ContentType.
type CloneNvmfNamespaceFromSnapshotJSONRequestBody CloneNvmfNamespaceFromSnapshotJSONBody

// CloneSnapshotGroupJSONRequestBody defines body for CloneSnapshotGroup for application/json ContentType.
type CloneSnapshotGroupJSONRequestBody CloneSnapshotGroupJSONBody

// CloneVmJSONRequestBody defines body for CloneVm for application/json ContentType.
type CloneVmJSONRequestBody CloneVmJSONBody

// CloneVmTemplateFromVmJSONRequestBody defines body for CloneVmTemplateFromVm for application/json ContentType.
type CloneVmTemplateFromVmJSONRequestBody CloneVmTemplateFromVmJSONBody

// ConnectClusterJSONRequestBody defines body for ConnectCluster for application/json ContentType.
type ConnectClusterJSONRequestBody ConnectClusterJSONBody

// ConvertVmTemplateFromVmJSONRequestBody defines body for ConvertVmTemplateFromVm for application/json ContentType.
type ConvertVmTemplateFromVmJSONRequestBody ConvertVmTemplateFromVmJSONBody

// ConvertVmTemplateToVmJSONRequestBody defines body for ConvertVmTemplateToVm for application/json ContentType.
type ConvertVmTemplateToVmJSONRequestBody ConvertVmTemplateToVmJSONBody

// CreateBrickTopoJSONRequestBody defines body for CreateBrickTopo for application/json ContentType.
type CreateBrickTopoJSONRequestBody CreateBrickTopoJSONBody

// CreateClusterRecycleBinSettingJSONRequestBody defines body for CreateClusterRecycleBinSetting for application/json ContentType.
type CreateClusterRecycleBinSettingJSONRequestBody CreateClusterRecycleBinSettingJSONBody

// CreateConsistencyGroupJSONRequestBody defines body for CreateConsistencyGroup for application/json ContentType.
type CreateConsistencyGroupJSONRequestBody CreateConsistencyGroupJSONBody

// CreateConsistencyGroupSnapshotJSONRequestBody defines body for CreateConsistencyGroupSnapshot for application/json ContentType.
type CreateConsistencyGroupSnapshotJSONRequestBody CreateConsistencyGroupSnapshotJSONBody

// CreateDatacenterJSONRequestBody defines body for CreateDatacenter for application/json ContentType.
type CreateDatacenterJSONRequestBody CreateDatacenterJSONBody

// CreateEntityFilterJSONRequestBody defines body for CreateEntityFilter for application/json ContentType.
type CreateEntityFilterJSONRequestBody CreateEntityFilterJSONBody

// CreateGraphJSONRequestBody defines body for CreateGraph for application/json ContentType.
type CreateGraphJSONRequestBody CreateGraphJSONBody

// CreateHostJSONRequestBody defines body for CreateHost for application/json ContentType.
type CreateHostJSONRequestBody CreateHostJSONBody

// CreateIscsiLunJSONRequestBody defines body for CreateIscsiLun for application/json ContentType.
type CreateIscsiLunJSONRequestBody CreateIscsiLunJSONBody

// CreateIscsiLunSnapshotJSONRequestBody defines body for CreateIscsiLunSnapshot for application/json ContentType.
type CreateIscsiLunSnapshotJSONRequestBody CreateIscsiLunSnapshotJSONBody

// CreateIscsiTargetJSONRequestBody defines body for CreateIscsiTarget for application/json ContentType.
type CreateIscsiTargetJSONRequestBody CreateIscsiTargetJSONBody

// CreateLabelJSONRequestBody defines body for CreateLabel for application/json ContentType.
type CreateLabelJSONRequestBody CreateLabelJSONBody

// CreateNamespaceGroupJSONRequestBody defines body for CreateNamespaceGroup for application/json ContentType.
type CreateNamespaceGroupJSONRequestBody CreateNamespaceGroupJSONBody

// CreateNfsExportJSONRequestBody defines body for CreateNfsExport for application/json ContentType.
type CreateNfsExportJSONRequestBody CreateNfsExportJSONBody

// CreateNvmfNamespaceJSONRequestBody defines body for CreateNvmfNamespace for application/json ContentType.
type CreateNvmfNamespaceJSONRequestBody CreateNvmfNamespaceJSONBody

// CreateNvmfNamespaceSnapshotJSONRequestBody defines body for CreateNvmfNamespaceSnapshot for application/json ContentType.
type CreateNvmfNamespaceSnapshotJSONRequestBody CreateNvmfNamespaceSnapshotJSONBody

// CreateNvmfSubsystemJSONRequestBody defines body for CreateNvmfSubsystem for application/json ContentType.
type CreateNvmfSubsystemJSONRequestBody CreateNvmfSubsystemJSONBody

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// CreateRackTopoJSONRequestBody defines body for CreateRackTopo for application/json ContentType.
type CreateRackTopoJSONRequestBody CreateRackTopoJSONBody

// CreateReportTemplateJSONRequestBody defines body for CreateReportTemplate for application/json ContentType.
type CreateReportTemplateJSONRequestBody CreateReportTemplateJSONBody

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody CreateRoleJSONBody

// CreateSnapshotPlanJSONRequestBody defines body for CreateSnapshotPlan for application/json ContentType.
type CreateSnapshotPlanJSONRequestBody CreateSnapshotPlanJSONBody

// CreateSnmpTransportJSONRequestBody defines body for CreateSnmpTransport for application/json ContentType.
type CreateSnmpTransportJSONRequestBody CreateSnmpTransportJSONBody

// CreateSnmpTrapReceiverJSONRequestBody defines body for CreateSnmpTrapReceiver for application/json ContentType.
type CreateSnmpTrapReceiverJSONRequestBody CreateSnmpTrapReceiverJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// CreateVdsJSONRequestBody defines body for CreateVds for application/json ContentType.
type CreateVdsJSONRequestBody CreateVdsJSONBody

// CreateVdsWithAccessVlanJSONRequestBody defines body for CreateVdsWithAccessVlan for application/json ContentType.
type CreateVdsWithAccessVlanJSONRequestBody CreateVdsWithAccessVlanJSONBody

// CreateVdsWithMigrateVlanJSONRequestBody defines body for CreateVdsWithMigrateVlan for application/json ContentType.
type CreateVdsWithMigrateVlanJSONRequestBody CreateVdsWithMigrateVlanJSONBody

// CreateViewJSONRequestBody defines body for CreateView for application/json ContentType.
type CreateViewJSONRequestBody CreateViewJSONBody

// CreateVmJSONRequestBody defines body for CreateVm for application/json ContentType.
type CreateVmJSONRequestBody CreateVmJSONBody

// CreateVmFolderJSONRequestBody defines body for CreateVmFolder for application/json ContentType.
type CreateVmFolderJSONRequestBody CreateVmFolderJSONBody

// CreateVmFromTemplateJSONRequestBody defines body for CreateVmFromTemplate for application/json ContentType.
type CreateVmFromTemplateJSONRequestBody CreateVmFromTemplateJSONBody

// CreateVmPlacementGroupJSONRequestBody defines body for CreateVmPlacementGroup for application/json ContentType.
type CreateVmPlacementGroupJSONRequestBody CreateVmPlacementGroupJSONBody

// CreateVmSnapshotJSONRequestBody defines body for CreateVmSnapshot for application/json ContentType.
type CreateVmSnapshotJSONRequestBody CreateVmSnapshotJSONBody

// CreateVmVlanJSONRequestBody defines body for CreateVmVlan for application/json ContentType.
type CreateVmVlanJSONRequestBody CreateVmVlanJSONBody

// CreateVmVolumeJSONRequestBody defines body for CreateVmVolume for application/json ContentType.
type CreateVmVolumeJSONRequestBody CreateVmVolumeJSONBody

// DeleteBrickTopoJSONRequestBody defines body for DeleteBrickTopo for application/json ContentType.
type DeleteBrickTopoJSONRequestBody DeleteBrickTopoJSONBody

// DeleteClusterJSONRequestBody defines body for DeleteCluster for application/json ContentType.
type DeleteClusterJSONRequestBody DeleteClusterJSONBody

// DeleteClusterRecycleBinSettingJSONRequestBody defines body for DeleteClusterRecycleBinSetting for application/json ContentType.
type DeleteClusterRecycleBinSettingJSONRequestBody DeleteClusterRecycleBinSettingJSONBody

// DeleteConsistencyGroupJSONRequestBody defines body for DeleteConsistencyGroup for application/json ContentType.
type DeleteConsistencyGroupJSONRequestBody DeleteConsistencyGroupJSONBody

// DeleteConsistencyGroupSnapshotJSONRequestBody defines body for DeleteConsistencyGroupSnapshot for application/json ContentType.
type DeleteConsistencyGroupSnapshotJSONRequestBody DeleteConsistencyGroupSnapshotJSONBody

// DeleteDatacenterJSONRequestBody defines body for DeleteDatacenter for application/json ContentType.
type DeleteDatacenterJSONRequestBody DeleteDatacenterJSONBody

// DeleteElfImageJSONRequestBody defines body for DeleteElfImage for application/json ContentType.
type DeleteElfImageJSONRequestBody DeleteElfImageJSONBody

// DeleteEntityFilterJSONRequestBody defines body for DeleteEntityFilter for application/json ContentType.
type DeleteEntityFilterJSONRequestBody DeleteEntityFilterJSONBody

// DeleteGraphJSONRequestBody defines body for DeleteGraph for application/json ContentType.
type DeleteGraphJSONRequestBody DeleteGraphJSONBody

// DeleteIscsiLunJSONRequestBody defines body for DeleteIscsiLun for application/json ContentType.
type DeleteIscsiLunJSONRequestBody DeleteIscsiLunJSONBody

// DeleteIscsiLunSnapshotJSONRequestBody defines body for DeleteIscsiLunSnapshot for application/json ContentType.
type DeleteIscsiLunSnapshotJSONRequestBody DeleteIscsiLunSnapshotJSONBody

// DeleteIscsiTargetJSONRequestBody defines body for DeleteIscsiTarget for application/json ContentType.
type DeleteIscsiTargetJSONRequestBody DeleteIscsiTargetJSONBody

// DeleteLabelJSONRequestBody defines body for DeleteLabel for application/json ContentType.
type DeleteLabelJSONRequestBody DeleteLabelJSONBody

// DeleteNamespaceGroupJSONRequestBody defines body for DeleteNamespaceGroup for application/json ContentType.
type DeleteNamespaceGroupJSONRequestBody DeleteNamespaceGroupJSONBody

// DeleteNfsExportJSONRequestBody defines body for DeleteNfsExport for application/json ContentType.
type DeleteNfsExportJSONRequestBody DeleteNfsExportJSONBody

// DeleteNvmfNamespaceJSONRequestBody defines body for DeleteNvmfNamespace for application/json ContentType.
type DeleteNvmfNamespaceJSONRequestBody DeleteNvmfNamespaceJSONBody

// DeleteNvmfNamespaceSnapshotJSONRequestBody defines body for DeleteNvmfNamespaceSnapshot for application/json ContentType.
type DeleteNvmfNamespaceSnapshotJSONRequestBody DeleteNvmfNamespaceSnapshotJSONBody

// DeleteNvmfSubsystemJSONRequestBody defines body for DeleteNvmfSubsystem for application/json ContentType.
type DeleteNvmfSubsystemJSONRequestBody DeleteNvmfSubsystemJSONBody

// DeleteOrganizationJSONRequestBody defines body for DeleteOrganization for application/json ContentType.
type DeleteOrganizationJSONRequestBody DeleteOrganizationJSONBody

// DeleteRackTopoJSONRequestBody defines body for DeleteRackTopo for application/json ContentType.
type DeleteRackTopoJSONRequestBody DeleteRackTopoJSONBody

// DeleteReportTemplateJSONRequestBody defines body for DeleteReportTemplate for application/json ContentType.
type DeleteReportTemplateJSONRequestBody DeleteReportTemplateJSONBody

// DeleteRoleJSONRequestBody defines body for DeleteRole for application/json ContentType.
type DeleteRoleJSONRequestBody DeleteRoleJSONBody

// DeleteSnapshotGroupJSONRequestBody defines body for DeleteSnapshotGroup for application/json ContentType.
type DeleteSnapshotGroupJSONRequestBody DeleteSnapshotGroupJSONBody

// DeleteSnapshotPlanJSONRequestBody defines body for DeleteSnapshotPlan for application/json ContentType.
type DeleteSnapshotPlanJSONRequestBody DeleteSnapshotPlanJSONBody

// DeleteSnmpTransportJSONRequestBody defines body for DeleteSnmpTransport for application/json ContentType.
type DeleteSnmpTransportJSONRequestBody DeleteSnmpTransportJSONBody

// DeleteSnmpTrapReceiverJSONRequestBody defines body for DeleteSnmpTrapReceiver for application/json ContentType.
type DeleteSnmpTrapReceiverJSONRequestBody DeleteSnmpTrapReceiverJSONBody

// DeleteUserJSONRequestBody defines body for DeleteUser for application/json ContentType.
type DeleteUserJSONRequestBody DeleteUserJSONBody

// DeleteVdsJSONRequestBody defines body for DeleteVds for application/json ContentType.
type DeleteVdsJSONRequestBody DeleteVdsJSONBody

// DeleteViewJSONRequestBody defines body for DeleteView for application/json ContentType.
type DeleteViewJSONRequestBody DeleteViewJSONBody

// DeleteVmJSONRequestBody defines body for DeleteVm for application/json ContentType.
type DeleteVmJSONRequestBody DeleteVmJSONBody

// DeleteVmFolderJSONRequestBody defines body for DeleteVmFolder for application/json ContentType.
type DeleteVmFolderJSONRequestBody DeleteVmFolderJSONBody

// DeleteVmPlacementGroupJSONRequestBody defines body for DeleteVmPlacementGroup for application/json ContentType.
type DeleteVmPlacementGroupJSONRequestBody DeleteVmPlacementGroupJSONBody

// DeleteVmSnapshotJSONRequestBody defines body for DeleteVmSnapshot for application/json ContentType.
type DeleteVmSnapshotJSONRequestBody DeleteVmSnapshotJSONBody

// DeleteVmTemplateFromVmJSONRequestBody defines body for DeleteVmTemplateFromVm for application/json ContentType.
type DeleteVmTemplateFromVmJSONRequestBody DeleteVmTemplateFromVmJSONBody

// DeleteVlanJSONRequestBody defines body for DeleteVlan for application/json ContentType.
type DeleteVlanJSONRequestBody DeleteVlanJSONBody

// DeleteVmVolumeFromVmJSONRequestBody defines body for DeleteVmVolumeFromVm for application/json ContentType.
type DeleteVmVolumeFromVmJSONRequestBody DeleteVmVolumeFromVmJSONBody

// ExecuteSnapshotPlanJSONRequestBody defines body for ExecuteSnapshotPlan for application/json ContentType.
type ExecuteSnapshotPlanJSONRequestBody ExecuteSnapshotPlanJSONBody

// ForceRestartVmJSONRequestBody defines body for ForceRestartVm for application/json ContentType.
type ForceRestartVmJSONRequestBody ForceRestartVmJSONBody

// GenerateFromReportTemplateJSONRequestBody defines body for GenerateFromReportTemplate for application/json ContentType.
type GenerateFromReportTemplateJSONRequestBody GenerateFromReportTemplateJSONBody

// GetAlertNotifiersJSONRequestBody defines body for GetAlertNotifiers for application/json ContentType.
type GetAlertNotifiersJSONRequestBody GetAlertNotifiersJSONBody

// GetAlertNotifiersConnectionJSONRequestBody defines body for GetAlertNotifiersConnection for application/json ContentType.
type GetAlertNotifiersConnectionJSONRequestBody GetAlertNotifiersConnectionJSONBody

// GetAlertRulesJSONRequestBody defines body for GetAlertRules for application/json ContentType.
type GetAlertRulesJSONRequestBody GetAlertRulesJSONBody

// GetAlertRulesConnectionJSONRequestBody defines body for GetAlertRulesConnection for application/json ContentType.
type GetAlertRulesConnectionJSONRequestBody GetAlertRulesConnectionJSONBody

// GetAlertsJSONRequestBody defines body for GetAlerts for application/json ContentType.
type GetAlertsJSONRequestBody GetAlertsJSONBody

// GetAlertsConnectionJSONRequestBody defines body for GetAlertsConnection for application/json ContentType.
type GetAlertsConnectionJSONRequestBody GetAlertsConnectionJSONBody

// GetApplicationsJSONRequestBody defines body for GetApplications for application/json ContentType.
type GetApplicationsJSONRequestBody GetApplicationsJSONBody

// GetApplicationsConnectionJSONRequestBody defines body for GetApplicationsConnection for application/json ContentType.
type GetApplicationsConnectionJSONRequestBody GetApplicationsConnectionJSONBody

// GetBrickTopoesJSONRequestBody defines body for GetBrickTopoes for application/json ContentType.
type GetBrickTopoesJSONRequestBody GetBrickTopoesJSONBody

// GetBrickTopoesConnectionJSONRequestBody defines body for GetBrickTopoesConnection for application/json ContentType.
type GetBrickTopoesConnectionJSONRequestBody GetBrickTopoesConnectionJSONBody

// GetClusterImagesJSONRequestBody defines body for GetClusterImages for application/json ContentType.
type GetClusterImagesJSONRequestBody GetClusterImagesJSONBody

// GetClusterImagesConnectionJSONRequestBody defines body for GetClusterImagesConnection for application/json ContentType.
type GetClusterImagesConnectionJSONRequestBody GetClusterImagesConnectionJSONBody

// GetClusterSettingsesJSONRequestBody defines body for GetClusterSettingses for application/json ContentType.
type GetClusterSettingsesJSONRequestBody GetClusterSettingsesJSONBody

// GetClusterSettingsesConnectionJSONRequestBody defines body for GetClusterSettingsesConnection for application/json ContentType.
type GetClusterSettingsesConnectionJSONRequestBody GetClusterSettingsesConnectionJSONBody

// GetClusterTopoesJSONRequestBody defines body for GetClusterTopoes for application/json ContentType.
type GetClusterTopoesJSONRequestBody GetClusterTopoesJSONBody

// GetClusterTopoesConnectionJSONRequestBody defines body for GetClusterTopoesConnection for application/json ContentType.
type GetClusterTopoesConnectionJSONRequestBody GetClusterTopoesConnectionJSONBody

// GetClusterUpgradeHistoriesJSONRequestBody defines body for GetClusterUpgradeHistories for application/json ContentType.
type GetClusterUpgradeHistoriesJSONRequestBody GetClusterUpgradeHistoriesJSONBody

// GetClusterUpgradeHistoriesConnectionJSONRequestBody defines body for GetClusterUpgradeHistoriesConnection for application/json ContentType.
type GetClusterUpgradeHistoriesConnectionJSONRequestBody GetClusterUpgradeHistoriesConnectionJSONBody

// GetClustersJSONRequestBody defines body for GetClusters for application/json ContentType.
type GetClustersJSONRequestBody GetClustersJSONBody

// GetClustersConnectionJSONRequestBody defines body for GetClustersConnection for application/json ContentType.
type GetClustersConnectionJSONRequestBody GetClustersConnectionJSONBody

// GetConsistencyGroupSnapshotsJSONRequestBody defines body for GetConsistencyGroupSnapshots for application/json ContentType.
type GetConsistencyGroupSnapshotsJSONRequestBody GetConsistencyGroupSnapshotsJSONBody

// GetConsistencyGroupSnapshotsConnectionJSONRequestBody defines body for GetConsistencyGroupSnapshotsConnection for application/json ContentType.
type GetConsistencyGroupSnapshotsConnectionJSONRequestBody GetConsistencyGroupSnapshotsConnectionJSONBody

// GetConsistencyGroupsJSONRequestBody defines body for GetConsistencyGroups for application/json ContentType.
type GetConsistencyGroupsJSONRequestBody GetConsistencyGroupsJSONBody

// GetConsistencyGroupsConnectionJSONRequestBody defines body for GetConsistencyGroupsConnection for application/json ContentType.
type GetConsistencyGroupsConnectionJSONRequestBody GetConsistencyGroupsConnectionJSONBody

// GetDatacentersJSONRequestBody defines body for GetDatacenters for application/json ContentType.
type GetDatacentersJSONRequestBody GetDatacentersJSONBody

// GetDatacentersConnectionJSONRequestBody defines body for GetDatacentersConnection for application/json ContentType.
type GetDatacentersConnectionJSONRequestBody GetDatacentersConnectionJSONBody

// GetDeploysJSONRequestBody defines body for GetDeploys for application/json ContentType.
type GetDeploysJSONRequestBody GetDeploysJSONBody

// GetDeploysConnectionJSONRequestBody defines body for GetDeploysConnection for application/json ContentType.
type GetDeploysConnectionJSONRequestBody GetDeploysConnectionJSONBody

// GetDiscoverHostsJSONRequestBody defines body for GetDiscoverHosts for application/json ContentType.
type GetDiscoverHostsJSONRequestBody GetDiscoverHostsJSONBody

// GetDisksJSONRequestBody defines body for GetDisks for application/json ContentType.
type GetDisksJSONRequestBody GetDisksJSONBody

// GetDisksConnectionJSONRequestBody defines body for GetDisksConnection for application/json ContentType.
type GetDisksConnectionJSONRequestBody GetDisksConnectionJSONBody

// GetElfDataStoresJSONRequestBody defines body for GetElfDataStores for application/json ContentType.
type GetElfDataStoresJSONRequestBody GetElfDataStoresJSONBody

// GetElfDataStoresConnectionJSONRequestBody defines body for GetElfDataStoresConnection for application/json ContentType.
type GetElfDataStoresConnectionJSONRequestBody GetElfDataStoresConnectionJSONBody

// GetElfImagesJSONRequestBody defines body for GetElfImages for application/json ContentType.
type GetElfImagesJSONRequestBody GetElfImagesJSONBody

// GetElfImagesConnectionJSONRequestBody defines body for GetElfImagesConnection for application/json ContentType.
type GetElfImagesConnectionJSONRequestBody GetElfImagesConnectionJSONBody

// GetElfStoragePoliciesJSONRequestBody defines body for GetElfStoragePolicies for application/json ContentType.
type GetElfStoragePoliciesJSONRequestBody GetElfStoragePoliciesJSONBody

// GetElfStoragePoliciesConnectionJSONRequestBody defines body for GetElfStoragePoliciesConnection for application/json ContentType.
type GetElfStoragePoliciesConnectionJSONRequestBody GetElfStoragePoliciesConnectionJSONBody

// GetEntityFiltersJSONRequestBody defines body for GetEntityFilters for application/json ContentType.
type GetEntityFiltersJSONRequestBody GetEntityFiltersJSONBody

// GetEntityFiltersConnectionJSONRequestBody defines body for GetEntityFiltersConnection for application/json ContentType.
type GetEntityFiltersConnectionJSONRequestBody GetEntityFiltersConnectionJSONBody

// GetGlobalAlertRulesJSONRequestBody defines body for GetGlobalAlertRules for application/json ContentType.
type GetGlobalAlertRulesJSONRequestBody GetGlobalAlertRulesJSONBody

// GetGlobalAlertRulesConnectionJSONRequestBody defines body for GetGlobalAlertRulesConnection for application/json ContentType.
type GetGlobalAlertRulesConnectionJSONRequestBody GetGlobalAlertRulesConnectionJSONBody

// GetGlobalSettingsesJSONRequestBody defines body for GetGlobalSettingses for application/json ContentType.
type GetGlobalSettingsesJSONRequestBody GetGlobalSettingsesJSONBody

// GetGlobalSettingsesConnectionJSONRequestBody defines body for GetGlobalSettingsesConnection for application/json ContentType.
type GetGlobalSettingsesConnectionJSONRequestBody GetGlobalSettingsesConnectionJSONBody

// GetGraphsJSONRequestBody defines body for GetGraphs for application/json ContentType.
type GetGraphsJSONRequestBody GetGraphsJSONBody

// GetGraphsConnectionJSONRequestBody defines body for GetGraphsConnection for application/json ContentType.
type GetGraphsConnectionJSONRequestBody GetGraphsConnectionJSONBody

// GetHostsJSONRequestBody defines body for GetHosts for application/json ContentType.
type GetHostsJSONRequestBody GetHostsJSONBody

// GetHostsConnectionJSONRequestBody defines body for GetHostsConnection for application/json ContentType.
type GetHostsConnectionJSONRequestBody GetHostsConnectionJSONBody

// GetImagesConnectorJSONRequestBody defines body for GetImagesConnector for application/json ContentType.
type GetImagesConnectorJSONRequestBody GetImagesConnectorJSONBody

// GetIpmisJSONRequestBody defines body for GetIpmis for application/json ContentType.
type GetIpmisJSONRequestBody GetIpmisJSONBody

// GetIscsiConnectionsJSONRequestBody defines body for GetIscsiConnections for application/json ContentType.
type GetIscsiConnectionsJSONRequestBody GetIscsiConnectionsJSONBody

// GetIscsiConnectionsConnectionJSONRequestBody defines body for GetIscsiConnectionsConnection for application/json ContentType.
type GetIscsiConnectionsConnectionJSONRequestBody GetIscsiConnectionsConnectionJSONBody

// GetIscsiLunSnapshotsJSONRequestBody defines body for GetIscsiLunSnapshots for application/json ContentType.
type GetIscsiLunSnapshotsJSONRequestBody GetIscsiLunSnapshotsJSONBody

// GetIscsiLunSnapshotsConnectionJSONRequestBody defines body for GetIscsiLunSnapshotsConnection for application/json ContentType.
type GetIscsiLunSnapshotsConnectionJSONRequestBody GetIscsiLunSnapshotsConnectionJSONBody

// GetIscsiLunsJSONRequestBody defines body for GetIscsiLuns for application/json ContentType.
type GetIscsiLunsJSONRequestBody GetIscsiLunsJSONBody

// GetIscsiLunsConnectionJSONRequestBody defines body for GetIscsiLunsConnection for application/json ContentType.
type GetIscsiLunsConnectionJSONRequestBody GetIscsiLunsConnectionJSONBody

// GetIscsiTargetsJSONRequestBody defines body for GetIscsiTargets for application/json ContentType.
type GetIscsiTargetsJSONRequestBody GetIscsiTargetsJSONBody

// GetIscsiTargetsConnectionJSONRequestBody defines body for GetIscsiTargetsConnection for application/json ContentType.
type GetIscsiTargetsConnectionJSONRequestBody GetIscsiTargetsConnectionJSONBody

// GetLabelsJSONRequestBody defines body for GetLabels for application/json ContentType.
type GetLabelsJSONRequestBody GetLabelsJSONBody

// GetLabelsConnectionJSONRequestBody defines body for GetLabelsConnection for application/json ContentType.
type GetLabelsConnectionJSONRequestBody GetLabelsConnectionJSONBody

// GetLicensesJSONRequestBody defines body for GetLicenses for application/json ContentType.
type GetLicensesJSONRequestBody GetLicensesJSONBody

// GetLicensesConnectionJSONRequestBody defines body for GetLicensesConnection for application/json ContentType.
type GetLicensesConnectionJSONRequestBody GetLicensesConnectionJSONBody

// GetLogCollectionsJSONRequestBody defines body for GetLogCollections for application/json ContentType.
type GetLogCollectionsJSONRequestBody GetLogCollectionsJSONBody

// GetLogCollectionsConnectionJSONRequestBody defines body for GetLogCollectionsConnection for application/json ContentType.
type GetLogCollectionsConnectionJSONRequestBody GetLogCollectionsConnectionJSONBody

// GetMigrateTransmittersJSONRequestBody defines body for GetMigrateTransmitters for application/json ContentType.
type GetMigrateTransmittersJSONRequestBody GetMigrateTransmittersJSONBody

// GetMigrateTransmittersConnectionJSONRequestBody defines body for GetMigrateTransmittersConnection for application/json ContentType.
type GetMigrateTransmittersConnectionJSONRequestBody GetMigrateTransmittersConnectionJSONBody

// GetNamespaceGroupsJSONRequestBody defines body for GetNamespaceGroups for application/json ContentType.
type GetNamespaceGroupsJSONRequestBody GetNamespaceGroupsJSONBody

// GetNamespaceGroupsConnectionJSONRequestBody defines body for GetNamespaceGroupsConnection for application/json ContentType.
type GetNamespaceGroupsConnectionJSONRequestBody GetNamespaceGroupsConnectionJSONBody

// GetNfsExportsJSONRequestBody defines body for GetNfsExports for application/json ContentType.
type GetNfsExportsJSONRequestBody GetNfsExportsJSONBody

// GetNfsExportsConnectionJSONRequestBody defines body for GetNfsExportsConnection for application/json ContentType.
type GetNfsExportsConnectionJSONRequestBody GetNfsExportsConnectionJSONBody

// GetNfsInodesJSONRequestBody defines body for GetNfsInodes for application/json ContentType.
type GetNfsInodesJSONRequestBody GetNfsInodesJSONBody

// GetNfsInodesConnectionJSONRequestBody defines body for GetNfsInodesConnection for application/json ContentType.
type GetNfsInodesConnectionJSONRequestBody GetNfsInodesConnectionJSONBody

// GetNicsJSONRequestBody defines body for GetNics for application/json ContentType.
type GetNicsJSONRequestBody GetNicsJSONBody

// GetNicsConnectionJSONRequestBody defines body for GetNicsConnection for application/json ContentType.
type GetNicsConnectionJSONRequestBody GetNicsConnectionJSONBody

// GetNodeTopoesJSONRequestBody defines body for GetNodeTopoes for application/json ContentType.
type GetNodeTopoesJSONRequestBody GetNodeTopoesJSONBody

// GetNodeTopoesConnectionJSONRequestBody defines body for GetNodeTopoesConnection for application/json ContentType.
type GetNodeTopoesConnectionJSONRequestBody GetNodeTopoesConnectionJSONBody

// GetNvmfNamespaceSnapshotsJSONRequestBody defines body for GetNvmfNamespaceSnapshots for application/json ContentType.
type GetNvmfNamespaceSnapshotsJSONRequestBody GetNvmfNamespaceSnapshotsJSONBody

// GetNvmfNamespaceSnapshotsConnectionJSONRequestBody defines body for GetNvmfNamespaceSnapshotsConnection for application/json ContentType.
type GetNvmfNamespaceSnapshotsConnectionJSONRequestBody GetNvmfNamespaceSnapshotsConnectionJSONBody

// GetNvmfNamespacesJSONRequestBody defines body for GetNvmfNamespaces for application/json ContentType.
type GetNvmfNamespacesJSONRequestBody GetNvmfNamespacesJSONBody

// GetNvmfNamespacesConnectionJSONRequestBody defines body for GetNvmfNamespacesConnection for application/json ContentType.
type GetNvmfNamespacesConnectionJSONRequestBody GetNvmfNamespacesConnectionJSONBody

// GetNvmfSubsystemsJSONRequestBody defines body for GetNvmfSubsystems for application/json ContentType.
type GetNvmfSubsystemsJSONRequestBody GetNvmfSubsystemsJSONBody

// GetNvmfSubsystemsConnectionJSONRequestBody defines body for GetNvmfSubsystemsConnection for application/json ContentType.
type GetNvmfSubsystemsConnectionJSONRequestBody GetNvmfSubsystemsConnectionJSONBody

// GetOrganizationsJSONRequestBody defines body for GetOrganizations for application/json ContentType.
type GetOrganizationsJSONRequestBody GetOrganizationsJSONBody

// GetOrganizationsConnectionJSONRequestBody defines body for GetOrganizationsConnection for application/json ContentType.
type GetOrganizationsConnectionJSONRequestBody GetOrganizationsConnectionJSONBody

// GetPmemDimmsJSONRequestBody defines body for GetPmemDimms for application/json ContentType.
type GetPmemDimmsJSONRequestBody GetPmemDimmsJSONBody

// GetPmemDimmsConnectionJSONRequestBody defines body for GetPmemDimmsConnection for application/json ContentType.
type GetPmemDimmsConnectionJSONRequestBody GetPmemDimmsConnectionJSONBody

// GetRackTopoesJSONRequestBody defines body for GetRackTopoes for application/json ContentType.
type GetRackTopoesJSONRequestBody GetRackTopoesJSONBody

// GetRackTopoesConnectionJSONRequestBody defines body for GetRackTopoesConnection for application/json ContentType.
type GetRackTopoesConnectionJSONRequestBody GetRackTopoesConnectionJSONBody

// GetReportTasksJSONRequestBody defines body for GetReportTasks for application/json ContentType.
type GetReportTasksJSONRequestBody GetReportTasksJSONBody

// GetReportTasksConnectionJSONRequestBody defines body for GetReportTasksConnection for application/json ContentType.
type GetReportTasksConnectionJSONRequestBody GetReportTasksConnectionJSONBody

// GetReportTemplatesJSONRequestBody defines body for GetReportTemplates for application/json ContentType.
type GetReportTemplatesJSONRequestBody GetReportTemplatesJSONBody

// GetReportTemplatesConnectionJSONRequestBody defines body for GetReportTemplatesConnection for application/json ContentType.
type GetReportTemplatesConnectionJSONRequestBody GetReportTemplatesConnectionJSONBody

// GetSnapshotGroupsJSONRequestBody defines body for GetSnapshotGroups for application/json ContentType.
type GetSnapshotGroupsJSONRequestBody GetSnapshotGroupsJSONBody

// GetSnapshotGroupsConnectionJSONRequestBody defines body for GetSnapshotGroupsConnection for application/json ContentType.
type GetSnapshotGroupsConnectionJSONRequestBody GetSnapshotGroupsConnectionJSONBody

// GetSnapshotPlanTasksJSONRequestBody defines body for GetSnapshotPlanTasks for application/json ContentType.
type GetSnapshotPlanTasksJSONRequestBody GetSnapshotPlanTasksJSONBody

// GetSnapshotPlanTasksConnectionJSONRequestBody defines body for GetSnapshotPlanTasksConnection for application/json ContentType.
type GetSnapshotPlanTasksConnectionJSONRequestBody GetSnapshotPlanTasksConnectionJSONBody

// GetSnapshotPlansJSONRequestBody defines body for GetSnapshotPlans for application/json ContentType.
type GetSnapshotPlansJSONRequestBody GetSnapshotPlansJSONBody

// GetSnapshotPlansConnectionJSONRequestBody defines body for GetSnapshotPlansConnection for application/json ContentType.
type GetSnapshotPlansConnectionJSONRequestBody GetSnapshotPlansConnectionJSONBody

// GetSnmpTransportsJSONRequestBody defines body for GetSnmpTransports for application/json ContentType.
type GetSnmpTransportsJSONRequestBody GetSnmpTransportsJSONBody

// GetSnmpTransportsConnectionJSONRequestBody defines body for GetSnmpTransportsConnection for application/json ContentType.
type GetSnmpTransportsConnectionJSONRequestBody GetSnmpTransportsConnectionJSONBody

// GetSnmpTrapReceiversJSONRequestBody defines body for GetSnmpTrapReceivers for application/json ContentType.
type GetSnmpTrapReceiversJSONRequestBody GetSnmpTrapReceiversJSONBody

// GetSnmpTrapReceiversConnectionJSONRequestBody defines body for GetSnmpTrapReceiversConnection for application/json ContentType.
type GetSnmpTrapReceiversConnectionJSONRequestBody GetSnmpTrapReceiversConnectionJSONBody

// GetStoragePoliciesConnectorJSONRequestBody defines body for GetStoragePoliciesConnector for application/json ContentType.
type GetStoragePoliciesConnectorJSONRequestBody GetStoragePoliciesConnectorJSONBody

// GetSvtImagesJSONRequestBody defines body for GetSvtImages for application/json ContentType.
type GetSvtImagesJSONRequestBody GetSvtImagesJSONBody

// GetSvtImagesConnectionJSONRequestBody defines body for GetSvtImagesConnection for application/json ContentType.
type GetSvtImagesConnectionJSONRequestBody GetSvtImagesConnectionJSONBody

// GetSystemAuditLogsJSONRequestBody defines body for GetSystemAuditLogs for application/json ContentType.
type GetSystemAuditLogsJSONRequestBody GetSystemAuditLogsJSONBody

// GetSystemAuditLogsConnectionJSONRequestBody defines body for GetSystemAuditLogsConnection for application/json ContentType.
type GetSystemAuditLogsConnectionJSONRequestBody GetSystemAuditLogsConnectionJSONBody

// GetTasksJSONRequestBody defines body for GetTasks for application/json ContentType.
type GetTasksJSONRequestBody GetTasksJSONBody

// GetTasksConnectionJSONRequestBody defines body for GetTasksConnection for application/json ContentType.
type GetTasksConnectionJSONRequestBody GetTasksConnectionJSONBody

// GetUploadTasksJSONRequestBody defines body for GetUploadTasks for application/json ContentType.
type GetUploadTasksJSONRequestBody GetUploadTasksJSONBody

// GetUploadTasksConnectionJSONRequestBody defines body for GetUploadTasksConnection for application/json ContentType.
type GetUploadTasksConnectionJSONRequestBody GetUploadTasksConnectionJSONBody

// GetUsbDevicesJSONRequestBody defines body for GetUsbDevices for application/json ContentType.
type GetUsbDevicesJSONRequestBody GetUsbDevicesJSONBody

// GetUsbDevicesConnectionJSONRequestBody defines body for GetUsbDevicesConnection for application/json ContentType.
type GetUsbDevicesConnectionJSONRequestBody GetUsbDevicesConnectionJSONBody

// GetUserAuditLogsJSONRequestBody defines body for GetUserAuditLogs for application/json ContentType.
type GetUserAuditLogsJSONRequestBody GetUserAuditLogsJSONBody

// GetUserAuditLogsConnectionJSONRequestBody defines body for GetUserAuditLogsConnection for application/json ContentType.
type GetUserAuditLogsConnectionJSONRequestBody GetUserAuditLogsConnectionJSONBody

// GetUserRoleNextsJSONRequestBody defines body for GetUserRoleNexts for application/json ContentType.
type GetUserRoleNextsJSONRequestBody GetUserRoleNextsJSONBody

// GetUserRoleNextsConnectionJSONRequestBody defines body for GetUserRoleNextsConnection for application/json ContentType.
type GetUserRoleNextsConnectionJSONRequestBody GetUserRoleNextsConnectionJSONBody

// GetUsersJSONRequestBody defines body for GetUsers for application/json ContentType.
type GetUsersJSONRequestBody GetUsersJSONBody

// GetUsersConnectionJSONRequestBody defines body for GetUsersConnection for application/json ContentType.
type GetUsersConnectionJSONRequestBody GetUsersConnectionJSONBody

// GetVcenterAccountsJSONRequestBody defines body for GetVcenterAccounts for application/json ContentType.
type GetVcenterAccountsJSONRequestBody GetVcenterAccountsJSONBody

// GetVcenterAccountsConnectionJSONRequestBody defines body for GetVcenterAccountsConnection for application/json ContentType.
type GetVcenterAccountsConnectionJSONRequestBody GetVcenterAccountsConnectionJSONBody

// GetVdsesJSONRequestBody defines body for GetVdses for application/json ContentType.
type GetVdsesJSONRequestBody GetVdsesJSONBody

// GetVdsesConnectionJSONRequestBody defines body for GetVdsesConnection for application/json ContentType.
type GetVdsesConnectionJSONRequestBody GetVdsesConnectionJSONBody

// GetViewsJSONRequestBody defines body for GetViews for application/json ContentType.
type GetViewsJSONRequestBody GetViewsJSONBody

// GetViewsConnectionJSONRequestBody defines body for GetViewsConnection for application/json ContentType.
type GetViewsConnectionJSONRequestBody GetViewsConnectionJSONBody

// GetVlansJSONRequestBody defines body for GetVlans for application/json ContentType.
type GetVlansJSONRequestBody GetVlansJSONBody

// GetVlansConnectionJSONRequestBody defines body for GetVlansConnection for application/json ContentType.
type GetVlansConnectionJSONRequestBody GetVlansConnectionJSONBody

// GetVmDisksJSONRequestBody defines body for GetVmDisks for application/json ContentType.
type GetVmDisksJSONRequestBody GetVmDisksJSONBody

// GetVmDisksConnectionJSONRequestBody defines body for GetVmDisksConnection for application/json ContentType.
type GetVmDisksConnectionJSONRequestBody GetVmDisksConnectionJSONBody

// GetVmEntityFilterResultsJSONRequestBody defines body for GetVmEntityFilterResults for application/json ContentType.
type GetVmEntityFilterResultsJSONRequestBody GetVmEntityFilterResultsJSONBody

// GetVmEntityFilterResultsConnectionJSONRequestBody defines body for GetVmEntityFilterResultsConnection for application/json ContentType.
type GetVmEntityFilterResultsConnectionJSONRequestBody GetVmEntityFilterResultsConnectionJSONBody

// GetVmFoldersJSONRequestBody defines body for GetVmFolders for application/json ContentType.
type GetVmFoldersJSONRequestBody GetVmFoldersJSONBody

// GetVmFoldersConnectionJSONRequestBody defines body for GetVmFoldersConnection for application/json ContentType.
type GetVmFoldersConnectionJSONRequestBody GetVmFoldersConnectionJSONBody

// GetVmNicsJSONRequestBody defines body for GetVmNics for application/json ContentType.
type GetVmNicsJSONRequestBody GetVmNicsJSONBody

// GetVmNicsConnectionJSONRequestBody defines body for GetVmNicsConnection for application/json ContentType.
type GetVmNicsConnectionJSONRequestBody GetVmNicsConnectionJSONBody

// GetVmPlacementGroupsJSONRequestBody defines body for GetVmPlacementGroups for application/json ContentType.
type GetVmPlacementGroupsJSONRequestBody GetVmPlacementGroupsJSONBody

// GetVmPlacementGroupsConnectionJSONRequestBody defines body for GetVmPlacementGroupsConnection for application/json ContentType.
type GetVmPlacementGroupsConnectionJSONRequestBody GetVmPlacementGroupsConnectionJSONBody

// GetVmSnapshotsJSONRequestBody defines body for GetVmSnapshots for application/json ContentType.
type GetVmSnapshotsJSONRequestBody GetVmSnapshotsJSONBody

// GetVmSnapshotsConnectionJSONRequestBody defines body for GetVmSnapshotsConnection for application/json ContentType.
type GetVmSnapshotsConnectionJSONRequestBody GetVmSnapshotsConnectionJSONBody

// GetVmTemplatesJSONRequestBody defines body for GetVmTemplates for application/json ContentType.
type GetVmTemplatesJSONRequestBody GetVmTemplatesJSONBody

// GetVmTemplatesConnectionJSONRequestBody defines body for GetVmTemplatesConnection for application/json ContentType.
type GetVmTemplatesConnectionJSONRequestBody GetVmTemplatesConnectionJSONBody

// GetVmVolumesJSONRequestBody defines body for GetVmVolumes for application/json ContentType.
type GetVmVolumesJSONRequestBody GetVmVolumesJSONBody

// GetVmVolumesConnectionJSONRequestBody defines body for GetVmVolumesConnection for application/json ContentType.
type GetVmVolumesConnectionJSONRequestBody GetVmVolumesConnectionJSONBody

// GetVmsJSONRequestBody defines body for GetVms for application/json ContentType.
type GetVmsJSONRequestBody GetVmsJSONBody

// GetVmsConnectionJSONRequestBody defines body for GetVmsConnection for application/json ContentType.
type GetVmsConnectionJSONRequestBody GetVmsConnectionJSONBody

// GetVsphereEsxiAccountsJSONRequestBody defines body for GetVsphereEsxiAccounts for application/json ContentType.
type GetVsphereEsxiAccountsJSONRequestBody GetVsphereEsxiAccountsJSONBody

// GetVsphereEsxiAccountsConnectionJSONRequestBody defines body for GetVsphereEsxiAccountsConnection for application/json ContentType.
type GetVsphereEsxiAccountsConnectionJSONRequestBody GetVsphereEsxiAccountsConnectionJSONBody

// GetWitnessesJSONRequestBody defines body for GetWitnesses for application/json ContentType.
type GetWitnessesJSONRequestBody GetWitnessesJSONBody

// GetWitnessesConnectionJSONRequestBody defines body for GetWitnessesConnection for application/json ContentType.
type GetWitnessesConnectionJSONRequestBody GetWitnessesConnectionJSONBody

// GetZoneTopoesJSONRequestBody defines body for GetZoneTopoes for application/json ContentType.
type GetZoneTopoesJSONRequestBody GetZoneTopoesJSONBody

// GetZoneTopoesConnectionJSONRequestBody defines body for GetZoneTopoesConnection for application/json ContentType.
type GetZoneTopoesConnectionJSONRequestBody GetZoneTopoesConnectionJSONBody

// GetZonesJSONRequestBody defines body for GetZones for application/json ContentType.
type GetZonesJSONRequestBody GetZonesJSONBody

// GetZonesConnectionJSONRequestBody defines body for GetZonesConnection for application/json ContentType.
type GetZonesConnectionJSONRequestBody GetZonesConnectionJSONBody

// InstallVmtoolsJSONRequestBody defines body for InstallVmtools for application/json ContentType.
type InstallVmtoolsJSONRequestBody InstallVmtoolsJSONBody

// KeepSnapshotGroupJSONRequestBody defines body for KeepSnapshotGroup for application/json ContentType.
type KeepSnapshotGroupJSONRequestBody KeepSnapshotGroupJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// MigRateVmJSONRequestBody defines body for MigRateVm for application/json ContentType.
type MigRateVmJSONRequestBody MigRateVmJSONBody

// MountDiskJSONRequestBody defines body for MountDisk for application/json ContentType.
type MountDiskJSONRequestBody MountDiskJSONBody

// MountUsbDeviceJSONRequestBody defines body for MountUsbDevice for application/json ContentType.
type MountUsbDeviceJSONRequestBody MountUsbDeviceJSONBody

// MoveBrickTopoJSONRequestBody defines body for MoveBrickTopo for application/json ContentType.
type MoveBrickTopoJSONRequestBody MoveBrickTopoJSONBody

// UpdateNodeTopoJSONRequestBody defines body for UpdateNodeTopo for application/json ContentType.
type UpdateNodeTopoJSONRequestBody UpdateNodeTopoJSONBody

// MoveVmToRecycleBinJSONRequestBody defines body for MoveVmToRecycleBin for application/json ContentType.
type MoveVmToRecycleBinJSONRequestBody MoveVmToRecycleBinJSONBody

// ForceShutDownVmJSONRequestBody defines body for ForceShutDownVm for application/json ContentType.
type ForceShutDownVmJSONRequestBody ForceShutDownVmJSONBody

// RebuildVmJSONRequestBody defines body for RebuildVm for application/json ContentType.
type RebuildVmJSONRequestBody RebuildVmJSONBody

// RecoverVmFromRecycleBinJSONRequestBody defines body for RecoverVmFromRecycleBin for application/json ContentType.
type RecoverVmFromRecycleBinJSONRequestBody RecoverVmFromRecycleBinJSONBody

// RemoveLabelsFromResourcesJSONRequestBody defines body for RemoveLabelsFromResources for application/json ContentType.
type RemoveLabelsFromResourcesJSONRequestBody RemoveLabelsFromResourcesJSONBody

// RemoveVmCdRomJSONRequestBody defines body for RemoveVmCdRom for application/json ContentType.
type RemoveVmCdRomJSONRequestBody RemoveVmCdRomJSONBody

// RemoveVmDiskJSONRequestBody defines body for RemoveVmDisk for application/json ContentType.
type RemoveVmDiskJSONRequestBody RemoveVmDiskJSONBody

// RemoveVmToFolderJSONRequestBody defines body for RemoveVmToFolder for application/json ContentType.
type RemoveVmToFolderJSONRequestBody RemoveVmToFolderJSONBody

// RemoveVmNicJSONRequestBody defines body for RemoveVmNic for application/json ContentType.
type RemoveVmNicJSONRequestBody RemoveVmNicJSONBody

// ResolveAlertJSONRequestBody defines body for ResolveAlert for application/json ContentType.
type ResolveAlertJSONRequestBody ResolveAlertJSONBody

// RestartVmJSONRequestBody defines body for RestartVm for application/json ContentType.
type RestartVmJSONRequestBody RestartVmJSONBody

// ResumeSnapshotPlanJSONRequestBody defines body for ResumeSnapshotPlan for application/json ContentType.
type ResumeSnapshotPlanJSONRequestBody ResumeSnapshotPlanJSONBody

// ResumeVmJSONRequestBody defines body for ResumeVm for application/json ContentType.
type ResumeVmJSONRequestBody ResumeVmJSONBody

// UpdateConsistencyGroupSnapshotJSONRequestBody defines body for UpdateConsistencyGroupSnapshot for application/json ContentType.
type UpdateConsistencyGroupSnapshotJSONRequestBody UpdateConsistencyGroupSnapshotJSONBody

// RollbackIscsiLunFromSnapshotJSONRequestBody defines body for RollbackIscsiLunFromSnapshot for application/json ContentType.
type RollbackIscsiLunFromSnapshotJSONRequestBody RollbackIscsiLunFromSnapshotJSONBody

// RollbackNvmfNamespaceFromSnapshotJSONRequestBody defines body for RollbackNvmfNamespaceFromSnapshot for application/json ContentType.
type RollbackNvmfNamespaceFromSnapshotJSONRequestBody RollbackNvmfNamespaceFromSnapshotJSONBody

// RollbackSnapshotGroupJSONRequestBody defines body for RollbackSnapshotGroup for application/json ContentType.
type RollbackSnapshotGroupJSONRequestBody RollbackSnapshotGroupJSONBody

// RollbackVmJSONRequestBody defines body for RollbackVm for application/json ContentType.
type RollbackVmJSONRequestBody RollbackVmJSONBody

// ShutDownVmJSONRequestBody defines body for ShutDownVm for application/json ContentType.
type ShutDownVmJSONRequestBody ShutDownVmJSONBody

// StartVmJSONRequestBody defines body for StartVm for application/json ContentType.
type StartVmJSONRequestBody StartVmJSONBody

// SuspendSnapshotPlanJSONRequestBody defines body for SuspendSnapshotPlan for application/json ContentType.
type SuspendSnapshotPlanJSONRequestBody SuspendSnapshotPlanJSONBody

// SuspendVmJSONRequestBody defines body for SuspendVm for application/json ContentType.
type SuspendVmJSONRequestBody SuspendVmJSONBody

// TriggerDiskBlinkJSONRequestBody defines body for TriggerDiskBlink for application/json ContentType.
type TriggerDiskBlinkJSONRequestBody TriggerDiskBlinkJSONBody

// UnmountDiskJSONRequestBody defines body for UnmountDisk for application/json ContentType.
type UnmountDiskJSONRequestBody UnmountDiskJSONBody

// UnmountUsbDeviceJSONRequestBody defines body for UnmountUsbDevice for application/json ContentType.
type UnmountUsbDeviceJSONRequestBody UnmountUsbDeviceJSONBody

// UpdateBrickTopoJSONRequestBody defines body for UpdateBrickTopo for application/json ContentType.
type UpdateBrickTopoJSONRequestBody UpdateBrickTopoJSONBody

// UpdateClusterJSONRequestBody defines body for UpdateCluster for application/json ContentType.
type UpdateClusterJSONRequestBody UpdateClusterJSONBody

// UpdateClusterLicenseJSONRequestBody defines body for UpdateClusterLicense for application/json ContentType.
type UpdateClusterLicenseJSONRequestBody UpdateClusterLicenseJSONBody

// UpdateClusterRecycleBinSettingJSONRequestBody defines body for UpdateClusterRecycleBinSetting for application/json ContentType.
type UpdateClusterRecycleBinSettingJSONRequestBody UpdateClusterRecycleBinSettingJSONBody

// UpdateConsistencyGroupJSONRequestBody defines body for UpdateConsistencyGroup for application/json ContentType.
type UpdateConsistencyGroupJSONRequestBody UpdateConsistencyGroupJSONBody

// UpdateCustomizeAlertRuleJSONRequestBody defines body for UpdateCustomizeAlertRule for application/json ContentType.
type UpdateCustomizeAlertRuleJSONRequestBody UpdateCustomizeAlertRuleJSONBody

// UpdateDatacenterJSONRequestBody defines body for UpdateDatacenter for application/json ContentType.
type UpdateDatacenterJSONRequestBody UpdateDatacenterJSONBody

// UpdateElfImageJSONRequestBody defines body for UpdateElfImage for application/json ContentType.
type UpdateElfImageJSONRequestBody UpdateElfImageJSONBody

// UpdateEntityFilterJSONRequestBody defines body for UpdateEntityFilter for application/json ContentType.
type UpdateEntityFilterJSONRequestBody UpdateEntityFilterJSONBody

// UpdateGlobalAlertRuleJSONRequestBody defines body for UpdateGlobalAlertRule for application/json ContentType.
type UpdateGlobalAlertRuleJSONRequestBody UpdateGlobalAlertRuleJSONBody

// UpdateGlobalRecycleBinSettingJSONRequestBody defines body for UpdateGlobalRecycleBinSetting for application/json ContentType.
type UpdateGlobalRecycleBinSettingJSONRequestBody UpdateGlobalRecycleBinSettingJSONBody

// UpdateGraphJSONRequestBody defines body for UpdateGraph for application/json ContentType.
type UpdateGraphJSONRequestBody UpdateGraphJSONBody

// UpdateHostJSONRequestBody defines body for UpdateHost for application/json ContentType.
type UpdateHostJSONRequestBody UpdateHostJSONBody

// UpdateIscsiLunJSONRequestBody defines body for UpdateIscsiLun for application/json ContentType.
type UpdateIscsiLunJSONRequestBody UpdateIscsiLunJSONBody

// UpdateIscsiTargetJSONRequestBody defines body for UpdateIscsiTarget for application/json ContentType.
type UpdateIscsiTargetJSONRequestBody UpdateIscsiTargetJSONBody

// UpdateLabelJSONRequestBody defines body for UpdateLabel for application/json ContentType.
type UpdateLabelJSONRequestBody UpdateLabelJSONBody

// UpdateDeployJSONRequestBody defines body for UpdateDeploy for application/json ContentType.
type UpdateDeployJSONRequestBody UpdateDeployJSONBody

// UpdateManagementVlanJSONRequestBody defines body for UpdateManagementVlan for application/json ContentType.
type UpdateManagementVlanJSONRequestBody UpdateManagementVlanJSONBody

// UpdateMigrationVlanJSONRequestBody defines body for UpdateMigrationVlan for application/json ContentType.
type UpdateMigrationVlanJSONRequestBody UpdateMigrationVlanJSONBody

// UpdateNamespaceGroupJSONRequestBody defines body for UpdateNamespaceGroup for application/json ContentType.
type UpdateNamespaceGroupJSONRequestBody UpdateNamespaceGroupJSONBody

// UpdateNfsExportJSONRequestBody defines body for UpdateNfsExport for application/json ContentType.
type UpdateNfsExportJSONRequestBody UpdateNfsExportJSONBody

// UpdateNicJSONRequestBody defines body for UpdateNic for application/json ContentType.
type UpdateNicJSONRequestBody UpdateNicJSONBody

// UpdateNvmfNamespaceJSONRequestBody defines body for UpdateNvmfNamespace for application/json ContentType.
type UpdateNvmfNamespaceJSONRequestBody UpdateNvmfNamespaceJSONBody

// UpdateNvmfSubsystemJSONRequestBody defines body for UpdateNvmfSubsystem for application/json ContentType.
type UpdateNvmfSubsystemJSONRequestBody UpdateNvmfSubsystemJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody

// UpdateRackTopoJSONRequestBody defines body for UpdateRackTopo for application/json ContentType.
type UpdateRackTopoJSONRequestBody UpdateRackTopoJSONBody

// UpdateReportTemplateJSONRequestBody defines body for UpdateReportTemplate for application/json ContentType.
type UpdateReportTemplateJSONRequestBody UpdateReportTemplateJSONBody

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody UpdateRoleJSONBody

// UpdateSnapshotPlanJSONRequestBody defines body for UpdateSnapshotPlan for application/json ContentType.
type UpdateSnapshotPlanJSONRequestBody UpdateSnapshotPlanJSONBody

// UpdateSnmpTransportJSONRequestBody defines body for UpdateSnmpTransport for application/json ContentType.
type UpdateSnmpTransportJSONRequestBody UpdateSnmpTransportJSONBody

// UpdateSnmpTrapReceiverJSONRequestBody defines body for UpdateSnmpTrapReceiver for application/json ContentType.
type UpdateSnmpTrapReceiverJSONRequestBody UpdateSnmpTrapReceiverJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// UpdateVdsJSONRequestBody defines body for UpdateVds for application/json ContentType.
type UpdateVdsJSONRequestBody UpdateVdsJSONBody

// UpdateViewJSONRequestBody defines body for UpdateView for application/json ContentType.
type UpdateViewJSONRequestBody UpdateViewJSONBody

// UpdateVmJSONRequestBody defines body for UpdateVm for application/json ContentType.
type UpdateVmJSONRequestBody UpdateVmJSONBody

// UpdateVmDiskJSONRequestBody defines body for UpdateVmDisk for application/json ContentType.
type UpdateVmDiskJSONRequestBody UpdateVmDiskJSONBody

// UpdateVmFolderJSONRequestBody defines body for UpdateVmFolder for application/json ContentType.
type UpdateVmFolderJSONRequestBody UpdateVmFolderJSONBody

// UpdateVmNicJSONRequestBody defines body for UpdateVmNic for application/json ContentType.
type UpdateVmNicJSONRequestBody UpdateVmNicJSONBody

// UpdateVmPlacementGroupJSONRequestBody defines body for UpdateVmPlacementGroup for application/json ContentType.
type UpdateVmPlacementGroupJSONRequestBody UpdateVmPlacementGroupJSONBody

// UpdateVmTemplateFromVmJSONRequestBody defines body for UpdateVmTemplateFromVm for application/json ContentType.
type UpdateVmTemplateFromVmJSONRequestBody UpdateVmTemplateFromVmJSONBody

// UpdateVlanJSONRequestBody defines body for UpdateVlan for application/json ContentType.
type UpdateVlanJSONRequestBody UpdateVlanJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddLabelsToResources request with any body
	AddLabelsToResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddLabelsToResources(ctx context.Context, body AddLabelsToResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddVmCdRom request with any body
	AddVmCdRomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddVmCdRom(ctx context.Context, body AddVmCdRomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddVmDisk request with any body
	AddVmDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddVmDisk(ctx context.Context, body AddVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddVmNic request with any body
	AddVmNicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddVmNic(ctx context.Context, body AddVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddVmToFolder request with any body
	AddVmToFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddVmToFolder(ctx context.Context, body AddVmToFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneIscsiLunFromSnapshot request with any body
	CloneIscsiLunFromSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloneIscsiLunFromSnapshot(ctx context.Context, body CloneIscsiLunFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneNvmfNamespaceFromSnapshot request with any body
	CloneNvmfNamespaceFromSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloneNvmfNamespaceFromSnapshot(ctx context.Context, body CloneNvmfNamespaceFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneSnapshotGroup request with any body
	CloneSnapshotGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloneSnapshotGroup(ctx context.Context, body CloneSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneVm request with any body
	CloneVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloneVm(ctx context.Context, body CloneVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneVmTemplateFromVm request with any body
	CloneVmTemplateFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloneVmTemplateFromVm(ctx context.Context, body CloneVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectCluster request with any body
	ConnectClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConnectCluster(ctx context.Context, body ConnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertVmTemplateFromVm request with any body
	ConvertVmTemplateFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConvertVmTemplateFromVm(ctx context.Context, body ConvertVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertVmTemplateToVm request with any body
	ConvertVmTemplateToVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConvertVmTemplateToVm(ctx context.Context, body ConvertVmTemplateToVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBrickTopo request with any body
	CreateBrickTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBrickTopo(ctx context.Context, body CreateBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClusterRecycleBinSetting request with any body
	CreateClusterRecycleBinSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClusterRecycleBinSetting(ctx context.Context, body CreateClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConsistencyGroup request with any body
	CreateConsistencyGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConsistencyGroup(ctx context.Context, body CreateConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConsistencyGroupSnapshot request with any body
	CreateConsistencyGroupSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConsistencyGroupSnapshot(ctx context.Context, body CreateConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDatacenter request with any body
	CreateDatacenterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDatacenter(ctx context.Context, body CreateDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEntityFilter request with any body
	CreateEntityFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEntityFilter(ctx context.Context, body CreateEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGraph request with any body
	CreateGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGraph(ctx context.Context, body CreateGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHost request with any body
	CreateHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHost(ctx context.Context, body CreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIscsiLun request with any body
	CreateIscsiLunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIscsiLun(ctx context.Context, body CreateIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIscsiLunSnapshot request with any body
	CreateIscsiLunSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIscsiLunSnapshot(ctx context.Context, body CreateIscsiLunSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIscsiTarget request with any body
	CreateIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIscsiTarget(ctx context.Context, body CreateIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLabel request with any body
	CreateLabelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLabel(ctx context.Context, body CreateLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNamespaceGroup request with any body
	CreateNamespaceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNamespaceGroup(ctx context.Context, body CreateNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNfsExport request with any body
	CreateNfsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNfsExport(ctx context.Context, body CreateNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNvmfNamespace request with any body
	CreateNvmfNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNvmfNamespace(ctx context.Context, body CreateNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNvmfNamespaceSnapshot request with any body
	CreateNvmfNamespaceSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNvmfNamespaceSnapshot(ctx context.Context, body CreateNvmfNamespaceSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNvmfSubsystem request with any body
	CreateNvmfSubsystemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNvmfSubsystem(ctx context.Context, body CreateNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRackTopo request with any body
	CreateRackTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRackTopo(ctx context.Context, body CreateRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateReportTemplate request with any body
	CreateReportTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateReportTemplate(ctx context.Context, body CreateReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRole request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSnapshotPlan request with any body
	CreateSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSnapshotPlan(ctx context.Context, body CreateSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSnmpTransport request with any body
	CreateSnmpTransportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSnmpTransport(ctx context.Context, body CreateSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSnmpTrapReceiver request with any body
	CreateSnmpTrapReceiverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSnmpTrapReceiver(ctx context.Context, body CreateSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVds request with any body
	CreateVdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVds(ctx context.Context, body CreateVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVdsWithAccessVlan request with any body
	CreateVdsWithAccessVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVdsWithAccessVlan(ctx context.Context, body CreateVdsWithAccessVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVdsWithMigrateVlan request with any body
	CreateVdsWithMigrateVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVdsWithMigrateVlan(ctx context.Context, body CreateVdsWithMigrateVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateView request with any body
	CreateViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateView(ctx context.Context, body CreateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVm request with any body
	CreateVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVm(ctx context.Context, body CreateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVmFolder request with any body
	CreateVmFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVmFolder(ctx context.Context, body CreateVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVmFromTemplate request with any body
	CreateVmFromTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVmFromTemplate(ctx context.Context, body CreateVmFromTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVmPlacementGroup request with any body
	CreateVmPlacementGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVmPlacementGroup(ctx context.Context, body CreateVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVmSnapshot request with any body
	CreateVmSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVmSnapshot(ctx context.Context, body CreateVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVmVlan request with any body
	CreateVmVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVmVlan(ctx context.Context, body CreateVmVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVmVolume request with any body
	CreateVmVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVmVolume(ctx context.Context, body CreateVmVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBrickTopo request with any body
	DeleteBrickTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteBrickTopo(ctx context.Context, body DeleteBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCluster request with any body
	DeleteClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCluster(ctx context.Context, body DeleteClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClusterRecycleBinSetting request with any body
	DeleteClusterRecycleBinSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteClusterRecycleBinSetting(ctx context.Context, body DeleteClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsistencyGroup request with any body
	DeleteConsistencyGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteConsistencyGroup(ctx context.Context, body DeleteConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsistencyGroupSnapshot request with any body
	DeleteConsistencyGroupSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteConsistencyGroupSnapshot(ctx context.Context, body DeleteConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatacenter request with any body
	DeleteDatacenterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteDatacenter(ctx context.Context, body DeleteDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteElfImage request with any body
	DeleteElfImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteElfImage(ctx context.Context, body DeleteElfImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEntityFilter request with any body
	DeleteEntityFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteEntityFilter(ctx context.Context, body DeleteEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGraph request with any body
	DeleteGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGraph(ctx context.Context, body DeleteGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiLun request with any body
	DeleteIscsiLunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiLun(ctx context.Context, body DeleteIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiLunSnapshot request with any body
	DeleteIscsiLunSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiLunSnapshot(ctx context.Context, body DeleteIscsiLunSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiTarget request with any body
	DeleteIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiTarget(ctx context.Context, body DeleteIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLabel request with any body
	DeleteLabelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteLabel(ctx context.Context, body DeleteLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNamespaceGroup request with any body
	DeleteNamespaceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteNamespaceGroup(ctx context.Context, body DeleteNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNfsExport request with any body
	DeleteNfsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteNfsExport(ctx context.Context, body DeleteNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNvmfNamespace request with any body
	DeleteNvmfNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteNvmfNamespace(ctx context.Context, body DeleteNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNvmfNamespaceSnapshot request with any body
	DeleteNvmfNamespaceSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteNvmfNamespaceSnapshot(ctx context.Context, body DeleteNvmfNamespaceSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNvmfSubsystem request with any body
	DeleteNvmfSubsystemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteNvmfSubsystem(ctx context.Context, body DeleteNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganization request with any body
	DeleteOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteOrganization(ctx context.Context, body DeleteOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRackTopo request with any body
	DeleteRackTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRackTopo(ctx context.Context, body DeleteRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReportTemplate request with any body
	DeleteReportTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteReportTemplate(ctx context.Context, body DeleteReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request with any body
	DeleteRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRole(ctx context.Context, body DeleteRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnapshotGroup request with any body
	DeleteSnapshotGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSnapshotGroup(ctx context.Context, body DeleteSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnapshotPlan request with any body
	DeleteSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSnapshotPlan(ctx context.Context, body DeleteSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnmpTransport request with any body
	DeleteSnmpTransportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSnmpTransport(ctx context.Context, body DeleteSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnmpTrapReceiver request with any body
	DeleteSnmpTrapReceiverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSnmpTrapReceiver(ctx context.Context, body DeleteSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request with any body
	DeleteUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUser(ctx context.Context, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVds request with any body
	DeleteVdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVds(ctx context.Context, body DeleteVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteView request with any body
	DeleteViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteView(ctx context.Context, body DeleteViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVm request with any body
	DeleteVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVm(ctx context.Context, body DeleteVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmFolder request with any body
	DeleteVmFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVmFolder(ctx context.Context, body DeleteVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmPlacementGroup request with any body
	DeleteVmPlacementGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVmPlacementGroup(ctx context.Context, body DeleteVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmSnapshot request with any body
	DeleteVmSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVmSnapshot(ctx context.Context, body DeleteVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmTemplateFromVm request with any body
	DeleteVmTemplateFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVmTemplateFromVm(ctx context.Context, body DeleteVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVlan request with any body
	DeleteVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVlan(ctx context.Context, body DeleteVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmVolumeFromVm request with any body
	DeleteVmVolumeFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVmVolumeFromVm(ctx context.Context, body DeleteVmVolumeFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteSnapshotPlan request with any body
	ExecuteSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteSnapshotPlan(ctx context.Context, body ExecuteSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForceRestartVm request with any body
	ForceRestartVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ForceRestartVm(ctx context.Context, body ForceRestartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateFromReportTemplate request with any body
	GenerateFromReportTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateFromReportTemplate(ctx context.Context, body GenerateFromReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertNotifiers request with any body
	GetAlertNotifiersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAlertNotifiers(ctx context.Context, body GetAlertNotifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertNotifiersConnection request with any body
	GetAlertNotifiersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAlertNotifiersConnection(ctx context.Context, body GetAlertNotifiersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertRules request with any body
	GetAlertRulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAlertRules(ctx context.Context, body GetAlertRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertRulesConnection request with any body
	GetAlertRulesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAlertRulesConnection(ctx context.Context, body GetAlertRulesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlerts request with any body
	GetAlertsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAlerts(ctx context.Context, body GetAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertsConnection request with any body
	GetAlertsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAlertsConnection(ctx context.Context, body GetAlertsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplications request with any body
	GetApplicationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetApplications(ctx context.Context, body GetApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationsConnection request with any body
	GetApplicationsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetApplicationsConnection(ctx context.Context, body GetApplicationsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBrickTopoes request with any body
	GetBrickTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetBrickTopoes(ctx context.Context, body GetBrickTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBrickTopoesConnection request with any body
	GetBrickTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetBrickTopoesConnection(ctx context.Context, body GetBrickTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterImages request with any body
	GetClusterImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusterImages(ctx context.Context, body GetClusterImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterImagesConnection request with any body
	GetClusterImagesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusterImagesConnection(ctx context.Context, body GetClusterImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterSettingses request with any body
	GetClusterSettingsesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusterSettingses(ctx context.Context, body GetClusterSettingsesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterSettingsesConnection request with any body
	GetClusterSettingsesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusterSettingsesConnection(ctx context.Context, body GetClusterSettingsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterTopoes request with any body
	GetClusterTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusterTopoes(ctx context.Context, body GetClusterTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterTopoesConnection request with any body
	GetClusterTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusterTopoesConnection(ctx context.Context, body GetClusterTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterUpgradeHistories request with any body
	GetClusterUpgradeHistoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusterUpgradeHistories(ctx context.Context, body GetClusterUpgradeHistoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterUpgradeHistoriesConnection request with any body
	GetClusterUpgradeHistoriesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusterUpgradeHistoriesConnection(ctx context.Context, body GetClusterUpgradeHistoriesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusters request with any body
	GetClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClusters(ctx context.Context, body GetClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClustersConnection request with any body
	GetClustersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClustersConnection(ctx context.Context, body GetClustersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsistencyGroupSnapshots request with any body
	GetConsistencyGroupSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetConsistencyGroupSnapshots(ctx context.Context, body GetConsistencyGroupSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsistencyGroupSnapshotsConnection request with any body
	GetConsistencyGroupSnapshotsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetConsistencyGroupSnapshotsConnection(ctx context.Context, body GetConsistencyGroupSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsistencyGroups request with any body
	GetConsistencyGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetConsistencyGroups(ctx context.Context, body GetConsistencyGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsistencyGroupsConnection request with any body
	GetConsistencyGroupsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetConsistencyGroupsConnection(ctx context.Context, body GetConsistencyGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatacenters request with any body
	GetDatacentersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDatacenters(ctx context.Context, body GetDatacentersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatacentersConnection request with any body
	GetDatacentersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDatacentersConnection(ctx context.Context, body GetDatacentersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploys request with any body
	GetDeploysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDeploys(ctx context.Context, body GetDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploysConnection request with any body
	GetDeploysConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDeploysConnection(ctx context.Context, body GetDeploysConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiscoverHosts request with any body
	GetDiscoverHostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDiscoverHosts(ctx context.Context, body GetDiscoverHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDisks request with any body
	GetDisksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDisks(ctx context.Context, body GetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDisksConnection request with any body
	GetDisksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDisksConnection(ctx context.Context, body GetDisksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElfDataStores request with any body
	GetElfDataStoresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetElfDataStores(ctx context.Context, body GetElfDataStoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElfDataStoresConnection request with any body
	GetElfDataStoresConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetElfDataStoresConnection(ctx context.Context, body GetElfDataStoresConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElfImages request with any body
	GetElfImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetElfImages(ctx context.Context, body GetElfImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElfImagesConnection request with any body
	GetElfImagesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetElfImagesConnection(ctx context.Context, body GetElfImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElfStoragePolicies request with any body
	GetElfStoragePoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetElfStoragePolicies(ctx context.Context, body GetElfStoragePoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElfStoragePoliciesConnection request with any body
	GetElfStoragePoliciesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetElfStoragePoliciesConnection(ctx context.Context, body GetElfStoragePoliciesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntityFilters request with any body
	GetEntityFiltersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetEntityFilters(ctx context.Context, body GetEntityFiltersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntityFiltersConnection request with any body
	GetEntityFiltersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetEntityFiltersConnection(ctx context.Context, body GetEntityFiltersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobalAlertRules request with any body
	GetGlobalAlertRulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetGlobalAlertRules(ctx context.Context, body GetGlobalAlertRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobalAlertRulesConnection request with any body
	GetGlobalAlertRulesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetGlobalAlertRulesConnection(ctx context.Context, body GetGlobalAlertRulesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobalSettingses request with any body
	GetGlobalSettingsesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetGlobalSettingses(ctx context.Context, body GetGlobalSettingsesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobalSettingsesConnection request with any body
	GetGlobalSettingsesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetGlobalSettingsesConnection(ctx context.Context, body GetGlobalSettingsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGraphs request with any body
	GetGraphsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetGraphs(ctx context.Context, body GetGraphsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGraphsConnection request with any body
	GetGraphsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetGraphsConnection(ctx context.Context, body GetGraphsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHosts request with any body
	GetHostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetHosts(ctx context.Context, body GetHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostsConnection request with any body
	GetHostsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetHostsConnection(ctx context.Context, body GetHostsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetImagesConnector request with any body
	GetImagesConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetImagesConnector(ctx context.Context, body GetImagesConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmis request with any body
	GetIpmisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIpmis(ctx context.Context, body GetIpmisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiConnections request with any body
	GetIscsiConnectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIscsiConnections(ctx context.Context, body GetIscsiConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiConnectionsConnection request with any body
	GetIscsiConnectionsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIscsiConnectionsConnection(ctx context.Context, body GetIscsiConnectionsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiLunSnapshots request with any body
	GetIscsiLunSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIscsiLunSnapshots(ctx context.Context, body GetIscsiLunSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiLunSnapshotsConnection request with any body
	GetIscsiLunSnapshotsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIscsiLunSnapshotsConnection(ctx context.Context, body GetIscsiLunSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiLuns request with any body
	GetIscsiLunsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIscsiLuns(ctx context.Context, body GetIscsiLunsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiLunsConnection request with any body
	GetIscsiLunsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIscsiLunsConnection(ctx context.Context, body GetIscsiLunsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTargets request with any body
	GetIscsiTargetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIscsiTargets(ctx context.Context, body GetIscsiTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTargetsConnection request with any body
	GetIscsiTargetsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIscsiTargetsConnection(ctx context.Context, body GetIscsiTargetsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLabels request with any body
	GetLabelsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLabels(ctx context.Context, body GetLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLabelsConnection request with any body
	GetLabelsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLabelsConnection(ctx context.Context, body GetLabelsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLicenses request with any body
	GetLicensesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLicenses(ctx context.Context, body GetLicensesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLicensesConnection request with any body
	GetLicensesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLicensesConnection(ctx context.Context, body GetLicensesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogCollections request with any body
	GetLogCollectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLogCollections(ctx context.Context, body GetLogCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogCollectionsConnection request with any body
	GetLogCollectionsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLogCollectionsConnection(ctx context.Context, body GetLogCollectionsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMigrateTransmitters request with any body
	GetMigrateTransmittersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetMigrateTransmitters(ctx context.Context, body GetMigrateTransmittersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMigrateTransmittersConnection request with any body
	GetMigrateTransmittersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetMigrateTransmittersConnection(ctx context.Context, body GetMigrateTransmittersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNamespaceGroups request with any body
	GetNamespaceGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNamespaceGroups(ctx context.Context, body GetNamespaceGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNamespaceGroupsConnection request with any body
	GetNamespaceGroupsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNamespaceGroupsConnection(ctx context.Context, body GetNamespaceGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNfsExports request with any body
	GetNfsExportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNfsExports(ctx context.Context, body GetNfsExportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNfsExportsConnection request with any body
	GetNfsExportsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNfsExportsConnection(ctx context.Context, body GetNfsExportsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNfsInodes request with any body
	GetNfsInodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNfsInodes(ctx context.Context, body GetNfsInodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNfsInodesConnection request with any body
	GetNfsInodesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNfsInodesConnection(ctx context.Context, body GetNfsInodesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNics request with any body
	GetNicsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNics(ctx context.Context, body GetNicsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNicsConnection request with any body
	GetNicsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNicsConnection(ctx context.Context, body GetNicsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeTopoes request with any body
	GetNodeTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNodeTopoes(ctx context.Context, body GetNodeTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeTopoesConnection request with any body
	GetNodeTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNodeTopoesConnection(ctx context.Context, body GetNodeTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNvmfNamespaceSnapshots request with any body
	GetNvmfNamespaceSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNvmfNamespaceSnapshots(ctx context.Context, body GetNvmfNamespaceSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNvmfNamespaceSnapshotsConnection request with any body
	GetNvmfNamespaceSnapshotsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNvmfNamespaceSnapshotsConnection(ctx context.Context, body GetNvmfNamespaceSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNvmfNamespaces request with any body
	GetNvmfNamespacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNvmfNamespaces(ctx context.Context, body GetNvmfNamespacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNvmfNamespacesConnection request with any body
	GetNvmfNamespacesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNvmfNamespacesConnection(ctx context.Context, body GetNvmfNamespacesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNvmfSubsystems request with any body
	GetNvmfSubsystemsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNvmfSubsystems(ctx context.Context, body GetNvmfSubsystemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNvmfSubsystemsConnection request with any body
	GetNvmfSubsystemsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNvmfSubsystemsConnection(ctx context.Context, body GetNvmfSubsystemsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request with any body
	GetOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOrganizations(ctx context.Context, body GetOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsConnection request with any body
	GetOrganizationsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOrganizationsConnection(ctx context.Context, body GetOrganizationsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPmemDimms request with any body
	GetPmemDimmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPmemDimms(ctx context.Context, body GetPmemDimmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPmemDimmsConnection request with any body
	GetPmemDimmsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPmemDimmsConnection(ctx context.Context, body GetPmemDimmsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRackTopoes request with any body
	GetRackTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetRackTopoes(ctx context.Context, body GetRackTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRackTopoesConnection request with any body
	GetRackTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetRackTopoesConnection(ctx context.Context, body GetRackTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportTasks request with any body
	GetReportTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetReportTasks(ctx context.Context, body GetReportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportTasksConnection request with any body
	GetReportTasksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetReportTasksConnection(ctx context.Context, body GetReportTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportTemplates request with any body
	GetReportTemplatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetReportTemplates(ctx context.Context, body GetReportTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportTemplatesConnection request with any body
	GetReportTemplatesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetReportTemplatesConnection(ctx context.Context, body GetReportTemplatesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotGroups request with any body
	GetSnapshotGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnapshotGroups(ctx context.Context, body GetSnapshotGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotGroupsConnection request with any body
	GetSnapshotGroupsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnapshotGroupsConnection(ctx context.Context, body GetSnapshotGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotPlanTasks request with any body
	GetSnapshotPlanTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnapshotPlanTasks(ctx context.Context, body GetSnapshotPlanTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotPlanTasksConnection request with any body
	GetSnapshotPlanTasksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnapshotPlanTasksConnection(ctx context.Context, body GetSnapshotPlanTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotPlans request with any body
	GetSnapshotPlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnapshotPlans(ctx context.Context, body GetSnapshotPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotPlansConnection request with any body
	GetSnapshotPlansConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnapshotPlansConnection(ctx context.Context, body GetSnapshotPlansConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnmpTransports request with any body
	GetSnmpTransportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnmpTransports(ctx context.Context, body GetSnmpTransportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnmpTransportsConnection request with any body
	GetSnmpTransportsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnmpTransportsConnection(ctx context.Context, body GetSnmpTransportsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnmpTrapReceivers request with any body
	GetSnmpTrapReceiversWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnmpTrapReceivers(ctx context.Context, body GetSnmpTrapReceiversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnmpTrapReceiversConnection request with any body
	GetSnmpTrapReceiversConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSnmpTrapReceiversConnection(ctx context.Context, body GetSnmpTrapReceiversConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoragePoliciesConnector request with any body
	GetStoragePoliciesConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStoragePoliciesConnector(ctx context.Context, body GetStoragePoliciesConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSvtImages request with any body
	GetSvtImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSvtImages(ctx context.Context, body GetSvtImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSvtImagesConnection request with any body
	GetSvtImagesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSvtImagesConnection(ctx context.Context, body GetSvtImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemAuditLogs request with any body
	GetSystemAuditLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSystemAuditLogs(ctx context.Context, body GetSystemAuditLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemAuditLogsConnection request with any body
	GetSystemAuditLogsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSystemAuditLogsConnection(ctx context.Context, body GetSystemAuditLogsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasks request with any body
	GetTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTasks(ctx context.Context, body GetTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksConnection request with any body
	GetTasksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTasksConnection(ctx context.Context, body GetTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUploadTasks request with any body
	GetUploadTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUploadTasks(ctx context.Context, body GetUploadTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUploadTasksConnection request with any body
	GetUploadTasksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUploadTasksConnection(ctx context.Context, body GetUploadTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsbDevices request with any body
	GetUsbDevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUsbDevices(ctx context.Context, body GetUsbDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsbDevicesConnection request with any body
	GetUsbDevicesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUsbDevicesConnection(ctx context.Context, body GetUsbDevicesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAuditLogs request with any body
	GetUserAuditLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUserAuditLogs(ctx context.Context, body GetUserAuditLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAuditLogsConnection request with any body
	GetUserAuditLogsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUserAuditLogsConnection(ctx context.Context, body GetUserAuditLogsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleNexts request with any body
	GetUserRoleNextsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUserRoleNexts(ctx context.Context, body GetUserRoleNextsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleNextsConnection request with any body
	GetUserRoleNextsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUserRoleNextsConnection(ctx context.Context, body GetUserRoleNextsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request with any body
	GetUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUsers(ctx context.Context, body GetUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersConnection request with any body
	GetUsersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUsersConnection(ctx context.Context, body GetUsersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVcenterAccounts request with any body
	GetVcenterAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVcenterAccounts(ctx context.Context, body GetVcenterAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVcenterAccountsConnection request with any body
	GetVcenterAccountsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVcenterAccountsConnection(ctx context.Context, body GetVcenterAccountsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVdses request with any body
	GetVdsesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVdses(ctx context.Context, body GetVdsesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVdsesConnection request with any body
	GetVdsesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVdsesConnection(ctx context.Context, body GetVdsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetViews request with any body
	GetViewsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetViews(ctx context.Context, body GetViewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetViewsConnection request with any body
	GetViewsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetViewsConnection(ctx context.Context, body GetViewsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVlans request with any body
	GetVlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVlans(ctx context.Context, body GetVlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVlansConnection request with any body
	GetVlansConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVlansConnection(ctx context.Context, body GetVlansConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDisks request with any body
	GetVmDisksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmDisks(ctx context.Context, body GetVmDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDisksConnection request with any body
	GetVmDisksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmDisksConnection(ctx context.Context, body GetVmDisksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmEntityFilterResults request with any body
	GetVmEntityFilterResultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmEntityFilterResults(ctx context.Context, body GetVmEntityFilterResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmEntityFilterResultsConnection request with any body
	GetVmEntityFilterResultsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmEntityFilterResultsConnection(ctx context.Context, body GetVmEntityFilterResultsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmFolders request with any body
	GetVmFoldersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmFolders(ctx context.Context, body GetVmFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmFoldersConnection request with any body
	GetVmFoldersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmFoldersConnection(ctx context.Context, body GetVmFoldersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmNics request with any body
	GetVmNicsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmNics(ctx context.Context, body GetVmNicsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmNicsConnection request with any body
	GetVmNicsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmNicsConnection(ctx context.Context, body GetVmNicsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmPlacementGroups request with any body
	GetVmPlacementGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmPlacementGroups(ctx context.Context, body GetVmPlacementGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmPlacementGroupsConnection request with any body
	GetVmPlacementGroupsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmPlacementGroupsConnection(ctx context.Context, body GetVmPlacementGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmSnapshots request with any body
	GetVmSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmSnapshots(ctx context.Context, body GetVmSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmSnapshotsConnection request with any body
	GetVmSnapshotsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmSnapshotsConnection(ctx context.Context, body GetVmSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmTemplates request with any body
	GetVmTemplatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmTemplates(ctx context.Context, body GetVmTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmTemplatesConnection request with any body
	GetVmTemplatesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmTemplatesConnection(ctx context.Context, body GetVmTemplatesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmVolumes request with any body
	GetVmVolumesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmVolumes(ctx context.Context, body GetVmVolumesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmVolumesConnection request with any body
	GetVmVolumesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmVolumesConnection(ctx context.Context, body GetVmVolumesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVms request with any body
	GetVmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVms(ctx context.Context, body GetVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmsConnection request with any body
	GetVmsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVmsConnection(ctx context.Context, body GetVmsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVsphereEsxiAccounts request with any body
	GetVsphereEsxiAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVsphereEsxiAccounts(ctx context.Context, body GetVsphereEsxiAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVsphereEsxiAccountsConnection request with any body
	GetVsphereEsxiAccountsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVsphereEsxiAccountsConnection(ctx context.Context, body GetVsphereEsxiAccountsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWitnesses request with any body
	GetWitnessesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWitnesses(ctx context.Context, body GetWitnessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWitnessesConnection request with any body
	GetWitnessesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWitnessesConnection(ctx context.Context, body GetWitnessesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneTopoes request with any body
	GetZoneTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetZoneTopoes(ctx context.Context, body GetZoneTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneTopoesConnection request with any body
	GetZoneTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetZoneTopoesConnection(ctx context.Context, body GetZoneTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZones request with any body
	GetZonesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetZones(ctx context.Context, body GetZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZonesConnection request with any body
	GetZonesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetZonesConnection(ctx context.Context, body GetZonesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallVmtools request with any body
	InstallVmtoolsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstallVmtools(ctx context.Context, body InstallVmtoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeepSnapshotGroup request with any body
	KeepSnapshotGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KeepSnapshotGroup(ctx context.Context, body KeepSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Login request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigRateVm request with any body
	MigRateVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MigRateVm(ctx context.Context, body MigRateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MountDisk request with any body
	MountDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MountDisk(ctx context.Context, body MountDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MountUsbDevice request with any body
	MountUsbDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MountUsbDevice(ctx context.Context, body MountUsbDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveBrickTopo request with any body
	MoveBrickTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveBrickTopo(ctx context.Context, body MoveBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNodeTopo request with any body
	UpdateNodeTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNodeTopo(ctx context.Context, body UpdateNodeTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveVmToRecycleBin request with any body
	MoveVmToRecycleBinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveVmToRecycleBin(ctx context.Context, body MoveVmToRecycleBinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForceShutDownVm request with any body
	ForceShutDownVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ForceShutDownVm(ctx context.Context, body ForceShutDownVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RebuildVm request with any body
	RebuildVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RebuildVm(ctx context.Context, body RebuildVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecoverVmFromRecycleBin request with any body
	RecoverVmFromRecycleBinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RecoverVmFromRecycleBin(ctx context.Context, body RecoverVmFromRecycleBinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveLabelsFromResources request with any body
	RemoveLabelsFromResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveLabelsFromResources(ctx context.Context, body RemoveLabelsFromResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveVmCdRom request with any body
	RemoveVmCdRomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveVmCdRom(ctx context.Context, body RemoveVmCdRomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveVmDisk request with any body
	RemoveVmDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveVmDisk(ctx context.Context, body RemoveVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveVmToFolder request with any body
	RemoveVmToFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveVmToFolder(ctx context.Context, body RemoveVmToFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveVmNic request with any body
	RemoveVmNicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveVmNic(ctx context.Context, body RemoveVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveAlert request with any body
	ResolveAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResolveAlert(ctx context.Context, body ResolveAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartVm request with any body
	RestartVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RestartVm(ctx context.Context, body RestartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeSnapshotPlan request with any body
	ResumeSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResumeSnapshotPlan(ctx context.Context, body ResumeSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeVm request with any body
	ResumeVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResumeVm(ctx context.Context, body ResumeVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConsistencyGroupSnapshot request with any body
	UpdateConsistencyGroupSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConsistencyGroupSnapshot(ctx context.Context, body UpdateConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RollbackIscsiLunFromSnapshot request with any body
	RollbackIscsiLunFromSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RollbackIscsiLunFromSnapshot(ctx context.Context, body RollbackIscsiLunFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RollbackNvmfNamespaceFromSnapshot request with any body
	RollbackNvmfNamespaceFromSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RollbackNvmfNamespaceFromSnapshot(ctx context.Context, body RollbackNvmfNamespaceFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RollbackSnapshotGroup request with any body
	RollbackSnapshotGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RollbackSnapshotGroup(ctx context.Context, body RollbackSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RollbackVm request with any body
	RollbackVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RollbackVm(ctx context.Context, body RollbackVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShutDownVm request with any body
	ShutDownVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShutDownVm(ctx context.Context, body ShutDownVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartVm request with any body
	StartVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartVm(ctx context.Context, body StartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SuspendSnapshotPlan request with any body
	SuspendSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SuspendSnapshotPlan(ctx context.Context, body SuspendSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SuspendVm request with any body
	SuspendVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SuspendVm(ctx context.Context, body SuspendVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriggerDiskBlink request with any body
	TriggerDiskBlinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TriggerDiskBlink(ctx context.Context, body TriggerDiskBlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnmountDisk request with any body
	UnmountDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnmountDisk(ctx context.Context, body UnmountDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnmountUsbDevice request with any body
	UnmountUsbDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnmountUsbDevice(ctx context.Context, body UnmountUsbDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBrickTopo request with any body
	UpdateBrickTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBrickTopo(ctx context.Context, body UpdateBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCluster request with any body
	UpdateClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCluster(ctx context.Context, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateClusterLicense request with any body
	UpdateClusterLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateClusterLicense(ctx context.Context, body UpdateClusterLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateClusterRecycleBinSetting request with any body
	UpdateClusterRecycleBinSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateClusterRecycleBinSetting(ctx context.Context, body UpdateClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConsistencyGroup request with any body
	UpdateConsistencyGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConsistencyGroup(ctx context.Context, body UpdateConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomizeAlertRule request with any body
	UpdateCustomizeAlertRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomizeAlertRule(ctx context.Context, body UpdateCustomizeAlertRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDatacenter request with any body
	UpdateDatacenterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDatacenter(ctx context.Context, body UpdateDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateElfImage request with any body
	UpdateElfImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateElfImage(ctx context.Context, body UpdateElfImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEntityFilter request with any body
	UpdateEntityFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEntityFilter(ctx context.Context, body UpdateEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGlobalAlertRule request with any body
	UpdateGlobalAlertRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGlobalAlertRule(ctx context.Context, body UpdateGlobalAlertRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGlobalRecycleBinSetting request with any body
	UpdateGlobalRecycleBinSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGlobalRecycleBinSetting(ctx context.Context, body UpdateGlobalRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGraph request with any body
	UpdateGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGraph(ctx context.Context, body UpdateGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHost request with any body
	UpdateHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHost(ctx context.Context, body UpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIscsiLun request with any body
	UpdateIscsiLunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIscsiLun(ctx context.Context, body UpdateIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIscsiTarget request with any body
	UpdateIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIscsiTarget(ctx context.Context, body UpdateIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLabel request with any body
	UpdateLabelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLabel(ctx context.Context, body UpdateLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeploy request with any body
	UpdateDeployWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeploy(ctx context.Context, body UpdateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateManagementVlan request with any body
	UpdateManagementVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateManagementVlan(ctx context.Context, body UpdateManagementVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMigrationVlan request with any body
	UpdateMigrationVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMigrationVlan(ctx context.Context, body UpdateMigrationVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNamespaceGroup request with any body
	UpdateNamespaceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNamespaceGroup(ctx context.Context, body UpdateNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNfsExport request with any body
	UpdateNfsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNfsExport(ctx context.Context, body UpdateNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNic request with any body
	UpdateNicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNic(ctx context.Context, body UpdateNicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNvmfNamespace request with any body
	UpdateNvmfNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNvmfNamespace(ctx context.Context, body UpdateNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNvmfSubsystem request with any body
	UpdateNvmfSubsystemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNvmfSubsystem(ctx context.Context, body UpdateNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRackTopo request with any body
	UpdateRackTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRackTopo(ctx context.Context, body UpdateRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateReportTemplate request with any body
	UpdateReportTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateReportTemplate(ctx context.Context, body UpdateReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRole request with any body
	UpdateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRole(ctx context.Context, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSnapshotPlan request with any body
	UpdateSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSnapshotPlan(ctx context.Context, body UpdateSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSnmpTransport request with any body
	UpdateSnmpTransportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSnmpTransport(ctx context.Context, body UpdateSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSnmpTrapReceiver request with any body
	UpdateSnmpTrapReceiverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSnmpTrapReceiver(ctx context.Context, body UpdateSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUser request with any body
	UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVds request with any body
	UpdateVdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVds(ctx context.Context, body UpdateVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateView request with any body
	UpdateViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateView(ctx context.Context, body UpdateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVm request with any body
	UpdateVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVm(ctx context.Context, body UpdateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVmDisk request with any body
	UpdateVmDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVmDisk(ctx context.Context, body UpdateVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVmFolder request with any body
	UpdateVmFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVmFolder(ctx context.Context, body UpdateVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVmNic request with any body
	UpdateVmNicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVmNic(ctx context.Context, body UpdateVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVmPlacementGroup request with any body
	UpdateVmPlacementGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVmPlacementGroup(ctx context.Context, body UpdateVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVmTemplateFromVm request with any body
	UpdateVmTemplateFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVmTemplateFromVm(ctx context.Context, body UpdateVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVlan request with any body
	UpdateVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVlan(ctx context.Context, body UpdateVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateElfImage request with any body
	CreateElfImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddLabelsToResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddLabelsToResourcesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddLabelsToResources(ctx context.Context, body AddLabelsToResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddLabelsToResourcesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVmCdRomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVmCdRomRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVmCdRom(ctx context.Context, body AddVmCdRomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVmCdRomRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVmDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVmDiskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVmDisk(ctx context.Context, body AddVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVmDiskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVmNicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVmNicRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVmNic(ctx context.Context, body AddVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVmNicRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVmToFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVmToFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVmToFolder(ctx context.Context, body AddVmToFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVmToFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneIscsiLunFromSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneIscsiLunFromSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneIscsiLunFromSnapshot(ctx context.Context, body CloneIscsiLunFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneIscsiLunFromSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneNvmfNamespaceFromSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneNvmfNamespaceFromSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneNvmfNamespaceFromSnapshot(ctx context.Context, body CloneNvmfNamespaceFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneNvmfNamespaceFromSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneSnapshotGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneSnapshotGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneSnapshotGroup(ctx context.Context, body CloneSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneSnapshotGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneVm(ctx context.Context, body CloneVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneVmTemplateFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneVmTemplateFromVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneVmTemplateFromVm(ctx context.Context, body CloneVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneVmTemplateFromVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectCluster(ctx context.Context, body ConnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertVmTemplateFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertVmTemplateFromVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertVmTemplateFromVm(ctx context.Context, body ConvertVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertVmTemplateFromVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertVmTemplateToVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertVmTemplateToVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertVmTemplateToVm(ctx context.Context, body ConvertVmTemplateToVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertVmTemplateToVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBrickTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBrickTopoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBrickTopo(ctx context.Context, body CreateBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBrickTopoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterRecycleBinSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRecycleBinSettingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterRecycleBinSetting(ctx context.Context, body CreateClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRecycleBinSettingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConsistencyGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConsistencyGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConsistencyGroup(ctx context.Context, body CreateConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConsistencyGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConsistencyGroupSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConsistencyGroupSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConsistencyGroupSnapshot(ctx context.Context, body CreateConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConsistencyGroupSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatacenterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatacenterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatacenter(ctx context.Context, body CreateDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatacenterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEntityFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEntityFilterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEntityFilter(ctx context.Context, body CreateEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEntityFilterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGraphRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGraph(ctx context.Context, body CreateGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGraphRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHost(ctx context.Context, body CreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIscsiLunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIscsiLunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIscsiLun(ctx context.Context, body CreateIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIscsiLunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIscsiLunSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIscsiLunSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIscsiLunSnapshot(ctx context.Context, body CreateIscsiLunSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIscsiLunSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIscsiTargetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIscsiTarget(ctx context.Context, body CreateIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIscsiTargetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLabelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLabelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLabel(ctx context.Context, body CreateLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLabelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNamespaceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNamespaceGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNamespaceGroup(ctx context.Context, body CreateNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNamespaceGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNfsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNfsExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNfsExport(ctx context.Context, body CreateNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNfsExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNvmfNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNvmfNamespaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNvmfNamespace(ctx context.Context, body CreateNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNvmfNamespaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNvmfNamespaceSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNvmfNamespaceSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNvmfNamespaceSnapshot(ctx context.Context, body CreateNvmfNamespaceSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNvmfNamespaceSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNvmfSubsystemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNvmfSubsystemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNvmfSubsystem(ctx context.Context, body CreateNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNvmfSubsystemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRackTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRackTopoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRackTopo(ctx context.Context, body CreateRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRackTopoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReportTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReportTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReportTemplate(ctx context.Context, body CreateReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReportTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnapshotPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnapshotPlan(ctx context.Context, body CreateSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnapshotPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnmpTransportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnmpTransportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnmpTransport(ctx context.Context, body CreateSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnmpTransportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnmpTrapReceiverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnmpTrapReceiverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnmpTrapReceiver(ctx context.Context, body CreateSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnmpTrapReceiverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVdsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVds(ctx context.Context, body CreateVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVdsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVdsWithAccessVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVdsWithAccessVlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVdsWithAccessVlan(ctx context.Context, body CreateVdsWithAccessVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVdsWithAccessVlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVdsWithMigrateVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVdsWithMigrateVlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVdsWithMigrateVlan(ctx context.Context, body CreateVdsWithMigrateVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVdsWithMigrateVlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateViewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateView(ctx context.Context, body CreateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateViewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVm(ctx context.Context, body CreateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmFolder(ctx context.Context, body CreateVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmFromTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmFromTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmFromTemplate(ctx context.Context, body CreateVmFromTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmFromTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmPlacementGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmPlacementGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmPlacementGroup(ctx context.Context, body CreateVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmPlacementGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmSnapshot(ctx context.Context, body CreateVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmVlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmVlan(ctx context.Context, body CreateVmVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmVlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmVolumeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmVolume(ctx context.Context, body CreateVmVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmVolumeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBrickTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBrickTopoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBrickTopo(ctx context.Context, body DeleteBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBrickTopoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, body DeleteClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClusterRecycleBinSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRecycleBinSettingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClusterRecycleBinSetting(ctx context.Context, body DeleteClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRecycleBinSettingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsistencyGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsistencyGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsistencyGroup(ctx context.Context, body DeleteConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsistencyGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsistencyGroupSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsistencyGroupSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsistencyGroupSnapshot(ctx context.Context, body DeleteConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsistencyGroupSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatacenterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatacenterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatacenter(ctx context.Context, body DeleteDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatacenterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteElfImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteElfImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteElfImage(ctx context.Context, body DeleteElfImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteElfImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEntityFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEntityFilterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEntityFilter(ctx context.Context, body DeleteEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEntityFilterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGraphRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGraph(ctx context.Context, body DeleteGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGraphRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiLunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiLunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiLun(ctx context.Context, body DeleteIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiLunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiLunSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiLunSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiLunSnapshot(ctx context.Context, body DeleteIscsiLunSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiLunSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTarget(ctx context.Context, body DeleteIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLabelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLabelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLabel(ctx context.Context, body DeleteLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLabelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNamespaceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNamespaceGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNamespaceGroup(ctx context.Context, body DeleteNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNamespaceGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNfsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNfsExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNfsExport(ctx context.Context, body DeleteNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNfsExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNvmfNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNvmfNamespaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNvmfNamespace(ctx context.Context, body DeleteNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNvmfNamespaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNvmfNamespaceSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNvmfNamespaceSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNvmfNamespaceSnapshot(ctx context.Context, body DeleteNvmfNamespaceSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNvmfNamespaceSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNvmfSubsystemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNvmfSubsystemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNvmfSubsystem(ctx context.Context, body DeleteNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNvmfSubsystemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganization(ctx context.Context, body DeleteOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRackTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRackTopoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRackTopo(ctx context.Context, body DeleteRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRackTopoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReportTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReportTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReportTemplate(ctx context.Context, body DeleteReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReportTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, body DeleteRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnapshotGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnapshotGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnapshotGroup(ctx context.Context, body DeleteSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnapshotGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnapshotPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnapshotPlan(ctx context.Context, body DeleteSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnapshotPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnmpTransportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnmpTransportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnmpTransport(ctx context.Context, body DeleteSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnmpTransportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnmpTrapReceiverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnmpTrapReceiverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnmpTrapReceiver(ctx context.Context, body DeleteSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnmpTrapReceiverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVdsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVds(ctx context.Context, body DeleteVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVdsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteViewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteView(ctx context.Context, body DeleteViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteViewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVm(ctx context.Context, body DeleteVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmFolder(ctx context.Context, body DeleteVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmPlacementGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmPlacementGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmPlacementGroup(ctx context.Context, body DeleteVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmPlacementGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmSnapshot(ctx context.Context, body DeleteVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmTemplateFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmTemplateFromVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmTemplateFromVm(ctx context.Context, body DeleteVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmTemplateFromVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVlan(ctx context.Context, body DeleteVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmVolumeFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmVolumeFromVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmVolumeFromVm(ctx context.Context, body DeleteVmVolumeFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmVolumeFromVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSnapshotPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSnapshotPlan(ctx context.Context, body ExecuteSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSnapshotPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForceRestartVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForceRestartVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForceRestartVm(ctx context.Context, body ForceRestartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForceRestartVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateFromReportTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateFromReportTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateFromReportTemplate(ctx context.Context, body GenerateFromReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateFromReportTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertNotifiersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertNotifiersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertNotifiers(ctx context.Context, body GetAlertNotifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertNotifiersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertNotifiersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertNotifiersConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertNotifiersConnection(ctx context.Context, body GetAlertNotifiersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertNotifiersConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertRulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRulesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertRules(ctx context.Context, body GetAlertRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRulesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertRulesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRulesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertRulesConnection(ctx context.Context, body GetAlertRulesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRulesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlerts(ctx context.Context, body GetAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertsConnection(ctx context.Context, body GetAlertsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplications(ctx context.Context, body GetApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationsConnection(ctx context.Context, body GetApplicationsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBrickTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBrickTopoesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBrickTopoes(ctx context.Context, body GetBrickTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBrickTopoesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBrickTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBrickTopoesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBrickTopoesConnection(ctx context.Context, body GetBrickTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBrickTopoesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterImagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterImages(ctx context.Context, body GetClusterImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterImagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterImagesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterImagesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterImagesConnection(ctx context.Context, body GetClusterImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterImagesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterSettingsesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterSettingsesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterSettingses(ctx context.Context, body GetClusterSettingsesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterSettingsesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterSettingsesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterSettingsesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterSettingsesConnection(ctx context.Context, body GetClusterSettingsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterSettingsesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterTopoesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterTopoes(ctx context.Context, body GetClusterTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterTopoesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterTopoesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterTopoesConnection(ctx context.Context, body GetClusterTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterTopoesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterUpgradeHistoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterUpgradeHistoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterUpgradeHistories(ctx context.Context, body GetClusterUpgradeHistoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterUpgradeHistoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterUpgradeHistoriesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterUpgradeHistoriesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterUpgradeHistoriesConnection(ctx context.Context, body GetClusterUpgradeHistoriesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterUpgradeHistoriesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusters(ctx context.Context, body GetClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClustersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClustersConnection(ctx context.Context, body GetClustersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsistencyGroupSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsistencyGroupSnapshotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsistencyGroupSnapshots(ctx context.Context, body GetConsistencyGroupSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsistencyGroupSnapshotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsistencyGroupSnapshotsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsistencyGroupSnapshotsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsistencyGroupSnapshotsConnection(ctx context.Context, body GetConsistencyGroupSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsistencyGroupSnapshotsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsistencyGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsistencyGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsistencyGroups(ctx context.Context, body GetConsistencyGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsistencyGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsistencyGroupsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsistencyGroupsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsistencyGroupsConnection(ctx context.Context, body GetConsistencyGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsistencyGroupsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatacentersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatacentersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatacenters(ctx context.Context, body GetDatacentersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatacentersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatacentersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatacentersConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatacentersConnection(ctx context.Context, body GetDatacentersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatacentersConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploys(ctx context.Context, body GetDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploysConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploysConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploysConnection(ctx context.Context, body GetDeploysConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploysConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiscoverHostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiscoverHostsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiscoverHosts(ctx context.Context, body GetDiscoverHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiscoverHostsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDisksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDisksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDisks(ctx context.Context, body GetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDisksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDisksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDisksConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDisksConnection(ctx context.Context, body GetDisksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDisksConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfDataStoresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfDataStoresRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfDataStores(ctx context.Context, body GetElfDataStoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfDataStoresRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfDataStoresConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfDataStoresConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfDataStoresConnection(ctx context.Context, body GetElfDataStoresConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfDataStoresConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfImagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfImages(ctx context.Context, body GetElfImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfImagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfImagesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfImagesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfImagesConnection(ctx context.Context, body GetElfImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfImagesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfStoragePoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfStoragePoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfStoragePolicies(ctx context.Context, body GetElfStoragePoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfStoragePoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfStoragePoliciesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfStoragePoliciesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElfStoragePoliciesConnection(ctx context.Context, body GetElfStoragePoliciesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElfStoragePoliciesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntityFiltersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntityFiltersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntityFilters(ctx context.Context, body GetEntityFiltersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntityFiltersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntityFiltersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntityFiltersConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntityFiltersConnection(ctx context.Context, body GetEntityFiltersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntityFiltersConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalAlertRulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalAlertRulesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalAlertRules(ctx context.Context, body GetGlobalAlertRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalAlertRulesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalAlertRulesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalAlertRulesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalAlertRulesConnection(ctx context.Context, body GetGlobalAlertRulesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalAlertRulesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalSettingsesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalSettingsesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalSettingses(ctx context.Context, body GetGlobalSettingsesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalSettingsesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalSettingsesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalSettingsesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalSettingsesConnection(ctx context.Context, body GetGlobalSettingsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalSettingsesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGraphsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGraphsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGraphs(ctx context.Context, body GetGraphsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGraphsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGraphsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGraphsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGraphsConnection(ctx context.Context, body GetGraphsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGraphsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHosts(ctx context.Context, body GetHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostsConnection(ctx context.Context, body GetHostsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImagesConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImagesConnectorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImagesConnector(ctx context.Context, body GetImagesConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImagesConnectorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmis(ctx context.Context, body GetIpmisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiConnectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiConnectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiConnections(ctx context.Context, body GetIscsiConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiConnectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiConnectionsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiConnectionsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiConnectionsConnection(ctx context.Context, body GetIscsiConnectionsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiConnectionsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiLunSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiLunSnapshotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiLunSnapshots(ctx context.Context, body GetIscsiLunSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiLunSnapshotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiLunSnapshotsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiLunSnapshotsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiLunSnapshotsConnection(ctx context.Context, body GetIscsiLunSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiLunSnapshotsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiLunsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiLunsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiLuns(ctx context.Context, body GetIscsiLunsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiLunsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiLunsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiLunsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiLunsConnection(ctx context.Context, body GetIscsiLunsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiLunsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargets(ctx context.Context, body GetIscsiTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetsConnection(ctx context.Context, body GetIscsiTargetsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabelsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLabelsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabels(ctx context.Context, body GetLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLabelsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabelsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLabelsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabelsConnection(ctx context.Context, body GetLabelsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLabelsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLicensesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLicensesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLicenses(ctx context.Context, body GetLicensesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLicensesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLicensesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLicensesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLicensesConnection(ctx context.Context, body GetLicensesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLicensesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogCollectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogCollectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogCollections(ctx context.Context, body GetLogCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogCollectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogCollectionsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogCollectionsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogCollectionsConnection(ctx context.Context, body GetLogCollectionsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogCollectionsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigrateTransmittersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrateTransmittersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigrateTransmitters(ctx context.Context, body GetMigrateTransmittersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrateTransmittersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigrateTransmittersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrateTransmittersConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigrateTransmittersConnection(ctx context.Context, body GetMigrateTransmittersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrateTransmittersConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNamespaceGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNamespaceGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNamespaceGroups(ctx context.Context, body GetNamespaceGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNamespaceGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNamespaceGroupsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNamespaceGroupsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNamespaceGroupsConnection(ctx context.Context, body GetNamespaceGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNamespaceGroupsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsExportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsExportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsExports(ctx context.Context, body GetNfsExportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsExportsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsExportsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsExportsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsExportsConnection(ctx context.Context, body GetNfsExportsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsExportsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsInodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsInodesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsInodes(ctx context.Context, body GetNfsInodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsInodesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsInodesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsInodesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsInodesConnection(ctx context.Context, body GetNfsInodesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsInodesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNicsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNicsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNics(ctx context.Context, body GetNicsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNicsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNicsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNicsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNicsConnection(ctx context.Context, body GetNicsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNicsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeTopoesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeTopoes(ctx context.Context, body GetNodeTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeTopoesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeTopoesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeTopoesConnection(ctx context.Context, body GetNodeTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeTopoesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfNamespaceSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfNamespaceSnapshotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfNamespaceSnapshots(ctx context.Context, body GetNvmfNamespaceSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfNamespaceSnapshotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfNamespaceSnapshotsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfNamespaceSnapshotsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfNamespaceSnapshotsConnection(ctx context.Context, body GetNvmfNamespaceSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfNamespaceSnapshotsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfNamespacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfNamespacesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfNamespaces(ctx context.Context, body GetNvmfNamespacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfNamespacesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfNamespacesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfNamespacesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfNamespacesConnection(ctx context.Context, body GetNvmfNamespacesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfNamespacesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfSubsystemsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfSubsystemsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfSubsystems(ctx context.Context, body GetNvmfSubsystemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfSubsystemsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfSubsystemsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfSubsystemsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNvmfSubsystemsConnection(ctx context.Context, body GetNvmfSubsystemsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNvmfSubsystemsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, body GetOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsConnection(ctx context.Context, body GetOrganizationsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPmemDimmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPmemDimmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPmemDimms(ctx context.Context, body GetPmemDimmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPmemDimmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPmemDimmsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPmemDimmsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPmemDimmsConnection(ctx context.Context, body GetPmemDimmsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPmemDimmsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRackTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRackTopoesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRackTopoes(ctx context.Context, body GetRackTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRackTopoesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRackTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRackTopoesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRackTopoesConnection(ctx context.Context, body GetRackTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRackTopoesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportTasksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportTasks(ctx context.Context, body GetReportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportTasksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportTasksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportTasksConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportTasksConnection(ctx context.Context, body GetReportTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportTasksConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportTemplatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportTemplatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportTemplates(ctx context.Context, body GetReportTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportTemplatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportTemplatesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportTemplatesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportTemplatesConnection(ctx context.Context, body GetReportTemplatesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportTemplatesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotGroups(ctx context.Context, body GetSnapshotGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotGroupsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotGroupsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotGroupsConnection(ctx context.Context, body GetSnapshotGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotGroupsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotPlanTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotPlanTasksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotPlanTasks(ctx context.Context, body GetSnapshotPlanTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotPlanTasksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotPlanTasksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotPlanTasksConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotPlanTasksConnection(ctx context.Context, body GetSnapshotPlanTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotPlanTasksConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotPlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotPlansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotPlans(ctx context.Context, body GetSnapshotPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotPlansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotPlansConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotPlansConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotPlansConnection(ctx context.Context, body GetSnapshotPlansConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotPlansConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmpTransportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpTransportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmpTransports(ctx context.Context, body GetSnmpTransportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpTransportsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmpTransportsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpTransportsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmpTransportsConnection(ctx context.Context, body GetSnmpTransportsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpTransportsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmpTrapReceiversWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpTrapReceiversRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmpTrapReceivers(ctx context.Context, body GetSnmpTrapReceiversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpTrapReceiversRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmpTrapReceiversConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpTrapReceiversConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmpTrapReceiversConnection(ctx context.Context, body GetSnmpTrapReceiversConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpTrapReceiversConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoragePoliciesConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoragePoliciesConnectorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoragePoliciesConnector(ctx context.Context, body GetStoragePoliciesConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoragePoliciesConnectorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSvtImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSvtImagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSvtImages(ctx context.Context, body GetSvtImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSvtImagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSvtImagesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSvtImagesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSvtImagesConnection(ctx context.Context, body GetSvtImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSvtImagesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAuditLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAuditLogsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAuditLogs(ctx context.Context, body GetSystemAuditLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAuditLogsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAuditLogsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAuditLogsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAuditLogsConnection(ctx context.Context, body GetSystemAuditLogsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAuditLogsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasks(ctx context.Context, body GetTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksConnection(ctx context.Context, body GetTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploadTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadTasksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploadTasks(ctx context.Context, body GetUploadTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadTasksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploadTasksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadTasksConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploadTasksConnection(ctx context.Context, body GetUploadTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadTasksConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsbDevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsbDevicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsbDevices(ctx context.Context, body GetUsbDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsbDevicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsbDevicesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsbDevicesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsbDevicesConnection(ctx context.Context, body GetUsbDevicesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsbDevicesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAuditLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAuditLogsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAuditLogs(ctx context.Context, body GetUserAuditLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAuditLogsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAuditLogsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAuditLogsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAuditLogsConnection(ctx context.Context, body GetUserAuditLogsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAuditLogsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleNextsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleNextsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleNexts(ctx context.Context, body GetUserRoleNextsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleNextsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleNextsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleNextsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleNextsConnection(ctx context.Context, body GetUserRoleNextsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleNextsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, body GetUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersConnection(ctx context.Context, body GetUsersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVcenterAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVcenterAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVcenterAccounts(ctx context.Context, body GetVcenterAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVcenterAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVcenterAccountsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVcenterAccountsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVcenterAccountsConnection(ctx context.Context, body GetVcenterAccountsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVcenterAccountsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVdsesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVdsesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVdses(ctx context.Context, body GetVdsesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVdsesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVdsesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVdsesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVdsesConnection(ctx context.Context, body GetVdsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVdsesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetViewsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetViews(ctx context.Context, body GetViewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetViewsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetViewsConnection(ctx context.Context, body GetViewsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVlansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVlans(ctx context.Context, body GetVlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVlansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVlansConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVlansConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVlansConnection(ctx context.Context, body GetVlansConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVlansConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDisksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDisksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDisks(ctx context.Context, body GetVmDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDisksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDisksConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDisksConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDisksConnection(ctx context.Context, body GetVmDisksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDisksConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmEntityFilterResultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmEntityFilterResultsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmEntityFilterResults(ctx context.Context, body GetVmEntityFilterResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmEntityFilterResultsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmEntityFilterResultsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmEntityFilterResultsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmEntityFilterResultsConnection(ctx context.Context, body GetVmEntityFilterResultsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmEntityFilterResultsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmFoldersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmFoldersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmFolders(ctx context.Context, body GetVmFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmFoldersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmFoldersConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmFoldersConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmFoldersConnection(ctx context.Context, body GetVmFoldersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmFoldersConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmNicsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmNicsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmNics(ctx context.Context, body GetVmNicsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmNicsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmNicsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmNicsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmNicsConnection(ctx context.Context, body GetVmNicsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmNicsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmPlacementGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmPlacementGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmPlacementGroups(ctx context.Context, body GetVmPlacementGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmPlacementGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmPlacementGroupsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmPlacementGroupsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmPlacementGroupsConnection(ctx context.Context, body GetVmPlacementGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmPlacementGroupsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmSnapshotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmSnapshots(ctx context.Context, body GetVmSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmSnapshotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmSnapshotsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmSnapshotsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmSnapshotsConnection(ctx context.Context, body GetVmSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmSnapshotsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmTemplatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmTemplatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmTemplates(ctx context.Context, body GetVmTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmTemplatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmTemplatesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmTemplatesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmTemplatesConnection(ctx context.Context, body GetVmTemplatesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmTemplatesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmVolumesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmVolumesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmVolumes(ctx context.Context, body GetVmVolumesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmVolumesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmVolumesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmVolumesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmVolumesConnection(ctx context.Context, body GetVmVolumesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmVolumesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVms(ctx context.Context, body GetVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmsConnection(ctx context.Context, body GetVmsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVsphereEsxiAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVsphereEsxiAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVsphereEsxiAccounts(ctx context.Context, body GetVsphereEsxiAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVsphereEsxiAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVsphereEsxiAccountsConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVsphereEsxiAccountsConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVsphereEsxiAccountsConnection(ctx context.Context, body GetVsphereEsxiAccountsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVsphereEsxiAccountsConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWitnessesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWitnessesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWitnesses(ctx context.Context, body GetWitnessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWitnessesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWitnessesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWitnessesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWitnessesConnection(ctx context.Context, body GetWitnessesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWitnessesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneTopoesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneTopoesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneTopoes(ctx context.Context, body GetZoneTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneTopoesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneTopoesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneTopoesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneTopoesConnection(ctx context.Context, body GetZoneTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneTopoesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZonesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZonesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZones(ctx context.Context, body GetZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZonesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZonesConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZonesConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZonesConnection(ctx context.Context, body GetZonesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZonesConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallVmtoolsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallVmtoolsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallVmtools(ctx context.Context, body InstallVmtoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallVmtoolsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeepSnapshotGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeepSnapshotGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeepSnapshotGroup(ctx context.Context, body KeepSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeepSnapshotGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigRateVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigRateVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigRateVm(ctx context.Context, body MigRateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigRateVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MountDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMountDiskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MountDisk(ctx context.Context, body MountDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMountDiskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MountUsbDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMountUsbDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MountUsbDevice(ctx context.Context, body MountUsbDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMountUsbDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveBrickTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveBrickTopoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveBrickTopo(ctx context.Context, body MoveBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveBrickTopoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeTopoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeTopo(ctx context.Context, body UpdateNodeTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeTopoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveVmToRecycleBinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveVmToRecycleBinRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveVmToRecycleBin(ctx context.Context, body MoveVmToRecycleBinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveVmToRecycleBinRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForceShutDownVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForceShutDownVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForceShutDownVm(ctx context.Context, body ForceShutDownVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForceShutDownVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebuildVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebuildVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebuildVm(ctx context.Context, body RebuildVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebuildVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecoverVmFromRecycleBinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecoverVmFromRecycleBinRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecoverVmFromRecycleBin(ctx context.Context, body RecoverVmFromRecycleBinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecoverVmFromRecycleBinRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveLabelsFromResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveLabelsFromResourcesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveLabelsFromResources(ctx context.Context, body RemoveLabelsFromResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveLabelsFromResourcesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVmCdRomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVmCdRomRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVmCdRom(ctx context.Context, body RemoveVmCdRomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVmCdRomRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVmDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVmDiskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVmDisk(ctx context.Context, body RemoveVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVmDiskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVmToFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVmToFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVmToFolder(ctx context.Context, body RemoveVmToFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVmToFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVmNicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVmNicRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVmNic(ctx context.Context, body RemoveVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVmNicRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveAlert(ctx context.Context, body ResolveAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveAlertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartVm(ctx context.Context, body RestartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeSnapshotPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeSnapshotPlan(ctx context.Context, body ResumeSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeSnapshotPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeVm(ctx context.Context, body ResumeVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConsistencyGroupSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConsistencyGroupSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConsistencyGroupSnapshot(ctx context.Context, body UpdateConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConsistencyGroupSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackIscsiLunFromSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackIscsiLunFromSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackIscsiLunFromSnapshot(ctx context.Context, body RollbackIscsiLunFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackIscsiLunFromSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackNvmfNamespaceFromSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackNvmfNamespaceFromSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackNvmfNamespaceFromSnapshot(ctx context.Context, body RollbackNvmfNamespaceFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackNvmfNamespaceFromSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackSnapshotGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackSnapshotGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackSnapshotGroup(ctx context.Context, body RollbackSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackSnapshotGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackVm(ctx context.Context, body RollbackVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShutDownVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShutDownVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShutDownVm(ctx context.Context, body ShutDownVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShutDownVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartVm(ctx context.Context, body StartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendSnapshotPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendSnapshotPlan(ctx context.Context, body SuspendSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendSnapshotPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendVm(ctx context.Context, body SuspendVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerDiskBlinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerDiskBlinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerDiskBlink(ctx context.Context, body TriggerDiskBlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerDiskBlinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnmountDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnmountDiskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnmountDisk(ctx context.Context, body UnmountDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnmountDiskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnmountUsbDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnmountUsbDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnmountUsbDevice(ctx context.Context, body UnmountUsbDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnmountUsbDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBrickTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBrickTopoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBrickTopo(ctx context.Context, body UpdateBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBrickTopoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCluster(ctx context.Context, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterLicenseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterLicense(ctx context.Context, body UpdateClusterLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterLicenseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterRecycleBinSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterRecycleBinSettingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterRecycleBinSetting(ctx context.Context, body UpdateClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterRecycleBinSettingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConsistencyGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConsistencyGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConsistencyGroup(ctx context.Context, body UpdateConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConsistencyGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomizeAlertRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomizeAlertRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomizeAlertRule(ctx context.Context, body UpdateCustomizeAlertRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomizeAlertRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatacenterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatacenterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatacenter(ctx context.Context, body UpdateDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatacenterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElfImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateElfImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElfImage(ctx context.Context, body UpdateElfImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateElfImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEntityFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEntityFilterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEntityFilter(ctx context.Context, body UpdateEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEntityFilterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGlobalAlertRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGlobalAlertRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGlobalAlertRule(ctx context.Context, body UpdateGlobalAlertRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGlobalAlertRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGlobalRecycleBinSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGlobalRecycleBinSettingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGlobalRecycleBinSetting(ctx context.Context, body UpdateGlobalRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGlobalRecycleBinSettingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGraphRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGraph(ctx context.Context, body UpdateGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGraphRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHost(ctx context.Context, body UpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIscsiLunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIscsiLunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIscsiLun(ctx context.Context, body UpdateIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIscsiLunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIscsiTargetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIscsiTarget(ctx context.Context, body UpdateIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIscsiTargetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLabelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLabelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLabel(ctx context.Context, body UpdateLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLabelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeployWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeployRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeploy(ctx context.Context, body UpdateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeployRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateManagementVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateManagementVlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateManagementVlan(ctx context.Context, body UpdateManagementVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateManagementVlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMigrationVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMigrationVlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMigrationVlan(ctx context.Context, body UpdateMigrationVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMigrationVlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNamespaceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNamespaceGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNamespaceGroup(ctx context.Context, body UpdateNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNamespaceGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNfsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNfsExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNfsExport(ctx context.Context, body UpdateNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNfsExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNicRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNic(ctx context.Context, body UpdateNicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNicRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNvmfNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNvmfNamespaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNvmfNamespace(ctx context.Context, body UpdateNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNvmfNamespaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNvmfSubsystemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNvmfSubsystemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNvmfSubsystem(ctx context.Context, body UpdateNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNvmfSubsystemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRackTopoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRackTopoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRackTopo(ctx context.Context, body UpdateRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRackTopoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateReportTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateReportTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateReportTemplate(ctx context.Context, body UpdateReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateReportTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRole(ctx context.Context, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSnapshotPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSnapshotPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSnapshotPlan(ctx context.Context, body UpdateSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSnapshotPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSnmpTransportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSnmpTransportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSnmpTransport(ctx context.Context, body UpdateSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSnmpTransportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSnmpTrapReceiverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSnmpTrapReceiverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSnmpTrapReceiver(ctx context.Context, body UpdateSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSnmpTrapReceiverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVdsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVds(ctx context.Context, body UpdateVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVdsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateViewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateView(ctx context.Context, body UpdateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateViewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVm(ctx context.Context, body UpdateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmDiskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmDisk(ctx context.Context, body UpdateVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmDiskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmFolder(ctx context.Context, body UpdateVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmNicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmNicRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmNic(ctx context.Context, body UpdateVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmNicRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmPlacementGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmPlacementGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmPlacementGroup(ctx context.Context, body UpdateVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmPlacementGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmTemplateFromVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmTemplateFromVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmTemplateFromVm(ctx context.Context, body UpdateVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmTemplateFromVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVlan(ctx context.Context, body UpdateVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateElfImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateElfImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddLabelsToResourcesRequest calls the generic AddLabelsToResources builder with application/json body
func NewAddLabelsToResourcesRequest(server string, body AddLabelsToResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddLabelsToResourcesRequestWithBody(server, "application/json", bodyReader)
}

// NewAddLabelsToResourcesRequestWithBody generates requests for AddLabelsToResources with any type of body
func NewAddLabelsToResourcesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/add-labels-to-resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddVmCdRomRequest calls the generic AddVmCdRom builder with application/json body
func NewAddVmCdRomRequest(server string, body AddVmCdRomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddVmCdRomRequestWithBody(server, "application/json", bodyReader)
}

// NewAddVmCdRomRequestWithBody generates requests for AddVmCdRom with any type of body
func NewAddVmCdRomRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/add-vm-cd-rom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddVmDiskRequest calls the generic AddVmDisk builder with application/json body
func NewAddVmDiskRequest(server string, body AddVmDiskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddVmDiskRequestWithBody(server, "application/json", bodyReader)
}

// NewAddVmDiskRequestWithBody generates requests for AddVmDisk with any type of body
func NewAddVmDiskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/add-vm-disk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddVmNicRequest calls the generic AddVmNic builder with application/json body
func NewAddVmNicRequest(server string, body AddVmNicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddVmNicRequestWithBody(server, "application/json", bodyReader)
}

// NewAddVmNicRequestWithBody generates requests for AddVmNic with any type of body
func NewAddVmNicRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/add-vm-nic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddVmToFolderRequest calls the generic AddVmToFolder builder with application/json body
func NewAddVmToFolderRequest(server string, body AddVmToFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddVmToFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewAddVmToFolderRequestWithBody generates requests for AddVmToFolder with any type of body
func NewAddVmToFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/add-vm-to-folder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloneIscsiLunFromSnapshotRequest calls the generic CloneIscsiLunFromSnapshot builder with application/json body
func NewCloneIscsiLunFromSnapshotRequest(server string, body CloneIscsiLunFromSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloneIscsiLunFromSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewCloneIscsiLunFromSnapshotRequestWithBody generates requests for CloneIscsiLunFromSnapshot with any type of body
func NewCloneIscsiLunFromSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clone-iscsi-lun-from-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloneNvmfNamespaceFromSnapshotRequest calls the generic CloneNvmfNamespaceFromSnapshot builder with application/json body
func NewCloneNvmfNamespaceFromSnapshotRequest(server string, body CloneNvmfNamespaceFromSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloneNvmfNamespaceFromSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewCloneNvmfNamespaceFromSnapshotRequestWithBody generates requests for CloneNvmfNamespaceFromSnapshot with any type of body
func NewCloneNvmfNamespaceFromSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clone-nvmf-namespace-from-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloneSnapshotGroupRequest calls the generic CloneSnapshotGroup builder with application/json body
func NewCloneSnapshotGroupRequest(server string, body CloneSnapshotGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloneSnapshotGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCloneSnapshotGroupRequestWithBody generates requests for CloneSnapshotGroup with any type of body
func NewCloneSnapshotGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clone-snapshot-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloneVmRequest calls the generic CloneVm builder with application/json body
func NewCloneVmRequest(server string, body CloneVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloneVmRequestWithBody(server, "application/json", bodyReader)
}

// NewCloneVmRequestWithBody generates requests for CloneVm with any type of body
func NewCloneVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clone-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloneVmTemplateFromVmRequest calls the generic CloneVmTemplateFromVm builder with application/json body
func NewCloneVmTemplateFromVmRequest(server string, body CloneVmTemplateFromVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloneVmTemplateFromVmRequestWithBody(server, "application/json", bodyReader)
}

// NewCloneVmTemplateFromVmRequestWithBody generates requests for CloneVmTemplateFromVm with any type of body
func NewCloneVmTemplateFromVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clone-vm-template-from-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConnectClusterRequest calls the generic ConnectCluster builder with application/json body
func NewConnectClusterRequest(server string, body ConnectClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConnectClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewConnectClusterRequestWithBody generates requests for ConnectCluster with any type of body
func NewConnectClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connect-cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConvertVmTemplateFromVmRequest calls the generic ConvertVmTemplateFromVm builder with application/json body
func NewConvertVmTemplateFromVmRequest(server string, body ConvertVmTemplateFromVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConvertVmTemplateFromVmRequestWithBody(server, "application/json", bodyReader)
}

// NewConvertVmTemplateFromVmRequestWithBody generates requests for ConvertVmTemplateFromVm with any type of body
func NewConvertVmTemplateFromVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/convert-vm-template-from-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConvertVmTemplateToVmRequest calls the generic ConvertVmTemplateToVm builder with application/json body
func NewConvertVmTemplateToVmRequest(server string, body ConvertVmTemplateToVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConvertVmTemplateToVmRequestWithBody(server, "application/json", bodyReader)
}

// NewConvertVmTemplateToVmRequestWithBody generates requests for ConvertVmTemplateToVm with any type of body
func NewConvertVmTemplateToVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/convert-vm-template-to-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateBrickTopoRequest calls the generic CreateBrickTopo builder with application/json body
func NewCreateBrickTopoRequest(server string, body CreateBrickTopoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBrickTopoRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBrickTopoRequestWithBody generates requests for CreateBrickTopo with any type of body
func NewCreateBrickTopoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-brick-topo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateClusterRecycleBinSettingRequest calls the generic CreateClusterRecycleBinSetting builder with application/json body
func NewCreateClusterRecycleBinSettingRequest(server string, body CreateClusterRecycleBinSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClusterRecycleBinSettingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateClusterRecycleBinSettingRequestWithBody generates requests for CreateClusterRecycleBinSetting with any type of body
func NewCreateClusterRecycleBinSettingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-cluster-recycle-bin-setting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateConsistencyGroupRequest calls the generic CreateConsistencyGroup builder with application/json body
func NewCreateConsistencyGroupRequest(server string, body CreateConsistencyGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConsistencyGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateConsistencyGroupRequestWithBody generates requests for CreateConsistencyGroup with any type of body
func NewCreateConsistencyGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-consistency-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateConsistencyGroupSnapshotRequest calls the generic CreateConsistencyGroupSnapshot builder with application/json body
func NewCreateConsistencyGroupSnapshotRequest(server string, body CreateConsistencyGroupSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConsistencyGroupSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateConsistencyGroupSnapshotRequestWithBody generates requests for CreateConsistencyGroupSnapshot with any type of body
func NewCreateConsistencyGroupSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-consistency-snapshot-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDatacenterRequest calls the generic CreateDatacenter builder with application/json body
func NewCreateDatacenterRequest(server string, body CreateDatacenterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatacenterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDatacenterRequestWithBody generates requests for CreateDatacenter with any type of body
func NewCreateDatacenterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-datacenter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateEntityFilterRequest calls the generic CreateEntityFilter builder with application/json body
func NewCreateEntityFilterRequest(server string, body CreateEntityFilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEntityFilterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEntityFilterRequestWithBody generates requests for CreateEntityFilter with any type of body
func NewCreateEntityFilterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-entity-filter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGraphRequest calls the generic CreateGraph builder with application/json body
func NewCreateGraphRequest(server string, body CreateGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGraphRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGraphRequestWithBody generates requests for CreateGraph with any type of body
func NewCreateGraphRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateHostRequest calls the generic CreateHost builder with application/json body
func NewCreateHostRequest(server string, body CreateHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHostRequestWithBody generates requests for CreateHost with any type of body
func NewCreateHostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-host")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIscsiLunRequest calls the generic CreateIscsiLun builder with application/json body
func NewCreateIscsiLunRequest(server string, body CreateIscsiLunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIscsiLunRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIscsiLunRequestWithBody generates requests for CreateIscsiLun with any type of body
func NewCreateIscsiLunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-iscsi-lun")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIscsiLunSnapshotRequest calls the generic CreateIscsiLunSnapshot builder with application/json body
func NewCreateIscsiLunSnapshotRequest(server string, body CreateIscsiLunSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIscsiLunSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIscsiLunSnapshotRequestWithBody generates requests for CreateIscsiLunSnapshot with any type of body
func NewCreateIscsiLunSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-iscsi-lun-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIscsiTargetRequest calls the generic CreateIscsiTarget builder with application/json body
func NewCreateIscsiTargetRequest(server string, body CreateIscsiTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIscsiTargetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIscsiTargetRequestWithBody generates requests for CreateIscsiTarget with any type of body
func NewCreateIscsiTargetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-iscsi-target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateLabelRequest calls the generic CreateLabel builder with application/json body
func NewCreateLabelRequest(server string, body CreateLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLabelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLabelRequestWithBody generates requests for CreateLabel with any type of body
func NewCreateLabelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-label")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateNamespaceGroupRequest calls the generic CreateNamespaceGroup builder with application/json body
func NewCreateNamespaceGroupRequest(server string, body CreateNamespaceGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNamespaceGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNamespaceGroupRequestWithBody generates requests for CreateNamespaceGroup with any type of body
func NewCreateNamespaceGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-namespace-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateNfsExportRequest calls the generic CreateNfsExport builder with application/json body
func NewCreateNfsExportRequest(server string, body CreateNfsExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNfsExportRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNfsExportRequestWithBody generates requests for CreateNfsExport with any type of body
func NewCreateNfsExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-nfs-export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateNvmfNamespaceRequest calls the generic CreateNvmfNamespace builder with application/json body
func NewCreateNvmfNamespaceRequest(server string, body CreateNvmfNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNvmfNamespaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNvmfNamespaceRequestWithBody generates requests for CreateNvmfNamespace with any type of body
func NewCreateNvmfNamespaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-nvmf-namespace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateNvmfNamespaceSnapshotRequest calls the generic CreateNvmfNamespaceSnapshot builder with application/json body
func NewCreateNvmfNamespaceSnapshotRequest(server string, body CreateNvmfNamespaceSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNvmfNamespaceSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNvmfNamespaceSnapshotRequestWithBody generates requests for CreateNvmfNamespaceSnapshot with any type of body
func NewCreateNvmfNamespaceSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-nvmf-namespace-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateNvmfSubsystemRequest calls the generic CreateNvmfSubsystem builder with application/json body
func NewCreateNvmfSubsystemRequest(server string, body CreateNvmfSubsystemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNvmfSubsystemRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNvmfSubsystemRequestWithBody generates requests for CreateNvmfSubsystem with any type of body
func NewCreateNvmfSubsystemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-nvmf-subsystem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-organization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateRackTopoRequest calls the generic CreateRackTopo builder with application/json body
func NewCreateRackTopoRequest(server string, body CreateRackTopoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRackTopoRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRackTopoRequestWithBody generates requests for CreateRackTopo with any type of body
func NewCreateRackTopoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-rack-topo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateReportTemplateRequest calls the generic CreateReportTemplate builder with application/json body
func NewCreateReportTemplateRequest(server string, body CreateReportTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateReportTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateReportTemplateRequestWithBody generates requests for CreateReportTemplate with any type of body
func NewCreateReportTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-report-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSnapshotPlanRequest calls the generic CreateSnapshotPlan builder with application/json body
func NewCreateSnapshotPlanRequest(server string, body CreateSnapshotPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSnapshotPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSnapshotPlanRequestWithBody generates requests for CreateSnapshotPlan with any type of body
func NewCreateSnapshotPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-snapshot-plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSnmpTransportRequest calls the generic CreateSnmpTransport builder with application/json body
func NewCreateSnmpTransportRequest(server string, body CreateSnmpTransportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSnmpTransportRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSnmpTransportRequestWithBody generates requests for CreateSnmpTransport with any type of body
func NewCreateSnmpTransportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-snmp-transport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSnmpTrapReceiverRequest calls the generic CreateSnmpTrapReceiver builder with application/json body
func NewCreateSnmpTrapReceiverRequest(server string, body CreateSnmpTrapReceiverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSnmpTrapReceiverRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSnmpTrapReceiverRequestWithBody generates requests for CreateSnmpTrapReceiver with any type of body
func NewCreateSnmpTrapReceiverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-snmp-trap-receiver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVdsRequest calls the generic CreateVds builder with application/json body
func NewCreateVdsRequest(server string, body CreateVdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVdsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVdsRequestWithBody generates requests for CreateVds with any type of body
func NewCreateVdsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVdsWithAccessVlanRequest calls the generic CreateVdsWithAccessVlan builder with application/json body
func NewCreateVdsWithAccessVlanRequest(server string, body CreateVdsWithAccessVlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVdsWithAccessVlanRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVdsWithAccessVlanRequestWithBody generates requests for CreateVdsWithAccessVlan with any type of body
func NewCreateVdsWithAccessVlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vds-with-access-vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVdsWithMigrateVlanRequest calls the generic CreateVdsWithMigrateVlan builder with application/json body
func NewCreateVdsWithMigrateVlanRequest(server string, body CreateVdsWithMigrateVlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVdsWithMigrateVlanRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVdsWithMigrateVlanRequestWithBody generates requests for CreateVdsWithMigrateVlan with any type of body
func NewCreateVdsWithMigrateVlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vds-with-migrate-vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateViewRequest calls the generic CreateView builder with application/json body
func NewCreateViewRequest(server string, body CreateViewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateViewRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateViewRequestWithBody generates requests for CreateView with any type of body
func NewCreateViewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-view")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVmRequest calls the generic CreateVm builder with application/json body
func NewCreateVmRequest(server string, body CreateVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVmRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVmRequestWithBody generates requests for CreateVm with any type of body
func NewCreateVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVmFolderRequest calls the generic CreateVmFolder builder with application/json body
func NewCreateVmFolderRequest(server string, body CreateVmFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVmFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVmFolderRequestWithBody generates requests for CreateVmFolder with any type of body
func NewCreateVmFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vm-folder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVmFromTemplateRequest calls the generic CreateVmFromTemplate builder with application/json body
func NewCreateVmFromTemplateRequest(server string, body CreateVmFromTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVmFromTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVmFromTemplateRequestWithBody generates requests for CreateVmFromTemplate with any type of body
func NewCreateVmFromTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vm-from-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVmPlacementGroupRequest calls the generic CreateVmPlacementGroup builder with application/json body
func NewCreateVmPlacementGroupRequest(server string, body CreateVmPlacementGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVmPlacementGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVmPlacementGroupRequestWithBody generates requests for CreateVmPlacementGroup with any type of body
func NewCreateVmPlacementGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vm-placement-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVmSnapshotRequest calls the generic CreateVmSnapshot builder with application/json body
func NewCreateVmSnapshotRequest(server string, body CreateVmSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVmSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVmSnapshotRequestWithBody generates requests for CreateVmSnapshot with any type of body
func NewCreateVmSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vm-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVmVlanRequest calls the generic CreateVmVlan builder with application/json body
func NewCreateVmVlanRequest(server string, body CreateVmVlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVmVlanRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVmVlanRequestWithBody generates requests for CreateVmVlan with any type of body
func NewCreateVmVlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vm-vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVmVolumeRequest calls the generic CreateVmVolume builder with application/json body
func NewCreateVmVolumeRequest(server string, body CreateVmVolumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVmVolumeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVmVolumeRequestWithBody generates requests for CreateVmVolume with any type of body
func NewCreateVmVolumeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-vm-volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBrickTopoRequest calls the generic DeleteBrickTopo builder with application/json body
func NewDeleteBrickTopoRequest(server string, body DeleteBrickTopoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteBrickTopoRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteBrickTopoRequestWithBody generates requests for DeleteBrickTopo with any type of body
func NewDeleteBrickTopoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-brick-topo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterRequest calls the generic DeleteCluster builder with application/json body
func NewDeleteClusterRequest(server string, body DeleteClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteClusterRequestWithBody generates requests for DeleteCluster with any type of body
func NewDeleteClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterRecycleBinSettingRequest calls the generic DeleteClusterRecycleBinSetting builder with application/json body
func NewDeleteClusterRecycleBinSettingRequest(server string, body DeleteClusterRecycleBinSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClusterRecycleBinSettingRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteClusterRecycleBinSettingRequestWithBody generates requests for DeleteClusterRecycleBinSetting with any type of body
func NewDeleteClusterRecycleBinSettingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-cluster-recycle-bin-setting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConsistencyGroupRequest calls the generic DeleteConsistencyGroup builder with application/json body
func NewDeleteConsistencyGroupRequest(server string, body DeleteConsistencyGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteConsistencyGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteConsistencyGroupRequestWithBody generates requests for DeleteConsistencyGroup with any type of body
func NewDeleteConsistencyGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-consistency-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConsistencyGroupSnapshotRequest calls the generic DeleteConsistencyGroupSnapshot builder with application/json body
func NewDeleteConsistencyGroupSnapshotRequest(server string, body DeleteConsistencyGroupSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteConsistencyGroupSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteConsistencyGroupSnapshotRequestWithBody generates requests for DeleteConsistencyGroupSnapshot with any type of body
func NewDeleteConsistencyGroupSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-consistency-snapshot-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatacenterRequest calls the generic DeleteDatacenter builder with application/json body
func NewDeleteDatacenterRequest(server string, body DeleteDatacenterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteDatacenterRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteDatacenterRequestWithBody generates requests for DeleteDatacenter with any type of body
func NewDeleteDatacenterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-datacenter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteElfImageRequest calls the generic DeleteElfImage builder with application/json body
func NewDeleteElfImageRequest(server string, body DeleteElfImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteElfImageRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteElfImageRequestWithBody generates requests for DeleteElfImage with any type of body
func NewDeleteElfImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-elf-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEntityFilterRequest calls the generic DeleteEntityFilter builder with application/json body
func NewDeleteEntityFilterRequest(server string, body DeleteEntityFilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteEntityFilterRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteEntityFilterRequestWithBody generates requests for DeleteEntityFilter with any type of body
func NewDeleteEntityFilterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-entity-filter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGraphRequest calls the generic DeleteGraph builder with application/json body
func NewDeleteGraphRequest(server string, body DeleteGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGraphRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteGraphRequestWithBody generates requests for DeleteGraph with any type of body
func NewDeleteGraphRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiLunRequest calls the generic DeleteIscsiLun builder with application/json body
func NewDeleteIscsiLunRequest(server string, body DeleteIscsiLunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiLunRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteIscsiLunRequestWithBody generates requests for DeleteIscsiLun with any type of body
func NewDeleteIscsiLunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-iscsi-lun")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiLunSnapshotRequest calls the generic DeleteIscsiLunSnapshot builder with application/json body
func NewDeleteIscsiLunSnapshotRequest(server string, body DeleteIscsiLunSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiLunSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteIscsiLunSnapshotRequestWithBody generates requests for DeleteIscsiLunSnapshot with any type of body
func NewDeleteIscsiLunSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-iscsi-lun-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiTargetRequest calls the generic DeleteIscsiTarget builder with application/json body
func NewDeleteIscsiTargetRequest(server string, body DeleteIscsiTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiTargetRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteIscsiTargetRequestWithBody generates requests for DeleteIscsiTarget with any type of body
func NewDeleteIscsiTargetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-iscsi-target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLabelRequest calls the generic DeleteLabel builder with application/json body
func NewDeleteLabelRequest(server string, body DeleteLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteLabelRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteLabelRequestWithBody generates requests for DeleteLabel with any type of body
func NewDeleteLabelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-label")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNamespaceGroupRequest calls the generic DeleteNamespaceGroup builder with application/json body
func NewDeleteNamespaceGroupRequest(server string, body DeleteNamespaceGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteNamespaceGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteNamespaceGroupRequestWithBody generates requests for DeleteNamespaceGroup with any type of body
func NewDeleteNamespaceGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-namespace-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNfsExportRequest calls the generic DeleteNfsExport builder with application/json body
func NewDeleteNfsExportRequest(server string, body DeleteNfsExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteNfsExportRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteNfsExportRequestWithBody generates requests for DeleteNfsExport with any type of body
func NewDeleteNfsExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-nfs-export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNvmfNamespaceRequest calls the generic DeleteNvmfNamespace builder with application/json body
func NewDeleteNvmfNamespaceRequest(server string, body DeleteNvmfNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteNvmfNamespaceRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteNvmfNamespaceRequestWithBody generates requests for DeleteNvmfNamespace with any type of body
func NewDeleteNvmfNamespaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-nvmf-namespace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNvmfNamespaceSnapshotRequest calls the generic DeleteNvmfNamespaceSnapshot builder with application/json body
func NewDeleteNvmfNamespaceSnapshotRequest(server string, body DeleteNvmfNamespaceSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteNvmfNamespaceSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteNvmfNamespaceSnapshotRequestWithBody generates requests for DeleteNvmfNamespaceSnapshot with any type of body
func NewDeleteNvmfNamespaceSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-nvmf-namespace-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNvmfSubsystemRequest calls the generic DeleteNvmfSubsystem builder with application/json body
func NewDeleteNvmfSubsystemRequest(server string, body DeleteNvmfSubsystemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteNvmfSubsystemRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteNvmfSubsystemRequestWithBody generates requests for DeleteNvmfSubsystem with any type of body
func NewDeleteNvmfSubsystemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-nvmf-subsystem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRequest calls the generic DeleteOrganization builder with application/json body
func NewDeleteOrganizationRequest(server string, body DeleteOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteOrganizationRequestWithBody generates requests for DeleteOrganization with any type of body
func NewDeleteOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-organization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRackTopoRequest calls the generic DeleteRackTopo builder with application/json body
func NewDeleteRackTopoRequest(server string, body DeleteRackTopoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRackTopoRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRackTopoRequestWithBody generates requests for DeleteRackTopo with any type of body
func NewDeleteRackTopoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-rack-topo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteReportTemplateRequest calls the generic DeleteReportTemplate builder with application/json body
func NewDeleteReportTemplateRequest(server string, body DeleteReportTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteReportTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteReportTemplateRequestWithBody generates requests for DeleteReportTemplate with any type of body
func NewDeleteReportTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-report-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest calls the generic DeleteRole builder with application/json body
func NewDeleteRoleRequest(server string, body DeleteRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRoleRequestWithBody generates requests for DeleteRole with any type of body
func NewDeleteRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSnapshotGroupRequest calls the generic DeleteSnapshotGroup builder with application/json body
func NewDeleteSnapshotGroupRequest(server string, body DeleteSnapshotGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSnapshotGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSnapshotGroupRequestWithBody generates requests for DeleteSnapshotGroup with any type of body
func NewDeleteSnapshotGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-snapshot-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSnapshotPlanRequest calls the generic DeleteSnapshotPlan builder with application/json body
func NewDeleteSnapshotPlanRequest(server string, body DeleteSnapshotPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSnapshotPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSnapshotPlanRequestWithBody generates requests for DeleteSnapshotPlan with any type of body
func NewDeleteSnapshotPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-snapshot-plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSnmpTransportRequest calls the generic DeleteSnmpTransport builder with application/json body
func NewDeleteSnmpTransportRequest(server string, body DeleteSnmpTransportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSnmpTransportRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSnmpTransportRequestWithBody generates requests for DeleteSnmpTransport with any type of body
func NewDeleteSnmpTransportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-snmp-transport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSnmpTrapReceiverRequest calls the generic DeleteSnmpTrapReceiver builder with application/json body
func NewDeleteSnmpTrapReceiverRequest(server string, body DeleteSnmpTrapReceiverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSnmpTrapReceiverRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSnmpTrapReceiverRequestWithBody generates requests for DeleteSnmpTrapReceiver with any type of body
func NewDeleteSnmpTrapReceiverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-snmp-trap-receiver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest calls the generic DeleteUser builder with application/json body
func NewDeleteUserRequest(server string, body DeleteUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteUserRequestWithBody generates requests for DeleteUser with any type of body
func NewDeleteUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVdsRequest calls the generic DeleteVds builder with application/json body
func NewDeleteVdsRequest(server string, body DeleteVdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVdsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVdsRequestWithBody generates requests for DeleteVds with any type of body
func NewDeleteVdsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-vds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteViewRequest calls the generic DeleteView builder with application/json body
func NewDeleteViewRequest(server string, body DeleteViewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteViewRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteViewRequestWithBody generates requests for DeleteView with any type of body
func NewDeleteViewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-view")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmRequest calls the generic DeleteVm builder with application/json body
func NewDeleteVmRequest(server string, body DeleteVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVmRequestWithBody generates requests for DeleteVm with any type of body
func NewDeleteVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmFolderRequest calls the generic DeleteVmFolder builder with application/json body
func NewDeleteVmFolderRequest(server string, body DeleteVmFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVmFolderRequestWithBody generates requests for DeleteVmFolder with any type of body
func NewDeleteVmFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-vm-folder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmPlacementGroupRequest calls the generic DeleteVmPlacementGroup builder with application/json body
func NewDeleteVmPlacementGroupRequest(server string, body DeleteVmPlacementGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmPlacementGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVmPlacementGroupRequestWithBody generates requests for DeleteVmPlacementGroup with any type of body
func NewDeleteVmPlacementGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-vm-placement-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmSnapshotRequest calls the generic DeleteVmSnapshot builder with application/json body
func NewDeleteVmSnapshotRequest(server string, body DeleteVmSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVmSnapshotRequestWithBody generates requests for DeleteVmSnapshot with any type of body
func NewDeleteVmSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-vm-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmTemplateFromVmRequest calls the generic DeleteVmTemplateFromVm builder with application/json body
func NewDeleteVmTemplateFromVmRequest(server string, body DeleteVmTemplateFromVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmTemplateFromVmRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVmTemplateFromVmRequestWithBody generates requests for DeleteVmTemplateFromVm with any type of body
func NewDeleteVmTemplateFromVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-vm-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVlanRequest calls the generic DeleteVlan builder with application/json body
func NewDeleteVlanRequest(server string, body DeleteVlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVlanRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVlanRequestWithBody generates requests for DeleteVlan with any type of body
func NewDeleteVlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-vm-vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmVolumeFromVmRequest calls the generic DeleteVmVolumeFromVm builder with application/json body
func NewDeleteVmVolumeFromVmRequest(server string, body DeleteVmVolumeFromVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmVolumeFromVmRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVmVolumeFromVmRequestWithBody generates requests for DeleteVmVolumeFromVm with any type of body
func NewDeleteVmVolumeFromVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/delete-vm-volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteSnapshotPlanRequest calls the generic ExecuteSnapshotPlan builder with application/json body
func NewExecuteSnapshotPlanRequest(server string, body ExecuteSnapshotPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteSnapshotPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteSnapshotPlanRequestWithBody generates requests for ExecuteSnapshotPlan with any type of body
func NewExecuteSnapshotPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/execute-snapshot-plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewForceRestartVmRequest calls the generic ForceRestartVm builder with application/json body
func NewForceRestartVmRequest(server string, body ForceRestartVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewForceRestartVmRequestWithBody(server, "application/json", bodyReader)
}

// NewForceRestartVmRequestWithBody generates requests for ForceRestartVm with any type of body
func NewForceRestartVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/force-restart-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateFromReportTemplateRequest calls the generic GenerateFromReportTemplate builder with application/json body
func NewGenerateFromReportTemplateRequest(server string, body GenerateFromReportTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateFromReportTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateFromReportTemplateRequestWithBody generates requests for GenerateFromReportTemplate with any type of body
func NewGenerateFromReportTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/generate-from-report-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertNotifiersRequest calls the generic GetAlertNotifiers builder with application/json body
func NewGetAlertNotifiersRequest(server string, body GetAlertNotifiersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAlertNotifiersRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAlertNotifiersRequestWithBody generates requests for GetAlertNotifiers with any type of body
func NewGetAlertNotifiersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-alert-notifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertNotifiersConnectionRequest calls the generic GetAlertNotifiersConnection builder with application/json body
func NewGetAlertNotifiersConnectionRequest(server string, body GetAlertNotifiersConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAlertNotifiersConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAlertNotifiersConnectionRequestWithBody generates requests for GetAlertNotifiersConnection with any type of body
func NewGetAlertNotifiersConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-alert-notifiers-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertRulesRequest calls the generic GetAlertRules builder with application/json body
func NewGetAlertRulesRequest(server string, body GetAlertRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAlertRulesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAlertRulesRequestWithBody generates requests for GetAlertRules with any type of body
func NewGetAlertRulesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-alert-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertRulesConnectionRequest calls the generic GetAlertRulesConnection builder with application/json body
func NewGetAlertRulesConnectionRequest(server string, body GetAlertRulesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAlertRulesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAlertRulesConnectionRequestWithBody generates requests for GetAlertRulesConnection with any type of body
func NewGetAlertRulesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-alert-rules-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertsRequest calls the generic GetAlerts builder with application/json body
func NewGetAlertsRequest(server string, body GetAlertsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAlertsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAlertsRequestWithBody generates requests for GetAlerts with any type of body
func NewGetAlertsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertsConnectionRequest calls the generic GetAlertsConnection builder with application/json body
func NewGetAlertsConnectionRequest(server string, body GetAlertsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAlertsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAlertsConnectionRequestWithBody generates requests for GetAlertsConnection with any type of body
func NewGetAlertsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-alerts-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApplicationsRequest calls the generic GetApplications builder with application/json body
func NewGetApplicationsRequest(server string, body GetApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetApplicationsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetApplicationsRequestWithBody generates requests for GetApplications with any type of body
func NewGetApplicationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApplicationsConnectionRequest calls the generic GetApplicationsConnection builder with application/json body
func NewGetApplicationsConnectionRequest(server string, body GetApplicationsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetApplicationsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetApplicationsConnectionRequestWithBody generates requests for GetApplicationsConnection with any type of body
func NewGetApplicationsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-applications-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBrickTopoesRequest calls the generic GetBrickTopoes builder with application/json body
func NewGetBrickTopoesRequest(server string, body GetBrickTopoesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBrickTopoesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetBrickTopoesRequestWithBody generates requests for GetBrickTopoes with any type of body
func NewGetBrickTopoesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-brick-topoes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBrickTopoesConnectionRequest calls the generic GetBrickTopoesConnection builder with application/json body
func NewGetBrickTopoesConnectionRequest(server string, body GetBrickTopoesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBrickTopoesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetBrickTopoesConnectionRequestWithBody generates requests for GetBrickTopoesConnection with any type of body
func NewGetBrickTopoesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-brick-topoes-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterImagesRequest calls the generic GetClusterImages builder with application/json body
func NewGetClusterImagesRequest(server string, body GetClusterImagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClusterImagesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClusterImagesRequestWithBody generates requests for GetClusterImages with any type of body
func NewGetClusterImagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-cluster-images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterImagesConnectionRequest calls the generic GetClusterImagesConnection builder with application/json body
func NewGetClusterImagesConnectionRequest(server string, body GetClusterImagesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClusterImagesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClusterImagesConnectionRequestWithBody generates requests for GetClusterImagesConnection with any type of body
func NewGetClusterImagesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-cluster-images-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterSettingsesRequest calls the generic GetClusterSettingses builder with application/json body
func NewGetClusterSettingsesRequest(server string, body GetClusterSettingsesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClusterSettingsesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClusterSettingsesRequestWithBody generates requests for GetClusterSettingses with any type of body
func NewGetClusterSettingsesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-cluster-settingses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterSettingsesConnectionRequest calls the generic GetClusterSettingsesConnection builder with application/json body
func NewGetClusterSettingsesConnectionRequest(server string, body GetClusterSettingsesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClusterSettingsesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClusterSettingsesConnectionRequestWithBody generates requests for GetClusterSettingsesConnection with any type of body
func NewGetClusterSettingsesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-cluster-settingses-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterTopoesRequest calls the generic GetClusterTopoes builder with application/json body
func NewGetClusterTopoesRequest(server string, body GetClusterTopoesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClusterTopoesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClusterTopoesRequestWithBody generates requests for GetClusterTopoes with any type of body
func NewGetClusterTopoesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-cluster-topoes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterTopoesConnectionRequest calls the generic GetClusterTopoesConnection builder with application/json body
func NewGetClusterTopoesConnectionRequest(server string, body GetClusterTopoesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClusterTopoesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClusterTopoesConnectionRequestWithBody generates requests for GetClusterTopoesConnection with any type of body
func NewGetClusterTopoesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-cluster-topoes-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterUpgradeHistoriesRequest calls the generic GetClusterUpgradeHistories builder with application/json body
func NewGetClusterUpgradeHistoriesRequest(server string, body GetClusterUpgradeHistoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClusterUpgradeHistoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClusterUpgradeHistoriesRequestWithBody generates requests for GetClusterUpgradeHistories with any type of body
func NewGetClusterUpgradeHistoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-cluster-upgrade-histories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterUpgradeHistoriesConnectionRequest calls the generic GetClusterUpgradeHistoriesConnection builder with application/json body
func NewGetClusterUpgradeHistoriesConnectionRequest(server string, body GetClusterUpgradeHistoriesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClusterUpgradeHistoriesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClusterUpgradeHistoriesConnectionRequestWithBody generates requests for GetClusterUpgradeHistoriesConnection with any type of body
func NewGetClusterUpgradeHistoriesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-cluster-upgrade-histories-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClustersRequest calls the generic GetClusters builder with application/json body
func NewGetClustersRequest(server string, body GetClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClustersRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClustersRequestWithBody generates requests for GetClusters with any type of body
func NewGetClustersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClustersConnectionRequest calls the generic GetClustersConnection builder with application/json body
func NewGetClustersConnectionRequest(server string, body GetClustersConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetClustersConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetClustersConnectionRequestWithBody generates requests for GetClustersConnection with any type of body
func NewGetClustersConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-clusters-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConsistencyGroupSnapshotsRequest calls the generic GetConsistencyGroupSnapshots builder with application/json body
func NewGetConsistencyGroupSnapshotsRequest(server string, body GetConsistencyGroupSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetConsistencyGroupSnapshotsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetConsistencyGroupSnapshotsRequestWithBody generates requests for GetConsistencyGroupSnapshots with any type of body
func NewGetConsistencyGroupSnapshotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-consistency-group-snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConsistencyGroupSnapshotsConnectionRequest calls the generic GetConsistencyGroupSnapshotsConnection builder with application/json body
func NewGetConsistencyGroupSnapshotsConnectionRequest(server string, body GetConsistencyGroupSnapshotsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetConsistencyGroupSnapshotsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetConsistencyGroupSnapshotsConnectionRequestWithBody generates requests for GetConsistencyGroupSnapshotsConnection with any type of body
func NewGetConsistencyGroupSnapshotsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-consistency-group-snapshots-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConsistencyGroupsRequest calls the generic GetConsistencyGroups builder with application/json body
func NewGetConsistencyGroupsRequest(server string, body GetConsistencyGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetConsistencyGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetConsistencyGroupsRequestWithBody generates requests for GetConsistencyGroups with any type of body
func NewGetConsistencyGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-consistency-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConsistencyGroupsConnectionRequest calls the generic GetConsistencyGroupsConnection builder with application/json body
func NewGetConsistencyGroupsConnectionRequest(server string, body GetConsistencyGroupsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetConsistencyGroupsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetConsistencyGroupsConnectionRequestWithBody generates requests for GetConsistencyGroupsConnection with any type of body
func NewGetConsistencyGroupsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-consistency-groups-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatacentersRequest calls the generic GetDatacenters builder with application/json body
func NewGetDatacentersRequest(server string, body GetDatacentersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDatacentersRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDatacentersRequestWithBody generates requests for GetDatacenters with any type of body
func NewGetDatacentersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-datacenters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatacentersConnectionRequest calls the generic GetDatacentersConnection builder with application/json body
func NewGetDatacentersConnectionRequest(server string, body GetDatacentersConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDatacentersConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDatacentersConnectionRequestWithBody generates requests for GetDatacentersConnection with any type of body
func NewGetDatacentersConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-datacenters-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeploysRequest calls the generic GetDeploys builder with application/json body
func NewGetDeploysRequest(server string, body GetDeploysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDeploysRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDeploysRequestWithBody generates requests for GetDeploys with any type of body
func NewGetDeploysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-deploys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeploysConnectionRequest calls the generic GetDeploysConnection builder with application/json body
func NewGetDeploysConnectionRequest(server string, body GetDeploysConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDeploysConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDeploysConnectionRequestWithBody generates requests for GetDeploysConnection with any type of body
func NewGetDeploysConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-deploys-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDiscoverHostsRequest calls the generic GetDiscoverHosts builder with application/json body
func NewGetDiscoverHostsRequest(server string, body GetDiscoverHostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDiscoverHostsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDiscoverHostsRequestWithBody generates requests for GetDiscoverHosts with any type of body
func NewGetDiscoverHostsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-discover-hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDisksRequest calls the generic GetDisks builder with application/json body
func NewGetDisksRequest(server string, body GetDisksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDisksRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDisksRequestWithBody generates requests for GetDisks with any type of body
func NewGetDisksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-disks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDisksConnectionRequest calls the generic GetDisksConnection builder with application/json body
func NewGetDisksConnectionRequest(server string, body GetDisksConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDisksConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDisksConnectionRequestWithBody generates requests for GetDisksConnection with any type of body
func NewGetDisksConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-disks-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElfDataStoresRequest calls the generic GetElfDataStores builder with application/json body
func NewGetElfDataStoresRequest(server string, body GetElfDataStoresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetElfDataStoresRequestWithBody(server, "application/json", bodyReader)
}

// NewGetElfDataStoresRequestWithBody generates requests for GetElfDataStores with any type of body
func NewGetElfDataStoresRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-elf-data-stores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElfDataStoresConnectionRequest calls the generic GetElfDataStoresConnection builder with application/json body
func NewGetElfDataStoresConnectionRequest(server string, body GetElfDataStoresConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetElfDataStoresConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetElfDataStoresConnectionRequestWithBody generates requests for GetElfDataStoresConnection with any type of body
func NewGetElfDataStoresConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-elf-data-stores-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElfImagesRequest calls the generic GetElfImages builder with application/json body
func NewGetElfImagesRequest(server string, body GetElfImagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetElfImagesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetElfImagesRequestWithBody generates requests for GetElfImages with any type of body
func NewGetElfImagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-elf-images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElfImagesConnectionRequest calls the generic GetElfImagesConnection builder with application/json body
func NewGetElfImagesConnectionRequest(server string, body GetElfImagesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetElfImagesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetElfImagesConnectionRequestWithBody generates requests for GetElfImagesConnection with any type of body
func NewGetElfImagesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-elf-images-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElfStoragePoliciesRequest calls the generic GetElfStoragePolicies builder with application/json body
func NewGetElfStoragePoliciesRequest(server string, body GetElfStoragePoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetElfStoragePoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetElfStoragePoliciesRequestWithBody generates requests for GetElfStoragePolicies with any type of body
func NewGetElfStoragePoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-elf-storage-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElfStoragePoliciesConnectionRequest calls the generic GetElfStoragePoliciesConnection builder with application/json body
func NewGetElfStoragePoliciesConnectionRequest(server string, body GetElfStoragePoliciesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetElfStoragePoliciesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetElfStoragePoliciesConnectionRequestWithBody generates requests for GetElfStoragePoliciesConnection with any type of body
func NewGetElfStoragePoliciesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-elf-storage-policies-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEntityFiltersRequest calls the generic GetEntityFilters builder with application/json body
func NewGetEntityFiltersRequest(server string, body GetEntityFiltersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetEntityFiltersRequestWithBody(server, "application/json", bodyReader)
}

// NewGetEntityFiltersRequestWithBody generates requests for GetEntityFilters with any type of body
func NewGetEntityFiltersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-entity-filters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEntityFiltersConnectionRequest calls the generic GetEntityFiltersConnection builder with application/json body
func NewGetEntityFiltersConnectionRequest(server string, body GetEntityFiltersConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetEntityFiltersConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetEntityFiltersConnectionRequestWithBody generates requests for GetEntityFiltersConnection with any type of body
func NewGetEntityFiltersConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-entity-filters-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGlobalAlertRulesRequest calls the generic GetGlobalAlertRules builder with application/json body
func NewGetGlobalAlertRulesRequest(server string, body GetGlobalAlertRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetGlobalAlertRulesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetGlobalAlertRulesRequestWithBody generates requests for GetGlobalAlertRules with any type of body
func NewGetGlobalAlertRulesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-global-alert-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGlobalAlertRulesConnectionRequest calls the generic GetGlobalAlertRulesConnection builder with application/json body
func NewGetGlobalAlertRulesConnectionRequest(server string, body GetGlobalAlertRulesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetGlobalAlertRulesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetGlobalAlertRulesConnectionRequestWithBody generates requests for GetGlobalAlertRulesConnection with any type of body
func NewGetGlobalAlertRulesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-global-alert-rules-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGlobalSettingsesRequest calls the generic GetGlobalSettingses builder with application/json body
func NewGetGlobalSettingsesRequest(server string, body GetGlobalSettingsesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetGlobalSettingsesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetGlobalSettingsesRequestWithBody generates requests for GetGlobalSettingses with any type of body
func NewGetGlobalSettingsesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-global-settingses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGlobalSettingsesConnectionRequest calls the generic GetGlobalSettingsesConnection builder with application/json body
func NewGetGlobalSettingsesConnectionRequest(server string, body GetGlobalSettingsesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetGlobalSettingsesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetGlobalSettingsesConnectionRequestWithBody generates requests for GetGlobalSettingsesConnection with any type of body
func NewGetGlobalSettingsesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-global-settingses-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGraphsRequest calls the generic GetGraphs builder with application/json body
func NewGetGraphsRequest(server string, body GetGraphsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetGraphsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetGraphsRequestWithBody generates requests for GetGraphs with any type of body
func NewGetGraphsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-graphs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGraphsConnectionRequest calls the generic GetGraphsConnection builder with application/json body
func NewGetGraphsConnectionRequest(server string, body GetGraphsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetGraphsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetGraphsConnectionRequestWithBody generates requests for GetGraphsConnection with any type of body
func NewGetGraphsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-graphs-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHostsRequest calls the generic GetHosts builder with application/json body
func NewGetHostsRequest(server string, body GetHostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetHostsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetHostsRequestWithBody generates requests for GetHosts with any type of body
func NewGetHostsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHostsConnectionRequest calls the generic GetHostsConnection builder with application/json body
func NewGetHostsConnectionRequest(server string, body GetHostsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetHostsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetHostsConnectionRequestWithBody generates requests for GetHostsConnection with any type of body
func NewGetHostsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-hosts-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetImagesConnectorRequest calls the generic GetImagesConnector builder with application/json body
func NewGetImagesConnectorRequest(server string, body GetImagesConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetImagesConnectorRequestWithBody(server, "application/json", bodyReader)
}

// NewGetImagesConnectorRequestWithBody generates requests for GetImagesConnector with any type of body
func NewGetImagesConnectorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-images-connector")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIpmisRequest calls the generic GetIpmis builder with application/json body
func NewGetIpmisRequest(server string, body GetIpmisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIpmisRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIpmisRequestWithBody generates requests for GetIpmis with any type of body
func NewGetIpmisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-ipmis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiConnectionsRequest calls the generic GetIscsiConnections builder with application/json body
func NewGetIscsiConnectionsRequest(server string, body GetIscsiConnectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIscsiConnectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIscsiConnectionsRequestWithBody generates requests for GetIscsiConnections with any type of body
func NewGetIscsiConnectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-iscsi-connections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiConnectionsConnectionRequest calls the generic GetIscsiConnectionsConnection builder with application/json body
func NewGetIscsiConnectionsConnectionRequest(server string, body GetIscsiConnectionsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIscsiConnectionsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIscsiConnectionsConnectionRequestWithBody generates requests for GetIscsiConnectionsConnection with any type of body
func NewGetIscsiConnectionsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-iscsi-connections-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiLunSnapshotsRequest calls the generic GetIscsiLunSnapshots builder with application/json body
func NewGetIscsiLunSnapshotsRequest(server string, body GetIscsiLunSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIscsiLunSnapshotsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIscsiLunSnapshotsRequestWithBody generates requests for GetIscsiLunSnapshots with any type of body
func NewGetIscsiLunSnapshotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-iscsi-lun-snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiLunSnapshotsConnectionRequest calls the generic GetIscsiLunSnapshotsConnection builder with application/json body
func NewGetIscsiLunSnapshotsConnectionRequest(server string, body GetIscsiLunSnapshotsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIscsiLunSnapshotsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIscsiLunSnapshotsConnectionRequestWithBody generates requests for GetIscsiLunSnapshotsConnection with any type of body
func NewGetIscsiLunSnapshotsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-iscsi-lun-snapshots-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiLunsRequest calls the generic GetIscsiLuns builder with application/json body
func NewGetIscsiLunsRequest(server string, body GetIscsiLunsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIscsiLunsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIscsiLunsRequestWithBody generates requests for GetIscsiLuns with any type of body
func NewGetIscsiLunsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-iscsi-luns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiLunsConnectionRequest calls the generic GetIscsiLunsConnection builder with application/json body
func NewGetIscsiLunsConnectionRequest(server string, body GetIscsiLunsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIscsiLunsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIscsiLunsConnectionRequestWithBody generates requests for GetIscsiLunsConnection with any type of body
func NewGetIscsiLunsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-iscsi-luns-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiTargetsRequest calls the generic GetIscsiTargets builder with application/json body
func NewGetIscsiTargetsRequest(server string, body GetIscsiTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIscsiTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIscsiTargetsRequestWithBody generates requests for GetIscsiTargets with any type of body
func NewGetIscsiTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-iscsi-targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiTargetsConnectionRequest calls the generic GetIscsiTargetsConnection builder with application/json body
func NewGetIscsiTargetsConnectionRequest(server string, body GetIscsiTargetsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIscsiTargetsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIscsiTargetsConnectionRequestWithBody generates requests for GetIscsiTargetsConnection with any type of body
func NewGetIscsiTargetsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-iscsi-targets-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLabelsRequest calls the generic GetLabels builder with application/json body
func NewGetLabelsRequest(server string, body GetLabelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLabelsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetLabelsRequestWithBody generates requests for GetLabels with any type of body
func NewGetLabelsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-labels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLabelsConnectionRequest calls the generic GetLabelsConnection builder with application/json body
func NewGetLabelsConnectionRequest(server string, body GetLabelsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLabelsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetLabelsConnectionRequestWithBody generates requests for GetLabelsConnection with any type of body
func NewGetLabelsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-labels-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLicensesRequest calls the generic GetLicenses builder with application/json body
func NewGetLicensesRequest(server string, body GetLicensesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLicensesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetLicensesRequestWithBody generates requests for GetLicenses with any type of body
func NewGetLicensesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-licenses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLicensesConnectionRequest calls the generic GetLicensesConnection builder with application/json body
func NewGetLicensesConnectionRequest(server string, body GetLicensesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLicensesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetLicensesConnectionRequestWithBody generates requests for GetLicensesConnection with any type of body
func NewGetLicensesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-licenses-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogCollectionsRequest calls the generic GetLogCollections builder with application/json body
func NewGetLogCollectionsRequest(server string, body GetLogCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLogCollectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetLogCollectionsRequestWithBody generates requests for GetLogCollections with any type of body
func NewGetLogCollectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-log-collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogCollectionsConnectionRequest calls the generic GetLogCollectionsConnection builder with application/json body
func NewGetLogCollectionsConnectionRequest(server string, body GetLogCollectionsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLogCollectionsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetLogCollectionsConnectionRequestWithBody generates requests for GetLogCollectionsConnection with any type of body
func NewGetLogCollectionsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-log-collections-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMigrateTransmittersRequest calls the generic GetMigrateTransmitters builder with application/json body
func NewGetMigrateTransmittersRequest(server string, body GetMigrateTransmittersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetMigrateTransmittersRequestWithBody(server, "application/json", bodyReader)
}

// NewGetMigrateTransmittersRequestWithBody generates requests for GetMigrateTransmitters with any type of body
func NewGetMigrateTransmittersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-migrate-transmitters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMigrateTransmittersConnectionRequest calls the generic GetMigrateTransmittersConnection builder with application/json body
func NewGetMigrateTransmittersConnectionRequest(server string, body GetMigrateTransmittersConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetMigrateTransmittersConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetMigrateTransmittersConnectionRequestWithBody generates requests for GetMigrateTransmittersConnection with any type of body
func NewGetMigrateTransmittersConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-migrate-transmitters-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNamespaceGroupsRequest calls the generic GetNamespaceGroups builder with application/json body
func NewGetNamespaceGroupsRequest(server string, body GetNamespaceGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNamespaceGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNamespaceGroupsRequestWithBody generates requests for GetNamespaceGroups with any type of body
func NewGetNamespaceGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-namespace-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNamespaceGroupsConnectionRequest calls the generic GetNamespaceGroupsConnection builder with application/json body
func NewGetNamespaceGroupsConnectionRequest(server string, body GetNamespaceGroupsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNamespaceGroupsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNamespaceGroupsConnectionRequestWithBody generates requests for GetNamespaceGroupsConnection with any type of body
func NewGetNamespaceGroupsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-namespace-groups-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNfsExportsRequest calls the generic GetNfsExports builder with application/json body
func NewGetNfsExportsRequest(server string, body GetNfsExportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNfsExportsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNfsExportsRequestWithBody generates requests for GetNfsExports with any type of body
func NewGetNfsExportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nfs-exports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNfsExportsConnectionRequest calls the generic GetNfsExportsConnection builder with application/json body
func NewGetNfsExportsConnectionRequest(server string, body GetNfsExportsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNfsExportsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNfsExportsConnectionRequestWithBody generates requests for GetNfsExportsConnection with any type of body
func NewGetNfsExportsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nfs-exports-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNfsInodesRequest calls the generic GetNfsInodes builder with application/json body
func NewGetNfsInodesRequest(server string, body GetNfsInodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNfsInodesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNfsInodesRequestWithBody generates requests for GetNfsInodes with any type of body
func NewGetNfsInodesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nfs-inodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNfsInodesConnectionRequest calls the generic GetNfsInodesConnection builder with application/json body
func NewGetNfsInodesConnectionRequest(server string, body GetNfsInodesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNfsInodesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNfsInodesConnectionRequestWithBody generates requests for GetNfsInodesConnection with any type of body
func NewGetNfsInodesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nfs-inodes-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNicsRequest calls the generic GetNics builder with application/json body
func NewGetNicsRequest(server string, body GetNicsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNicsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNicsRequestWithBody generates requests for GetNics with any type of body
func NewGetNicsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNicsConnectionRequest calls the generic GetNicsConnection builder with application/json body
func NewGetNicsConnectionRequest(server string, body GetNicsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNicsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNicsConnectionRequestWithBody generates requests for GetNicsConnection with any type of body
func NewGetNicsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nics-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNodeTopoesRequest calls the generic GetNodeTopoes builder with application/json body
func NewGetNodeTopoesRequest(server string, body GetNodeTopoesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNodeTopoesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNodeTopoesRequestWithBody generates requests for GetNodeTopoes with any type of body
func NewGetNodeTopoesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-node-topoes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNodeTopoesConnectionRequest calls the generic GetNodeTopoesConnection builder with application/json body
func NewGetNodeTopoesConnectionRequest(server string, body GetNodeTopoesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNodeTopoesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNodeTopoesConnectionRequestWithBody generates requests for GetNodeTopoesConnection with any type of body
func NewGetNodeTopoesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-node-topoes-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNvmfNamespaceSnapshotsRequest calls the generic GetNvmfNamespaceSnapshots builder with application/json body
func NewGetNvmfNamespaceSnapshotsRequest(server string, body GetNvmfNamespaceSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNvmfNamespaceSnapshotsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNvmfNamespaceSnapshotsRequestWithBody generates requests for GetNvmfNamespaceSnapshots with any type of body
func NewGetNvmfNamespaceSnapshotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nvmf-namespace-snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNvmfNamespaceSnapshotsConnectionRequest calls the generic GetNvmfNamespaceSnapshotsConnection builder with application/json body
func NewGetNvmfNamespaceSnapshotsConnectionRequest(server string, body GetNvmfNamespaceSnapshotsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNvmfNamespaceSnapshotsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNvmfNamespaceSnapshotsConnectionRequestWithBody generates requests for GetNvmfNamespaceSnapshotsConnection with any type of body
func NewGetNvmfNamespaceSnapshotsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nvmf-namespace-snapshots-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNvmfNamespacesRequest calls the generic GetNvmfNamespaces builder with application/json body
func NewGetNvmfNamespacesRequest(server string, body GetNvmfNamespacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNvmfNamespacesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNvmfNamespacesRequestWithBody generates requests for GetNvmfNamespaces with any type of body
func NewGetNvmfNamespacesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nvmf-namespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNvmfNamespacesConnectionRequest calls the generic GetNvmfNamespacesConnection builder with application/json body
func NewGetNvmfNamespacesConnectionRequest(server string, body GetNvmfNamespacesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNvmfNamespacesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNvmfNamespacesConnectionRequestWithBody generates requests for GetNvmfNamespacesConnection with any type of body
func NewGetNvmfNamespacesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nvmf-namespaces-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNvmfSubsystemsRequest calls the generic GetNvmfSubsystems builder with application/json body
func NewGetNvmfSubsystemsRequest(server string, body GetNvmfSubsystemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNvmfSubsystemsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNvmfSubsystemsRequestWithBody generates requests for GetNvmfSubsystems with any type of body
func NewGetNvmfSubsystemsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nvmf-subsystems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNvmfSubsystemsConnectionRequest calls the generic GetNvmfSubsystemsConnection builder with application/json body
func NewGetNvmfSubsystemsConnectionRequest(server string, body GetNvmfSubsystemsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNvmfSubsystemsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetNvmfSubsystemsConnectionRequestWithBody generates requests for GetNvmfSubsystemsConnection with any type of body
func NewGetNvmfSubsystemsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-nvmf-subsystems-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsRequest calls the generic GetOrganizations builder with application/json body
func NewGetOrganizationsRequest(server string, body GetOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetOrganizationsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetOrganizationsRequestWithBody generates requests for GetOrganizations with any type of body
func NewGetOrganizationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsConnectionRequest calls the generic GetOrganizationsConnection builder with application/json body
func NewGetOrganizationsConnectionRequest(server string, body GetOrganizationsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetOrganizationsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetOrganizationsConnectionRequestWithBody generates requests for GetOrganizationsConnection with any type of body
func NewGetOrganizationsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-organizations-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPmemDimmsRequest calls the generic GetPmemDimms builder with application/json body
func NewGetPmemDimmsRequest(server string, body GetPmemDimmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPmemDimmsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetPmemDimmsRequestWithBody generates requests for GetPmemDimms with any type of body
func NewGetPmemDimmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-pmem-dimms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPmemDimmsConnectionRequest calls the generic GetPmemDimmsConnection builder with application/json body
func NewGetPmemDimmsConnectionRequest(server string, body GetPmemDimmsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPmemDimmsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetPmemDimmsConnectionRequestWithBody generates requests for GetPmemDimmsConnection with any type of body
func NewGetPmemDimmsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-pmem-dimms-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRackTopoesRequest calls the generic GetRackTopoes builder with application/json body
func NewGetRackTopoesRequest(server string, body GetRackTopoesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRackTopoesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetRackTopoesRequestWithBody generates requests for GetRackTopoes with any type of body
func NewGetRackTopoesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-rack-topoes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRackTopoesConnectionRequest calls the generic GetRackTopoesConnection builder with application/json body
func NewGetRackTopoesConnectionRequest(server string, body GetRackTopoesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRackTopoesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetRackTopoesConnectionRequestWithBody generates requests for GetRackTopoesConnection with any type of body
func NewGetRackTopoesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-rack-topoes-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportTasksRequest calls the generic GetReportTasks builder with application/json body
func NewGetReportTasksRequest(server string, body GetReportTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetReportTasksRequestWithBody(server, "application/json", bodyReader)
}

// NewGetReportTasksRequestWithBody generates requests for GetReportTasks with any type of body
func NewGetReportTasksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-report-tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportTasksConnectionRequest calls the generic GetReportTasksConnection builder with application/json body
func NewGetReportTasksConnectionRequest(server string, body GetReportTasksConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetReportTasksConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetReportTasksConnectionRequestWithBody generates requests for GetReportTasksConnection with any type of body
func NewGetReportTasksConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-report-tasks-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportTemplatesRequest calls the generic GetReportTemplates builder with application/json body
func NewGetReportTemplatesRequest(server string, body GetReportTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetReportTemplatesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetReportTemplatesRequestWithBody generates requests for GetReportTemplates with any type of body
func NewGetReportTemplatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-report-templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportTemplatesConnectionRequest calls the generic GetReportTemplatesConnection builder with application/json body
func NewGetReportTemplatesConnectionRequest(server string, body GetReportTemplatesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetReportTemplatesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetReportTemplatesConnectionRequestWithBody generates requests for GetReportTemplatesConnection with any type of body
func NewGetReportTemplatesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-report-templates-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnapshotGroupsRequest calls the generic GetSnapshotGroups builder with application/json body
func NewGetSnapshotGroupsRequest(server string, body GetSnapshotGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnapshotGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnapshotGroupsRequestWithBody generates requests for GetSnapshotGroups with any type of body
func NewGetSnapshotGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snapshot-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnapshotGroupsConnectionRequest calls the generic GetSnapshotGroupsConnection builder with application/json body
func NewGetSnapshotGroupsConnectionRequest(server string, body GetSnapshotGroupsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnapshotGroupsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnapshotGroupsConnectionRequestWithBody generates requests for GetSnapshotGroupsConnection with any type of body
func NewGetSnapshotGroupsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snapshot-groups-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnapshotPlanTasksRequest calls the generic GetSnapshotPlanTasks builder with application/json body
func NewGetSnapshotPlanTasksRequest(server string, body GetSnapshotPlanTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnapshotPlanTasksRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnapshotPlanTasksRequestWithBody generates requests for GetSnapshotPlanTasks with any type of body
func NewGetSnapshotPlanTasksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snapshot-plan-tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnapshotPlanTasksConnectionRequest calls the generic GetSnapshotPlanTasksConnection builder with application/json body
func NewGetSnapshotPlanTasksConnectionRequest(server string, body GetSnapshotPlanTasksConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnapshotPlanTasksConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnapshotPlanTasksConnectionRequestWithBody generates requests for GetSnapshotPlanTasksConnection with any type of body
func NewGetSnapshotPlanTasksConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snapshot-plan-tasks-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnapshotPlansRequest calls the generic GetSnapshotPlans builder with application/json body
func NewGetSnapshotPlansRequest(server string, body GetSnapshotPlansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnapshotPlansRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnapshotPlansRequestWithBody generates requests for GetSnapshotPlans with any type of body
func NewGetSnapshotPlansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snapshot-plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnapshotPlansConnectionRequest calls the generic GetSnapshotPlansConnection builder with application/json body
func NewGetSnapshotPlansConnectionRequest(server string, body GetSnapshotPlansConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnapshotPlansConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnapshotPlansConnectionRequestWithBody generates requests for GetSnapshotPlansConnection with any type of body
func NewGetSnapshotPlansConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snapshot-plans-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnmpTransportsRequest calls the generic GetSnmpTransports builder with application/json body
func NewGetSnmpTransportsRequest(server string, body GetSnmpTransportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnmpTransportsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnmpTransportsRequestWithBody generates requests for GetSnmpTransports with any type of body
func NewGetSnmpTransportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snmp-transports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnmpTransportsConnectionRequest calls the generic GetSnmpTransportsConnection builder with application/json body
func NewGetSnmpTransportsConnectionRequest(server string, body GetSnmpTransportsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnmpTransportsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnmpTransportsConnectionRequestWithBody generates requests for GetSnmpTransportsConnection with any type of body
func NewGetSnmpTransportsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snmp-transports-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnmpTrapReceiversRequest calls the generic GetSnmpTrapReceivers builder with application/json body
func NewGetSnmpTrapReceiversRequest(server string, body GetSnmpTrapReceiversJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnmpTrapReceiversRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnmpTrapReceiversRequestWithBody generates requests for GetSnmpTrapReceivers with any type of body
func NewGetSnmpTrapReceiversRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snmp-trap-receivers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnmpTrapReceiversConnectionRequest calls the generic GetSnmpTrapReceiversConnection builder with application/json body
func NewGetSnmpTrapReceiversConnectionRequest(server string, body GetSnmpTrapReceiversConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSnmpTrapReceiversConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSnmpTrapReceiversConnectionRequestWithBody generates requests for GetSnmpTrapReceiversConnection with any type of body
func NewGetSnmpTrapReceiversConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-snmp-trap-receivers-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStoragePoliciesConnectorRequest calls the generic GetStoragePoliciesConnector builder with application/json body
func NewGetStoragePoliciesConnectorRequest(server string, body GetStoragePoliciesConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStoragePoliciesConnectorRequestWithBody(server, "application/json", bodyReader)
}

// NewGetStoragePoliciesConnectorRequestWithBody generates requests for GetStoragePoliciesConnector with any type of body
func NewGetStoragePoliciesConnectorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-storage-policies-connector")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSvtImagesRequest calls the generic GetSvtImages builder with application/json body
func NewGetSvtImagesRequest(server string, body GetSvtImagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSvtImagesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSvtImagesRequestWithBody generates requests for GetSvtImages with any type of body
func NewGetSvtImagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-svt-images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSvtImagesConnectionRequest calls the generic GetSvtImagesConnection builder with application/json body
func NewGetSvtImagesConnectionRequest(server string, body GetSvtImagesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSvtImagesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSvtImagesConnectionRequestWithBody generates requests for GetSvtImagesConnection with any type of body
func NewGetSvtImagesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-svt-images-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemAuditLogsRequest calls the generic GetSystemAuditLogs builder with application/json body
func NewGetSystemAuditLogsRequest(server string, body GetSystemAuditLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSystemAuditLogsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSystemAuditLogsRequestWithBody generates requests for GetSystemAuditLogs with any type of body
func NewGetSystemAuditLogsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-system-audit-logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemAuditLogsConnectionRequest calls the generic GetSystemAuditLogsConnection builder with application/json body
func NewGetSystemAuditLogsConnectionRequest(server string, body GetSystemAuditLogsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSystemAuditLogsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSystemAuditLogsConnectionRequestWithBody generates requests for GetSystemAuditLogsConnection with any type of body
func NewGetSystemAuditLogsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-system-audit-logs-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTasksRequest calls the generic GetTasks builder with application/json body
func NewGetTasksRequest(server string, body GetTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTasksRequestWithBody(server, "application/json", bodyReader)
}

// NewGetTasksRequestWithBody generates requests for GetTasks with any type of body
func NewGetTasksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTasksConnectionRequest calls the generic GetTasksConnection builder with application/json body
func NewGetTasksConnectionRequest(server string, body GetTasksConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTasksConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetTasksConnectionRequestWithBody generates requests for GetTasksConnection with any type of body
func NewGetTasksConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-tasks-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUploadTasksRequest calls the generic GetUploadTasks builder with application/json body
func NewGetUploadTasksRequest(server string, body GetUploadTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUploadTasksRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUploadTasksRequestWithBody generates requests for GetUploadTasks with any type of body
func NewGetUploadTasksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-upload-tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUploadTasksConnectionRequest calls the generic GetUploadTasksConnection builder with application/json body
func NewGetUploadTasksConnectionRequest(server string, body GetUploadTasksConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUploadTasksConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUploadTasksConnectionRequestWithBody generates requests for GetUploadTasksConnection with any type of body
func NewGetUploadTasksConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-upload-tasks-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsbDevicesRequest calls the generic GetUsbDevices builder with application/json body
func NewGetUsbDevicesRequest(server string, body GetUsbDevicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUsbDevicesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUsbDevicesRequestWithBody generates requests for GetUsbDevices with any type of body
func NewGetUsbDevicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-usb-devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsbDevicesConnectionRequest calls the generic GetUsbDevicesConnection builder with application/json body
func NewGetUsbDevicesConnectionRequest(server string, body GetUsbDevicesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUsbDevicesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUsbDevicesConnectionRequestWithBody generates requests for GetUsbDevicesConnection with any type of body
func NewGetUsbDevicesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-usb-devices-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserAuditLogsRequest calls the generic GetUserAuditLogs builder with application/json body
func NewGetUserAuditLogsRequest(server string, body GetUserAuditLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUserAuditLogsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUserAuditLogsRequestWithBody generates requests for GetUserAuditLogs with any type of body
func NewGetUserAuditLogsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-user-audit-logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserAuditLogsConnectionRequest calls the generic GetUserAuditLogsConnection builder with application/json body
func NewGetUserAuditLogsConnectionRequest(server string, body GetUserAuditLogsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUserAuditLogsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUserAuditLogsConnectionRequestWithBody generates requests for GetUserAuditLogsConnection with any type of body
func NewGetUserAuditLogsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-user-audit-logs-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRoleNextsRequest calls the generic GetUserRoleNexts builder with application/json body
func NewGetUserRoleNextsRequest(server string, body GetUserRoleNextsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUserRoleNextsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUserRoleNextsRequestWithBody generates requests for GetUserRoleNexts with any type of body
func NewGetUserRoleNextsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-user-role-nexts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRoleNextsConnectionRequest calls the generic GetUserRoleNextsConnection builder with application/json body
func NewGetUserRoleNextsConnectionRequest(server string, body GetUserRoleNextsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUserRoleNextsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUserRoleNextsConnectionRequestWithBody generates requests for GetUserRoleNextsConnection with any type of body
func NewGetUserRoleNextsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-user-role-nexts-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest calls the generic GetUsers builder with application/json body
func NewGetUsersRequest(server string, body GetUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUsersRequestWithBody generates requests for GetUsers with any type of body
func NewGetUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersConnectionRequest calls the generic GetUsersConnection builder with application/json body
func NewGetUsersConnectionRequest(server string, body GetUsersConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUsersConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetUsersConnectionRequestWithBody generates requests for GetUsersConnection with any type of body
func NewGetUsersConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-users-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVcenterAccountsRequest calls the generic GetVcenterAccounts builder with application/json body
func NewGetVcenterAccountsRequest(server string, body GetVcenterAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVcenterAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVcenterAccountsRequestWithBody generates requests for GetVcenterAccounts with any type of body
func NewGetVcenterAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vcenter-accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVcenterAccountsConnectionRequest calls the generic GetVcenterAccountsConnection builder with application/json body
func NewGetVcenterAccountsConnectionRequest(server string, body GetVcenterAccountsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVcenterAccountsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVcenterAccountsConnectionRequestWithBody generates requests for GetVcenterAccountsConnection with any type of body
func NewGetVcenterAccountsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vcenter-accounts-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVdsesRequest calls the generic GetVdses builder with application/json body
func NewGetVdsesRequest(server string, body GetVdsesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVdsesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVdsesRequestWithBody generates requests for GetVdses with any type of body
func NewGetVdsesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vdses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVdsesConnectionRequest calls the generic GetVdsesConnection builder with application/json body
func NewGetVdsesConnectionRequest(server string, body GetVdsesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVdsesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVdsesConnectionRequestWithBody generates requests for GetVdsesConnection with any type of body
func NewGetVdsesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vdses-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetViewsRequest calls the generic GetViews builder with application/json body
func NewGetViewsRequest(server string, body GetViewsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetViewsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetViewsRequestWithBody generates requests for GetViews with any type of body
func NewGetViewsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-views")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetViewsConnectionRequest calls the generic GetViewsConnection builder with application/json body
func NewGetViewsConnectionRequest(server string, body GetViewsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetViewsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetViewsConnectionRequestWithBody generates requests for GetViewsConnection with any type of body
func NewGetViewsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-views-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVlansRequest calls the generic GetVlans builder with application/json body
func NewGetVlansRequest(server string, body GetVlansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVlansRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVlansRequestWithBody generates requests for GetVlans with any type of body
func NewGetVlansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vlans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVlansConnectionRequest calls the generic GetVlansConnection builder with application/json body
func NewGetVlansConnectionRequest(server string, body GetVlansConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVlansConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVlansConnectionRequestWithBody generates requests for GetVlansConnection with any type of body
func NewGetVlansConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vlans-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmDisksRequest calls the generic GetVmDisks builder with application/json body
func NewGetVmDisksRequest(server string, body GetVmDisksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmDisksRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmDisksRequestWithBody generates requests for GetVmDisks with any type of body
func NewGetVmDisksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-disks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmDisksConnectionRequest calls the generic GetVmDisksConnection builder with application/json body
func NewGetVmDisksConnectionRequest(server string, body GetVmDisksConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmDisksConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmDisksConnectionRequestWithBody generates requests for GetVmDisksConnection with any type of body
func NewGetVmDisksConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-disks-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmEntityFilterResultsRequest calls the generic GetVmEntityFilterResults builder with application/json body
func NewGetVmEntityFilterResultsRequest(server string, body GetVmEntityFilterResultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmEntityFilterResultsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmEntityFilterResultsRequestWithBody generates requests for GetVmEntityFilterResults with any type of body
func NewGetVmEntityFilterResultsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-entity-filter-results")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmEntityFilterResultsConnectionRequest calls the generic GetVmEntityFilterResultsConnection builder with application/json body
func NewGetVmEntityFilterResultsConnectionRequest(server string, body GetVmEntityFilterResultsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmEntityFilterResultsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmEntityFilterResultsConnectionRequestWithBody generates requests for GetVmEntityFilterResultsConnection with any type of body
func NewGetVmEntityFilterResultsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-entity-filter-results-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmFoldersRequest calls the generic GetVmFolders builder with application/json body
func NewGetVmFoldersRequest(server string, body GetVmFoldersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmFoldersRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmFoldersRequestWithBody generates requests for GetVmFolders with any type of body
func NewGetVmFoldersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmFoldersConnectionRequest calls the generic GetVmFoldersConnection builder with application/json body
func NewGetVmFoldersConnectionRequest(server string, body GetVmFoldersConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmFoldersConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmFoldersConnectionRequestWithBody generates requests for GetVmFoldersConnection with any type of body
func NewGetVmFoldersConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-folders-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmNicsRequest calls the generic GetVmNics builder with application/json body
func NewGetVmNicsRequest(server string, body GetVmNicsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmNicsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmNicsRequestWithBody generates requests for GetVmNics with any type of body
func NewGetVmNicsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-nics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmNicsConnectionRequest calls the generic GetVmNicsConnection builder with application/json body
func NewGetVmNicsConnectionRequest(server string, body GetVmNicsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmNicsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmNicsConnectionRequestWithBody generates requests for GetVmNicsConnection with any type of body
func NewGetVmNicsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-nics-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmPlacementGroupsRequest calls the generic GetVmPlacementGroups builder with application/json body
func NewGetVmPlacementGroupsRequest(server string, body GetVmPlacementGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmPlacementGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmPlacementGroupsRequestWithBody generates requests for GetVmPlacementGroups with any type of body
func NewGetVmPlacementGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-placement-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmPlacementGroupsConnectionRequest calls the generic GetVmPlacementGroupsConnection builder with application/json body
func NewGetVmPlacementGroupsConnectionRequest(server string, body GetVmPlacementGroupsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmPlacementGroupsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmPlacementGroupsConnectionRequestWithBody generates requests for GetVmPlacementGroupsConnection with any type of body
func NewGetVmPlacementGroupsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-placement-groups-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmSnapshotsRequest calls the generic GetVmSnapshots builder with application/json body
func NewGetVmSnapshotsRequest(server string, body GetVmSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmSnapshotsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmSnapshotsRequestWithBody generates requests for GetVmSnapshots with any type of body
func NewGetVmSnapshotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmSnapshotsConnectionRequest calls the generic GetVmSnapshotsConnection builder with application/json body
func NewGetVmSnapshotsConnectionRequest(server string, body GetVmSnapshotsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmSnapshotsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmSnapshotsConnectionRequestWithBody generates requests for GetVmSnapshotsConnection with any type of body
func NewGetVmSnapshotsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-snapshots-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmTemplatesRequest calls the generic GetVmTemplates builder with application/json body
func NewGetVmTemplatesRequest(server string, body GetVmTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmTemplatesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmTemplatesRequestWithBody generates requests for GetVmTemplates with any type of body
func NewGetVmTemplatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmTemplatesConnectionRequest calls the generic GetVmTemplatesConnection builder with application/json body
func NewGetVmTemplatesConnectionRequest(server string, body GetVmTemplatesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmTemplatesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmTemplatesConnectionRequestWithBody generates requests for GetVmTemplatesConnection with any type of body
func NewGetVmTemplatesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-templates-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmVolumesRequest calls the generic GetVmVolumes builder with application/json body
func NewGetVmVolumesRequest(server string, body GetVmVolumesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmVolumesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmVolumesRequestWithBody generates requests for GetVmVolumes with any type of body
func NewGetVmVolumesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-volumes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmVolumesConnectionRequest calls the generic GetVmVolumesConnection builder with application/json body
func NewGetVmVolumesConnectionRequest(server string, body GetVmVolumesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmVolumesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmVolumesConnectionRequestWithBody generates requests for GetVmVolumesConnection with any type of body
func NewGetVmVolumesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vm-volumes-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmsRequest calls the generic GetVms builder with application/json body
func NewGetVmsRequest(server string, body GetVmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmsRequestWithBody generates requests for GetVms with any type of body
func NewGetVmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmsConnectionRequest calls the generic GetVmsConnection builder with application/json body
func NewGetVmsConnectionRequest(server string, body GetVmsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVmsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVmsConnectionRequestWithBody generates requests for GetVmsConnection with any type of body
func NewGetVmsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vms-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVsphereEsxiAccountsRequest calls the generic GetVsphereEsxiAccounts builder with application/json body
func NewGetVsphereEsxiAccountsRequest(server string, body GetVsphereEsxiAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVsphereEsxiAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVsphereEsxiAccountsRequestWithBody generates requests for GetVsphereEsxiAccounts with any type of body
func NewGetVsphereEsxiAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vsphere-esxi-accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVsphereEsxiAccountsConnectionRequest calls the generic GetVsphereEsxiAccountsConnection builder with application/json body
func NewGetVsphereEsxiAccountsConnectionRequest(server string, body GetVsphereEsxiAccountsConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVsphereEsxiAccountsConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVsphereEsxiAccountsConnectionRequestWithBody generates requests for GetVsphereEsxiAccountsConnection with any type of body
func NewGetVsphereEsxiAccountsConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-vsphere-esxi-accounts-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWitnessesRequest calls the generic GetWitnesses builder with application/json body
func NewGetWitnessesRequest(server string, body GetWitnessesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWitnessesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetWitnessesRequestWithBody generates requests for GetWitnesses with any type of body
func NewGetWitnessesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-witnesses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWitnessesConnectionRequest calls the generic GetWitnessesConnection builder with application/json body
func NewGetWitnessesConnectionRequest(server string, body GetWitnessesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWitnessesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetWitnessesConnectionRequestWithBody generates requests for GetWitnessesConnection with any type of body
func NewGetWitnessesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-witnesses-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZoneTopoesRequest calls the generic GetZoneTopoes builder with application/json body
func NewGetZoneTopoesRequest(server string, body GetZoneTopoesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetZoneTopoesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetZoneTopoesRequestWithBody generates requests for GetZoneTopoes with any type of body
func NewGetZoneTopoesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-zone-topoes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZoneTopoesConnectionRequest calls the generic GetZoneTopoesConnection builder with application/json body
func NewGetZoneTopoesConnectionRequest(server string, body GetZoneTopoesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetZoneTopoesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetZoneTopoesConnectionRequestWithBody generates requests for GetZoneTopoesConnection with any type of body
func NewGetZoneTopoesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-zone-topoes-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZonesRequest calls the generic GetZones builder with application/json body
func NewGetZonesRequest(server string, body GetZonesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetZonesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetZonesRequestWithBody generates requests for GetZones with any type of body
func NewGetZonesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-zones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZonesConnectionRequest calls the generic GetZonesConnection builder with application/json body
func NewGetZonesConnectionRequest(server string, body GetZonesConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetZonesConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetZonesConnectionRequestWithBody generates requests for GetZonesConnection with any type of body
func NewGetZonesConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-zones-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstallVmtoolsRequest calls the generic InstallVmtools builder with application/json body
func NewInstallVmtoolsRequest(server string, body InstallVmtoolsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstallVmtoolsRequestWithBody(server, "application/json", bodyReader)
}

// NewInstallVmtoolsRequestWithBody generates requests for InstallVmtools with any type of body
func NewInstallVmtoolsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/install-vmtools")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKeepSnapshotGroupRequest calls the generic KeepSnapshotGroup builder with application/json body
func NewKeepSnapshotGroupRequest(server string, body KeepSnapshotGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKeepSnapshotGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewKeepSnapshotGroupRequestWithBody generates requests for KeepSnapshotGroup with any type of body
func NewKeepSnapshotGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keep-snapshot-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMigRateVmRequest calls the generic MigRateVm builder with application/json body
func NewMigRateVmRequest(server string, body MigRateVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMigRateVmRequestWithBody(server, "application/json", bodyReader)
}

// NewMigRateVmRequestWithBody generates requests for MigRateVm with any type of body
func NewMigRateVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/migrate-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMountDiskRequest calls the generic MountDisk builder with application/json body
func NewMountDiskRequest(server string, body MountDiskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMountDiskRequestWithBody(server, "application/json", bodyReader)
}

// NewMountDiskRequestWithBody generates requests for MountDisk with any type of body
func NewMountDiskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mount-disk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMountUsbDeviceRequest calls the generic MountUsbDevice builder with application/json body
func NewMountUsbDeviceRequest(server string, body MountUsbDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMountUsbDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewMountUsbDeviceRequestWithBody generates requests for MountUsbDevice with any type of body
func NewMountUsbDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mount-usb-device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveBrickTopoRequest calls the generic MoveBrickTopo builder with application/json body
func NewMoveBrickTopoRequest(server string, body MoveBrickTopoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveBrickTopoRequestWithBody(server, "application/json", bodyReader)
}

// NewMoveBrickTopoRequestWithBody generates requests for MoveBrickTopo with any type of body
func NewMoveBrickTopoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/move-brick-topo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNodeTopoRequest calls the generic UpdateNodeTopo builder with application/json body
func NewUpdateNodeTopoRequest(server string, body UpdateNodeTopoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNodeTopoRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateNodeTopoRequestWithBody generates requests for UpdateNodeTopo with any type of body
func NewUpdateNodeTopoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/move-node-topo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveVmToRecycleBinRequest calls the generic MoveVmToRecycleBin builder with application/json body
func NewMoveVmToRecycleBinRequest(server string, body MoveVmToRecycleBinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveVmToRecycleBinRequestWithBody(server, "application/json", bodyReader)
}

// NewMoveVmToRecycleBinRequestWithBody generates requests for MoveVmToRecycleBin with any type of body
func NewMoveVmToRecycleBinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/move-vm-to-recycle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewForceShutDownVmRequest calls the generic ForceShutDownVm builder with application/json body
func NewForceShutDownVmRequest(server string, body ForceShutDownVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewForceShutDownVmRequestWithBody(server, "application/json", bodyReader)
}

// NewForceShutDownVmRequestWithBody generates requests for ForceShutDownVm with any type of body
func NewForceShutDownVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/poweroff-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRebuildVmRequest calls the generic RebuildVm builder with application/json body
func NewRebuildVmRequest(server string, body RebuildVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRebuildVmRequestWithBody(server, "application/json", bodyReader)
}

// NewRebuildVmRequestWithBody generates requests for RebuildVm with any type of body
func NewRebuildVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rebuild-vm-from-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRecoverVmFromRecycleBinRequest calls the generic RecoverVmFromRecycleBin builder with application/json body
func NewRecoverVmFromRecycleBinRequest(server string, body RecoverVmFromRecycleBinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRecoverVmFromRecycleBinRequestWithBody(server, "application/json", bodyReader)
}

// NewRecoverVmFromRecycleBinRequestWithBody generates requests for RecoverVmFromRecycleBin with any type of body
func NewRecoverVmFromRecycleBinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recover-vm-from-recycle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveLabelsFromResourcesRequest calls the generic RemoveLabelsFromResources builder with application/json body
func NewRemoveLabelsFromResourcesRequest(server string, body RemoveLabelsFromResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveLabelsFromResourcesRequestWithBody(server, "application/json", bodyReader)
}

// NewRemoveLabelsFromResourcesRequestWithBody generates requests for RemoveLabelsFromResources with any type of body
func NewRemoveLabelsFromResourcesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/remove-labels-from-resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveVmCdRomRequest calls the generic RemoveVmCdRom builder with application/json body
func NewRemoveVmCdRomRequest(server string, body RemoveVmCdRomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveVmCdRomRequestWithBody(server, "application/json", bodyReader)
}

// NewRemoveVmCdRomRequestWithBody generates requests for RemoveVmCdRom with any type of body
func NewRemoveVmCdRomRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/remove-vm-cd-rom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveVmDiskRequest calls the generic RemoveVmDisk builder with application/json body
func NewRemoveVmDiskRequest(server string, body RemoveVmDiskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveVmDiskRequestWithBody(server, "application/json", bodyReader)
}

// NewRemoveVmDiskRequestWithBody generates requests for RemoveVmDisk with any type of body
func NewRemoveVmDiskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/remove-vm-disk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveVmToFolderRequest calls the generic RemoveVmToFolder builder with application/json body
func NewRemoveVmToFolderRequest(server string, body RemoveVmToFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveVmToFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewRemoveVmToFolderRequestWithBody generates requests for RemoveVmToFolder with any type of body
func NewRemoveVmToFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/remove-vm-from-folder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveVmNicRequest calls the generic RemoveVmNic builder with application/json body
func NewRemoveVmNicRequest(server string, body RemoveVmNicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveVmNicRequestWithBody(server, "application/json", bodyReader)
}

// NewRemoveVmNicRequestWithBody generates requests for RemoveVmNic with any type of body
func NewRemoveVmNicRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/remove-vm-nic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveAlertRequest calls the generic ResolveAlert builder with application/json body
func NewResolveAlertRequest(server string, body ResolveAlertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResolveAlertRequestWithBody(server, "application/json", bodyReader)
}

// NewResolveAlertRequestWithBody generates requests for ResolveAlert with any type of body
func NewResolveAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolve-alert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestartVmRequest calls the generic RestartVm builder with application/json body
func NewRestartVmRequest(server string, body RestartVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestartVmRequestWithBody(server, "application/json", bodyReader)
}

// NewRestartVmRequestWithBody generates requests for RestartVm with any type of body
func NewRestartVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restart-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResumeSnapshotPlanRequest calls the generic ResumeSnapshotPlan builder with application/json body
func NewResumeSnapshotPlanRequest(server string, body ResumeSnapshotPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResumeSnapshotPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewResumeSnapshotPlanRequestWithBody generates requests for ResumeSnapshotPlan with any type of body
func NewResumeSnapshotPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resume-snapshot-plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResumeVmRequest calls the generic ResumeVm builder with application/json body
func NewResumeVmRequest(server string, body ResumeVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResumeVmRequestWithBody(server, "application/json", bodyReader)
}

// NewResumeVmRequestWithBody generates requests for ResumeVm with any type of body
func NewResumeVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resume-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateConsistencyGroupSnapshotRequest calls the generic UpdateConsistencyGroupSnapshot builder with application/json body
func NewUpdateConsistencyGroupSnapshotRequest(server string, body UpdateConsistencyGroupSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConsistencyGroupSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateConsistencyGroupSnapshotRequestWithBody generates requests for UpdateConsistencyGroupSnapshot with any type of body
func NewUpdateConsistencyGroupSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rollback-consistency-snapshot-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRollbackIscsiLunFromSnapshotRequest calls the generic RollbackIscsiLunFromSnapshot builder with application/json body
func NewRollbackIscsiLunFromSnapshotRequest(server string, body RollbackIscsiLunFromSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRollbackIscsiLunFromSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewRollbackIscsiLunFromSnapshotRequestWithBody generates requests for RollbackIscsiLunFromSnapshot with any type of body
func NewRollbackIscsiLunFromSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rollback-iscsi-lun-from-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRollbackNvmfNamespaceFromSnapshotRequest calls the generic RollbackNvmfNamespaceFromSnapshot builder with application/json body
func NewRollbackNvmfNamespaceFromSnapshotRequest(server string, body RollbackNvmfNamespaceFromSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRollbackNvmfNamespaceFromSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewRollbackNvmfNamespaceFromSnapshotRequestWithBody generates requests for RollbackNvmfNamespaceFromSnapshot with any type of body
func NewRollbackNvmfNamespaceFromSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rollback-nvmf-namespace-from-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRollbackSnapshotGroupRequest calls the generic RollbackSnapshotGroup builder with application/json body
func NewRollbackSnapshotGroupRequest(server string, body RollbackSnapshotGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRollbackSnapshotGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewRollbackSnapshotGroupRequestWithBody generates requests for RollbackSnapshotGroup with any type of body
func NewRollbackSnapshotGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rollback-snapshot-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRollbackVmRequest calls the generic RollbackVm builder with application/json body
func NewRollbackVmRequest(server string, body RollbackVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRollbackVmRequestWithBody(server, "application/json", bodyReader)
}

// NewRollbackVmRequestWithBody generates requests for RollbackVm with any type of body
func NewRollbackVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rollback-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShutDownVmRequest calls the generic ShutDownVm builder with application/json body
func NewShutDownVmRequest(server string, body ShutDownVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShutDownVmRequestWithBody(server, "application/json", bodyReader)
}

// NewShutDownVmRequestWithBody generates requests for ShutDownVm with any type of body
func NewShutDownVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shutdown-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartVmRequest calls the generic StartVm builder with application/json body
func NewStartVmRequest(server string, body StartVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartVmRequestWithBody(server, "application/json", bodyReader)
}

// NewStartVmRequestWithBody generates requests for StartVm with any type of body
func NewStartVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/start-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSuspendSnapshotPlanRequest calls the generic SuspendSnapshotPlan builder with application/json body
func NewSuspendSnapshotPlanRequest(server string, body SuspendSnapshotPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSuspendSnapshotPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewSuspendSnapshotPlanRequestWithBody generates requests for SuspendSnapshotPlan with any type of body
func NewSuspendSnapshotPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suspend-snapshot-plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSuspendVmRequest calls the generic SuspendVm builder with application/json body
func NewSuspendVmRequest(server string, body SuspendVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSuspendVmRequestWithBody(server, "application/json", bodyReader)
}

// NewSuspendVmRequestWithBody generates requests for SuspendVm with any type of body
func NewSuspendVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suspend-vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTriggerDiskBlinkRequest calls the generic TriggerDiskBlink builder with application/json body
func NewTriggerDiskBlinkRequest(server string, body TriggerDiskBlinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTriggerDiskBlinkRequestWithBody(server, "application/json", bodyReader)
}

// NewTriggerDiskBlinkRequestWithBody generates requests for TriggerDiskBlink with any type of body
func NewTriggerDiskBlinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trigger-disk-blink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnmountDiskRequest calls the generic UnmountDisk builder with application/json body
func NewUnmountDiskRequest(server string, body UnmountDiskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnmountDiskRequestWithBody(server, "application/json", bodyReader)
}

// NewUnmountDiskRequestWithBody generates requests for UnmountDisk with any type of body
func NewUnmountDiskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unmount-disk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnmountUsbDeviceRequest calls the generic UnmountUsbDevice builder with application/json body
func NewUnmountUsbDeviceRequest(server string, body UnmountUsbDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnmountUsbDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewUnmountUsbDeviceRequestWithBody generates requests for UnmountUsbDevice with any type of body
func NewUnmountUsbDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unmount-usb-device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateBrickTopoRequest calls the generic UpdateBrickTopo builder with application/json body
func NewUpdateBrickTopoRequest(server string, body UpdateBrickTopoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBrickTopoRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateBrickTopoRequestWithBody generates requests for UpdateBrickTopo with any type of body
func NewUpdateBrickTopoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-brick-topo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateClusterRequest calls the generic UpdateCluster builder with application/json body
func NewUpdateClusterRequest(server string, body UpdateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateClusterRequestWithBody generates requests for UpdateCluster with any type of body
func NewUpdateClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateClusterLicenseRequest calls the generic UpdateClusterLicense builder with application/json body
func NewUpdateClusterLicenseRequest(server string, body UpdateClusterLicenseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateClusterLicenseRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateClusterLicenseRequestWithBody generates requests for UpdateClusterLicense with any type of body
func NewUpdateClusterLicenseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-cluster-license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateClusterRecycleBinSettingRequest calls the generic UpdateClusterRecycleBinSetting builder with application/json body
func NewUpdateClusterRecycleBinSettingRequest(server string, body UpdateClusterRecycleBinSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateClusterRecycleBinSettingRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateClusterRecycleBinSettingRequestWithBody generates requests for UpdateClusterRecycleBinSetting with any type of body
func NewUpdateClusterRecycleBinSettingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-cluster-recycle-bin-setting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateConsistencyGroupRequest calls the generic UpdateConsistencyGroup builder with application/json body
func NewUpdateConsistencyGroupRequest(server string, body UpdateConsistencyGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConsistencyGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateConsistencyGroupRequestWithBody generates requests for UpdateConsistencyGroup with any type of body
func NewUpdateConsistencyGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-consistency-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCustomizeAlertRuleRequest calls the generic UpdateCustomizeAlertRule builder with application/json body
func NewUpdateCustomizeAlertRuleRequest(server string, body UpdateCustomizeAlertRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomizeAlertRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCustomizeAlertRuleRequestWithBody generates requests for UpdateCustomizeAlertRule with any type of body
func NewUpdateCustomizeAlertRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-customize-alert-rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDatacenterRequest calls the generic UpdateDatacenter builder with application/json body
func NewUpdateDatacenterRequest(server string, body UpdateDatacenterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDatacenterRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDatacenterRequestWithBody generates requests for UpdateDatacenter with any type of body
func NewUpdateDatacenterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-datacenter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateElfImageRequest calls the generic UpdateElfImage builder with application/json body
func NewUpdateElfImageRequest(server string, body UpdateElfImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateElfImageRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateElfImageRequestWithBody generates requests for UpdateElfImage with any type of body
func NewUpdateElfImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-elf-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateEntityFilterRequest calls the generic UpdateEntityFilter builder with application/json body
func NewUpdateEntityFilterRequest(server string, body UpdateEntityFilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEntityFilterRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateEntityFilterRequestWithBody generates requests for UpdateEntityFilter with any type of body
func NewUpdateEntityFilterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-entity-filter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGlobalAlertRuleRequest calls the generic UpdateGlobalAlertRule builder with application/json body
func NewUpdateGlobalAlertRuleRequest(server string, body UpdateGlobalAlertRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGlobalAlertRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateGlobalAlertRuleRequestWithBody generates requests for UpdateGlobalAlertRule with any type of body
func NewUpdateGlobalAlertRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-global-alert-rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGlobalRecycleBinSettingRequest calls the generic UpdateGlobalRecycleBinSetting builder with application/json body
func NewUpdateGlobalRecycleBinSettingRequest(server string, body UpdateGlobalRecycleBinSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGlobalRecycleBinSettingRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateGlobalRecycleBinSettingRequestWithBody generates requests for UpdateGlobalRecycleBinSetting with any type of body
func NewUpdateGlobalRecycleBinSettingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-global-recycle-bin-setting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGraphRequest calls the generic UpdateGraph builder with application/json body
func NewUpdateGraphRequest(server string, body UpdateGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGraphRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateGraphRequestWithBody generates requests for UpdateGraph with any type of body
func NewUpdateGraphRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateHostRequest calls the generic UpdateHost builder with application/json body
func NewUpdateHostRequest(server string, body UpdateHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHostRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateHostRequestWithBody generates requests for UpdateHost with any type of body
func NewUpdateHostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-host")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateIscsiLunRequest calls the generic UpdateIscsiLun builder with application/json body
func NewUpdateIscsiLunRequest(server string, body UpdateIscsiLunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIscsiLunRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateIscsiLunRequestWithBody generates requests for UpdateIscsiLun with any type of body
func NewUpdateIscsiLunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-iscsi-lun")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateIscsiTargetRequest calls the generic UpdateIscsiTarget builder with application/json body
func NewUpdateIscsiTargetRequest(server string, body UpdateIscsiTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIscsiTargetRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateIscsiTargetRequestWithBody generates requests for UpdateIscsiTarget with any type of body
func NewUpdateIscsiTargetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-iscsi-target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateLabelRequest calls the generic UpdateLabel builder with application/json body
func NewUpdateLabelRequest(server string, body UpdateLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLabelRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateLabelRequestWithBody generates requests for UpdateLabel with any type of body
func NewUpdateLabelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-label")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDeployRequest calls the generic UpdateDeploy builder with application/json body
func NewUpdateDeployRequest(server string, body UpdateDeployJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeployRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDeployRequestWithBody generates requests for UpdateDeploy with any type of body
func NewUpdateDeployRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateManagementVlanRequest calls the generic UpdateManagementVlan builder with application/json body
func NewUpdateManagementVlanRequest(server string, body UpdateManagementVlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateManagementVlanRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateManagementVlanRequestWithBody generates requests for UpdateManagementVlan with any type of body
func NewUpdateManagementVlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-management-vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateMigrationVlanRequest calls the generic UpdateMigrationVlan builder with application/json body
func NewUpdateMigrationVlanRequest(server string, body UpdateMigrationVlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMigrationVlanRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateMigrationVlanRequestWithBody generates requests for UpdateMigrationVlan with any type of body
func NewUpdateMigrationVlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-migration-vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNamespaceGroupRequest calls the generic UpdateNamespaceGroup builder with application/json body
func NewUpdateNamespaceGroupRequest(server string, body UpdateNamespaceGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNamespaceGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateNamespaceGroupRequestWithBody generates requests for UpdateNamespaceGroup with any type of body
func NewUpdateNamespaceGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-namespace-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNfsExportRequest calls the generic UpdateNfsExport builder with application/json body
func NewUpdateNfsExportRequest(server string, body UpdateNfsExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNfsExportRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateNfsExportRequestWithBody generates requests for UpdateNfsExport with any type of body
func NewUpdateNfsExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-nfs-export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNicRequest calls the generic UpdateNic builder with application/json body
func NewUpdateNicRequest(server string, body UpdateNicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNicRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateNicRequestWithBody generates requests for UpdateNic with any type of body
func NewUpdateNicRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-nic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNvmfNamespaceRequest calls the generic UpdateNvmfNamespace builder with application/json body
func NewUpdateNvmfNamespaceRequest(server string, body UpdateNvmfNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNvmfNamespaceRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateNvmfNamespaceRequestWithBody generates requests for UpdateNvmfNamespace with any type of body
func NewUpdateNvmfNamespaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-nvmf-namespace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNvmfSubsystemRequest calls the generic UpdateNvmfSubsystem builder with application/json body
func NewUpdateNvmfSubsystemRequest(server string, body UpdateNvmfSubsystemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNvmfSubsystemRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateNvmfSubsystemRequestWithBody generates requests for UpdateNvmfSubsystem with any type of body
func NewUpdateNvmfSubsystemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-nvmf-subsystem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-organization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRackTopoRequest calls the generic UpdateRackTopo builder with application/json body
func NewUpdateRackTopoRequest(server string, body UpdateRackTopoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRackTopoRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateRackTopoRequestWithBody generates requests for UpdateRackTopo with any type of body
func NewUpdateRackTopoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-rack-topo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateReportTemplateRequest calls the generic UpdateReportTemplate builder with application/json body
func NewUpdateReportTemplateRequest(server string, body UpdateReportTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateReportTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateReportTemplateRequestWithBody generates requests for UpdateReportTemplate with any type of body
func NewUpdateReportTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-report-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRoleRequest calls the generic UpdateRole builder with application/json body
func NewUpdateRoleRequest(server string, body UpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateRoleRequestWithBody generates requests for UpdateRole with any type of body
func NewUpdateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSnapshotPlanRequest calls the generic UpdateSnapshotPlan builder with application/json body
func NewUpdateSnapshotPlanRequest(server string, body UpdateSnapshotPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSnapshotPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSnapshotPlanRequestWithBody generates requests for UpdateSnapshotPlan with any type of body
func NewUpdateSnapshotPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-snapshot-plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSnmpTransportRequest calls the generic UpdateSnmpTransport builder with application/json body
func NewUpdateSnmpTransportRequest(server string, body UpdateSnmpTransportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSnmpTransportRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSnmpTransportRequestWithBody generates requests for UpdateSnmpTransport with any type of body
func NewUpdateSnmpTransportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-snmp-transport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSnmpTrapReceiverRequest calls the generic UpdateSnmpTrapReceiver builder with application/json body
func NewUpdateSnmpTrapReceiverRequest(server string, body UpdateSnmpTrapReceiverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSnmpTrapReceiverRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSnmpTrapReceiverRequestWithBody generates requests for UpdateSnmpTrapReceiver with any type of body
func NewUpdateSnmpTrapReceiverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-snmp-trap-receiver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVdsRequest calls the generic UpdateVds builder with application/json body
func NewUpdateVdsRequest(server string, body UpdateVdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVdsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateVdsRequestWithBody generates requests for UpdateVds with any type of body
func NewUpdateVdsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-vds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateViewRequest calls the generic UpdateView builder with application/json body
func NewUpdateViewRequest(server string, body UpdateViewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateViewRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateViewRequestWithBody generates requests for UpdateView with any type of body
func NewUpdateViewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-view")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVmRequest calls the generic UpdateVm builder with application/json body
func NewUpdateVmRequest(server string, body UpdateVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVmRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateVmRequestWithBody generates requests for UpdateVm with any type of body
func NewUpdateVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-vm-basic-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVmDiskRequest calls the generic UpdateVmDisk builder with application/json body
func NewUpdateVmDiskRequest(server string, body UpdateVmDiskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVmDiskRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateVmDiskRequestWithBody generates requests for UpdateVmDisk with any type of body
func NewUpdateVmDiskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-vm-disk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVmFolderRequest calls the generic UpdateVmFolder builder with application/json body
func NewUpdateVmFolderRequest(server string, body UpdateVmFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVmFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateVmFolderRequestWithBody generates requests for UpdateVmFolder with any type of body
func NewUpdateVmFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-vm-folder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVmNicRequest calls the generic UpdateVmNic builder with application/json body
func NewUpdateVmNicRequest(server string, body UpdateVmNicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVmNicRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateVmNicRequestWithBody generates requests for UpdateVmNic with any type of body
func NewUpdateVmNicRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-vm-nic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVmPlacementGroupRequest calls the generic UpdateVmPlacementGroup builder with application/json body
func NewUpdateVmPlacementGroupRequest(server string, body UpdateVmPlacementGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVmPlacementGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateVmPlacementGroupRequestWithBody generates requests for UpdateVmPlacementGroup with any type of body
func NewUpdateVmPlacementGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-vm-placement-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVmTemplateFromVmRequest calls the generic UpdateVmTemplateFromVm builder with application/json body
func NewUpdateVmTemplateFromVmRequest(server string, body UpdateVmTemplateFromVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVmTemplateFromVmRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateVmTemplateFromVmRequestWithBody generates requests for UpdateVmTemplateFromVm with any type of body
func NewUpdateVmTemplateFromVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-vm-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVlanRequest calls the generic UpdateVlan builder with application/json body
func NewUpdateVlanRequest(server string, body UpdateVlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVlanRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateVlanRequestWithBody generates requests for UpdateVlan with any type of body
func NewUpdateVlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update-vm-vlan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateElfImageRequestWithBody generates requests for CreateElfImage with any type of body
func NewCreateElfImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/upload-elf-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddLabelsToResources request with any body
	AddLabelsToResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddLabelsToResourcesResponse, error)

	AddLabelsToResourcesWithResponse(ctx context.Context, body AddLabelsToResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddLabelsToResourcesResponse, error)

	// AddVmCdRom request with any body
	AddVmCdRomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVmCdRomResponse, error)

	AddVmCdRomWithResponse(ctx context.Context, body AddVmCdRomJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVmCdRomResponse, error)

	// AddVmDisk request with any body
	AddVmDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVmDiskResponse, error)

	AddVmDiskWithResponse(ctx context.Context, body AddVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVmDiskResponse, error)

	// AddVmNic request with any body
	AddVmNicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVmNicResponse, error)

	AddVmNicWithResponse(ctx context.Context, body AddVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVmNicResponse, error)

	// AddVmToFolder request with any body
	AddVmToFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVmToFolderResponse, error)

	AddVmToFolderWithResponse(ctx context.Context, body AddVmToFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVmToFolderResponse, error)

	// CloneIscsiLunFromSnapshot request with any body
	CloneIscsiLunFromSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneIscsiLunFromSnapshotResponse, error)

	CloneIscsiLunFromSnapshotWithResponse(ctx context.Context, body CloneIscsiLunFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneIscsiLunFromSnapshotResponse, error)

	// CloneNvmfNamespaceFromSnapshot request with any body
	CloneNvmfNamespaceFromSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneNvmfNamespaceFromSnapshotResponse, error)

	CloneNvmfNamespaceFromSnapshotWithResponse(ctx context.Context, body CloneNvmfNamespaceFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneNvmfNamespaceFromSnapshotResponse, error)

	// CloneSnapshotGroup request with any body
	CloneSnapshotGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneSnapshotGroupResponse, error)

	CloneSnapshotGroupWithResponse(ctx context.Context, body CloneSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneSnapshotGroupResponse, error)

	// CloneVm request with any body
	CloneVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneVmResponse, error)

	CloneVmWithResponse(ctx context.Context, body CloneVmJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneVmResponse, error)

	// CloneVmTemplateFromVm request with any body
	CloneVmTemplateFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneVmTemplateFromVmResponse, error)

	CloneVmTemplateFromVmWithResponse(ctx context.Context, body CloneVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneVmTemplateFromVmResponse, error)

	// ConnectCluster request with any body
	ConnectClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConnectClusterResponse, error)

	ConnectClusterWithResponse(ctx context.Context, body ConnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*ConnectClusterResponse, error)

	// ConvertVmTemplateFromVm request with any body
	ConvertVmTemplateFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertVmTemplateFromVmResponse, error)

	ConvertVmTemplateFromVmWithResponse(ctx context.Context, body ConvertVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertVmTemplateFromVmResponse, error)

	// ConvertVmTemplateToVm request with any body
	ConvertVmTemplateToVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertVmTemplateToVmResponse, error)

	ConvertVmTemplateToVmWithResponse(ctx context.Context, body ConvertVmTemplateToVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertVmTemplateToVmResponse, error)

	// CreateBrickTopo request with any body
	CreateBrickTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBrickTopoResponse, error)

	CreateBrickTopoWithResponse(ctx context.Context, body CreateBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBrickTopoResponse, error)

	// CreateClusterRecycleBinSetting request with any body
	CreateClusterRecycleBinSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterRecycleBinSettingResponse, error)

	CreateClusterRecycleBinSettingWithResponse(ctx context.Context, body CreateClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterRecycleBinSettingResponse, error)

	// CreateConsistencyGroup request with any body
	CreateConsistencyGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConsistencyGroupResponse, error)

	CreateConsistencyGroupWithResponse(ctx context.Context, body CreateConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConsistencyGroupResponse, error)

	// CreateConsistencyGroupSnapshot request with any body
	CreateConsistencyGroupSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConsistencyGroupSnapshotResponse, error)

	CreateConsistencyGroupSnapshotWithResponse(ctx context.Context, body CreateConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConsistencyGroupSnapshotResponse, error)

	// CreateDatacenter request with any body
	CreateDatacenterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatacenterResponse, error)

	CreateDatacenterWithResponse(ctx context.Context, body CreateDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatacenterResponse, error)

	// CreateEntityFilter request with any body
	CreateEntityFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEntityFilterResponse, error)

	CreateEntityFilterWithResponse(ctx context.Context, body CreateEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEntityFilterResponse, error)

	// CreateGraph request with any body
	CreateGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGraphResponse, error)

	CreateGraphWithResponse(ctx context.Context, body CreateGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGraphResponse, error)

	// CreateHost request with any body
	CreateHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHostResponse, error)

	CreateHostWithResponse(ctx context.Context, body CreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHostResponse, error)

	// CreateIscsiLun request with any body
	CreateIscsiLunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIscsiLunResponse, error)

	CreateIscsiLunWithResponse(ctx context.Context, body CreateIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIscsiLunResponse, error)

	// CreateIscsiLunSnapshot request with any body
	CreateIscsiLunSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIscsiLunSnapshotResponse, error)

	CreateIscsiLunSnapshotWithResponse(ctx context.Context, body CreateIscsiLunSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIscsiLunSnapshotResponse, error)

	// CreateIscsiTarget request with any body
	CreateIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIscsiTargetResponse, error)

	CreateIscsiTargetWithResponse(ctx context.Context, body CreateIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIscsiTargetResponse, error)

	// CreateLabel request with any body
	CreateLabelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLabelResponse, error)

	CreateLabelWithResponse(ctx context.Context, body CreateLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLabelResponse, error)

	// CreateNamespaceGroup request with any body
	CreateNamespaceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNamespaceGroupResponse, error)

	CreateNamespaceGroupWithResponse(ctx context.Context, body CreateNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNamespaceGroupResponse, error)

	// CreateNfsExport request with any body
	CreateNfsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNfsExportResponse, error)

	CreateNfsExportWithResponse(ctx context.Context, body CreateNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNfsExportResponse, error)

	// CreateNvmfNamespace request with any body
	CreateNvmfNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNvmfNamespaceResponse, error)

	CreateNvmfNamespaceWithResponse(ctx context.Context, body CreateNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNvmfNamespaceResponse, error)

	// CreateNvmfNamespaceSnapshot request with any body
	CreateNvmfNamespaceSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNvmfNamespaceSnapshotResponse, error)

	CreateNvmfNamespaceSnapshotWithResponse(ctx context.Context, body CreateNvmfNamespaceSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNvmfNamespaceSnapshotResponse, error)

	// CreateNvmfSubsystem request with any body
	CreateNvmfSubsystemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNvmfSubsystemResponse, error)

	CreateNvmfSubsystemWithResponse(ctx context.Context, body CreateNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNvmfSubsystemResponse, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// CreateRackTopo request with any body
	CreateRackTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRackTopoResponse, error)

	CreateRackTopoWithResponse(ctx context.Context, body CreateRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRackTopoResponse, error)

	// CreateReportTemplate request with any body
	CreateReportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReportTemplateResponse, error)

	CreateReportTemplateWithResponse(ctx context.Context, body CreateReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReportTemplateResponse, error)

	// CreateRole request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// CreateSnapshotPlan request with any body
	CreateSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnapshotPlanResponse, error)

	CreateSnapshotPlanWithResponse(ctx context.Context, body CreateSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnapshotPlanResponse, error)

	// CreateSnmpTransport request with any body
	CreateSnmpTransportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnmpTransportResponse, error)

	CreateSnmpTransportWithResponse(ctx context.Context, body CreateSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnmpTransportResponse, error)

	// CreateSnmpTrapReceiver request with any body
	CreateSnmpTrapReceiverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnmpTrapReceiverResponse, error)

	CreateSnmpTrapReceiverWithResponse(ctx context.Context, body CreateSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnmpTrapReceiverResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// CreateVds request with any body
	CreateVdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVdsResponse, error)

	CreateVdsWithResponse(ctx context.Context, body CreateVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVdsResponse, error)

	// CreateVdsWithAccessVlan request with any body
	CreateVdsWithAccessVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVdsWithAccessVlanResponse, error)

	CreateVdsWithAccessVlanWithResponse(ctx context.Context, body CreateVdsWithAccessVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVdsWithAccessVlanResponse, error)

	// CreateVdsWithMigrateVlan request with any body
	CreateVdsWithMigrateVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVdsWithMigrateVlanResponse, error)

	CreateVdsWithMigrateVlanWithResponse(ctx context.Context, body CreateVdsWithMigrateVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVdsWithMigrateVlanResponse, error)

	// CreateView request with any body
	CreateViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateViewResponse, error)

	CreateViewWithResponse(ctx context.Context, body CreateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateViewResponse, error)

	// CreateVm request with any body
	CreateVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmResponse, error)

	CreateVmWithResponse(ctx context.Context, body CreateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmResponse, error)

	// CreateVmFolder request with any body
	CreateVmFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmFolderResponse, error)

	CreateVmFolderWithResponse(ctx context.Context, body CreateVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmFolderResponse, error)

	// CreateVmFromTemplate request with any body
	CreateVmFromTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmFromTemplateResponse, error)

	CreateVmFromTemplateWithResponse(ctx context.Context, body CreateVmFromTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmFromTemplateResponse, error)

	// CreateVmPlacementGroup request with any body
	CreateVmPlacementGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmPlacementGroupResponse, error)

	CreateVmPlacementGroupWithResponse(ctx context.Context, body CreateVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmPlacementGroupResponse, error)

	// CreateVmSnapshot request with any body
	CreateVmSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmSnapshotResponse, error)

	CreateVmSnapshotWithResponse(ctx context.Context, body CreateVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmSnapshotResponse, error)

	// CreateVmVlan request with any body
	CreateVmVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmVlanResponse, error)

	CreateVmVlanWithResponse(ctx context.Context, body CreateVmVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmVlanResponse, error)

	// CreateVmVolume request with any body
	CreateVmVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmVolumeResponse, error)

	CreateVmVolumeWithResponse(ctx context.Context, body CreateVmVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmVolumeResponse, error)

	// DeleteBrickTopo request with any body
	DeleteBrickTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBrickTopoResponse, error)

	DeleteBrickTopoWithResponse(ctx context.Context, body DeleteBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBrickTopoResponse, error)

	// DeleteCluster request with any body
	DeleteClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error)

	DeleteClusterWithResponse(ctx context.Context, body DeleteClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error)

	// DeleteClusterRecycleBinSetting request with any body
	DeleteClusterRecycleBinSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClusterRecycleBinSettingResponse, error)

	DeleteClusterRecycleBinSettingWithResponse(ctx context.Context, body DeleteClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClusterRecycleBinSettingResponse, error)

	// DeleteConsistencyGroup request with any body
	DeleteConsistencyGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConsistencyGroupResponse, error)

	DeleteConsistencyGroupWithResponse(ctx context.Context, body DeleteConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConsistencyGroupResponse, error)

	// DeleteConsistencyGroupSnapshot request with any body
	DeleteConsistencyGroupSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConsistencyGroupSnapshotResponse, error)

	DeleteConsistencyGroupSnapshotWithResponse(ctx context.Context, body DeleteConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConsistencyGroupSnapshotResponse, error)

	// DeleteDatacenter request with any body
	DeleteDatacenterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDatacenterResponse, error)

	DeleteDatacenterWithResponse(ctx context.Context, body DeleteDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDatacenterResponse, error)

	// DeleteElfImage request with any body
	DeleteElfImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteElfImageResponse, error)

	DeleteElfImageWithResponse(ctx context.Context, body DeleteElfImageJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteElfImageResponse, error)

	// DeleteEntityFilter request with any body
	DeleteEntityFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteEntityFilterResponse, error)

	DeleteEntityFilterWithResponse(ctx context.Context, body DeleteEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteEntityFilterResponse, error)

	// DeleteGraph request with any body
	DeleteGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGraphResponse, error)

	DeleteGraphWithResponse(ctx context.Context, body DeleteGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGraphResponse, error)

	// DeleteIscsiLun request with any body
	DeleteIscsiLunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiLunResponse, error)

	DeleteIscsiLunWithResponse(ctx context.Context, body DeleteIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiLunResponse, error)

	// DeleteIscsiLunSnapshot request with any body
	DeleteIscsiLunSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiLunSnapshotResponse, error)

	DeleteIscsiLunSnapshotWithResponse(ctx context.Context, body DeleteIscsiLunSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiLunSnapshotResponse, error)

	// DeleteIscsiTarget request with any body
	DeleteIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetResponse, error)

	DeleteIscsiTargetWithResponse(ctx context.Context, body DeleteIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetResponse, error)

	// DeleteLabel request with any body
	DeleteLabelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteLabelResponse, error)

	DeleteLabelWithResponse(ctx context.Context, body DeleteLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteLabelResponse, error)

	// DeleteNamespaceGroup request with any body
	DeleteNamespaceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNamespaceGroupResponse, error)

	DeleteNamespaceGroupWithResponse(ctx context.Context, body DeleteNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNamespaceGroupResponse, error)

	// DeleteNfsExport request with any body
	DeleteNfsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNfsExportResponse, error)

	DeleteNfsExportWithResponse(ctx context.Context, body DeleteNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNfsExportResponse, error)

	// DeleteNvmfNamespace request with any body
	DeleteNvmfNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNvmfNamespaceResponse, error)

	DeleteNvmfNamespaceWithResponse(ctx context.Context, body DeleteNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNvmfNamespaceResponse, error)

	// DeleteNvmfNamespaceSnapshot request with any body
	DeleteNvmfNamespaceSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNvmfNamespaceSnapshotResponse, error)

	DeleteNvmfNamespaceSnapshotWithResponse(ctx context.Context, body DeleteNvmfNamespaceSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNvmfNamespaceSnapshotResponse, error)

	// DeleteNvmfSubsystem request with any body
	DeleteNvmfSubsystemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNvmfSubsystemResponse, error)

	DeleteNvmfSubsystemWithResponse(ctx context.Context, body DeleteNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNvmfSubsystemResponse, error)

	// DeleteOrganization request with any body
	DeleteOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error)

	DeleteOrganizationWithResponse(ctx context.Context, body DeleteOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error)

	// DeleteRackTopo request with any body
	DeleteRackTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRackTopoResponse, error)

	DeleteRackTopoWithResponse(ctx context.Context, body DeleteRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRackTopoResponse, error)

	// DeleteReportTemplate request with any body
	DeleteReportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteReportTemplateResponse, error)

	DeleteReportTemplateWithResponse(ctx context.Context, body DeleteReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteReportTemplateResponse, error)

	// DeleteRole request with any body
	DeleteRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	DeleteRoleWithResponse(ctx context.Context, body DeleteRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// DeleteSnapshotGroup request with any body
	DeleteSnapshotGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSnapshotGroupResponse, error)

	DeleteSnapshotGroupWithResponse(ctx context.Context, body DeleteSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSnapshotGroupResponse, error)

	// DeleteSnapshotPlan request with any body
	DeleteSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSnapshotPlanResponse, error)

	DeleteSnapshotPlanWithResponse(ctx context.Context, body DeleteSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSnapshotPlanResponse, error)

	// DeleteSnmpTransport request with any body
	DeleteSnmpTransportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSnmpTransportResponse, error)

	DeleteSnmpTransportWithResponse(ctx context.Context, body DeleteSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSnmpTransportResponse, error)

	// DeleteSnmpTrapReceiver request with any body
	DeleteSnmpTrapReceiverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSnmpTrapReceiverResponse, error)

	DeleteSnmpTrapReceiverWithResponse(ctx context.Context, body DeleteSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSnmpTrapReceiverResponse, error)

	// DeleteUser request with any body
	DeleteUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	DeleteUserWithResponse(ctx context.Context, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// DeleteVds request with any body
	DeleteVdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVdsResponse, error)

	DeleteVdsWithResponse(ctx context.Context, body DeleteVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVdsResponse, error)

	// DeleteView request with any body
	DeleteViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteViewResponse, error)

	DeleteViewWithResponse(ctx context.Context, body DeleteViewJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteViewResponse, error)

	// DeleteVm request with any body
	DeleteVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmResponse, error)

	DeleteVmWithResponse(ctx context.Context, body DeleteVmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmResponse, error)

	// DeleteVmFolder request with any body
	DeleteVmFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmFolderResponse, error)

	DeleteVmFolderWithResponse(ctx context.Context, body DeleteVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmFolderResponse, error)

	// DeleteVmPlacementGroup request with any body
	DeleteVmPlacementGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmPlacementGroupResponse, error)

	DeleteVmPlacementGroupWithResponse(ctx context.Context, body DeleteVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmPlacementGroupResponse, error)

	// DeleteVmSnapshot request with any body
	DeleteVmSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmSnapshotResponse, error)

	DeleteVmSnapshotWithResponse(ctx context.Context, body DeleteVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmSnapshotResponse, error)

	// DeleteVmTemplateFromVm request with any body
	DeleteVmTemplateFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmTemplateFromVmResponse, error)

	DeleteVmTemplateFromVmWithResponse(ctx context.Context, body DeleteVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmTemplateFromVmResponse, error)

	// DeleteVlan request with any body
	DeleteVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVlanResponse, error)

	DeleteVlanWithResponse(ctx context.Context, body DeleteVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVlanResponse, error)

	// DeleteVmVolumeFromVm request with any body
	DeleteVmVolumeFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmVolumeFromVmResponse, error)

	DeleteVmVolumeFromVmWithResponse(ctx context.Context, body DeleteVmVolumeFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmVolumeFromVmResponse, error)

	// ExecuteSnapshotPlan request with any body
	ExecuteSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSnapshotPlanResponse, error)

	ExecuteSnapshotPlanWithResponse(ctx context.Context, body ExecuteSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSnapshotPlanResponse, error)

	// ForceRestartVm request with any body
	ForceRestartVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ForceRestartVmResponse, error)

	ForceRestartVmWithResponse(ctx context.Context, body ForceRestartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ForceRestartVmResponse, error)

	// GenerateFromReportTemplate request with any body
	GenerateFromReportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateFromReportTemplateResponse, error)

	GenerateFromReportTemplateWithResponse(ctx context.Context, body GenerateFromReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateFromReportTemplateResponse, error)

	// GetAlertNotifiers request with any body
	GetAlertNotifiersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertNotifiersResponse, error)

	GetAlertNotifiersWithResponse(ctx context.Context, body GetAlertNotifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertNotifiersResponse, error)

	// GetAlertNotifiersConnection request with any body
	GetAlertNotifiersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertNotifiersConnectionResponse, error)

	GetAlertNotifiersConnectionWithResponse(ctx context.Context, body GetAlertNotifiersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertNotifiersConnectionResponse, error)

	// GetAlertRules request with any body
	GetAlertRulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertRulesResponse, error)

	GetAlertRulesWithResponse(ctx context.Context, body GetAlertRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertRulesResponse, error)

	// GetAlertRulesConnection request with any body
	GetAlertRulesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertRulesConnectionResponse, error)

	GetAlertRulesConnectionWithResponse(ctx context.Context, body GetAlertRulesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertRulesConnectionResponse, error)

	// GetAlerts request with any body
	GetAlertsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertsResponse, error)

	GetAlertsWithResponse(ctx context.Context, body GetAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertsResponse, error)

	// GetAlertsConnection request with any body
	GetAlertsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertsConnectionResponse, error)

	GetAlertsConnectionWithResponse(ctx context.Context, body GetAlertsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertsConnectionResponse, error)

	// GetApplications request with any body
	GetApplicationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error)

	GetApplicationsWithResponse(ctx context.Context, body GetApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error)

	// GetApplicationsConnection request with any body
	GetApplicationsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApplicationsConnectionResponse, error)

	GetApplicationsConnectionWithResponse(ctx context.Context, body GetApplicationsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApplicationsConnectionResponse, error)

	// GetBrickTopoes request with any body
	GetBrickTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBrickTopoesResponse, error)

	GetBrickTopoesWithResponse(ctx context.Context, body GetBrickTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBrickTopoesResponse, error)

	// GetBrickTopoesConnection request with any body
	GetBrickTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBrickTopoesConnectionResponse, error)

	GetBrickTopoesConnectionWithResponse(ctx context.Context, body GetBrickTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBrickTopoesConnectionResponse, error)

	// GetClusterImages request with any body
	GetClusterImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterImagesResponse, error)

	GetClusterImagesWithResponse(ctx context.Context, body GetClusterImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterImagesResponse, error)

	// GetClusterImagesConnection request with any body
	GetClusterImagesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterImagesConnectionResponse, error)

	GetClusterImagesConnectionWithResponse(ctx context.Context, body GetClusterImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterImagesConnectionResponse, error)

	// GetClusterSettingses request with any body
	GetClusterSettingsesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterSettingsesResponse, error)

	GetClusterSettingsesWithResponse(ctx context.Context, body GetClusterSettingsesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterSettingsesResponse, error)

	// GetClusterSettingsesConnection request with any body
	GetClusterSettingsesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterSettingsesConnectionResponse, error)

	GetClusterSettingsesConnectionWithResponse(ctx context.Context, body GetClusterSettingsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterSettingsesConnectionResponse, error)

	// GetClusterTopoes request with any body
	GetClusterTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterTopoesResponse, error)

	GetClusterTopoesWithResponse(ctx context.Context, body GetClusterTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterTopoesResponse, error)

	// GetClusterTopoesConnection request with any body
	GetClusterTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterTopoesConnectionResponse, error)

	GetClusterTopoesConnectionWithResponse(ctx context.Context, body GetClusterTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterTopoesConnectionResponse, error)

	// GetClusterUpgradeHistories request with any body
	GetClusterUpgradeHistoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterUpgradeHistoriesResponse, error)

	GetClusterUpgradeHistoriesWithResponse(ctx context.Context, body GetClusterUpgradeHistoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterUpgradeHistoriesResponse, error)

	// GetClusterUpgradeHistoriesConnection request with any body
	GetClusterUpgradeHistoriesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterUpgradeHistoriesConnectionResponse, error)

	GetClusterUpgradeHistoriesConnectionWithResponse(ctx context.Context, body GetClusterUpgradeHistoriesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterUpgradeHistoriesConnectionResponse, error)

	// GetClusters request with any body
	GetClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClustersResponse, error)

	GetClustersWithResponse(ctx context.Context, body GetClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClustersResponse, error)

	// GetClustersConnection request with any body
	GetClustersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClustersConnectionResponse, error)

	GetClustersConnectionWithResponse(ctx context.Context, body GetClustersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClustersConnectionResponse, error)

	// GetConsistencyGroupSnapshots request with any body
	GetConsistencyGroupSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConsistencyGroupSnapshotsResponse, error)

	GetConsistencyGroupSnapshotsWithResponse(ctx context.Context, body GetConsistencyGroupSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConsistencyGroupSnapshotsResponse, error)

	// GetConsistencyGroupSnapshotsConnection request with any body
	GetConsistencyGroupSnapshotsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConsistencyGroupSnapshotsConnectionResponse, error)

	GetConsistencyGroupSnapshotsConnectionWithResponse(ctx context.Context, body GetConsistencyGroupSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConsistencyGroupSnapshotsConnectionResponse, error)

	// GetConsistencyGroups request with any body
	GetConsistencyGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConsistencyGroupsResponse, error)

	GetConsistencyGroupsWithResponse(ctx context.Context, body GetConsistencyGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConsistencyGroupsResponse, error)

	// GetConsistencyGroupsConnection request with any body
	GetConsistencyGroupsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConsistencyGroupsConnectionResponse, error)

	GetConsistencyGroupsConnectionWithResponse(ctx context.Context, body GetConsistencyGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConsistencyGroupsConnectionResponse, error)

	// GetDatacenters request with any body
	GetDatacentersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDatacentersResponse, error)

	GetDatacentersWithResponse(ctx context.Context, body GetDatacentersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDatacentersResponse, error)

	// GetDatacentersConnection request with any body
	GetDatacentersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDatacentersConnectionResponse, error)

	GetDatacentersConnectionWithResponse(ctx context.Context, body GetDatacentersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDatacentersConnectionResponse, error)

	// GetDeploys request with any body
	GetDeploysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDeploysResponse, error)

	GetDeploysWithResponse(ctx context.Context, body GetDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDeploysResponse, error)

	// GetDeploysConnection request with any body
	GetDeploysConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDeploysConnectionResponse, error)

	GetDeploysConnectionWithResponse(ctx context.Context, body GetDeploysConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDeploysConnectionResponse, error)

	// GetDiscoverHosts request with any body
	GetDiscoverHostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDiscoverHostsResponse, error)

	GetDiscoverHostsWithResponse(ctx context.Context, body GetDiscoverHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDiscoverHostsResponse, error)

	// GetDisks request with any body
	GetDisksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDisksResponse, error)

	GetDisksWithResponse(ctx context.Context, body GetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDisksResponse, error)

	// GetDisksConnection request with any body
	GetDisksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDisksConnectionResponse, error)

	GetDisksConnectionWithResponse(ctx context.Context, body GetDisksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDisksConnectionResponse, error)

	// GetElfDataStores request with any body
	GetElfDataStoresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfDataStoresResponse, error)

	GetElfDataStoresWithResponse(ctx context.Context, body GetElfDataStoresJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfDataStoresResponse, error)

	// GetElfDataStoresConnection request with any body
	GetElfDataStoresConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfDataStoresConnectionResponse, error)

	GetElfDataStoresConnectionWithResponse(ctx context.Context, body GetElfDataStoresConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfDataStoresConnectionResponse, error)

	// GetElfImages request with any body
	GetElfImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfImagesResponse, error)

	GetElfImagesWithResponse(ctx context.Context, body GetElfImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfImagesResponse, error)

	// GetElfImagesConnection request with any body
	GetElfImagesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfImagesConnectionResponse, error)

	GetElfImagesConnectionWithResponse(ctx context.Context, body GetElfImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfImagesConnectionResponse, error)

	// GetElfStoragePolicies request with any body
	GetElfStoragePoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfStoragePoliciesResponse, error)

	GetElfStoragePoliciesWithResponse(ctx context.Context, body GetElfStoragePoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfStoragePoliciesResponse, error)

	// GetElfStoragePoliciesConnection request with any body
	GetElfStoragePoliciesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfStoragePoliciesConnectionResponse, error)

	GetElfStoragePoliciesConnectionWithResponse(ctx context.Context, body GetElfStoragePoliciesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfStoragePoliciesConnectionResponse, error)

	// GetEntityFilters request with any body
	GetEntityFiltersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEntityFiltersResponse, error)

	GetEntityFiltersWithResponse(ctx context.Context, body GetEntityFiltersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEntityFiltersResponse, error)

	// GetEntityFiltersConnection request with any body
	GetEntityFiltersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEntityFiltersConnectionResponse, error)

	GetEntityFiltersConnectionWithResponse(ctx context.Context, body GetEntityFiltersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEntityFiltersConnectionResponse, error)

	// GetGlobalAlertRules request with any body
	GetGlobalAlertRulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGlobalAlertRulesResponse, error)

	GetGlobalAlertRulesWithResponse(ctx context.Context, body GetGlobalAlertRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGlobalAlertRulesResponse, error)

	// GetGlobalAlertRulesConnection request with any body
	GetGlobalAlertRulesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGlobalAlertRulesConnectionResponse, error)

	GetGlobalAlertRulesConnectionWithResponse(ctx context.Context, body GetGlobalAlertRulesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGlobalAlertRulesConnectionResponse, error)

	// GetGlobalSettingses request with any body
	GetGlobalSettingsesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGlobalSettingsesResponse, error)

	GetGlobalSettingsesWithResponse(ctx context.Context, body GetGlobalSettingsesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGlobalSettingsesResponse, error)

	// GetGlobalSettingsesConnection request with any body
	GetGlobalSettingsesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGlobalSettingsesConnectionResponse, error)

	GetGlobalSettingsesConnectionWithResponse(ctx context.Context, body GetGlobalSettingsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGlobalSettingsesConnectionResponse, error)

	// GetGraphs request with any body
	GetGraphsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGraphsResponse, error)

	GetGraphsWithResponse(ctx context.Context, body GetGraphsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGraphsResponse, error)

	// GetGraphsConnection request with any body
	GetGraphsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGraphsConnectionResponse, error)

	GetGraphsConnectionWithResponse(ctx context.Context, body GetGraphsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGraphsConnectionResponse, error)

	// GetHosts request with any body
	GetHostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHostsResponse, error)

	GetHostsWithResponse(ctx context.Context, body GetHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHostsResponse, error)

	// GetHostsConnection request with any body
	GetHostsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHostsConnectionResponse, error)

	GetHostsConnectionWithResponse(ctx context.Context, body GetHostsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHostsConnectionResponse, error)

	// GetImagesConnector request with any body
	GetImagesConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetImagesConnectorResponse, error)

	GetImagesConnectorWithResponse(ctx context.Context, body GetImagesConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*GetImagesConnectorResponse, error)

	// GetIpmis request with any body
	GetIpmisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIpmisResponse, error)

	GetIpmisWithResponse(ctx context.Context, body GetIpmisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIpmisResponse, error)

	// GetIscsiConnections request with any body
	GetIscsiConnectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiConnectionsResponse, error)

	GetIscsiConnectionsWithResponse(ctx context.Context, body GetIscsiConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiConnectionsResponse, error)

	// GetIscsiConnectionsConnection request with any body
	GetIscsiConnectionsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiConnectionsConnectionResponse, error)

	GetIscsiConnectionsConnectionWithResponse(ctx context.Context, body GetIscsiConnectionsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiConnectionsConnectionResponse, error)

	// GetIscsiLunSnapshots request with any body
	GetIscsiLunSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiLunSnapshotsResponse, error)

	GetIscsiLunSnapshotsWithResponse(ctx context.Context, body GetIscsiLunSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiLunSnapshotsResponse, error)

	// GetIscsiLunSnapshotsConnection request with any body
	GetIscsiLunSnapshotsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiLunSnapshotsConnectionResponse, error)

	GetIscsiLunSnapshotsConnectionWithResponse(ctx context.Context, body GetIscsiLunSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiLunSnapshotsConnectionResponse, error)

	// GetIscsiLuns request with any body
	GetIscsiLunsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiLunsResponse, error)

	GetIscsiLunsWithResponse(ctx context.Context, body GetIscsiLunsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiLunsResponse, error)

	// GetIscsiLunsConnection request with any body
	GetIscsiLunsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiLunsConnectionResponse, error)

	GetIscsiLunsConnectionWithResponse(ctx context.Context, body GetIscsiLunsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiLunsConnectionResponse, error)

	// GetIscsiTargets request with any body
	GetIscsiTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiTargetsResponse, error)

	GetIscsiTargetsWithResponse(ctx context.Context, body GetIscsiTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiTargetsResponse, error)

	// GetIscsiTargetsConnection request with any body
	GetIscsiTargetsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiTargetsConnectionResponse, error)

	GetIscsiTargetsConnectionWithResponse(ctx context.Context, body GetIscsiTargetsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiTargetsConnectionResponse, error)

	// GetLabels request with any body
	GetLabelsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLabelsResponse, error)

	GetLabelsWithResponse(ctx context.Context, body GetLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLabelsResponse, error)

	// GetLabelsConnection request with any body
	GetLabelsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLabelsConnectionResponse, error)

	GetLabelsConnectionWithResponse(ctx context.Context, body GetLabelsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLabelsConnectionResponse, error)

	// GetLicenses request with any body
	GetLicensesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLicensesResponse, error)

	GetLicensesWithResponse(ctx context.Context, body GetLicensesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLicensesResponse, error)

	// GetLicensesConnection request with any body
	GetLicensesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLicensesConnectionResponse, error)

	GetLicensesConnectionWithResponse(ctx context.Context, body GetLicensesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLicensesConnectionResponse, error)

	// GetLogCollections request with any body
	GetLogCollectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLogCollectionsResponse, error)

	GetLogCollectionsWithResponse(ctx context.Context, body GetLogCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLogCollectionsResponse, error)

	// GetLogCollectionsConnection request with any body
	GetLogCollectionsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLogCollectionsConnectionResponse, error)

	GetLogCollectionsConnectionWithResponse(ctx context.Context, body GetLogCollectionsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLogCollectionsConnectionResponse, error)

	// GetMigrateTransmitters request with any body
	GetMigrateTransmittersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetMigrateTransmittersResponse, error)

	GetMigrateTransmittersWithResponse(ctx context.Context, body GetMigrateTransmittersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetMigrateTransmittersResponse, error)

	// GetMigrateTransmittersConnection request with any body
	GetMigrateTransmittersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetMigrateTransmittersConnectionResponse, error)

	GetMigrateTransmittersConnectionWithResponse(ctx context.Context, body GetMigrateTransmittersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetMigrateTransmittersConnectionResponse, error)

	// GetNamespaceGroups request with any body
	GetNamespaceGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNamespaceGroupsResponse, error)

	GetNamespaceGroupsWithResponse(ctx context.Context, body GetNamespaceGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNamespaceGroupsResponse, error)

	// GetNamespaceGroupsConnection request with any body
	GetNamespaceGroupsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNamespaceGroupsConnectionResponse, error)

	GetNamespaceGroupsConnectionWithResponse(ctx context.Context, body GetNamespaceGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNamespaceGroupsConnectionResponse, error)

	// GetNfsExports request with any body
	GetNfsExportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNfsExportsResponse, error)

	GetNfsExportsWithResponse(ctx context.Context, body GetNfsExportsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNfsExportsResponse, error)

	// GetNfsExportsConnection request with any body
	GetNfsExportsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNfsExportsConnectionResponse, error)

	GetNfsExportsConnectionWithResponse(ctx context.Context, body GetNfsExportsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNfsExportsConnectionResponse, error)

	// GetNfsInodes request with any body
	GetNfsInodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNfsInodesResponse, error)

	GetNfsInodesWithResponse(ctx context.Context, body GetNfsInodesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNfsInodesResponse, error)

	// GetNfsInodesConnection request with any body
	GetNfsInodesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNfsInodesConnectionResponse, error)

	GetNfsInodesConnectionWithResponse(ctx context.Context, body GetNfsInodesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNfsInodesConnectionResponse, error)

	// GetNics request with any body
	GetNicsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNicsResponse, error)

	GetNicsWithResponse(ctx context.Context, body GetNicsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNicsResponse, error)

	// GetNicsConnection request with any body
	GetNicsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNicsConnectionResponse, error)

	GetNicsConnectionWithResponse(ctx context.Context, body GetNicsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNicsConnectionResponse, error)

	// GetNodeTopoes request with any body
	GetNodeTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNodeTopoesResponse, error)

	GetNodeTopoesWithResponse(ctx context.Context, body GetNodeTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNodeTopoesResponse, error)

	// GetNodeTopoesConnection request with any body
	GetNodeTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNodeTopoesConnectionResponse, error)

	GetNodeTopoesConnectionWithResponse(ctx context.Context, body GetNodeTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNodeTopoesConnectionResponse, error)

	// GetNvmfNamespaceSnapshots request with any body
	GetNvmfNamespaceSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfNamespaceSnapshotsResponse, error)

	GetNvmfNamespaceSnapshotsWithResponse(ctx context.Context, body GetNvmfNamespaceSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfNamespaceSnapshotsResponse, error)

	// GetNvmfNamespaceSnapshotsConnection request with any body
	GetNvmfNamespaceSnapshotsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfNamespaceSnapshotsConnectionResponse, error)

	GetNvmfNamespaceSnapshotsConnectionWithResponse(ctx context.Context, body GetNvmfNamespaceSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfNamespaceSnapshotsConnectionResponse, error)

	// GetNvmfNamespaces request with any body
	GetNvmfNamespacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfNamespacesResponse, error)

	GetNvmfNamespacesWithResponse(ctx context.Context, body GetNvmfNamespacesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfNamespacesResponse, error)

	// GetNvmfNamespacesConnection request with any body
	GetNvmfNamespacesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfNamespacesConnectionResponse, error)

	GetNvmfNamespacesConnectionWithResponse(ctx context.Context, body GetNvmfNamespacesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfNamespacesConnectionResponse, error)

	// GetNvmfSubsystems request with any body
	GetNvmfSubsystemsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfSubsystemsResponse, error)

	GetNvmfSubsystemsWithResponse(ctx context.Context, body GetNvmfSubsystemsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfSubsystemsResponse, error)

	// GetNvmfSubsystemsConnection request with any body
	GetNvmfSubsystemsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfSubsystemsConnectionResponse, error)

	GetNvmfSubsystemsConnectionWithResponse(ctx context.Context, body GetNvmfSubsystemsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfSubsystemsConnectionResponse, error)

	// GetOrganizations request with any body
	GetOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	GetOrganizationsWithResponse(ctx context.Context, body GetOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// GetOrganizationsConnection request with any body
	GetOrganizationsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrganizationsConnectionResponse, error)

	GetOrganizationsConnectionWithResponse(ctx context.Context, body GetOrganizationsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrganizationsConnectionResponse, error)

	// GetPmemDimms request with any body
	GetPmemDimmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPmemDimmsResponse, error)

	GetPmemDimmsWithResponse(ctx context.Context, body GetPmemDimmsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPmemDimmsResponse, error)

	// GetPmemDimmsConnection request with any body
	GetPmemDimmsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPmemDimmsConnectionResponse, error)

	GetPmemDimmsConnectionWithResponse(ctx context.Context, body GetPmemDimmsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPmemDimmsConnectionResponse, error)

	// GetRackTopoes request with any body
	GetRackTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRackTopoesResponse, error)

	GetRackTopoesWithResponse(ctx context.Context, body GetRackTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRackTopoesResponse, error)

	// GetRackTopoesConnection request with any body
	GetRackTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRackTopoesConnectionResponse, error)

	GetRackTopoesConnectionWithResponse(ctx context.Context, body GetRackTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRackTopoesConnectionResponse, error)

	// GetReportTasks request with any body
	GetReportTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReportTasksResponse, error)

	GetReportTasksWithResponse(ctx context.Context, body GetReportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReportTasksResponse, error)

	// GetReportTasksConnection request with any body
	GetReportTasksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReportTasksConnectionResponse, error)

	GetReportTasksConnectionWithResponse(ctx context.Context, body GetReportTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReportTasksConnectionResponse, error)

	// GetReportTemplates request with any body
	GetReportTemplatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReportTemplatesResponse, error)

	GetReportTemplatesWithResponse(ctx context.Context, body GetReportTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReportTemplatesResponse, error)

	// GetReportTemplatesConnection request with any body
	GetReportTemplatesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReportTemplatesConnectionResponse, error)

	GetReportTemplatesConnectionWithResponse(ctx context.Context, body GetReportTemplatesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReportTemplatesConnectionResponse, error)

	// GetSnapshotGroups request with any body
	GetSnapshotGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotGroupsResponse, error)

	GetSnapshotGroupsWithResponse(ctx context.Context, body GetSnapshotGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotGroupsResponse, error)

	// GetSnapshotGroupsConnection request with any body
	GetSnapshotGroupsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotGroupsConnectionResponse, error)

	GetSnapshotGroupsConnectionWithResponse(ctx context.Context, body GetSnapshotGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotGroupsConnectionResponse, error)

	// GetSnapshotPlanTasks request with any body
	GetSnapshotPlanTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotPlanTasksResponse, error)

	GetSnapshotPlanTasksWithResponse(ctx context.Context, body GetSnapshotPlanTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotPlanTasksResponse, error)

	// GetSnapshotPlanTasksConnection request with any body
	GetSnapshotPlanTasksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotPlanTasksConnectionResponse, error)

	GetSnapshotPlanTasksConnectionWithResponse(ctx context.Context, body GetSnapshotPlanTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotPlanTasksConnectionResponse, error)

	// GetSnapshotPlans request with any body
	GetSnapshotPlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotPlansResponse, error)

	GetSnapshotPlansWithResponse(ctx context.Context, body GetSnapshotPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotPlansResponse, error)

	// GetSnapshotPlansConnection request with any body
	GetSnapshotPlansConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotPlansConnectionResponse, error)

	GetSnapshotPlansConnectionWithResponse(ctx context.Context, body GetSnapshotPlansConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotPlansConnectionResponse, error)

	// GetSnmpTransports request with any body
	GetSnmpTransportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnmpTransportsResponse, error)

	GetSnmpTransportsWithResponse(ctx context.Context, body GetSnmpTransportsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnmpTransportsResponse, error)

	// GetSnmpTransportsConnection request with any body
	GetSnmpTransportsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnmpTransportsConnectionResponse, error)

	GetSnmpTransportsConnectionWithResponse(ctx context.Context, body GetSnmpTransportsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnmpTransportsConnectionResponse, error)

	// GetSnmpTrapReceivers request with any body
	GetSnmpTrapReceiversWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnmpTrapReceiversResponse, error)

	GetSnmpTrapReceiversWithResponse(ctx context.Context, body GetSnmpTrapReceiversJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnmpTrapReceiversResponse, error)

	// GetSnmpTrapReceiversConnection request with any body
	GetSnmpTrapReceiversConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnmpTrapReceiversConnectionResponse, error)

	GetSnmpTrapReceiversConnectionWithResponse(ctx context.Context, body GetSnmpTrapReceiversConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnmpTrapReceiversConnectionResponse, error)

	// GetStoragePoliciesConnector request with any body
	GetStoragePoliciesConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStoragePoliciesConnectorResponse, error)

	GetStoragePoliciesConnectorWithResponse(ctx context.Context, body GetStoragePoliciesConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStoragePoliciesConnectorResponse, error)

	// GetSvtImages request with any body
	GetSvtImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSvtImagesResponse, error)

	GetSvtImagesWithResponse(ctx context.Context, body GetSvtImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSvtImagesResponse, error)

	// GetSvtImagesConnection request with any body
	GetSvtImagesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSvtImagesConnectionResponse, error)

	GetSvtImagesConnectionWithResponse(ctx context.Context, body GetSvtImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSvtImagesConnectionResponse, error)

	// GetSystemAuditLogs request with any body
	GetSystemAuditLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSystemAuditLogsResponse, error)

	GetSystemAuditLogsWithResponse(ctx context.Context, body GetSystemAuditLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSystemAuditLogsResponse, error)

	// GetSystemAuditLogsConnection request with any body
	GetSystemAuditLogsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSystemAuditLogsConnectionResponse, error)

	GetSystemAuditLogsConnectionWithResponse(ctx context.Context, body GetSystemAuditLogsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSystemAuditLogsConnectionResponse, error)

	// GetTasks request with any body
	GetTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTasksResponse, error)

	GetTasksWithResponse(ctx context.Context, body GetTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTasksResponse, error)

	// GetTasksConnection request with any body
	GetTasksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTasksConnectionResponse, error)

	GetTasksConnectionWithResponse(ctx context.Context, body GetTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTasksConnectionResponse, error)

	// GetUploadTasks request with any body
	GetUploadTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUploadTasksResponse, error)

	GetUploadTasksWithResponse(ctx context.Context, body GetUploadTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUploadTasksResponse, error)

	// GetUploadTasksConnection request with any body
	GetUploadTasksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUploadTasksConnectionResponse, error)

	GetUploadTasksConnectionWithResponse(ctx context.Context, body GetUploadTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUploadTasksConnectionResponse, error)

	// GetUsbDevices request with any body
	GetUsbDevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsbDevicesResponse, error)

	GetUsbDevicesWithResponse(ctx context.Context, body GetUsbDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsbDevicesResponse, error)

	// GetUsbDevicesConnection request with any body
	GetUsbDevicesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsbDevicesConnectionResponse, error)

	GetUsbDevicesConnectionWithResponse(ctx context.Context, body GetUsbDevicesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsbDevicesConnectionResponse, error)

	// GetUserAuditLogs request with any body
	GetUserAuditLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserAuditLogsResponse, error)

	GetUserAuditLogsWithResponse(ctx context.Context, body GetUserAuditLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserAuditLogsResponse, error)

	// GetUserAuditLogsConnection request with any body
	GetUserAuditLogsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserAuditLogsConnectionResponse, error)

	GetUserAuditLogsConnectionWithResponse(ctx context.Context, body GetUserAuditLogsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserAuditLogsConnectionResponse, error)

	// GetUserRoleNexts request with any body
	GetUserRoleNextsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserRoleNextsResponse, error)

	GetUserRoleNextsWithResponse(ctx context.Context, body GetUserRoleNextsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserRoleNextsResponse, error)

	// GetUserRoleNextsConnection request with any body
	GetUserRoleNextsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserRoleNextsConnectionResponse, error)

	GetUserRoleNextsConnectionWithResponse(ctx context.Context, body GetUserRoleNextsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserRoleNextsConnectionResponse, error)

	// GetUsers request with any body
	GetUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	GetUsersWithResponse(ctx context.Context, body GetUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUsersConnection request with any body
	GetUsersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersConnectionResponse, error)

	GetUsersConnectionWithResponse(ctx context.Context, body GetUsersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersConnectionResponse, error)

	// GetVcenterAccounts request with any body
	GetVcenterAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVcenterAccountsResponse, error)

	GetVcenterAccountsWithResponse(ctx context.Context, body GetVcenterAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVcenterAccountsResponse, error)

	// GetVcenterAccountsConnection request with any body
	GetVcenterAccountsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVcenterAccountsConnectionResponse, error)

	GetVcenterAccountsConnectionWithResponse(ctx context.Context, body GetVcenterAccountsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVcenterAccountsConnectionResponse, error)

	// GetVdses request with any body
	GetVdsesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVdsesResponse, error)

	GetVdsesWithResponse(ctx context.Context, body GetVdsesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVdsesResponse, error)

	// GetVdsesConnection request with any body
	GetVdsesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVdsesConnectionResponse, error)

	GetVdsesConnectionWithResponse(ctx context.Context, body GetVdsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVdsesConnectionResponse, error)

	// GetViews request with any body
	GetViewsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetViewsResponse, error)

	GetViewsWithResponse(ctx context.Context, body GetViewsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetViewsResponse, error)

	// GetViewsConnection request with any body
	GetViewsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetViewsConnectionResponse, error)

	GetViewsConnectionWithResponse(ctx context.Context, body GetViewsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetViewsConnectionResponse, error)

	// GetVlans request with any body
	GetVlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVlansResponse, error)

	GetVlansWithResponse(ctx context.Context, body GetVlansJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVlansResponse, error)

	// GetVlansConnection request with any body
	GetVlansConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVlansConnectionResponse, error)

	GetVlansConnectionWithResponse(ctx context.Context, body GetVlansConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVlansConnectionResponse, error)

	// GetVmDisks request with any body
	GetVmDisksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmDisksResponse, error)

	GetVmDisksWithResponse(ctx context.Context, body GetVmDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmDisksResponse, error)

	// GetVmDisksConnection request with any body
	GetVmDisksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmDisksConnectionResponse, error)

	GetVmDisksConnectionWithResponse(ctx context.Context, body GetVmDisksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmDisksConnectionResponse, error)

	// GetVmEntityFilterResults request with any body
	GetVmEntityFilterResultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmEntityFilterResultsResponse, error)

	GetVmEntityFilterResultsWithResponse(ctx context.Context, body GetVmEntityFilterResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmEntityFilterResultsResponse, error)

	// GetVmEntityFilterResultsConnection request with any body
	GetVmEntityFilterResultsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmEntityFilterResultsConnectionResponse, error)

	GetVmEntityFilterResultsConnectionWithResponse(ctx context.Context, body GetVmEntityFilterResultsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmEntityFilterResultsConnectionResponse, error)

	// GetVmFolders request with any body
	GetVmFoldersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmFoldersResponse, error)

	GetVmFoldersWithResponse(ctx context.Context, body GetVmFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmFoldersResponse, error)

	// GetVmFoldersConnection request with any body
	GetVmFoldersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmFoldersConnectionResponse, error)

	GetVmFoldersConnectionWithResponse(ctx context.Context, body GetVmFoldersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmFoldersConnectionResponse, error)

	// GetVmNics request with any body
	GetVmNicsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmNicsResponse, error)

	GetVmNicsWithResponse(ctx context.Context, body GetVmNicsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmNicsResponse, error)

	// GetVmNicsConnection request with any body
	GetVmNicsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmNicsConnectionResponse, error)

	GetVmNicsConnectionWithResponse(ctx context.Context, body GetVmNicsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmNicsConnectionResponse, error)

	// GetVmPlacementGroups request with any body
	GetVmPlacementGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmPlacementGroupsResponse, error)

	GetVmPlacementGroupsWithResponse(ctx context.Context, body GetVmPlacementGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmPlacementGroupsResponse, error)

	// GetVmPlacementGroupsConnection request with any body
	GetVmPlacementGroupsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmPlacementGroupsConnectionResponse, error)

	GetVmPlacementGroupsConnectionWithResponse(ctx context.Context, body GetVmPlacementGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmPlacementGroupsConnectionResponse, error)

	// GetVmSnapshots request with any body
	GetVmSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmSnapshotsResponse, error)

	GetVmSnapshotsWithResponse(ctx context.Context, body GetVmSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmSnapshotsResponse, error)

	// GetVmSnapshotsConnection request with any body
	GetVmSnapshotsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmSnapshotsConnectionResponse, error)

	GetVmSnapshotsConnectionWithResponse(ctx context.Context, body GetVmSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmSnapshotsConnectionResponse, error)

	// GetVmTemplates request with any body
	GetVmTemplatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmTemplatesResponse, error)

	GetVmTemplatesWithResponse(ctx context.Context, body GetVmTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmTemplatesResponse, error)

	// GetVmTemplatesConnection request with any body
	GetVmTemplatesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmTemplatesConnectionResponse, error)

	GetVmTemplatesConnectionWithResponse(ctx context.Context, body GetVmTemplatesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmTemplatesConnectionResponse, error)

	// GetVmVolumes request with any body
	GetVmVolumesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmVolumesResponse, error)

	GetVmVolumesWithResponse(ctx context.Context, body GetVmVolumesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmVolumesResponse, error)

	// GetVmVolumesConnection request with any body
	GetVmVolumesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmVolumesConnectionResponse, error)

	GetVmVolumesConnectionWithResponse(ctx context.Context, body GetVmVolumesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmVolumesConnectionResponse, error)

	// GetVms request with any body
	GetVmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmsResponse, error)

	GetVmsWithResponse(ctx context.Context, body GetVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmsResponse, error)

	// GetVmsConnection request with any body
	GetVmsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmsConnectionResponse, error)

	GetVmsConnectionWithResponse(ctx context.Context, body GetVmsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmsConnectionResponse, error)

	// GetVsphereEsxiAccounts request with any body
	GetVsphereEsxiAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVsphereEsxiAccountsResponse, error)

	GetVsphereEsxiAccountsWithResponse(ctx context.Context, body GetVsphereEsxiAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVsphereEsxiAccountsResponse, error)

	// GetVsphereEsxiAccountsConnection request with any body
	GetVsphereEsxiAccountsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVsphereEsxiAccountsConnectionResponse, error)

	GetVsphereEsxiAccountsConnectionWithResponse(ctx context.Context, body GetVsphereEsxiAccountsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVsphereEsxiAccountsConnectionResponse, error)

	// GetWitnesses request with any body
	GetWitnessesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWitnessesResponse, error)

	GetWitnessesWithResponse(ctx context.Context, body GetWitnessesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWitnessesResponse, error)

	// GetWitnessesConnection request with any body
	GetWitnessesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWitnessesConnectionResponse, error)

	GetWitnessesConnectionWithResponse(ctx context.Context, body GetWitnessesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWitnessesConnectionResponse, error)

	// GetZoneTopoes request with any body
	GetZoneTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetZoneTopoesResponse, error)

	GetZoneTopoesWithResponse(ctx context.Context, body GetZoneTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetZoneTopoesResponse, error)

	// GetZoneTopoesConnection request with any body
	GetZoneTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetZoneTopoesConnectionResponse, error)

	GetZoneTopoesConnectionWithResponse(ctx context.Context, body GetZoneTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetZoneTopoesConnectionResponse, error)

	// GetZones request with any body
	GetZonesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetZonesResponse, error)

	GetZonesWithResponse(ctx context.Context, body GetZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetZonesResponse, error)

	// GetZonesConnection request with any body
	GetZonesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetZonesConnectionResponse, error)

	GetZonesConnectionWithResponse(ctx context.Context, body GetZonesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetZonesConnectionResponse, error)

	// InstallVmtools request with any body
	InstallVmtoolsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallVmtoolsResponse, error)

	InstallVmtoolsWithResponse(ctx context.Context, body InstallVmtoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallVmtoolsResponse, error)

	// KeepSnapshotGroup request with any body
	KeepSnapshotGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KeepSnapshotGroupResponse, error)

	KeepSnapshotGroupWithResponse(ctx context.Context, body KeepSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*KeepSnapshotGroupResponse, error)

	// Login request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// MigRateVm request with any body
	MigRateVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigRateVmResponse, error)

	MigRateVmWithResponse(ctx context.Context, body MigRateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*MigRateVmResponse, error)

	// MountDisk request with any body
	MountDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MountDiskResponse, error)

	MountDiskWithResponse(ctx context.Context, body MountDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*MountDiskResponse, error)

	// MountUsbDevice request with any body
	MountUsbDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MountUsbDeviceResponse, error)

	MountUsbDeviceWithResponse(ctx context.Context, body MountUsbDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*MountUsbDeviceResponse, error)

	// MoveBrickTopo request with any body
	MoveBrickTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveBrickTopoResponse, error)

	MoveBrickTopoWithResponse(ctx context.Context, body MoveBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveBrickTopoResponse, error)

	// UpdateNodeTopo request with any body
	UpdateNodeTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeTopoResponse, error)

	UpdateNodeTopoWithResponse(ctx context.Context, body UpdateNodeTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeTopoResponse, error)

	// MoveVmToRecycleBin request with any body
	MoveVmToRecycleBinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveVmToRecycleBinResponse, error)

	MoveVmToRecycleBinWithResponse(ctx context.Context, body MoveVmToRecycleBinJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveVmToRecycleBinResponse, error)

	// ForceShutDownVm request with any body
	ForceShutDownVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ForceShutDownVmResponse, error)

	ForceShutDownVmWithResponse(ctx context.Context, body ForceShutDownVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ForceShutDownVmResponse, error)

	// RebuildVm request with any body
	RebuildVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RebuildVmResponse, error)

	RebuildVmWithResponse(ctx context.Context, body RebuildVmJSONRequestBody, reqEditors ...RequestEditorFn) (*RebuildVmResponse, error)

	// RecoverVmFromRecycleBin request with any body
	RecoverVmFromRecycleBinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RecoverVmFromRecycleBinResponse, error)

	RecoverVmFromRecycleBinWithResponse(ctx context.Context, body RecoverVmFromRecycleBinJSONRequestBody, reqEditors ...RequestEditorFn) (*RecoverVmFromRecycleBinResponse, error)

	// RemoveLabelsFromResources request with any body
	RemoveLabelsFromResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveLabelsFromResourcesResponse, error)

	RemoveLabelsFromResourcesWithResponse(ctx context.Context, body RemoveLabelsFromResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveLabelsFromResourcesResponse, error)

	// RemoveVmCdRom request with any body
	RemoveVmCdRomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveVmCdRomResponse, error)

	RemoveVmCdRomWithResponse(ctx context.Context, body RemoveVmCdRomJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveVmCdRomResponse, error)

	// RemoveVmDisk request with any body
	RemoveVmDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveVmDiskResponse, error)

	RemoveVmDiskWithResponse(ctx context.Context, body RemoveVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveVmDiskResponse, error)

	// RemoveVmToFolder request with any body
	RemoveVmToFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveVmToFolderResponse, error)

	RemoveVmToFolderWithResponse(ctx context.Context, body RemoveVmToFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveVmToFolderResponse, error)

	// RemoveVmNic request with any body
	RemoveVmNicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveVmNicResponse, error)

	RemoveVmNicWithResponse(ctx context.Context, body RemoveVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveVmNicResponse, error)

	// ResolveAlert request with any body
	ResolveAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveAlertResponse, error)

	ResolveAlertWithResponse(ctx context.Context, body ResolveAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolveAlertResponse, error)

	// RestartVm request with any body
	RestartVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestartVmResponse, error)

	RestartVmWithResponse(ctx context.Context, body RestartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*RestartVmResponse, error)

	// ResumeSnapshotPlan request with any body
	ResumeSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResumeSnapshotPlanResponse, error)

	ResumeSnapshotPlanWithResponse(ctx context.Context, body ResumeSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*ResumeSnapshotPlanResponse, error)

	// ResumeVm request with any body
	ResumeVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResumeVmResponse, error)

	ResumeVmWithResponse(ctx context.Context, body ResumeVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ResumeVmResponse, error)

	// UpdateConsistencyGroupSnapshot request with any body
	UpdateConsistencyGroupSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConsistencyGroupSnapshotResponse, error)

	UpdateConsistencyGroupSnapshotWithResponse(ctx context.Context, body UpdateConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConsistencyGroupSnapshotResponse, error)

	// RollbackIscsiLunFromSnapshot request with any body
	RollbackIscsiLunFromSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RollbackIscsiLunFromSnapshotResponse, error)

	RollbackIscsiLunFromSnapshotWithResponse(ctx context.Context, body RollbackIscsiLunFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*RollbackIscsiLunFromSnapshotResponse, error)

	// RollbackNvmfNamespaceFromSnapshot request with any body
	RollbackNvmfNamespaceFromSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RollbackNvmfNamespaceFromSnapshotResponse, error)

	RollbackNvmfNamespaceFromSnapshotWithResponse(ctx context.Context, body RollbackNvmfNamespaceFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*RollbackNvmfNamespaceFromSnapshotResponse, error)

	// RollbackSnapshotGroup request with any body
	RollbackSnapshotGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RollbackSnapshotGroupResponse, error)

	RollbackSnapshotGroupWithResponse(ctx context.Context, body RollbackSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*RollbackSnapshotGroupResponse, error)

	// RollbackVm request with any body
	RollbackVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RollbackVmResponse, error)

	RollbackVmWithResponse(ctx context.Context, body RollbackVmJSONRequestBody, reqEditors ...RequestEditorFn) (*RollbackVmResponse, error)

	// ShutDownVm request with any body
	ShutDownVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShutDownVmResponse, error)

	ShutDownVmWithResponse(ctx context.Context, body ShutDownVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ShutDownVmResponse, error)

	// StartVm request with any body
	StartVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartVmResponse, error)

	StartVmWithResponse(ctx context.Context, body StartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*StartVmResponse, error)

	// SuspendSnapshotPlan request with any body
	SuspendSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SuspendSnapshotPlanResponse, error)

	SuspendSnapshotPlanWithResponse(ctx context.Context, body SuspendSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*SuspendSnapshotPlanResponse, error)

	// SuspendVm request with any body
	SuspendVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SuspendVmResponse, error)

	SuspendVmWithResponse(ctx context.Context, body SuspendVmJSONRequestBody, reqEditors ...RequestEditorFn) (*SuspendVmResponse, error)

	// TriggerDiskBlink request with any body
	TriggerDiskBlinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerDiskBlinkResponse, error)

	TriggerDiskBlinkWithResponse(ctx context.Context, body TriggerDiskBlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerDiskBlinkResponse, error)

	// UnmountDisk request with any body
	UnmountDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnmountDiskResponse, error)

	UnmountDiskWithResponse(ctx context.Context, body UnmountDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*UnmountDiskResponse, error)

	// UnmountUsbDevice request with any body
	UnmountUsbDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnmountUsbDeviceResponse, error)

	UnmountUsbDeviceWithResponse(ctx context.Context, body UnmountUsbDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*UnmountUsbDeviceResponse, error)

	// UpdateBrickTopo request with any body
	UpdateBrickTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBrickTopoResponse, error)

	UpdateBrickTopoWithResponse(ctx context.Context, body UpdateBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBrickTopoResponse, error)

	// UpdateCluster request with any body
	UpdateClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterResponse, error)

	UpdateClusterWithResponse(ctx context.Context, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterResponse, error)

	// UpdateClusterLicense request with any body
	UpdateClusterLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterLicenseResponse, error)

	UpdateClusterLicenseWithResponse(ctx context.Context, body UpdateClusterLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterLicenseResponse, error)

	// UpdateClusterRecycleBinSetting request with any body
	UpdateClusterRecycleBinSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterRecycleBinSettingResponse, error)

	UpdateClusterRecycleBinSettingWithResponse(ctx context.Context, body UpdateClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterRecycleBinSettingResponse, error)

	// UpdateConsistencyGroup request with any body
	UpdateConsistencyGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConsistencyGroupResponse, error)

	UpdateConsistencyGroupWithResponse(ctx context.Context, body UpdateConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConsistencyGroupResponse, error)

	// UpdateCustomizeAlertRule request with any body
	UpdateCustomizeAlertRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomizeAlertRuleResponse, error)

	UpdateCustomizeAlertRuleWithResponse(ctx context.Context, body UpdateCustomizeAlertRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomizeAlertRuleResponse, error)

	// UpdateDatacenter request with any body
	UpdateDatacenterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatacenterResponse, error)

	UpdateDatacenterWithResponse(ctx context.Context, body UpdateDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatacenterResponse, error)

	// UpdateElfImage request with any body
	UpdateElfImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateElfImageResponse, error)

	UpdateElfImageWithResponse(ctx context.Context, body UpdateElfImageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateElfImageResponse, error)

	// UpdateEntityFilter request with any body
	UpdateEntityFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEntityFilterResponse, error)

	UpdateEntityFilterWithResponse(ctx context.Context, body UpdateEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEntityFilterResponse, error)

	// UpdateGlobalAlertRule request with any body
	UpdateGlobalAlertRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGlobalAlertRuleResponse, error)

	UpdateGlobalAlertRuleWithResponse(ctx context.Context, body UpdateGlobalAlertRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGlobalAlertRuleResponse, error)

	// UpdateGlobalRecycleBinSetting request with any body
	UpdateGlobalRecycleBinSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGlobalRecycleBinSettingResponse, error)

	UpdateGlobalRecycleBinSettingWithResponse(ctx context.Context, body UpdateGlobalRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGlobalRecycleBinSettingResponse, error)

	// UpdateGraph request with any body
	UpdateGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGraphResponse, error)

	UpdateGraphWithResponse(ctx context.Context, body UpdateGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGraphResponse, error)

	// UpdateHost request with any body
	UpdateHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHostResponse, error)

	UpdateHostWithResponse(ctx context.Context, body UpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHostResponse, error)

	// UpdateIscsiLun request with any body
	UpdateIscsiLunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIscsiLunResponse, error)

	UpdateIscsiLunWithResponse(ctx context.Context, body UpdateIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIscsiLunResponse, error)

	// UpdateIscsiTarget request with any body
	UpdateIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIscsiTargetResponse, error)

	UpdateIscsiTargetWithResponse(ctx context.Context, body UpdateIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIscsiTargetResponse, error)

	// UpdateLabel request with any body
	UpdateLabelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLabelResponse, error)

	UpdateLabelWithResponse(ctx context.Context, body UpdateLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLabelResponse, error)

	// UpdateDeploy request with any body
	UpdateDeployWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeployResponse, error)

	UpdateDeployWithResponse(ctx context.Context, body UpdateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeployResponse, error)

	// UpdateManagementVlan request with any body
	UpdateManagementVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateManagementVlanResponse, error)

	UpdateManagementVlanWithResponse(ctx context.Context, body UpdateManagementVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateManagementVlanResponse, error)

	// UpdateMigrationVlan request with any body
	UpdateMigrationVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMigrationVlanResponse, error)

	UpdateMigrationVlanWithResponse(ctx context.Context, body UpdateMigrationVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMigrationVlanResponse, error)

	// UpdateNamespaceGroup request with any body
	UpdateNamespaceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNamespaceGroupResponse, error)

	UpdateNamespaceGroupWithResponse(ctx context.Context, body UpdateNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNamespaceGroupResponse, error)

	// UpdateNfsExport request with any body
	UpdateNfsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNfsExportResponse, error)

	UpdateNfsExportWithResponse(ctx context.Context, body UpdateNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNfsExportResponse, error)

	// UpdateNic request with any body
	UpdateNicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNicResponse, error)

	UpdateNicWithResponse(ctx context.Context, body UpdateNicJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNicResponse, error)

	// UpdateNvmfNamespace request with any body
	UpdateNvmfNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNvmfNamespaceResponse, error)

	UpdateNvmfNamespaceWithResponse(ctx context.Context, body UpdateNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNvmfNamespaceResponse, error)

	// UpdateNvmfSubsystem request with any body
	UpdateNvmfSubsystemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNvmfSubsystemResponse, error)

	UpdateNvmfSubsystemWithResponse(ctx context.Context, body UpdateNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNvmfSubsystemResponse, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	// UpdateRackTopo request with any body
	UpdateRackTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRackTopoResponse, error)

	UpdateRackTopoWithResponse(ctx context.Context, body UpdateRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRackTopoResponse, error)

	// UpdateReportTemplate request with any body
	UpdateReportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateReportTemplateResponse, error)

	UpdateReportTemplateWithResponse(ctx context.Context, body UpdateReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateReportTemplateResponse, error)

	// UpdateRole request with any body
	UpdateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	UpdateRoleWithResponse(ctx context.Context, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	// UpdateSnapshotPlan request with any body
	UpdateSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSnapshotPlanResponse, error)

	UpdateSnapshotPlanWithResponse(ctx context.Context, body UpdateSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSnapshotPlanResponse, error)

	// UpdateSnmpTransport request with any body
	UpdateSnmpTransportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSnmpTransportResponse, error)

	UpdateSnmpTransportWithResponse(ctx context.Context, body UpdateSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSnmpTransportResponse, error)

	// UpdateSnmpTrapReceiver request with any body
	UpdateSnmpTrapReceiverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSnmpTrapReceiverResponse, error)

	UpdateSnmpTrapReceiverWithResponse(ctx context.Context, body UpdateSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSnmpTrapReceiverResponse, error)

	// UpdateUser request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// UpdateVds request with any body
	UpdateVdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVdsResponse, error)

	UpdateVdsWithResponse(ctx context.Context, body UpdateVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVdsResponse, error)

	// UpdateView request with any body
	UpdateViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateViewResponse, error)

	UpdateViewWithResponse(ctx context.Context, body UpdateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateViewResponse, error)

	// UpdateVm request with any body
	UpdateVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmResponse, error)

	UpdateVmWithResponse(ctx context.Context, body UpdateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmResponse, error)

	// UpdateVmDisk request with any body
	UpdateVmDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmDiskResponse, error)

	UpdateVmDiskWithResponse(ctx context.Context, body UpdateVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmDiskResponse, error)

	// UpdateVmFolder request with any body
	UpdateVmFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmFolderResponse, error)

	UpdateVmFolderWithResponse(ctx context.Context, body UpdateVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmFolderResponse, error)

	// UpdateVmNic request with any body
	UpdateVmNicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmNicResponse, error)

	UpdateVmNicWithResponse(ctx context.Context, body UpdateVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmNicResponse, error)

	// UpdateVmPlacementGroup request with any body
	UpdateVmPlacementGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmPlacementGroupResponse, error)

	UpdateVmPlacementGroupWithResponse(ctx context.Context, body UpdateVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmPlacementGroupResponse, error)

	// UpdateVmTemplateFromVm request with any body
	UpdateVmTemplateFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmTemplateFromVmResponse, error)

	UpdateVmTemplateFromVmWithResponse(ctx context.Context, body UpdateVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmTemplateFromVmResponse, error)

	// UpdateVlan request with any body
	UpdateVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVlanResponse, error)

	UpdateVlanWithResponse(ctx context.Context, body UpdateVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVlanResponse, error)

	// CreateElfImage request with any body
	CreateElfImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateElfImageResponse, error)
}

type AddLabelsToResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskLabel
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r AddLabelsToResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddLabelsToResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddVmCdRomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r AddVmCdRomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddVmCdRomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddVmDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r AddVmDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddVmDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddVmNicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r AddVmNicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddVmNicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddVmToFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r AddVmToFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddVmToFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneIscsiLunFromSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskIscsiLun
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CloneIscsiLunFromSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneIscsiLunFromSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneNvmfNamespaceFromSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNvmfNamespace
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CloneNvmfNamespaceFromSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneNvmfNamespaceFromSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneSnapshotGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnapshotGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CloneSnapshotGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneSnapshotGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CloneVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneVmTemplateFromVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CloneVmTemplateFromVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneVmTemplateFromVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskCluster
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ConnectClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertVmTemplateFromVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ConvertVmTemplateFromVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertVmTemplateFromVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertVmTemplateToVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ConvertVmTemplateToVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertVmTemplateToVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBrickTopoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskBrickTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateBrickTopoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBrickTopoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClusterRecycleBinSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskClusterSettings
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateClusterRecycleBinSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClusterRecycleBinSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConsistencyGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskConsistencyGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateConsistencyGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConsistencyGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConsistencyGroupSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskConsistencyGroupSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateConsistencyGroupSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConsistencyGroupSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatacenterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDatacenter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateDatacenterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatacenterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEntityFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskEntityFilter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateEntityFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEntityFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskGraph
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskBatchHosts
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIscsiLunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskIscsiLun
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateIscsiLunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIscsiLunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIscsiLunSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskIscsiLunSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateIscsiLunSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIscsiLunSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskIscsiTarget
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskLabel
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNamespaceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNamespaceGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateNamespaceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNamespaceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNfsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNfsExport
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateNfsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNfsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNvmfNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNvmfNamespace
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateNvmfNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNvmfNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNvmfNamespaceSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNvmfNamespaceSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateNvmfNamespaceSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNvmfNamespaceSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNvmfSubsystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNvmfSubsystem
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateNvmfSubsystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNvmfSubsystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskOrganization
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRackTopoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskRackTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateRackTopoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRackTopoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReportTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskReportTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateReportTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReportTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskUserRoleNext
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSnapshotPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnapshotPlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateSnapshotPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSnapshotPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSnmpTransportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnmpTransport
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateSnmpTransportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSnmpTransportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSnmpTrapReceiverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnmpTrapReceiver
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateSnmpTrapReceiverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSnmpTrapReceiverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskUser
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVds
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVdsWithAccessVlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVds
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVdsWithAccessVlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVdsWithAccessVlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVdsWithMigrateVlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVds
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVdsWithMigrateVlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVdsWithMigrateVlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskView
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVmFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmFolder
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVmFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVmFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVmFromTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVmFromTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVmFromTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVmPlacementGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmPlacementGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVmPlacementGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVmPlacementGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVmSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVmSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVmSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVmVlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVmVlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVmVlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVmVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmVolume
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateVmVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVmVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBrickTopoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteBrickTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteBrickTopoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBrickTopoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteCluster
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterRecycleBinSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteClusterRecycleBin
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteClusterRecycleBinSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterRecycleBinSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsistencyGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteConsistencyGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteConsistencyGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsistencyGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsistencyGroupSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteConsistencyGroupSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteConsistencyGroupSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsistencyGroupSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatacenterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteDatacenter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteDatacenterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatacenterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteElfImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteElfImage
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteElfImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteElfImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEntityFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteEntityFilter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteEntityFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEntityFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteGraph
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiLunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteIscsiLun
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiLunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiLunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiLunSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteIscsiLunSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiLunSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiLunSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteIscsiTarget
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteLabel
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNamespaceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteNamespaceGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteNamespaceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNamespaceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNfsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteNfsExport
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteNfsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNfsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNvmfNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteNvmfNamespace
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteNvmfNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNvmfNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNvmfNamespaceSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteNvmfNamespaceSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteNvmfNamespaceSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNvmfNamespaceSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNvmfSubsystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteNvmfSubsystem
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteNvmfSubsystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNvmfSubsystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteOrganization
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRackTopoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteRackTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteRackTopoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRackTopoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReportTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteReportTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteReportTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReportTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteRole
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnapshotGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteSnapshotGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteSnapshotGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnapshotGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnapshotPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteSnapshotPlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteSnapshotPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnapshotPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnmpTransportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteSnmpTransport
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteSnmpTransportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnmpTransportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnmpTrapReceiverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteSnmpTrapReceiver
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteSnmpTrapReceiverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnmpTrapReceiverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteUser
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteVds
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteVdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteView
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/DeleteVm)
			DeleteVm `yaml:",inline"`
		} `json:"data"`
		TaskId *string `json:"task_id"`
	}
	JSON400 *string
}

// Status returns HTTPResponse.Status
func (r DeleteVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteVmFolder
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteVmFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmPlacementGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteVmPlacementGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteVmPlacementGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmPlacementGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteVmSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteVmSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmTemplateFromVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteVmTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteVmTemplateFromVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmTemplateFromVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteVlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteVlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmVolumeFromVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDeleteVmVolume
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r DeleteVmVolumeFromVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmVolumeFromVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteSnapshotPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnapshotPlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ExecuteSnapshotPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteSnapshotPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForceRestartVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ForceRestartVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForceRestartVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateFromReportTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskReportTask
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GenerateFromReportTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateFromReportTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertNotifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlertNotifier
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetAlertNotifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertNotifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertNotifiersConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertNotifierConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetAlertNotifiersConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertNotifiersConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlertRule
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetAlertRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertRulesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertRuleConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetAlertRulesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertRulesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Alert
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetAlertsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Application
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetApplicationsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBrickTopoesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BrickTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetBrickTopoesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBrickTopoesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBrickTopoesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BrickTopoConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetBrickTopoesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBrickTopoesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterImage
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClusterImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterImagesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterImageConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClusterImagesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterImagesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterSettingsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterSettings
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClusterSettingsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterSettingsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterSettingsesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterSettingsConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClusterSettingsesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterSettingsesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterTopoesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClusterTopoesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterTopoesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterTopoesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterTopoConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClusterTopoesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterTopoesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterUpgradeHistoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterUpgradeHistory
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClusterUpgradeHistoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterUpgradeHistoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterUpgradeHistoriesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterUpgradeHistoryConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClusterUpgradeHistoriesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterUpgradeHistoriesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cluster
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClustersConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetClustersConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsistencyGroupSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ConsistencyGroupSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetConsistencyGroupSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsistencyGroupSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsistencyGroupSnapshotsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConsistencyGroupSnapshotConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetConsistencyGroupSnapshotsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsistencyGroupSnapshotsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsistencyGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ConsistencyGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetConsistencyGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsistencyGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsistencyGroupsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConsistencyGroupConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetConsistencyGroupsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsistencyGroupsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatacentersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Datacenter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetDatacentersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatacentersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatacentersConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatacenterConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetDatacentersConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatacentersConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Deploy
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetDeploysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploysConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeployConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetDeploysConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploysConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiscoverHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DiscoveredHost
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetDiscoverHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDisksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Disk
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetDisksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDisksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDisksConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DiskConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetDisksConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDisksConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElfDataStoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ElfDataStore
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetElfDataStoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElfDataStoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElfDataStoresConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ElfDataStoreConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetElfDataStoresConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElfDataStoresConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElfImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ElfImage
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetElfImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElfImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElfImagesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ElfImageConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetElfImagesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElfImagesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElfStoragePoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ElfStoragePolicy
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetElfStoragePoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElfStoragePoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElfStoragePoliciesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ElfStoragePolicyConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetElfStoragePoliciesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElfStoragePoliciesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntityFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EntityFilter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetEntityFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntityFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntityFiltersConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityFilterConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetEntityFiltersConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntityFiltersConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalAlertRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GlobalAlertRule
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetGlobalAlertRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalAlertRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalAlertRulesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalAlertRuleConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetGlobalAlertRulesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalAlertRulesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalSettingsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GlobalSettings
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetGlobalSettingsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalSettingsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalSettingsesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalSettingsConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetGlobalSettingsesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalSettingsesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGraphsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Graph
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetGraphsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGraphsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGraphsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GraphConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetGraphsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGraphsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Host
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetHostsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImagesConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageConnector
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetImagesConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImagesConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Ipmi
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIpmisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IscsiConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIscsiConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiConnectionsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IscsiConnectionConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIscsiConnectionsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiConnectionsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiLunSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IscsiLunSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIscsiLunSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiLunSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiLunSnapshotsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IscsiLunSnapshotConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIscsiLunSnapshotsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiLunSnapshotsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiLunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IscsiLun
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIscsiLunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiLunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiLunsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IscsiLunConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIscsiLunsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiLunsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IscsiTarget
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IscsiTargetConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Label
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLabelsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LabelConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetLabelsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLabelsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]License
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetLicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLicensesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LicenseConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetLicensesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLicensesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LogCollection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetLogCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogCollectionsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogCollectionConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetLogCollectionsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogCollectionsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMigrateTransmittersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MigrateTransmitter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetMigrateTransmittersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMigrateTransmittersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMigrateTransmittersConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MigrateTransmitterConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetMigrateTransmittersConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMigrateTransmittersConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNamespaceGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NamespaceGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNamespaceGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNamespaceGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNamespaceGroupsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamespaceGroupConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNamespaceGroupsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNamespaceGroupsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNfsExportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NfsExport
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNfsExportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNfsExportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNfsExportsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NfsExportConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNfsExportsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNfsExportsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNfsInodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NfsInode
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNfsInodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNfsInodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNfsInodesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NfsInodeConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNfsInodesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNfsInodesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Nic
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNicsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NicConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNicsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNicsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeTopoesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NodeTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNodeTopoesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeTopoesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeTopoesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeTopoConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNodeTopoesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeTopoesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNvmfNamespaceSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NvmfNamespaceSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNvmfNamespaceSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNvmfNamespaceSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNvmfNamespaceSnapshotsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NvmfNamespaceSnapshotConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNvmfNamespaceSnapshotsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNvmfNamespaceSnapshotsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNvmfNamespacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NvmfNamespace
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNvmfNamespacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNvmfNamespacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNvmfNamespacesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NvmfNamespaceConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNvmfNamespacesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNvmfNamespacesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNvmfSubsystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NvmfSubsystem
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNvmfSubsystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNvmfSubsystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNvmfSubsystemsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NvmfSubsystemConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetNvmfSubsystemsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNvmfSubsystemsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Organization
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPmemDimmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PmemDimm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetPmemDimmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPmemDimmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPmemDimmsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PmemDimmConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetPmemDimmsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPmemDimmsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRackTopoesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RackTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetRackTopoesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRackTopoesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRackTopoesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RackTopoConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetRackTopoesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRackTopoesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReportTask
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetReportTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportTasksConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportTaskConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetReportTasksConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportTasksConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReportTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetReportTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportTemplatesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportTemplateConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetReportTemplatesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportTemplatesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SnapshotGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnapshotGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotGroupsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotGroupConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnapshotGroupsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotGroupsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotPlanTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SnapshotPlanTask
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnapshotPlanTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotPlanTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotPlanTasksConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotPlanTaskConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnapshotPlanTasksConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotPlanTasksConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SnapshotPlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnapshotPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotPlansConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotPlanConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnapshotPlansConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotPlansConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnmpTransportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SnmpTransport
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnmpTransportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnmpTransportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnmpTransportsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnmpTransportConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnmpTransportsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnmpTransportsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnmpTrapReceiversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SnmpTrapReceiver
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnmpTrapReceiversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnmpTrapReceiversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnmpTrapReceiversConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnmpTrapReceiverConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSnmpTrapReceiversConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnmpTrapReceiversConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoragePoliciesConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StoragePolicyConector
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetStoragePoliciesConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoragePoliciesConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSvtImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SvtImage
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSvtImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSvtImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSvtImagesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SvtImageConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSvtImagesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSvtImagesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemAuditLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SystemAuditLog
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSystemAuditLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemAuditLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemAuditLogsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemAuditLogConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetSystemAuditLogsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemAuditLogsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetTasksConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUploadTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UploadTask
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUploadTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUploadTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUploadTasksConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadTaskConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUploadTasksConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUploadTasksConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsbDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UsbDevice
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUsbDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsbDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsbDevicesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsbDeviceConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUsbDevicesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsbDevicesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAuditLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserAuditLog
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUserAuditLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAuditLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAuditLogsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAuditLogConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUserAuditLogsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAuditLogsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleNextsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleNext
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUserRoleNextsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleNextsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleNextsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleNextConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUserRoleNextsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleNextsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetUsersConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVcenterAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VcenterAccount
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVcenterAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVcenterAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVcenterAccountsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VcenterAccountConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVcenterAccountsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVcenterAccountsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVdsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Vds
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVdsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVdsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVdsesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VdsConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVdsesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVdsesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetViewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]View
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetViewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetViewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetViewsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ViewConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetViewsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetViewsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Vlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVlansConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VlanConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVlansConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVlansConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDisksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VmDisk
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmDisksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDisksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDisksConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmDiskConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmDisksConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDisksConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmEntityFilterResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VmEntityFilterResult
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmEntityFilterResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmEntityFilterResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmEntityFilterResultsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmEntityFilterResultConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmEntityFilterResultsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmEntityFilterResultsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VmFolder
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmFoldersConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmFolderConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmFoldersConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmFoldersConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmNicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VmNic
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmNicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmNicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmNicsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmNicConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmNicsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmNicsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmPlacementGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VmPlacementGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmPlacementGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmPlacementGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmPlacementGroupsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmPlacementGroupConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmPlacementGroupsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmPlacementGroupsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VmSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmSnapshotsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmSnapshotConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmSnapshotsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmSnapshotsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VmTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmTemplatesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmTemplateConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmTemplatesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmTemplatesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmVolumesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VmVolume
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmVolumesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmVolumesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmVolumesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmVolumeConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmVolumesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmVolumesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Vm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVmsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVsphereEsxiAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VsphereEsxiAccount
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVsphereEsxiAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVsphereEsxiAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVsphereEsxiAccountsConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VsphereEsxiAccountConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetVsphereEsxiAccountsConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVsphereEsxiAccountsConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWitnessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Witness
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetWitnessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWitnessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWitnessesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WitnessConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetWitnessesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWitnessesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneTopoesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ZoneTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetZoneTopoesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneTopoesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneTopoesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneTopoConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetZoneTopoesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneTopoesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Zone
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZonesConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneConnection
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r GetZonesConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZonesConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstallVmtoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r InstallVmtoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallVmtoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeepSnapshotGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnapshotGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r KeepSnapshotGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeepSnapshotGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WithTaskTokenString
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigRateVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r MigRateVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigRateVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MountDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDisk
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r MountDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MountDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MountUsbDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskUsbDevice
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r MountUsbDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MountUsbDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveBrickTopoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskBrickTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r MoveBrickTopoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveBrickTopoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNodeTopoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNodeTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateNodeTopoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNodeTopoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveVmToRecycleBinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/DeleteVm)
			DeleteVm `yaml:",inline"`
		} `json:"data"`
		TaskId *string `json:"task_id"`
	}
	JSON400 *string
}

// Status returns HTTPResponse.Status
func (r MoveVmToRecycleBinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveVmToRecycleBinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForceShutDownVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ForceShutDownVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForceShutDownVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RebuildVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RebuildVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebuildVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecoverVmFromRecycleBinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/DeleteVm)
			DeleteVm `yaml:",inline"`
		} `json:"data"`
		TaskId *string `json:"task_id"`
	}
	JSON400 *string
}

// Status returns HTTPResponse.Status
func (r RecoverVmFromRecycleBinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecoverVmFromRecycleBinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveLabelsFromResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskLabel
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RemoveLabelsFromResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveLabelsFromResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveVmCdRomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RemoveVmCdRomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveVmCdRomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveVmDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RemoveVmDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveVmDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveVmToFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RemoveVmToFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveVmToFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveVmNicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RemoveVmNicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveVmNicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskAlert
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ResolveAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RestartVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeSnapshotPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnapshotPlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ResumeSnapshotPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeSnapshotPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ResumeVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConsistencyGroupSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskConsistencyGroupSnapshot
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateConsistencyGroupSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConsistencyGroupSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RollbackIscsiLunFromSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskIscsiLun
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RollbackIscsiLunFromSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RollbackIscsiLunFromSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RollbackNvmfNamespaceFromSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNvmfNamespace
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RollbackNvmfNamespaceFromSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RollbackNvmfNamespaceFromSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RollbackSnapshotGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnapshotGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RollbackSnapshotGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RollbackSnapshotGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RollbackVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r RollbackVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RollbackVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShutDownVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ShutDownVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShutDownVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r StartVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuspendSnapshotPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnapshotPlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r SuspendSnapshotPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuspendSnapshotPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuspendVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r SuspendVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuspendVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TriggerDiskBlinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskHost
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r TriggerDiskBlinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriggerDiskBlinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnmountDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDisk
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UnmountDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnmountDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnmountUsbDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskUsbDevice
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UnmountUsbDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnmountUsbDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBrickTopoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskBrickTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateBrickTopoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBrickTopoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskCluster
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateClusterLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskCluster
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateClusterLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateClusterLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateClusterRecycleBinSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskClusterSettings
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateClusterRecycleBinSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateClusterRecycleBinSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConsistencyGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskConsistencyGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateConsistencyGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConsistencyGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomizeAlertRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskGlobalAlertRule
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateCustomizeAlertRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomizeAlertRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDatacenterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskDatacenter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateDatacenterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatacenterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateElfImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskElfImage
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateElfImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateElfImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEntityFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskEntityFilter
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateEntityFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEntityFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGlobalAlertRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskGlobalAlertRule
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateGlobalAlertRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGlobalAlertRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGlobalRecycleBinSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WithTaskGlobalSettings
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateGlobalRecycleBinSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGlobalRecycleBinSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskGraph
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskHost
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIscsiLunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskIscsiLun
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateIscsiLunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIscsiLunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskIscsiTarget
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskLabel
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeployResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WithTaskLicense
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateDeployResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeployResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateManagementVlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateManagementVlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateManagementVlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMigrationVlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateMigrationVlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMigrationVlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNamespaceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNamespaceGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateNamespaceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNamespaceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNfsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNfsExport
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateNfsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNfsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNic
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateNicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNvmfNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNvmfNamespace
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateNvmfNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNvmfNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNvmfSubsystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskNvmfSubsystem
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateNvmfSubsystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNvmfSubsystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskOrganization
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRackTopoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskRackTopo
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateRackTopoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRackTopoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateReportTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskReportTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateReportTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateReportTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskUserRoleNext
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSnapshotPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnapshotPlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateSnapshotPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSnapshotPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSnmpTransportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnmpTransport
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateSnmpTransportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSnmpTransportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSnmpTrapReceiverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskSnmpTrapReceiver
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateSnmpTrapReceiverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSnmpTrapReceiverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskUser
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVds
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateVdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskView
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVmDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateVmDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVmDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVmFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmFolder
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateVmFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVmFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVmNicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVm
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateVmNicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVmNicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVmPlacementGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmPlacementGroup
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateVmPlacementGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVmPlacementGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVmTemplateFromVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVmTemplate
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateVmTemplateFromVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVmTemplateFromVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WithTaskVlan
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r UpdateVlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateElfImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UploadTask
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r CreateElfImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateElfImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddLabelsToResourcesWithBodyWithResponse request with arbitrary body returning *AddLabelsToResourcesResponse
func (c *ClientWithResponses) AddLabelsToResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddLabelsToResourcesResponse, error) {
	rsp, err := c.AddLabelsToResourcesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddLabelsToResourcesResponse(rsp)
}

func (c *ClientWithResponses) AddLabelsToResourcesWithResponse(ctx context.Context, body AddLabelsToResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddLabelsToResourcesResponse, error) {
	rsp, err := c.AddLabelsToResources(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddLabelsToResourcesResponse(rsp)
}

// AddVmCdRomWithBodyWithResponse request with arbitrary body returning *AddVmCdRomResponse
func (c *ClientWithResponses) AddVmCdRomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVmCdRomResponse, error) {
	rsp, err := c.AddVmCdRomWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVmCdRomResponse(rsp)
}

func (c *ClientWithResponses) AddVmCdRomWithResponse(ctx context.Context, body AddVmCdRomJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVmCdRomResponse, error) {
	rsp, err := c.AddVmCdRom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVmCdRomResponse(rsp)
}

// AddVmDiskWithBodyWithResponse request with arbitrary body returning *AddVmDiskResponse
func (c *ClientWithResponses) AddVmDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVmDiskResponse, error) {
	rsp, err := c.AddVmDiskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVmDiskResponse(rsp)
}

func (c *ClientWithResponses) AddVmDiskWithResponse(ctx context.Context, body AddVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVmDiskResponse, error) {
	rsp, err := c.AddVmDisk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVmDiskResponse(rsp)
}

// AddVmNicWithBodyWithResponse request with arbitrary body returning *AddVmNicResponse
func (c *ClientWithResponses) AddVmNicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVmNicResponse, error) {
	rsp, err := c.AddVmNicWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVmNicResponse(rsp)
}

func (c *ClientWithResponses) AddVmNicWithResponse(ctx context.Context, body AddVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVmNicResponse, error) {
	rsp, err := c.AddVmNic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVmNicResponse(rsp)
}

// AddVmToFolderWithBodyWithResponse request with arbitrary body returning *AddVmToFolderResponse
func (c *ClientWithResponses) AddVmToFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVmToFolderResponse, error) {
	rsp, err := c.AddVmToFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVmToFolderResponse(rsp)
}

func (c *ClientWithResponses) AddVmToFolderWithResponse(ctx context.Context, body AddVmToFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVmToFolderResponse, error) {
	rsp, err := c.AddVmToFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVmToFolderResponse(rsp)
}

// CloneIscsiLunFromSnapshotWithBodyWithResponse request with arbitrary body returning *CloneIscsiLunFromSnapshotResponse
func (c *ClientWithResponses) CloneIscsiLunFromSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneIscsiLunFromSnapshotResponse, error) {
	rsp, err := c.CloneIscsiLunFromSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneIscsiLunFromSnapshotResponse(rsp)
}

func (c *ClientWithResponses) CloneIscsiLunFromSnapshotWithResponse(ctx context.Context, body CloneIscsiLunFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneIscsiLunFromSnapshotResponse, error) {
	rsp, err := c.CloneIscsiLunFromSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneIscsiLunFromSnapshotResponse(rsp)
}

// CloneNvmfNamespaceFromSnapshotWithBodyWithResponse request with arbitrary body returning *CloneNvmfNamespaceFromSnapshotResponse
func (c *ClientWithResponses) CloneNvmfNamespaceFromSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneNvmfNamespaceFromSnapshotResponse, error) {
	rsp, err := c.CloneNvmfNamespaceFromSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneNvmfNamespaceFromSnapshotResponse(rsp)
}

func (c *ClientWithResponses) CloneNvmfNamespaceFromSnapshotWithResponse(ctx context.Context, body CloneNvmfNamespaceFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneNvmfNamespaceFromSnapshotResponse, error) {
	rsp, err := c.CloneNvmfNamespaceFromSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneNvmfNamespaceFromSnapshotResponse(rsp)
}

// CloneSnapshotGroupWithBodyWithResponse request with arbitrary body returning *CloneSnapshotGroupResponse
func (c *ClientWithResponses) CloneSnapshotGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneSnapshotGroupResponse, error) {
	rsp, err := c.CloneSnapshotGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneSnapshotGroupResponse(rsp)
}

func (c *ClientWithResponses) CloneSnapshotGroupWithResponse(ctx context.Context, body CloneSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneSnapshotGroupResponse, error) {
	rsp, err := c.CloneSnapshotGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneSnapshotGroupResponse(rsp)
}

// CloneVmWithBodyWithResponse request with arbitrary body returning *CloneVmResponse
func (c *ClientWithResponses) CloneVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneVmResponse, error) {
	rsp, err := c.CloneVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneVmResponse(rsp)
}

func (c *ClientWithResponses) CloneVmWithResponse(ctx context.Context, body CloneVmJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneVmResponse, error) {
	rsp, err := c.CloneVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneVmResponse(rsp)
}

// CloneVmTemplateFromVmWithBodyWithResponse request with arbitrary body returning *CloneVmTemplateFromVmResponse
func (c *ClientWithResponses) CloneVmTemplateFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneVmTemplateFromVmResponse, error) {
	rsp, err := c.CloneVmTemplateFromVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneVmTemplateFromVmResponse(rsp)
}

func (c *ClientWithResponses) CloneVmTemplateFromVmWithResponse(ctx context.Context, body CloneVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneVmTemplateFromVmResponse, error) {
	rsp, err := c.CloneVmTemplateFromVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneVmTemplateFromVmResponse(rsp)
}

// ConnectClusterWithBodyWithResponse request with arbitrary body returning *ConnectClusterResponse
func (c *ClientWithResponses) ConnectClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConnectClusterResponse, error) {
	rsp, err := c.ConnectClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectClusterResponse(rsp)
}

func (c *ClientWithResponses) ConnectClusterWithResponse(ctx context.Context, body ConnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*ConnectClusterResponse, error) {
	rsp, err := c.ConnectCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectClusterResponse(rsp)
}

// ConvertVmTemplateFromVmWithBodyWithResponse request with arbitrary body returning *ConvertVmTemplateFromVmResponse
func (c *ClientWithResponses) ConvertVmTemplateFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertVmTemplateFromVmResponse, error) {
	rsp, err := c.ConvertVmTemplateFromVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertVmTemplateFromVmResponse(rsp)
}

func (c *ClientWithResponses) ConvertVmTemplateFromVmWithResponse(ctx context.Context, body ConvertVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertVmTemplateFromVmResponse, error) {
	rsp, err := c.ConvertVmTemplateFromVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertVmTemplateFromVmResponse(rsp)
}

// ConvertVmTemplateToVmWithBodyWithResponse request with arbitrary body returning *ConvertVmTemplateToVmResponse
func (c *ClientWithResponses) ConvertVmTemplateToVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertVmTemplateToVmResponse, error) {
	rsp, err := c.ConvertVmTemplateToVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertVmTemplateToVmResponse(rsp)
}

func (c *ClientWithResponses) ConvertVmTemplateToVmWithResponse(ctx context.Context, body ConvertVmTemplateToVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertVmTemplateToVmResponse, error) {
	rsp, err := c.ConvertVmTemplateToVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertVmTemplateToVmResponse(rsp)
}

// CreateBrickTopoWithBodyWithResponse request with arbitrary body returning *CreateBrickTopoResponse
func (c *ClientWithResponses) CreateBrickTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBrickTopoResponse, error) {
	rsp, err := c.CreateBrickTopoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBrickTopoResponse(rsp)
}

func (c *ClientWithResponses) CreateBrickTopoWithResponse(ctx context.Context, body CreateBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBrickTopoResponse, error) {
	rsp, err := c.CreateBrickTopo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBrickTopoResponse(rsp)
}

// CreateClusterRecycleBinSettingWithBodyWithResponse request with arbitrary body returning *CreateClusterRecycleBinSettingResponse
func (c *ClientWithResponses) CreateClusterRecycleBinSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterRecycleBinSettingResponse, error) {
	rsp, err := c.CreateClusterRecycleBinSettingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterRecycleBinSettingResponse(rsp)
}

func (c *ClientWithResponses) CreateClusterRecycleBinSettingWithResponse(ctx context.Context, body CreateClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterRecycleBinSettingResponse, error) {
	rsp, err := c.CreateClusterRecycleBinSetting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterRecycleBinSettingResponse(rsp)
}

// CreateConsistencyGroupWithBodyWithResponse request with arbitrary body returning *CreateConsistencyGroupResponse
func (c *ClientWithResponses) CreateConsistencyGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConsistencyGroupResponse, error) {
	rsp, err := c.CreateConsistencyGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConsistencyGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateConsistencyGroupWithResponse(ctx context.Context, body CreateConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConsistencyGroupResponse, error) {
	rsp, err := c.CreateConsistencyGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConsistencyGroupResponse(rsp)
}

// CreateConsistencyGroupSnapshotWithBodyWithResponse request with arbitrary body returning *CreateConsistencyGroupSnapshotResponse
func (c *ClientWithResponses) CreateConsistencyGroupSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConsistencyGroupSnapshotResponse, error) {
	rsp, err := c.CreateConsistencyGroupSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConsistencyGroupSnapshotResponse(rsp)
}

func (c *ClientWithResponses) CreateConsistencyGroupSnapshotWithResponse(ctx context.Context, body CreateConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConsistencyGroupSnapshotResponse, error) {
	rsp, err := c.CreateConsistencyGroupSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConsistencyGroupSnapshotResponse(rsp)
}

// CreateDatacenterWithBodyWithResponse request with arbitrary body returning *CreateDatacenterResponse
func (c *ClientWithResponses) CreateDatacenterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatacenterResponse, error) {
	rsp, err := c.CreateDatacenterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatacenterResponse(rsp)
}

func (c *ClientWithResponses) CreateDatacenterWithResponse(ctx context.Context, body CreateDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatacenterResponse, error) {
	rsp, err := c.CreateDatacenter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatacenterResponse(rsp)
}

// CreateEntityFilterWithBodyWithResponse request with arbitrary body returning *CreateEntityFilterResponse
func (c *ClientWithResponses) CreateEntityFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEntityFilterResponse, error) {
	rsp, err := c.CreateEntityFilterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEntityFilterResponse(rsp)
}

func (c *ClientWithResponses) CreateEntityFilterWithResponse(ctx context.Context, body CreateEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEntityFilterResponse, error) {
	rsp, err := c.CreateEntityFilter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEntityFilterResponse(rsp)
}

// CreateGraphWithBodyWithResponse request with arbitrary body returning *CreateGraphResponse
func (c *ClientWithResponses) CreateGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGraphResponse, error) {
	rsp, err := c.CreateGraphWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGraphResponse(rsp)
}

func (c *ClientWithResponses) CreateGraphWithResponse(ctx context.Context, body CreateGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGraphResponse, error) {
	rsp, err := c.CreateGraph(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGraphResponse(rsp)
}

// CreateHostWithBodyWithResponse request with arbitrary body returning *CreateHostResponse
func (c *ClientWithResponses) CreateHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHostResponse, error) {
	rsp, err := c.CreateHostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHostResponse(rsp)
}

func (c *ClientWithResponses) CreateHostWithResponse(ctx context.Context, body CreateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHostResponse, error) {
	rsp, err := c.CreateHost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHostResponse(rsp)
}

// CreateIscsiLunWithBodyWithResponse request with arbitrary body returning *CreateIscsiLunResponse
func (c *ClientWithResponses) CreateIscsiLunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIscsiLunResponse, error) {
	rsp, err := c.CreateIscsiLunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIscsiLunResponse(rsp)
}

func (c *ClientWithResponses) CreateIscsiLunWithResponse(ctx context.Context, body CreateIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIscsiLunResponse, error) {
	rsp, err := c.CreateIscsiLun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIscsiLunResponse(rsp)
}

// CreateIscsiLunSnapshotWithBodyWithResponse request with arbitrary body returning *CreateIscsiLunSnapshotResponse
func (c *ClientWithResponses) CreateIscsiLunSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIscsiLunSnapshotResponse, error) {
	rsp, err := c.CreateIscsiLunSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIscsiLunSnapshotResponse(rsp)
}

func (c *ClientWithResponses) CreateIscsiLunSnapshotWithResponse(ctx context.Context, body CreateIscsiLunSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIscsiLunSnapshotResponse, error) {
	rsp, err := c.CreateIscsiLunSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIscsiLunSnapshotResponse(rsp)
}

// CreateIscsiTargetWithBodyWithResponse request with arbitrary body returning *CreateIscsiTargetResponse
func (c *ClientWithResponses) CreateIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIscsiTargetResponse, error) {
	rsp, err := c.CreateIscsiTargetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIscsiTargetResponse(rsp)
}

func (c *ClientWithResponses) CreateIscsiTargetWithResponse(ctx context.Context, body CreateIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIscsiTargetResponse, error) {
	rsp, err := c.CreateIscsiTarget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIscsiTargetResponse(rsp)
}

// CreateLabelWithBodyWithResponse request with arbitrary body returning *CreateLabelResponse
func (c *ClientWithResponses) CreateLabelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLabelResponse, error) {
	rsp, err := c.CreateLabelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLabelResponse(rsp)
}

func (c *ClientWithResponses) CreateLabelWithResponse(ctx context.Context, body CreateLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLabelResponse, error) {
	rsp, err := c.CreateLabel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLabelResponse(rsp)
}

// CreateNamespaceGroupWithBodyWithResponse request with arbitrary body returning *CreateNamespaceGroupResponse
func (c *ClientWithResponses) CreateNamespaceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNamespaceGroupResponse, error) {
	rsp, err := c.CreateNamespaceGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNamespaceGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateNamespaceGroupWithResponse(ctx context.Context, body CreateNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNamespaceGroupResponse, error) {
	rsp, err := c.CreateNamespaceGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNamespaceGroupResponse(rsp)
}

// CreateNfsExportWithBodyWithResponse request with arbitrary body returning *CreateNfsExportResponse
func (c *ClientWithResponses) CreateNfsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNfsExportResponse, error) {
	rsp, err := c.CreateNfsExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNfsExportResponse(rsp)
}

func (c *ClientWithResponses) CreateNfsExportWithResponse(ctx context.Context, body CreateNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNfsExportResponse, error) {
	rsp, err := c.CreateNfsExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNfsExportResponse(rsp)
}

// CreateNvmfNamespaceWithBodyWithResponse request with arbitrary body returning *CreateNvmfNamespaceResponse
func (c *ClientWithResponses) CreateNvmfNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNvmfNamespaceResponse, error) {
	rsp, err := c.CreateNvmfNamespaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNvmfNamespaceResponse(rsp)
}

func (c *ClientWithResponses) CreateNvmfNamespaceWithResponse(ctx context.Context, body CreateNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNvmfNamespaceResponse, error) {
	rsp, err := c.CreateNvmfNamespace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNvmfNamespaceResponse(rsp)
}

// CreateNvmfNamespaceSnapshotWithBodyWithResponse request with arbitrary body returning *CreateNvmfNamespaceSnapshotResponse
func (c *ClientWithResponses) CreateNvmfNamespaceSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNvmfNamespaceSnapshotResponse, error) {
	rsp, err := c.CreateNvmfNamespaceSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNvmfNamespaceSnapshotResponse(rsp)
}

func (c *ClientWithResponses) CreateNvmfNamespaceSnapshotWithResponse(ctx context.Context, body CreateNvmfNamespaceSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNvmfNamespaceSnapshotResponse, error) {
	rsp, err := c.CreateNvmfNamespaceSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNvmfNamespaceSnapshotResponse(rsp)
}

// CreateNvmfSubsystemWithBodyWithResponse request with arbitrary body returning *CreateNvmfSubsystemResponse
func (c *ClientWithResponses) CreateNvmfSubsystemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNvmfSubsystemResponse, error) {
	rsp, err := c.CreateNvmfSubsystemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNvmfSubsystemResponse(rsp)
}

func (c *ClientWithResponses) CreateNvmfSubsystemWithResponse(ctx context.Context, body CreateNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNvmfSubsystemResponse, error) {
	rsp, err := c.CreateNvmfSubsystem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNvmfSubsystemResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// CreateRackTopoWithBodyWithResponse request with arbitrary body returning *CreateRackTopoResponse
func (c *ClientWithResponses) CreateRackTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRackTopoResponse, error) {
	rsp, err := c.CreateRackTopoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRackTopoResponse(rsp)
}

func (c *ClientWithResponses) CreateRackTopoWithResponse(ctx context.Context, body CreateRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRackTopoResponse, error) {
	rsp, err := c.CreateRackTopo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRackTopoResponse(rsp)
}

// CreateReportTemplateWithBodyWithResponse request with arbitrary body returning *CreateReportTemplateResponse
func (c *ClientWithResponses) CreateReportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReportTemplateResponse, error) {
	rsp, err := c.CreateReportTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReportTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateReportTemplateWithResponse(ctx context.Context, body CreateReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReportTemplateResponse, error) {
	rsp, err := c.CreateReportTemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReportTemplateResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// CreateSnapshotPlanWithBodyWithResponse request with arbitrary body returning *CreateSnapshotPlanResponse
func (c *ClientWithResponses) CreateSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnapshotPlanResponse, error) {
	rsp, err := c.CreateSnapshotPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnapshotPlanResponse(rsp)
}

func (c *ClientWithResponses) CreateSnapshotPlanWithResponse(ctx context.Context, body CreateSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnapshotPlanResponse, error) {
	rsp, err := c.CreateSnapshotPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnapshotPlanResponse(rsp)
}

// CreateSnmpTransportWithBodyWithResponse request with arbitrary body returning *CreateSnmpTransportResponse
func (c *ClientWithResponses) CreateSnmpTransportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnmpTransportResponse, error) {
	rsp, err := c.CreateSnmpTransportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnmpTransportResponse(rsp)
}

func (c *ClientWithResponses) CreateSnmpTransportWithResponse(ctx context.Context, body CreateSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnmpTransportResponse, error) {
	rsp, err := c.CreateSnmpTransport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnmpTransportResponse(rsp)
}

// CreateSnmpTrapReceiverWithBodyWithResponse request with arbitrary body returning *CreateSnmpTrapReceiverResponse
func (c *ClientWithResponses) CreateSnmpTrapReceiverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnmpTrapReceiverResponse, error) {
	rsp, err := c.CreateSnmpTrapReceiverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnmpTrapReceiverResponse(rsp)
}

func (c *ClientWithResponses) CreateSnmpTrapReceiverWithResponse(ctx context.Context, body CreateSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnmpTrapReceiverResponse, error) {
	rsp, err := c.CreateSnmpTrapReceiver(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnmpTrapReceiverResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// CreateVdsWithBodyWithResponse request with arbitrary body returning *CreateVdsResponse
func (c *ClientWithResponses) CreateVdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVdsResponse, error) {
	rsp, err := c.CreateVdsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVdsResponse(rsp)
}

func (c *ClientWithResponses) CreateVdsWithResponse(ctx context.Context, body CreateVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVdsResponse, error) {
	rsp, err := c.CreateVds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVdsResponse(rsp)
}

// CreateVdsWithAccessVlanWithBodyWithResponse request with arbitrary body returning *CreateVdsWithAccessVlanResponse
func (c *ClientWithResponses) CreateVdsWithAccessVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVdsWithAccessVlanResponse, error) {
	rsp, err := c.CreateVdsWithAccessVlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVdsWithAccessVlanResponse(rsp)
}

func (c *ClientWithResponses) CreateVdsWithAccessVlanWithResponse(ctx context.Context, body CreateVdsWithAccessVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVdsWithAccessVlanResponse, error) {
	rsp, err := c.CreateVdsWithAccessVlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVdsWithAccessVlanResponse(rsp)
}

// CreateVdsWithMigrateVlanWithBodyWithResponse request with arbitrary body returning *CreateVdsWithMigrateVlanResponse
func (c *ClientWithResponses) CreateVdsWithMigrateVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVdsWithMigrateVlanResponse, error) {
	rsp, err := c.CreateVdsWithMigrateVlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVdsWithMigrateVlanResponse(rsp)
}

func (c *ClientWithResponses) CreateVdsWithMigrateVlanWithResponse(ctx context.Context, body CreateVdsWithMigrateVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVdsWithMigrateVlanResponse, error) {
	rsp, err := c.CreateVdsWithMigrateVlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVdsWithMigrateVlanResponse(rsp)
}

// CreateViewWithBodyWithResponse request with arbitrary body returning *CreateViewResponse
func (c *ClientWithResponses) CreateViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateViewResponse, error) {
	rsp, err := c.CreateViewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateViewResponse(rsp)
}

func (c *ClientWithResponses) CreateViewWithResponse(ctx context.Context, body CreateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateViewResponse, error) {
	rsp, err := c.CreateView(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateViewResponse(rsp)
}

// CreateVmWithBodyWithResponse request with arbitrary body returning *CreateVmResponse
func (c *ClientWithResponses) CreateVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmResponse, error) {
	rsp, err := c.CreateVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmResponse(rsp)
}

func (c *ClientWithResponses) CreateVmWithResponse(ctx context.Context, body CreateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmResponse, error) {
	rsp, err := c.CreateVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmResponse(rsp)
}

// CreateVmFolderWithBodyWithResponse request with arbitrary body returning *CreateVmFolderResponse
func (c *ClientWithResponses) CreateVmFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmFolderResponse, error) {
	rsp, err := c.CreateVmFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmFolderResponse(rsp)
}

func (c *ClientWithResponses) CreateVmFolderWithResponse(ctx context.Context, body CreateVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmFolderResponse, error) {
	rsp, err := c.CreateVmFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmFolderResponse(rsp)
}

// CreateVmFromTemplateWithBodyWithResponse request with arbitrary body returning *CreateVmFromTemplateResponse
func (c *ClientWithResponses) CreateVmFromTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmFromTemplateResponse, error) {
	rsp, err := c.CreateVmFromTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmFromTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateVmFromTemplateWithResponse(ctx context.Context, body CreateVmFromTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmFromTemplateResponse, error) {
	rsp, err := c.CreateVmFromTemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmFromTemplateResponse(rsp)
}

// CreateVmPlacementGroupWithBodyWithResponse request with arbitrary body returning *CreateVmPlacementGroupResponse
func (c *ClientWithResponses) CreateVmPlacementGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmPlacementGroupResponse, error) {
	rsp, err := c.CreateVmPlacementGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmPlacementGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateVmPlacementGroupWithResponse(ctx context.Context, body CreateVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmPlacementGroupResponse, error) {
	rsp, err := c.CreateVmPlacementGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmPlacementGroupResponse(rsp)
}

// CreateVmSnapshotWithBodyWithResponse request with arbitrary body returning *CreateVmSnapshotResponse
func (c *ClientWithResponses) CreateVmSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmSnapshotResponse, error) {
	rsp, err := c.CreateVmSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmSnapshotResponse(rsp)
}

func (c *ClientWithResponses) CreateVmSnapshotWithResponse(ctx context.Context, body CreateVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmSnapshotResponse, error) {
	rsp, err := c.CreateVmSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmSnapshotResponse(rsp)
}

// CreateVmVlanWithBodyWithResponse request with arbitrary body returning *CreateVmVlanResponse
func (c *ClientWithResponses) CreateVmVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmVlanResponse, error) {
	rsp, err := c.CreateVmVlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmVlanResponse(rsp)
}

func (c *ClientWithResponses) CreateVmVlanWithResponse(ctx context.Context, body CreateVmVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmVlanResponse, error) {
	rsp, err := c.CreateVmVlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmVlanResponse(rsp)
}

// CreateVmVolumeWithBodyWithResponse request with arbitrary body returning *CreateVmVolumeResponse
func (c *ClientWithResponses) CreateVmVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmVolumeResponse, error) {
	rsp, err := c.CreateVmVolumeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmVolumeResponse(rsp)
}

func (c *ClientWithResponses) CreateVmVolumeWithResponse(ctx context.Context, body CreateVmVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmVolumeResponse, error) {
	rsp, err := c.CreateVmVolume(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmVolumeResponse(rsp)
}

// DeleteBrickTopoWithBodyWithResponse request with arbitrary body returning *DeleteBrickTopoResponse
func (c *ClientWithResponses) DeleteBrickTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBrickTopoResponse, error) {
	rsp, err := c.DeleteBrickTopoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBrickTopoResponse(rsp)
}

func (c *ClientWithResponses) DeleteBrickTopoWithResponse(ctx context.Context, body DeleteBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBrickTopoResponse, error) {
	rsp, err := c.DeleteBrickTopo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBrickTopoResponse(rsp)
}

// DeleteClusterWithBodyWithResponse request with arbitrary body returning *DeleteClusterResponse
func (c *ClientWithResponses) DeleteClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, body DeleteClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

// DeleteClusterRecycleBinSettingWithBodyWithResponse request with arbitrary body returning *DeleteClusterRecycleBinSettingResponse
func (c *ClientWithResponses) DeleteClusterRecycleBinSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClusterRecycleBinSettingResponse, error) {
	rsp, err := c.DeleteClusterRecycleBinSettingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterRecycleBinSettingResponse(rsp)
}

func (c *ClientWithResponses) DeleteClusterRecycleBinSettingWithResponse(ctx context.Context, body DeleteClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClusterRecycleBinSettingResponse, error) {
	rsp, err := c.DeleteClusterRecycleBinSetting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterRecycleBinSettingResponse(rsp)
}

// DeleteConsistencyGroupWithBodyWithResponse request with arbitrary body returning *DeleteConsistencyGroupResponse
func (c *ClientWithResponses) DeleteConsistencyGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConsistencyGroupResponse, error) {
	rsp, err := c.DeleteConsistencyGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsistencyGroupResponse(rsp)
}

func (c *ClientWithResponses) DeleteConsistencyGroupWithResponse(ctx context.Context, body DeleteConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConsistencyGroupResponse, error) {
	rsp, err := c.DeleteConsistencyGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsistencyGroupResponse(rsp)
}

// DeleteConsistencyGroupSnapshotWithBodyWithResponse request with arbitrary body returning *DeleteConsistencyGroupSnapshotResponse
func (c *ClientWithResponses) DeleteConsistencyGroupSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConsistencyGroupSnapshotResponse, error) {
	rsp, err := c.DeleteConsistencyGroupSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsistencyGroupSnapshotResponse(rsp)
}

func (c *ClientWithResponses) DeleteConsistencyGroupSnapshotWithResponse(ctx context.Context, body DeleteConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConsistencyGroupSnapshotResponse, error) {
	rsp, err := c.DeleteConsistencyGroupSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsistencyGroupSnapshotResponse(rsp)
}

// DeleteDatacenterWithBodyWithResponse request with arbitrary body returning *DeleteDatacenterResponse
func (c *ClientWithResponses) DeleteDatacenterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDatacenterResponse, error) {
	rsp, err := c.DeleteDatacenterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatacenterResponse(rsp)
}

func (c *ClientWithResponses) DeleteDatacenterWithResponse(ctx context.Context, body DeleteDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDatacenterResponse, error) {
	rsp, err := c.DeleteDatacenter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatacenterResponse(rsp)
}

// DeleteElfImageWithBodyWithResponse request with arbitrary body returning *DeleteElfImageResponse
func (c *ClientWithResponses) DeleteElfImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteElfImageResponse, error) {
	rsp, err := c.DeleteElfImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteElfImageResponse(rsp)
}

func (c *ClientWithResponses) DeleteElfImageWithResponse(ctx context.Context, body DeleteElfImageJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteElfImageResponse, error) {
	rsp, err := c.DeleteElfImage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteElfImageResponse(rsp)
}

// DeleteEntityFilterWithBodyWithResponse request with arbitrary body returning *DeleteEntityFilterResponse
func (c *ClientWithResponses) DeleteEntityFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteEntityFilterResponse, error) {
	rsp, err := c.DeleteEntityFilterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEntityFilterResponse(rsp)
}

func (c *ClientWithResponses) DeleteEntityFilterWithResponse(ctx context.Context, body DeleteEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteEntityFilterResponse, error) {
	rsp, err := c.DeleteEntityFilter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEntityFilterResponse(rsp)
}

// DeleteGraphWithBodyWithResponse request with arbitrary body returning *DeleteGraphResponse
func (c *ClientWithResponses) DeleteGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGraphResponse, error) {
	rsp, err := c.DeleteGraphWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGraphResponse(rsp)
}

func (c *ClientWithResponses) DeleteGraphWithResponse(ctx context.Context, body DeleteGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGraphResponse, error) {
	rsp, err := c.DeleteGraph(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGraphResponse(rsp)
}

// DeleteIscsiLunWithBodyWithResponse request with arbitrary body returning *DeleteIscsiLunResponse
func (c *ClientWithResponses) DeleteIscsiLunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiLunResponse, error) {
	rsp, err := c.DeleteIscsiLunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiLunResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiLunWithResponse(ctx context.Context, body DeleteIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiLunResponse, error) {
	rsp, err := c.DeleteIscsiLun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiLunResponse(rsp)
}

// DeleteIscsiLunSnapshotWithBodyWithResponse request with arbitrary body returning *DeleteIscsiLunSnapshotResponse
func (c *ClientWithResponses) DeleteIscsiLunSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiLunSnapshotResponse, error) {
	rsp, err := c.DeleteIscsiLunSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiLunSnapshotResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiLunSnapshotWithResponse(ctx context.Context, body DeleteIscsiLunSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiLunSnapshotResponse, error) {
	rsp, err := c.DeleteIscsiLunSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiLunSnapshotResponse(rsp)
}

// DeleteIscsiTargetWithBodyWithResponse request with arbitrary body returning *DeleteIscsiTargetResponse
func (c *ClientWithResponses) DeleteIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetResponse, error) {
	rsp, err := c.DeleteIscsiTargetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiTargetWithResponse(ctx context.Context, body DeleteIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetResponse, error) {
	rsp, err := c.DeleteIscsiTarget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetResponse(rsp)
}

// DeleteLabelWithBodyWithResponse request with arbitrary body returning *DeleteLabelResponse
func (c *ClientWithResponses) DeleteLabelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteLabelResponse, error) {
	rsp, err := c.DeleteLabelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLabelResponse(rsp)
}

func (c *ClientWithResponses) DeleteLabelWithResponse(ctx context.Context, body DeleteLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteLabelResponse, error) {
	rsp, err := c.DeleteLabel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLabelResponse(rsp)
}

// DeleteNamespaceGroupWithBodyWithResponse request with arbitrary body returning *DeleteNamespaceGroupResponse
func (c *ClientWithResponses) DeleteNamespaceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNamespaceGroupResponse, error) {
	rsp, err := c.DeleteNamespaceGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNamespaceGroupResponse(rsp)
}

func (c *ClientWithResponses) DeleteNamespaceGroupWithResponse(ctx context.Context, body DeleteNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNamespaceGroupResponse, error) {
	rsp, err := c.DeleteNamespaceGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNamespaceGroupResponse(rsp)
}

// DeleteNfsExportWithBodyWithResponse request with arbitrary body returning *DeleteNfsExportResponse
func (c *ClientWithResponses) DeleteNfsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNfsExportResponse, error) {
	rsp, err := c.DeleteNfsExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNfsExportResponse(rsp)
}

func (c *ClientWithResponses) DeleteNfsExportWithResponse(ctx context.Context, body DeleteNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNfsExportResponse, error) {
	rsp, err := c.DeleteNfsExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNfsExportResponse(rsp)
}

// DeleteNvmfNamespaceWithBodyWithResponse request with arbitrary body returning *DeleteNvmfNamespaceResponse
func (c *ClientWithResponses) DeleteNvmfNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNvmfNamespaceResponse, error) {
	rsp, err := c.DeleteNvmfNamespaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNvmfNamespaceResponse(rsp)
}

func (c *ClientWithResponses) DeleteNvmfNamespaceWithResponse(ctx context.Context, body DeleteNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNvmfNamespaceResponse, error) {
	rsp, err := c.DeleteNvmfNamespace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNvmfNamespaceResponse(rsp)
}

// DeleteNvmfNamespaceSnapshotWithBodyWithResponse request with arbitrary body returning *DeleteNvmfNamespaceSnapshotResponse
func (c *ClientWithResponses) DeleteNvmfNamespaceSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNvmfNamespaceSnapshotResponse, error) {
	rsp, err := c.DeleteNvmfNamespaceSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNvmfNamespaceSnapshotResponse(rsp)
}

func (c *ClientWithResponses) DeleteNvmfNamespaceSnapshotWithResponse(ctx context.Context, body DeleteNvmfNamespaceSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNvmfNamespaceSnapshotResponse, error) {
	rsp, err := c.DeleteNvmfNamespaceSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNvmfNamespaceSnapshotResponse(rsp)
}

// DeleteNvmfSubsystemWithBodyWithResponse request with arbitrary body returning *DeleteNvmfSubsystemResponse
func (c *ClientWithResponses) DeleteNvmfSubsystemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNvmfSubsystemResponse, error) {
	rsp, err := c.DeleteNvmfSubsystemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNvmfSubsystemResponse(rsp)
}

func (c *ClientWithResponses) DeleteNvmfSubsystemWithResponse(ctx context.Context, body DeleteNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNvmfSubsystemResponse, error) {
	rsp, err := c.DeleteNvmfSubsystem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNvmfSubsystemResponse(rsp)
}

// DeleteOrganizationWithBodyWithResponse request with arbitrary body returning *DeleteOrganizationResponse
func (c *ClientWithResponses) DeleteOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationResponse(rsp)
}

func (c *ClientWithResponses) DeleteOrganizationWithResponse(ctx context.Context, body DeleteOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationResponse(rsp)
}

// DeleteRackTopoWithBodyWithResponse request with arbitrary body returning *DeleteRackTopoResponse
func (c *ClientWithResponses) DeleteRackTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRackTopoResponse, error) {
	rsp, err := c.DeleteRackTopoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRackTopoResponse(rsp)
}

func (c *ClientWithResponses) DeleteRackTopoWithResponse(ctx context.Context, body DeleteRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRackTopoResponse, error) {
	rsp, err := c.DeleteRackTopo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRackTopoResponse(rsp)
}

// DeleteReportTemplateWithBodyWithResponse request with arbitrary body returning *DeleteReportTemplateResponse
func (c *ClientWithResponses) DeleteReportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteReportTemplateResponse, error) {
	rsp, err := c.DeleteReportTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReportTemplateResponse(rsp)
}

func (c *ClientWithResponses) DeleteReportTemplateWithResponse(ctx context.Context, body DeleteReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteReportTemplateResponse, error) {
	rsp, err := c.DeleteReportTemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReportTemplateResponse(rsp)
}

// DeleteRoleWithBodyWithResponse request with arbitrary body returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, body DeleteRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// DeleteSnapshotGroupWithBodyWithResponse request with arbitrary body returning *DeleteSnapshotGroupResponse
func (c *ClientWithResponses) DeleteSnapshotGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSnapshotGroupResponse, error) {
	rsp, err := c.DeleteSnapshotGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnapshotGroupResponse(rsp)
}

func (c *ClientWithResponses) DeleteSnapshotGroupWithResponse(ctx context.Context, body DeleteSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSnapshotGroupResponse, error) {
	rsp, err := c.DeleteSnapshotGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnapshotGroupResponse(rsp)
}

// DeleteSnapshotPlanWithBodyWithResponse request with arbitrary body returning *DeleteSnapshotPlanResponse
func (c *ClientWithResponses) DeleteSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSnapshotPlanResponse, error) {
	rsp, err := c.DeleteSnapshotPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnapshotPlanResponse(rsp)
}

func (c *ClientWithResponses) DeleteSnapshotPlanWithResponse(ctx context.Context, body DeleteSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSnapshotPlanResponse, error) {
	rsp, err := c.DeleteSnapshotPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnapshotPlanResponse(rsp)
}

// DeleteSnmpTransportWithBodyWithResponse request with arbitrary body returning *DeleteSnmpTransportResponse
func (c *ClientWithResponses) DeleteSnmpTransportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSnmpTransportResponse, error) {
	rsp, err := c.DeleteSnmpTransportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnmpTransportResponse(rsp)
}

func (c *ClientWithResponses) DeleteSnmpTransportWithResponse(ctx context.Context, body DeleteSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSnmpTransportResponse, error) {
	rsp, err := c.DeleteSnmpTransport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnmpTransportResponse(rsp)
}

// DeleteSnmpTrapReceiverWithBodyWithResponse request with arbitrary body returning *DeleteSnmpTrapReceiverResponse
func (c *ClientWithResponses) DeleteSnmpTrapReceiverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSnmpTrapReceiverResponse, error) {
	rsp, err := c.DeleteSnmpTrapReceiverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnmpTrapReceiverResponse(rsp)
}

func (c *ClientWithResponses) DeleteSnmpTrapReceiverWithResponse(ctx context.Context, body DeleteSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSnmpTrapReceiverResponse, error) {
	rsp, err := c.DeleteSnmpTrapReceiver(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnmpTrapReceiverResponse(rsp)
}

// DeleteUserWithBodyWithResponse request with arbitrary body returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// DeleteVdsWithBodyWithResponse request with arbitrary body returning *DeleteVdsResponse
func (c *ClientWithResponses) DeleteVdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVdsResponse, error) {
	rsp, err := c.DeleteVdsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVdsResponse(rsp)
}

func (c *ClientWithResponses) DeleteVdsWithResponse(ctx context.Context, body DeleteVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVdsResponse, error) {
	rsp, err := c.DeleteVds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVdsResponse(rsp)
}

// DeleteViewWithBodyWithResponse request with arbitrary body returning *DeleteViewResponse
func (c *ClientWithResponses) DeleteViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteViewResponse, error) {
	rsp, err := c.DeleteViewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteViewResponse(rsp)
}

func (c *ClientWithResponses) DeleteViewWithResponse(ctx context.Context, body DeleteViewJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteViewResponse, error) {
	rsp, err := c.DeleteView(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteViewResponse(rsp)
}

// DeleteVmWithBodyWithResponse request with arbitrary body returning *DeleteVmResponse
func (c *ClientWithResponses) DeleteVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmResponse, error) {
	rsp, err := c.DeleteVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmWithResponse(ctx context.Context, body DeleteVmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmResponse, error) {
	rsp, err := c.DeleteVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmResponse(rsp)
}

// DeleteVmFolderWithBodyWithResponse request with arbitrary body returning *DeleteVmFolderResponse
func (c *ClientWithResponses) DeleteVmFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmFolderResponse, error) {
	rsp, err := c.DeleteVmFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmFolderResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmFolderWithResponse(ctx context.Context, body DeleteVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmFolderResponse, error) {
	rsp, err := c.DeleteVmFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmFolderResponse(rsp)
}

// DeleteVmPlacementGroupWithBodyWithResponse request with arbitrary body returning *DeleteVmPlacementGroupResponse
func (c *ClientWithResponses) DeleteVmPlacementGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmPlacementGroupResponse, error) {
	rsp, err := c.DeleteVmPlacementGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmPlacementGroupResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmPlacementGroupWithResponse(ctx context.Context, body DeleteVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmPlacementGroupResponse, error) {
	rsp, err := c.DeleteVmPlacementGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmPlacementGroupResponse(rsp)
}

// DeleteVmSnapshotWithBodyWithResponse request with arbitrary body returning *DeleteVmSnapshotResponse
func (c *ClientWithResponses) DeleteVmSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmSnapshotResponse, error) {
	rsp, err := c.DeleteVmSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmSnapshotResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmSnapshotWithResponse(ctx context.Context, body DeleteVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmSnapshotResponse, error) {
	rsp, err := c.DeleteVmSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmSnapshotResponse(rsp)
}

// DeleteVmTemplateFromVmWithBodyWithResponse request with arbitrary body returning *DeleteVmTemplateFromVmResponse
func (c *ClientWithResponses) DeleteVmTemplateFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmTemplateFromVmResponse, error) {
	rsp, err := c.DeleteVmTemplateFromVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmTemplateFromVmResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmTemplateFromVmWithResponse(ctx context.Context, body DeleteVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmTemplateFromVmResponse, error) {
	rsp, err := c.DeleteVmTemplateFromVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmTemplateFromVmResponse(rsp)
}

// DeleteVlanWithBodyWithResponse request with arbitrary body returning *DeleteVlanResponse
func (c *ClientWithResponses) DeleteVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVlanResponse, error) {
	rsp, err := c.DeleteVlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVlanResponse(rsp)
}

func (c *ClientWithResponses) DeleteVlanWithResponse(ctx context.Context, body DeleteVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVlanResponse, error) {
	rsp, err := c.DeleteVlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVlanResponse(rsp)
}

// DeleteVmVolumeFromVmWithBodyWithResponse request with arbitrary body returning *DeleteVmVolumeFromVmResponse
func (c *ClientWithResponses) DeleteVmVolumeFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmVolumeFromVmResponse, error) {
	rsp, err := c.DeleteVmVolumeFromVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmVolumeFromVmResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmVolumeFromVmWithResponse(ctx context.Context, body DeleteVmVolumeFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmVolumeFromVmResponse, error) {
	rsp, err := c.DeleteVmVolumeFromVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmVolumeFromVmResponse(rsp)
}

// ExecuteSnapshotPlanWithBodyWithResponse request with arbitrary body returning *ExecuteSnapshotPlanResponse
func (c *ClientWithResponses) ExecuteSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSnapshotPlanResponse, error) {
	rsp, err := c.ExecuteSnapshotPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSnapshotPlanResponse(rsp)
}

func (c *ClientWithResponses) ExecuteSnapshotPlanWithResponse(ctx context.Context, body ExecuteSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSnapshotPlanResponse, error) {
	rsp, err := c.ExecuteSnapshotPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSnapshotPlanResponse(rsp)
}

// ForceRestartVmWithBodyWithResponse request with arbitrary body returning *ForceRestartVmResponse
func (c *ClientWithResponses) ForceRestartVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ForceRestartVmResponse, error) {
	rsp, err := c.ForceRestartVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForceRestartVmResponse(rsp)
}

func (c *ClientWithResponses) ForceRestartVmWithResponse(ctx context.Context, body ForceRestartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ForceRestartVmResponse, error) {
	rsp, err := c.ForceRestartVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForceRestartVmResponse(rsp)
}

// GenerateFromReportTemplateWithBodyWithResponse request with arbitrary body returning *GenerateFromReportTemplateResponse
func (c *ClientWithResponses) GenerateFromReportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateFromReportTemplateResponse, error) {
	rsp, err := c.GenerateFromReportTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateFromReportTemplateResponse(rsp)
}

func (c *ClientWithResponses) GenerateFromReportTemplateWithResponse(ctx context.Context, body GenerateFromReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateFromReportTemplateResponse, error) {
	rsp, err := c.GenerateFromReportTemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateFromReportTemplateResponse(rsp)
}

// GetAlertNotifiersWithBodyWithResponse request with arbitrary body returning *GetAlertNotifiersResponse
func (c *ClientWithResponses) GetAlertNotifiersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertNotifiersResponse, error) {
	rsp, err := c.GetAlertNotifiersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertNotifiersResponse(rsp)
}

func (c *ClientWithResponses) GetAlertNotifiersWithResponse(ctx context.Context, body GetAlertNotifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertNotifiersResponse, error) {
	rsp, err := c.GetAlertNotifiers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertNotifiersResponse(rsp)
}

// GetAlertNotifiersConnectionWithBodyWithResponse request with arbitrary body returning *GetAlertNotifiersConnectionResponse
func (c *ClientWithResponses) GetAlertNotifiersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertNotifiersConnectionResponse, error) {
	rsp, err := c.GetAlertNotifiersConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertNotifiersConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetAlertNotifiersConnectionWithResponse(ctx context.Context, body GetAlertNotifiersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertNotifiersConnectionResponse, error) {
	rsp, err := c.GetAlertNotifiersConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertNotifiersConnectionResponse(rsp)
}

// GetAlertRulesWithBodyWithResponse request with arbitrary body returning *GetAlertRulesResponse
func (c *ClientWithResponses) GetAlertRulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertRulesResponse, error) {
	rsp, err := c.GetAlertRulesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertRulesResponse(rsp)
}

func (c *ClientWithResponses) GetAlertRulesWithResponse(ctx context.Context, body GetAlertRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertRulesResponse, error) {
	rsp, err := c.GetAlertRules(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertRulesResponse(rsp)
}

// GetAlertRulesConnectionWithBodyWithResponse request with arbitrary body returning *GetAlertRulesConnectionResponse
func (c *ClientWithResponses) GetAlertRulesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertRulesConnectionResponse, error) {
	rsp, err := c.GetAlertRulesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertRulesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetAlertRulesConnectionWithResponse(ctx context.Context, body GetAlertRulesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertRulesConnectionResponse, error) {
	rsp, err := c.GetAlertRulesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertRulesConnectionResponse(rsp)
}

// GetAlertsWithBodyWithResponse request with arbitrary body returning *GetAlertsResponse
func (c *ClientWithResponses) GetAlertsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertsResponse, error) {
	rsp, err := c.GetAlertsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertsResponse(rsp)
}

func (c *ClientWithResponses) GetAlertsWithResponse(ctx context.Context, body GetAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertsResponse, error) {
	rsp, err := c.GetAlerts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertsResponse(rsp)
}

// GetAlertsConnectionWithBodyWithResponse request with arbitrary body returning *GetAlertsConnectionResponse
func (c *ClientWithResponses) GetAlertsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAlertsConnectionResponse, error) {
	rsp, err := c.GetAlertsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetAlertsConnectionWithResponse(ctx context.Context, body GetAlertsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAlertsConnectionResponse, error) {
	rsp, err := c.GetAlertsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertsConnectionResponse(rsp)
}

// GetApplicationsWithBodyWithResponse request with arbitrary body returning *GetApplicationsResponse
func (c *ClientWithResponses) GetApplicationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error) {
	rsp, err := c.GetApplicationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsResponse(rsp)
}

func (c *ClientWithResponses) GetApplicationsWithResponse(ctx context.Context, body GetApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error) {
	rsp, err := c.GetApplications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsResponse(rsp)
}

// GetApplicationsConnectionWithBodyWithResponse request with arbitrary body returning *GetApplicationsConnectionResponse
func (c *ClientWithResponses) GetApplicationsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApplicationsConnectionResponse, error) {
	rsp, err := c.GetApplicationsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetApplicationsConnectionWithResponse(ctx context.Context, body GetApplicationsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApplicationsConnectionResponse, error) {
	rsp, err := c.GetApplicationsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsConnectionResponse(rsp)
}

// GetBrickTopoesWithBodyWithResponse request with arbitrary body returning *GetBrickTopoesResponse
func (c *ClientWithResponses) GetBrickTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBrickTopoesResponse, error) {
	rsp, err := c.GetBrickTopoesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBrickTopoesResponse(rsp)
}

func (c *ClientWithResponses) GetBrickTopoesWithResponse(ctx context.Context, body GetBrickTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBrickTopoesResponse, error) {
	rsp, err := c.GetBrickTopoes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBrickTopoesResponse(rsp)
}

// GetBrickTopoesConnectionWithBodyWithResponse request with arbitrary body returning *GetBrickTopoesConnectionResponse
func (c *ClientWithResponses) GetBrickTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBrickTopoesConnectionResponse, error) {
	rsp, err := c.GetBrickTopoesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBrickTopoesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetBrickTopoesConnectionWithResponse(ctx context.Context, body GetBrickTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBrickTopoesConnectionResponse, error) {
	rsp, err := c.GetBrickTopoesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBrickTopoesConnectionResponse(rsp)
}

// GetClusterImagesWithBodyWithResponse request with arbitrary body returning *GetClusterImagesResponse
func (c *ClientWithResponses) GetClusterImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterImagesResponse, error) {
	rsp, err := c.GetClusterImagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterImagesResponse(rsp)
}

func (c *ClientWithResponses) GetClusterImagesWithResponse(ctx context.Context, body GetClusterImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterImagesResponse, error) {
	rsp, err := c.GetClusterImages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterImagesResponse(rsp)
}

// GetClusterImagesConnectionWithBodyWithResponse request with arbitrary body returning *GetClusterImagesConnectionResponse
func (c *ClientWithResponses) GetClusterImagesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterImagesConnectionResponse, error) {
	rsp, err := c.GetClusterImagesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterImagesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetClusterImagesConnectionWithResponse(ctx context.Context, body GetClusterImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterImagesConnectionResponse, error) {
	rsp, err := c.GetClusterImagesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterImagesConnectionResponse(rsp)
}

// GetClusterSettingsesWithBodyWithResponse request with arbitrary body returning *GetClusterSettingsesResponse
func (c *ClientWithResponses) GetClusterSettingsesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterSettingsesResponse, error) {
	rsp, err := c.GetClusterSettingsesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterSettingsesResponse(rsp)
}

func (c *ClientWithResponses) GetClusterSettingsesWithResponse(ctx context.Context, body GetClusterSettingsesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterSettingsesResponse, error) {
	rsp, err := c.GetClusterSettingses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterSettingsesResponse(rsp)
}

// GetClusterSettingsesConnectionWithBodyWithResponse request with arbitrary body returning *GetClusterSettingsesConnectionResponse
func (c *ClientWithResponses) GetClusterSettingsesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterSettingsesConnectionResponse, error) {
	rsp, err := c.GetClusterSettingsesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterSettingsesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetClusterSettingsesConnectionWithResponse(ctx context.Context, body GetClusterSettingsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterSettingsesConnectionResponse, error) {
	rsp, err := c.GetClusterSettingsesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterSettingsesConnectionResponse(rsp)
}

// GetClusterTopoesWithBodyWithResponse request with arbitrary body returning *GetClusterTopoesResponse
func (c *ClientWithResponses) GetClusterTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterTopoesResponse, error) {
	rsp, err := c.GetClusterTopoesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterTopoesResponse(rsp)
}

func (c *ClientWithResponses) GetClusterTopoesWithResponse(ctx context.Context, body GetClusterTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterTopoesResponse, error) {
	rsp, err := c.GetClusterTopoes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterTopoesResponse(rsp)
}

// GetClusterTopoesConnectionWithBodyWithResponse request with arbitrary body returning *GetClusterTopoesConnectionResponse
func (c *ClientWithResponses) GetClusterTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterTopoesConnectionResponse, error) {
	rsp, err := c.GetClusterTopoesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterTopoesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetClusterTopoesConnectionWithResponse(ctx context.Context, body GetClusterTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterTopoesConnectionResponse, error) {
	rsp, err := c.GetClusterTopoesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterTopoesConnectionResponse(rsp)
}

// GetClusterUpgradeHistoriesWithBodyWithResponse request with arbitrary body returning *GetClusterUpgradeHistoriesResponse
func (c *ClientWithResponses) GetClusterUpgradeHistoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterUpgradeHistoriesResponse, error) {
	rsp, err := c.GetClusterUpgradeHistoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterUpgradeHistoriesResponse(rsp)
}

func (c *ClientWithResponses) GetClusterUpgradeHistoriesWithResponse(ctx context.Context, body GetClusterUpgradeHistoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterUpgradeHistoriesResponse, error) {
	rsp, err := c.GetClusterUpgradeHistories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterUpgradeHistoriesResponse(rsp)
}

// GetClusterUpgradeHistoriesConnectionWithBodyWithResponse request with arbitrary body returning *GetClusterUpgradeHistoriesConnectionResponse
func (c *ClientWithResponses) GetClusterUpgradeHistoriesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClusterUpgradeHistoriesConnectionResponse, error) {
	rsp, err := c.GetClusterUpgradeHistoriesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterUpgradeHistoriesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetClusterUpgradeHistoriesConnectionWithResponse(ctx context.Context, body GetClusterUpgradeHistoriesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClusterUpgradeHistoriesConnectionResponse, error) {
	rsp, err := c.GetClusterUpgradeHistoriesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterUpgradeHistoriesConnectionResponse(rsp)
}

// GetClustersWithBodyWithResponse request with arbitrary body returning *GetClustersResponse
func (c *ClientWithResponses) GetClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClustersResponse, error) {
	rsp, err := c.GetClustersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersResponse(rsp)
}

func (c *ClientWithResponses) GetClustersWithResponse(ctx context.Context, body GetClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClustersResponse, error) {
	rsp, err := c.GetClusters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersResponse(rsp)
}

// GetClustersConnectionWithBodyWithResponse request with arbitrary body returning *GetClustersConnectionResponse
func (c *ClientWithResponses) GetClustersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClustersConnectionResponse, error) {
	rsp, err := c.GetClustersConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetClustersConnectionWithResponse(ctx context.Context, body GetClustersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetClustersConnectionResponse, error) {
	rsp, err := c.GetClustersConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersConnectionResponse(rsp)
}

// GetConsistencyGroupSnapshotsWithBodyWithResponse request with arbitrary body returning *GetConsistencyGroupSnapshotsResponse
func (c *ClientWithResponses) GetConsistencyGroupSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConsistencyGroupSnapshotsResponse, error) {
	rsp, err := c.GetConsistencyGroupSnapshotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsistencyGroupSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) GetConsistencyGroupSnapshotsWithResponse(ctx context.Context, body GetConsistencyGroupSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConsistencyGroupSnapshotsResponse, error) {
	rsp, err := c.GetConsistencyGroupSnapshots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsistencyGroupSnapshotsResponse(rsp)
}

// GetConsistencyGroupSnapshotsConnectionWithBodyWithResponse request with arbitrary body returning *GetConsistencyGroupSnapshotsConnectionResponse
func (c *ClientWithResponses) GetConsistencyGroupSnapshotsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConsistencyGroupSnapshotsConnectionResponse, error) {
	rsp, err := c.GetConsistencyGroupSnapshotsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsistencyGroupSnapshotsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetConsistencyGroupSnapshotsConnectionWithResponse(ctx context.Context, body GetConsistencyGroupSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConsistencyGroupSnapshotsConnectionResponse, error) {
	rsp, err := c.GetConsistencyGroupSnapshotsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsistencyGroupSnapshotsConnectionResponse(rsp)
}

// GetConsistencyGroupsWithBodyWithResponse request with arbitrary body returning *GetConsistencyGroupsResponse
func (c *ClientWithResponses) GetConsistencyGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConsistencyGroupsResponse, error) {
	rsp, err := c.GetConsistencyGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsistencyGroupsResponse(rsp)
}

func (c *ClientWithResponses) GetConsistencyGroupsWithResponse(ctx context.Context, body GetConsistencyGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConsistencyGroupsResponse, error) {
	rsp, err := c.GetConsistencyGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsistencyGroupsResponse(rsp)
}

// GetConsistencyGroupsConnectionWithBodyWithResponse request with arbitrary body returning *GetConsistencyGroupsConnectionResponse
func (c *ClientWithResponses) GetConsistencyGroupsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConsistencyGroupsConnectionResponse, error) {
	rsp, err := c.GetConsistencyGroupsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsistencyGroupsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetConsistencyGroupsConnectionWithResponse(ctx context.Context, body GetConsistencyGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConsistencyGroupsConnectionResponse, error) {
	rsp, err := c.GetConsistencyGroupsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsistencyGroupsConnectionResponse(rsp)
}

// GetDatacentersWithBodyWithResponse request with arbitrary body returning *GetDatacentersResponse
func (c *ClientWithResponses) GetDatacentersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDatacentersResponse, error) {
	rsp, err := c.GetDatacentersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatacentersResponse(rsp)
}

func (c *ClientWithResponses) GetDatacentersWithResponse(ctx context.Context, body GetDatacentersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDatacentersResponse, error) {
	rsp, err := c.GetDatacenters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatacentersResponse(rsp)
}

// GetDatacentersConnectionWithBodyWithResponse request with arbitrary body returning *GetDatacentersConnectionResponse
func (c *ClientWithResponses) GetDatacentersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDatacentersConnectionResponse, error) {
	rsp, err := c.GetDatacentersConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatacentersConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetDatacentersConnectionWithResponse(ctx context.Context, body GetDatacentersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDatacentersConnectionResponse, error) {
	rsp, err := c.GetDatacentersConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatacentersConnectionResponse(rsp)
}

// GetDeploysWithBodyWithResponse request with arbitrary body returning *GetDeploysResponse
func (c *ClientWithResponses) GetDeploysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDeploysResponse, error) {
	rsp, err := c.GetDeploysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploysResponse(rsp)
}

func (c *ClientWithResponses) GetDeploysWithResponse(ctx context.Context, body GetDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDeploysResponse, error) {
	rsp, err := c.GetDeploys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploysResponse(rsp)
}

// GetDeploysConnectionWithBodyWithResponse request with arbitrary body returning *GetDeploysConnectionResponse
func (c *ClientWithResponses) GetDeploysConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDeploysConnectionResponse, error) {
	rsp, err := c.GetDeploysConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploysConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetDeploysConnectionWithResponse(ctx context.Context, body GetDeploysConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDeploysConnectionResponse, error) {
	rsp, err := c.GetDeploysConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploysConnectionResponse(rsp)
}

// GetDiscoverHostsWithBodyWithResponse request with arbitrary body returning *GetDiscoverHostsResponse
func (c *ClientWithResponses) GetDiscoverHostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDiscoverHostsResponse, error) {
	rsp, err := c.GetDiscoverHostsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiscoverHostsResponse(rsp)
}

func (c *ClientWithResponses) GetDiscoverHostsWithResponse(ctx context.Context, body GetDiscoverHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDiscoverHostsResponse, error) {
	rsp, err := c.GetDiscoverHosts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiscoverHostsResponse(rsp)
}

// GetDisksWithBodyWithResponse request with arbitrary body returning *GetDisksResponse
func (c *ClientWithResponses) GetDisksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDisksResponse, error) {
	rsp, err := c.GetDisksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDisksResponse(rsp)
}

func (c *ClientWithResponses) GetDisksWithResponse(ctx context.Context, body GetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDisksResponse, error) {
	rsp, err := c.GetDisks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDisksResponse(rsp)
}

// GetDisksConnectionWithBodyWithResponse request with arbitrary body returning *GetDisksConnectionResponse
func (c *ClientWithResponses) GetDisksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDisksConnectionResponse, error) {
	rsp, err := c.GetDisksConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDisksConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetDisksConnectionWithResponse(ctx context.Context, body GetDisksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDisksConnectionResponse, error) {
	rsp, err := c.GetDisksConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDisksConnectionResponse(rsp)
}

// GetElfDataStoresWithBodyWithResponse request with arbitrary body returning *GetElfDataStoresResponse
func (c *ClientWithResponses) GetElfDataStoresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfDataStoresResponse, error) {
	rsp, err := c.GetElfDataStoresWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfDataStoresResponse(rsp)
}

func (c *ClientWithResponses) GetElfDataStoresWithResponse(ctx context.Context, body GetElfDataStoresJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfDataStoresResponse, error) {
	rsp, err := c.GetElfDataStores(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfDataStoresResponse(rsp)
}

// GetElfDataStoresConnectionWithBodyWithResponse request with arbitrary body returning *GetElfDataStoresConnectionResponse
func (c *ClientWithResponses) GetElfDataStoresConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfDataStoresConnectionResponse, error) {
	rsp, err := c.GetElfDataStoresConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfDataStoresConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetElfDataStoresConnectionWithResponse(ctx context.Context, body GetElfDataStoresConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfDataStoresConnectionResponse, error) {
	rsp, err := c.GetElfDataStoresConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfDataStoresConnectionResponse(rsp)
}

// GetElfImagesWithBodyWithResponse request with arbitrary body returning *GetElfImagesResponse
func (c *ClientWithResponses) GetElfImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfImagesResponse, error) {
	rsp, err := c.GetElfImagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfImagesResponse(rsp)
}

func (c *ClientWithResponses) GetElfImagesWithResponse(ctx context.Context, body GetElfImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfImagesResponse, error) {
	rsp, err := c.GetElfImages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfImagesResponse(rsp)
}

// GetElfImagesConnectionWithBodyWithResponse request with arbitrary body returning *GetElfImagesConnectionResponse
func (c *ClientWithResponses) GetElfImagesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfImagesConnectionResponse, error) {
	rsp, err := c.GetElfImagesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfImagesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetElfImagesConnectionWithResponse(ctx context.Context, body GetElfImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfImagesConnectionResponse, error) {
	rsp, err := c.GetElfImagesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfImagesConnectionResponse(rsp)
}

// GetElfStoragePoliciesWithBodyWithResponse request with arbitrary body returning *GetElfStoragePoliciesResponse
func (c *ClientWithResponses) GetElfStoragePoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfStoragePoliciesResponse, error) {
	rsp, err := c.GetElfStoragePoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfStoragePoliciesResponse(rsp)
}

func (c *ClientWithResponses) GetElfStoragePoliciesWithResponse(ctx context.Context, body GetElfStoragePoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfStoragePoliciesResponse, error) {
	rsp, err := c.GetElfStoragePolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfStoragePoliciesResponse(rsp)
}

// GetElfStoragePoliciesConnectionWithBodyWithResponse request with arbitrary body returning *GetElfStoragePoliciesConnectionResponse
func (c *ClientWithResponses) GetElfStoragePoliciesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetElfStoragePoliciesConnectionResponse, error) {
	rsp, err := c.GetElfStoragePoliciesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfStoragePoliciesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetElfStoragePoliciesConnectionWithResponse(ctx context.Context, body GetElfStoragePoliciesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetElfStoragePoliciesConnectionResponse, error) {
	rsp, err := c.GetElfStoragePoliciesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElfStoragePoliciesConnectionResponse(rsp)
}

// GetEntityFiltersWithBodyWithResponse request with arbitrary body returning *GetEntityFiltersResponse
func (c *ClientWithResponses) GetEntityFiltersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEntityFiltersResponse, error) {
	rsp, err := c.GetEntityFiltersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntityFiltersResponse(rsp)
}

func (c *ClientWithResponses) GetEntityFiltersWithResponse(ctx context.Context, body GetEntityFiltersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEntityFiltersResponse, error) {
	rsp, err := c.GetEntityFilters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntityFiltersResponse(rsp)
}

// GetEntityFiltersConnectionWithBodyWithResponse request with arbitrary body returning *GetEntityFiltersConnectionResponse
func (c *ClientWithResponses) GetEntityFiltersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEntityFiltersConnectionResponse, error) {
	rsp, err := c.GetEntityFiltersConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntityFiltersConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetEntityFiltersConnectionWithResponse(ctx context.Context, body GetEntityFiltersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEntityFiltersConnectionResponse, error) {
	rsp, err := c.GetEntityFiltersConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntityFiltersConnectionResponse(rsp)
}

// GetGlobalAlertRulesWithBodyWithResponse request with arbitrary body returning *GetGlobalAlertRulesResponse
func (c *ClientWithResponses) GetGlobalAlertRulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGlobalAlertRulesResponse, error) {
	rsp, err := c.GetGlobalAlertRulesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalAlertRulesResponse(rsp)
}

func (c *ClientWithResponses) GetGlobalAlertRulesWithResponse(ctx context.Context, body GetGlobalAlertRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGlobalAlertRulesResponse, error) {
	rsp, err := c.GetGlobalAlertRules(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalAlertRulesResponse(rsp)
}

// GetGlobalAlertRulesConnectionWithBodyWithResponse request with arbitrary body returning *GetGlobalAlertRulesConnectionResponse
func (c *ClientWithResponses) GetGlobalAlertRulesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGlobalAlertRulesConnectionResponse, error) {
	rsp, err := c.GetGlobalAlertRulesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalAlertRulesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetGlobalAlertRulesConnectionWithResponse(ctx context.Context, body GetGlobalAlertRulesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGlobalAlertRulesConnectionResponse, error) {
	rsp, err := c.GetGlobalAlertRulesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalAlertRulesConnectionResponse(rsp)
}

// GetGlobalSettingsesWithBodyWithResponse request with arbitrary body returning *GetGlobalSettingsesResponse
func (c *ClientWithResponses) GetGlobalSettingsesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGlobalSettingsesResponse, error) {
	rsp, err := c.GetGlobalSettingsesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalSettingsesResponse(rsp)
}

func (c *ClientWithResponses) GetGlobalSettingsesWithResponse(ctx context.Context, body GetGlobalSettingsesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGlobalSettingsesResponse, error) {
	rsp, err := c.GetGlobalSettingses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalSettingsesResponse(rsp)
}

// GetGlobalSettingsesConnectionWithBodyWithResponse request with arbitrary body returning *GetGlobalSettingsesConnectionResponse
func (c *ClientWithResponses) GetGlobalSettingsesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGlobalSettingsesConnectionResponse, error) {
	rsp, err := c.GetGlobalSettingsesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalSettingsesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetGlobalSettingsesConnectionWithResponse(ctx context.Context, body GetGlobalSettingsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGlobalSettingsesConnectionResponse, error) {
	rsp, err := c.GetGlobalSettingsesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalSettingsesConnectionResponse(rsp)
}

// GetGraphsWithBodyWithResponse request with arbitrary body returning *GetGraphsResponse
func (c *ClientWithResponses) GetGraphsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGraphsResponse, error) {
	rsp, err := c.GetGraphsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGraphsResponse(rsp)
}

func (c *ClientWithResponses) GetGraphsWithResponse(ctx context.Context, body GetGraphsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGraphsResponse, error) {
	rsp, err := c.GetGraphs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGraphsResponse(rsp)
}

// GetGraphsConnectionWithBodyWithResponse request with arbitrary body returning *GetGraphsConnectionResponse
func (c *ClientWithResponses) GetGraphsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGraphsConnectionResponse, error) {
	rsp, err := c.GetGraphsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGraphsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetGraphsConnectionWithResponse(ctx context.Context, body GetGraphsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGraphsConnectionResponse, error) {
	rsp, err := c.GetGraphsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGraphsConnectionResponse(rsp)
}

// GetHostsWithBodyWithResponse request with arbitrary body returning *GetHostsResponse
func (c *ClientWithResponses) GetHostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHostsResponse, error) {
	rsp, err := c.GetHostsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsResponse(rsp)
}

func (c *ClientWithResponses) GetHostsWithResponse(ctx context.Context, body GetHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHostsResponse, error) {
	rsp, err := c.GetHosts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsResponse(rsp)
}

// GetHostsConnectionWithBodyWithResponse request with arbitrary body returning *GetHostsConnectionResponse
func (c *ClientWithResponses) GetHostsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHostsConnectionResponse, error) {
	rsp, err := c.GetHostsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetHostsConnectionWithResponse(ctx context.Context, body GetHostsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHostsConnectionResponse, error) {
	rsp, err := c.GetHostsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsConnectionResponse(rsp)
}

// GetImagesConnectorWithBodyWithResponse request with arbitrary body returning *GetImagesConnectorResponse
func (c *ClientWithResponses) GetImagesConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetImagesConnectorResponse, error) {
	rsp, err := c.GetImagesConnectorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImagesConnectorResponse(rsp)
}

func (c *ClientWithResponses) GetImagesConnectorWithResponse(ctx context.Context, body GetImagesConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*GetImagesConnectorResponse, error) {
	rsp, err := c.GetImagesConnector(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImagesConnectorResponse(rsp)
}

// GetIpmisWithBodyWithResponse request with arbitrary body returning *GetIpmisResponse
func (c *ClientWithResponses) GetIpmisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIpmisResponse, error) {
	rsp, err := c.GetIpmisWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmisResponse(rsp)
}

func (c *ClientWithResponses) GetIpmisWithResponse(ctx context.Context, body GetIpmisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIpmisResponse, error) {
	rsp, err := c.GetIpmis(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmisResponse(rsp)
}

// GetIscsiConnectionsWithBodyWithResponse request with arbitrary body returning *GetIscsiConnectionsResponse
func (c *ClientWithResponses) GetIscsiConnectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiConnectionsResponse, error) {
	rsp, err := c.GetIscsiConnectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiConnectionsResponse(rsp)
}

func (c *ClientWithResponses) GetIscsiConnectionsWithResponse(ctx context.Context, body GetIscsiConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiConnectionsResponse, error) {
	rsp, err := c.GetIscsiConnections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiConnectionsResponse(rsp)
}

// GetIscsiConnectionsConnectionWithBodyWithResponse request with arbitrary body returning *GetIscsiConnectionsConnectionResponse
func (c *ClientWithResponses) GetIscsiConnectionsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiConnectionsConnectionResponse, error) {
	rsp, err := c.GetIscsiConnectionsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiConnectionsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetIscsiConnectionsConnectionWithResponse(ctx context.Context, body GetIscsiConnectionsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiConnectionsConnectionResponse, error) {
	rsp, err := c.GetIscsiConnectionsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiConnectionsConnectionResponse(rsp)
}

// GetIscsiLunSnapshotsWithBodyWithResponse request with arbitrary body returning *GetIscsiLunSnapshotsResponse
func (c *ClientWithResponses) GetIscsiLunSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiLunSnapshotsResponse, error) {
	rsp, err := c.GetIscsiLunSnapshotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiLunSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) GetIscsiLunSnapshotsWithResponse(ctx context.Context, body GetIscsiLunSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiLunSnapshotsResponse, error) {
	rsp, err := c.GetIscsiLunSnapshots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiLunSnapshotsResponse(rsp)
}

// GetIscsiLunSnapshotsConnectionWithBodyWithResponse request with arbitrary body returning *GetIscsiLunSnapshotsConnectionResponse
func (c *ClientWithResponses) GetIscsiLunSnapshotsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiLunSnapshotsConnectionResponse, error) {
	rsp, err := c.GetIscsiLunSnapshotsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiLunSnapshotsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetIscsiLunSnapshotsConnectionWithResponse(ctx context.Context, body GetIscsiLunSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiLunSnapshotsConnectionResponse, error) {
	rsp, err := c.GetIscsiLunSnapshotsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiLunSnapshotsConnectionResponse(rsp)
}

// GetIscsiLunsWithBodyWithResponse request with arbitrary body returning *GetIscsiLunsResponse
func (c *ClientWithResponses) GetIscsiLunsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiLunsResponse, error) {
	rsp, err := c.GetIscsiLunsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiLunsResponse(rsp)
}

func (c *ClientWithResponses) GetIscsiLunsWithResponse(ctx context.Context, body GetIscsiLunsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiLunsResponse, error) {
	rsp, err := c.GetIscsiLuns(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiLunsResponse(rsp)
}

// GetIscsiLunsConnectionWithBodyWithResponse request with arbitrary body returning *GetIscsiLunsConnectionResponse
func (c *ClientWithResponses) GetIscsiLunsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiLunsConnectionResponse, error) {
	rsp, err := c.GetIscsiLunsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiLunsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetIscsiLunsConnectionWithResponse(ctx context.Context, body GetIscsiLunsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiLunsConnectionResponse, error) {
	rsp, err := c.GetIscsiLunsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiLunsConnectionResponse(rsp)
}

// GetIscsiTargetsWithBodyWithResponse request with arbitrary body returning *GetIscsiTargetsResponse
func (c *ClientWithResponses) GetIscsiTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiTargetsResponse, error) {
	rsp, err := c.GetIscsiTargetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetsResponse(rsp)
}

func (c *ClientWithResponses) GetIscsiTargetsWithResponse(ctx context.Context, body GetIscsiTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiTargetsResponse, error) {
	rsp, err := c.GetIscsiTargets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetsResponse(rsp)
}

// GetIscsiTargetsConnectionWithBodyWithResponse request with arbitrary body returning *GetIscsiTargetsConnectionResponse
func (c *ClientWithResponses) GetIscsiTargetsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIscsiTargetsConnectionResponse, error) {
	rsp, err := c.GetIscsiTargetsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetIscsiTargetsConnectionWithResponse(ctx context.Context, body GetIscsiTargetsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIscsiTargetsConnectionResponse, error) {
	rsp, err := c.GetIscsiTargetsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetsConnectionResponse(rsp)
}

// GetLabelsWithBodyWithResponse request with arbitrary body returning *GetLabelsResponse
func (c *ClientWithResponses) GetLabelsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLabelsResponse, error) {
	rsp, err := c.GetLabelsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLabelsResponse(rsp)
}

func (c *ClientWithResponses) GetLabelsWithResponse(ctx context.Context, body GetLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLabelsResponse, error) {
	rsp, err := c.GetLabels(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLabelsResponse(rsp)
}

// GetLabelsConnectionWithBodyWithResponse request with arbitrary body returning *GetLabelsConnectionResponse
func (c *ClientWithResponses) GetLabelsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLabelsConnectionResponse, error) {
	rsp, err := c.GetLabelsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLabelsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetLabelsConnectionWithResponse(ctx context.Context, body GetLabelsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLabelsConnectionResponse, error) {
	rsp, err := c.GetLabelsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLabelsConnectionResponse(rsp)
}

// GetLicensesWithBodyWithResponse request with arbitrary body returning *GetLicensesResponse
func (c *ClientWithResponses) GetLicensesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLicensesResponse, error) {
	rsp, err := c.GetLicensesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLicensesResponse(rsp)
}

func (c *ClientWithResponses) GetLicensesWithResponse(ctx context.Context, body GetLicensesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLicensesResponse, error) {
	rsp, err := c.GetLicenses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLicensesResponse(rsp)
}

// GetLicensesConnectionWithBodyWithResponse request with arbitrary body returning *GetLicensesConnectionResponse
func (c *ClientWithResponses) GetLicensesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLicensesConnectionResponse, error) {
	rsp, err := c.GetLicensesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLicensesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetLicensesConnectionWithResponse(ctx context.Context, body GetLicensesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLicensesConnectionResponse, error) {
	rsp, err := c.GetLicensesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLicensesConnectionResponse(rsp)
}

// GetLogCollectionsWithBodyWithResponse request with arbitrary body returning *GetLogCollectionsResponse
func (c *ClientWithResponses) GetLogCollectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLogCollectionsResponse, error) {
	rsp, err := c.GetLogCollectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogCollectionsResponse(rsp)
}

func (c *ClientWithResponses) GetLogCollectionsWithResponse(ctx context.Context, body GetLogCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLogCollectionsResponse, error) {
	rsp, err := c.GetLogCollections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogCollectionsResponse(rsp)
}

// GetLogCollectionsConnectionWithBodyWithResponse request with arbitrary body returning *GetLogCollectionsConnectionResponse
func (c *ClientWithResponses) GetLogCollectionsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLogCollectionsConnectionResponse, error) {
	rsp, err := c.GetLogCollectionsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogCollectionsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetLogCollectionsConnectionWithResponse(ctx context.Context, body GetLogCollectionsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLogCollectionsConnectionResponse, error) {
	rsp, err := c.GetLogCollectionsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogCollectionsConnectionResponse(rsp)
}

// GetMigrateTransmittersWithBodyWithResponse request with arbitrary body returning *GetMigrateTransmittersResponse
func (c *ClientWithResponses) GetMigrateTransmittersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetMigrateTransmittersResponse, error) {
	rsp, err := c.GetMigrateTransmittersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrateTransmittersResponse(rsp)
}

func (c *ClientWithResponses) GetMigrateTransmittersWithResponse(ctx context.Context, body GetMigrateTransmittersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetMigrateTransmittersResponse, error) {
	rsp, err := c.GetMigrateTransmitters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrateTransmittersResponse(rsp)
}

// GetMigrateTransmittersConnectionWithBodyWithResponse request with arbitrary body returning *GetMigrateTransmittersConnectionResponse
func (c *ClientWithResponses) GetMigrateTransmittersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetMigrateTransmittersConnectionResponse, error) {
	rsp, err := c.GetMigrateTransmittersConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrateTransmittersConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetMigrateTransmittersConnectionWithResponse(ctx context.Context, body GetMigrateTransmittersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetMigrateTransmittersConnectionResponse, error) {
	rsp, err := c.GetMigrateTransmittersConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrateTransmittersConnectionResponse(rsp)
}

// GetNamespaceGroupsWithBodyWithResponse request with arbitrary body returning *GetNamespaceGroupsResponse
func (c *ClientWithResponses) GetNamespaceGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNamespaceGroupsResponse, error) {
	rsp, err := c.GetNamespaceGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNamespaceGroupsResponse(rsp)
}

func (c *ClientWithResponses) GetNamespaceGroupsWithResponse(ctx context.Context, body GetNamespaceGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNamespaceGroupsResponse, error) {
	rsp, err := c.GetNamespaceGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNamespaceGroupsResponse(rsp)
}

// GetNamespaceGroupsConnectionWithBodyWithResponse request with arbitrary body returning *GetNamespaceGroupsConnectionResponse
func (c *ClientWithResponses) GetNamespaceGroupsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNamespaceGroupsConnectionResponse, error) {
	rsp, err := c.GetNamespaceGroupsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNamespaceGroupsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetNamespaceGroupsConnectionWithResponse(ctx context.Context, body GetNamespaceGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNamespaceGroupsConnectionResponse, error) {
	rsp, err := c.GetNamespaceGroupsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNamespaceGroupsConnectionResponse(rsp)
}

// GetNfsExportsWithBodyWithResponse request with arbitrary body returning *GetNfsExportsResponse
func (c *ClientWithResponses) GetNfsExportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNfsExportsResponse, error) {
	rsp, err := c.GetNfsExportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsExportsResponse(rsp)
}

func (c *ClientWithResponses) GetNfsExportsWithResponse(ctx context.Context, body GetNfsExportsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNfsExportsResponse, error) {
	rsp, err := c.GetNfsExports(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsExportsResponse(rsp)
}

// GetNfsExportsConnectionWithBodyWithResponse request with arbitrary body returning *GetNfsExportsConnectionResponse
func (c *ClientWithResponses) GetNfsExportsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNfsExportsConnectionResponse, error) {
	rsp, err := c.GetNfsExportsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsExportsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetNfsExportsConnectionWithResponse(ctx context.Context, body GetNfsExportsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNfsExportsConnectionResponse, error) {
	rsp, err := c.GetNfsExportsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsExportsConnectionResponse(rsp)
}

// GetNfsInodesWithBodyWithResponse request with arbitrary body returning *GetNfsInodesResponse
func (c *ClientWithResponses) GetNfsInodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNfsInodesResponse, error) {
	rsp, err := c.GetNfsInodesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsInodesResponse(rsp)
}

func (c *ClientWithResponses) GetNfsInodesWithResponse(ctx context.Context, body GetNfsInodesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNfsInodesResponse, error) {
	rsp, err := c.GetNfsInodes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsInodesResponse(rsp)
}

// GetNfsInodesConnectionWithBodyWithResponse request with arbitrary body returning *GetNfsInodesConnectionResponse
func (c *ClientWithResponses) GetNfsInodesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNfsInodesConnectionResponse, error) {
	rsp, err := c.GetNfsInodesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsInodesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetNfsInodesConnectionWithResponse(ctx context.Context, body GetNfsInodesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNfsInodesConnectionResponse, error) {
	rsp, err := c.GetNfsInodesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsInodesConnectionResponse(rsp)
}

// GetNicsWithBodyWithResponse request with arbitrary body returning *GetNicsResponse
func (c *ClientWithResponses) GetNicsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNicsResponse, error) {
	rsp, err := c.GetNicsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNicsResponse(rsp)
}

func (c *ClientWithResponses) GetNicsWithResponse(ctx context.Context, body GetNicsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNicsResponse, error) {
	rsp, err := c.GetNics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNicsResponse(rsp)
}

// GetNicsConnectionWithBodyWithResponse request with arbitrary body returning *GetNicsConnectionResponse
func (c *ClientWithResponses) GetNicsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNicsConnectionResponse, error) {
	rsp, err := c.GetNicsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNicsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetNicsConnectionWithResponse(ctx context.Context, body GetNicsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNicsConnectionResponse, error) {
	rsp, err := c.GetNicsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNicsConnectionResponse(rsp)
}

// GetNodeTopoesWithBodyWithResponse request with arbitrary body returning *GetNodeTopoesResponse
func (c *ClientWithResponses) GetNodeTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNodeTopoesResponse, error) {
	rsp, err := c.GetNodeTopoesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeTopoesResponse(rsp)
}

func (c *ClientWithResponses) GetNodeTopoesWithResponse(ctx context.Context, body GetNodeTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNodeTopoesResponse, error) {
	rsp, err := c.GetNodeTopoes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeTopoesResponse(rsp)
}

// GetNodeTopoesConnectionWithBodyWithResponse request with arbitrary body returning *GetNodeTopoesConnectionResponse
func (c *ClientWithResponses) GetNodeTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNodeTopoesConnectionResponse, error) {
	rsp, err := c.GetNodeTopoesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeTopoesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetNodeTopoesConnectionWithResponse(ctx context.Context, body GetNodeTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNodeTopoesConnectionResponse, error) {
	rsp, err := c.GetNodeTopoesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeTopoesConnectionResponse(rsp)
}

// GetNvmfNamespaceSnapshotsWithBodyWithResponse request with arbitrary body returning *GetNvmfNamespaceSnapshotsResponse
func (c *ClientWithResponses) GetNvmfNamespaceSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfNamespaceSnapshotsResponse, error) {
	rsp, err := c.GetNvmfNamespaceSnapshotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfNamespaceSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) GetNvmfNamespaceSnapshotsWithResponse(ctx context.Context, body GetNvmfNamespaceSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfNamespaceSnapshotsResponse, error) {
	rsp, err := c.GetNvmfNamespaceSnapshots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfNamespaceSnapshotsResponse(rsp)
}

// GetNvmfNamespaceSnapshotsConnectionWithBodyWithResponse request with arbitrary body returning *GetNvmfNamespaceSnapshotsConnectionResponse
func (c *ClientWithResponses) GetNvmfNamespaceSnapshotsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfNamespaceSnapshotsConnectionResponse, error) {
	rsp, err := c.GetNvmfNamespaceSnapshotsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfNamespaceSnapshotsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetNvmfNamespaceSnapshotsConnectionWithResponse(ctx context.Context, body GetNvmfNamespaceSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfNamespaceSnapshotsConnectionResponse, error) {
	rsp, err := c.GetNvmfNamespaceSnapshotsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfNamespaceSnapshotsConnectionResponse(rsp)
}

// GetNvmfNamespacesWithBodyWithResponse request with arbitrary body returning *GetNvmfNamespacesResponse
func (c *ClientWithResponses) GetNvmfNamespacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfNamespacesResponse, error) {
	rsp, err := c.GetNvmfNamespacesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfNamespacesResponse(rsp)
}

func (c *ClientWithResponses) GetNvmfNamespacesWithResponse(ctx context.Context, body GetNvmfNamespacesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfNamespacesResponse, error) {
	rsp, err := c.GetNvmfNamespaces(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfNamespacesResponse(rsp)
}

// GetNvmfNamespacesConnectionWithBodyWithResponse request with arbitrary body returning *GetNvmfNamespacesConnectionResponse
func (c *ClientWithResponses) GetNvmfNamespacesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfNamespacesConnectionResponse, error) {
	rsp, err := c.GetNvmfNamespacesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfNamespacesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetNvmfNamespacesConnectionWithResponse(ctx context.Context, body GetNvmfNamespacesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfNamespacesConnectionResponse, error) {
	rsp, err := c.GetNvmfNamespacesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfNamespacesConnectionResponse(rsp)
}

// GetNvmfSubsystemsWithBodyWithResponse request with arbitrary body returning *GetNvmfSubsystemsResponse
func (c *ClientWithResponses) GetNvmfSubsystemsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfSubsystemsResponse, error) {
	rsp, err := c.GetNvmfSubsystemsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfSubsystemsResponse(rsp)
}

func (c *ClientWithResponses) GetNvmfSubsystemsWithResponse(ctx context.Context, body GetNvmfSubsystemsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfSubsystemsResponse, error) {
	rsp, err := c.GetNvmfSubsystems(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfSubsystemsResponse(rsp)
}

// GetNvmfSubsystemsConnectionWithBodyWithResponse request with arbitrary body returning *GetNvmfSubsystemsConnectionResponse
func (c *ClientWithResponses) GetNvmfSubsystemsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNvmfSubsystemsConnectionResponse, error) {
	rsp, err := c.GetNvmfSubsystemsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfSubsystemsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetNvmfSubsystemsConnectionWithResponse(ctx context.Context, body GetNvmfSubsystemsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNvmfSubsystemsConnectionResponse, error) {
	rsp, err := c.GetNvmfSubsystemsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNvmfSubsystemsConnectionResponse(rsp)
}

// GetOrganizationsWithBodyWithResponse request with arbitrary body returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, body GetOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// GetOrganizationsConnectionWithBodyWithResponse request with arbitrary body returning *GetOrganizationsConnectionResponse
func (c *ClientWithResponses) GetOrganizationsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrganizationsConnectionResponse, error) {
	rsp, err := c.GetOrganizationsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetOrganizationsConnectionWithResponse(ctx context.Context, body GetOrganizationsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrganizationsConnectionResponse, error) {
	rsp, err := c.GetOrganizationsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsConnectionResponse(rsp)
}

// GetPmemDimmsWithBodyWithResponse request with arbitrary body returning *GetPmemDimmsResponse
func (c *ClientWithResponses) GetPmemDimmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPmemDimmsResponse, error) {
	rsp, err := c.GetPmemDimmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPmemDimmsResponse(rsp)
}

func (c *ClientWithResponses) GetPmemDimmsWithResponse(ctx context.Context, body GetPmemDimmsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPmemDimmsResponse, error) {
	rsp, err := c.GetPmemDimms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPmemDimmsResponse(rsp)
}

// GetPmemDimmsConnectionWithBodyWithResponse request with arbitrary body returning *GetPmemDimmsConnectionResponse
func (c *ClientWithResponses) GetPmemDimmsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPmemDimmsConnectionResponse, error) {
	rsp, err := c.GetPmemDimmsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPmemDimmsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetPmemDimmsConnectionWithResponse(ctx context.Context, body GetPmemDimmsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPmemDimmsConnectionResponse, error) {
	rsp, err := c.GetPmemDimmsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPmemDimmsConnectionResponse(rsp)
}

// GetRackTopoesWithBodyWithResponse request with arbitrary body returning *GetRackTopoesResponse
func (c *ClientWithResponses) GetRackTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRackTopoesResponse, error) {
	rsp, err := c.GetRackTopoesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRackTopoesResponse(rsp)
}

func (c *ClientWithResponses) GetRackTopoesWithResponse(ctx context.Context, body GetRackTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRackTopoesResponse, error) {
	rsp, err := c.GetRackTopoes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRackTopoesResponse(rsp)
}

// GetRackTopoesConnectionWithBodyWithResponse request with arbitrary body returning *GetRackTopoesConnectionResponse
func (c *ClientWithResponses) GetRackTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRackTopoesConnectionResponse, error) {
	rsp, err := c.GetRackTopoesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRackTopoesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetRackTopoesConnectionWithResponse(ctx context.Context, body GetRackTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRackTopoesConnectionResponse, error) {
	rsp, err := c.GetRackTopoesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRackTopoesConnectionResponse(rsp)
}

// GetReportTasksWithBodyWithResponse request with arbitrary body returning *GetReportTasksResponse
func (c *ClientWithResponses) GetReportTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReportTasksResponse, error) {
	rsp, err := c.GetReportTasksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportTasksResponse(rsp)
}

func (c *ClientWithResponses) GetReportTasksWithResponse(ctx context.Context, body GetReportTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReportTasksResponse, error) {
	rsp, err := c.GetReportTasks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportTasksResponse(rsp)
}

// GetReportTasksConnectionWithBodyWithResponse request with arbitrary body returning *GetReportTasksConnectionResponse
func (c *ClientWithResponses) GetReportTasksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReportTasksConnectionResponse, error) {
	rsp, err := c.GetReportTasksConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportTasksConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetReportTasksConnectionWithResponse(ctx context.Context, body GetReportTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReportTasksConnectionResponse, error) {
	rsp, err := c.GetReportTasksConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportTasksConnectionResponse(rsp)
}

// GetReportTemplatesWithBodyWithResponse request with arbitrary body returning *GetReportTemplatesResponse
func (c *ClientWithResponses) GetReportTemplatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReportTemplatesResponse, error) {
	rsp, err := c.GetReportTemplatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportTemplatesResponse(rsp)
}

func (c *ClientWithResponses) GetReportTemplatesWithResponse(ctx context.Context, body GetReportTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReportTemplatesResponse, error) {
	rsp, err := c.GetReportTemplates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportTemplatesResponse(rsp)
}

// GetReportTemplatesConnectionWithBodyWithResponse request with arbitrary body returning *GetReportTemplatesConnectionResponse
func (c *ClientWithResponses) GetReportTemplatesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReportTemplatesConnectionResponse, error) {
	rsp, err := c.GetReportTemplatesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportTemplatesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetReportTemplatesConnectionWithResponse(ctx context.Context, body GetReportTemplatesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReportTemplatesConnectionResponse, error) {
	rsp, err := c.GetReportTemplatesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportTemplatesConnectionResponse(rsp)
}

// GetSnapshotGroupsWithBodyWithResponse request with arbitrary body returning *GetSnapshotGroupsResponse
func (c *ClientWithResponses) GetSnapshotGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotGroupsResponse, error) {
	rsp, err := c.GetSnapshotGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotGroupsResponse(rsp)
}

func (c *ClientWithResponses) GetSnapshotGroupsWithResponse(ctx context.Context, body GetSnapshotGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotGroupsResponse, error) {
	rsp, err := c.GetSnapshotGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotGroupsResponse(rsp)
}

// GetSnapshotGroupsConnectionWithBodyWithResponse request with arbitrary body returning *GetSnapshotGroupsConnectionResponse
func (c *ClientWithResponses) GetSnapshotGroupsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotGroupsConnectionResponse, error) {
	rsp, err := c.GetSnapshotGroupsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotGroupsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetSnapshotGroupsConnectionWithResponse(ctx context.Context, body GetSnapshotGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotGroupsConnectionResponse, error) {
	rsp, err := c.GetSnapshotGroupsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotGroupsConnectionResponse(rsp)
}

// GetSnapshotPlanTasksWithBodyWithResponse request with arbitrary body returning *GetSnapshotPlanTasksResponse
func (c *ClientWithResponses) GetSnapshotPlanTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotPlanTasksResponse, error) {
	rsp, err := c.GetSnapshotPlanTasksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotPlanTasksResponse(rsp)
}

func (c *ClientWithResponses) GetSnapshotPlanTasksWithResponse(ctx context.Context, body GetSnapshotPlanTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotPlanTasksResponse, error) {
	rsp, err := c.GetSnapshotPlanTasks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotPlanTasksResponse(rsp)
}

// GetSnapshotPlanTasksConnectionWithBodyWithResponse request with arbitrary body returning *GetSnapshotPlanTasksConnectionResponse
func (c *ClientWithResponses) GetSnapshotPlanTasksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotPlanTasksConnectionResponse, error) {
	rsp, err := c.GetSnapshotPlanTasksConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotPlanTasksConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetSnapshotPlanTasksConnectionWithResponse(ctx context.Context, body GetSnapshotPlanTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotPlanTasksConnectionResponse, error) {
	rsp, err := c.GetSnapshotPlanTasksConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotPlanTasksConnectionResponse(rsp)
}

// GetSnapshotPlansWithBodyWithResponse request with arbitrary body returning *GetSnapshotPlansResponse
func (c *ClientWithResponses) GetSnapshotPlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotPlansResponse, error) {
	rsp, err := c.GetSnapshotPlansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotPlansResponse(rsp)
}

func (c *ClientWithResponses) GetSnapshotPlansWithResponse(ctx context.Context, body GetSnapshotPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotPlansResponse, error) {
	rsp, err := c.GetSnapshotPlans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotPlansResponse(rsp)
}

// GetSnapshotPlansConnectionWithBodyWithResponse request with arbitrary body returning *GetSnapshotPlansConnectionResponse
func (c *ClientWithResponses) GetSnapshotPlansConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnapshotPlansConnectionResponse, error) {
	rsp, err := c.GetSnapshotPlansConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotPlansConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetSnapshotPlansConnectionWithResponse(ctx context.Context, body GetSnapshotPlansConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnapshotPlansConnectionResponse, error) {
	rsp, err := c.GetSnapshotPlansConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotPlansConnectionResponse(rsp)
}

// GetSnmpTransportsWithBodyWithResponse request with arbitrary body returning *GetSnmpTransportsResponse
func (c *ClientWithResponses) GetSnmpTransportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnmpTransportsResponse, error) {
	rsp, err := c.GetSnmpTransportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpTransportsResponse(rsp)
}

func (c *ClientWithResponses) GetSnmpTransportsWithResponse(ctx context.Context, body GetSnmpTransportsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnmpTransportsResponse, error) {
	rsp, err := c.GetSnmpTransports(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpTransportsResponse(rsp)
}

// GetSnmpTransportsConnectionWithBodyWithResponse request with arbitrary body returning *GetSnmpTransportsConnectionResponse
func (c *ClientWithResponses) GetSnmpTransportsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnmpTransportsConnectionResponse, error) {
	rsp, err := c.GetSnmpTransportsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpTransportsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetSnmpTransportsConnectionWithResponse(ctx context.Context, body GetSnmpTransportsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnmpTransportsConnectionResponse, error) {
	rsp, err := c.GetSnmpTransportsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpTransportsConnectionResponse(rsp)
}

// GetSnmpTrapReceiversWithBodyWithResponse request with arbitrary body returning *GetSnmpTrapReceiversResponse
func (c *ClientWithResponses) GetSnmpTrapReceiversWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnmpTrapReceiversResponse, error) {
	rsp, err := c.GetSnmpTrapReceiversWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpTrapReceiversResponse(rsp)
}

func (c *ClientWithResponses) GetSnmpTrapReceiversWithResponse(ctx context.Context, body GetSnmpTrapReceiversJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnmpTrapReceiversResponse, error) {
	rsp, err := c.GetSnmpTrapReceivers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpTrapReceiversResponse(rsp)
}

// GetSnmpTrapReceiversConnectionWithBodyWithResponse request with arbitrary body returning *GetSnmpTrapReceiversConnectionResponse
func (c *ClientWithResponses) GetSnmpTrapReceiversConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSnmpTrapReceiversConnectionResponse, error) {
	rsp, err := c.GetSnmpTrapReceiversConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpTrapReceiversConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetSnmpTrapReceiversConnectionWithResponse(ctx context.Context, body GetSnmpTrapReceiversConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSnmpTrapReceiversConnectionResponse, error) {
	rsp, err := c.GetSnmpTrapReceiversConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpTrapReceiversConnectionResponse(rsp)
}

// GetStoragePoliciesConnectorWithBodyWithResponse request with arbitrary body returning *GetStoragePoliciesConnectorResponse
func (c *ClientWithResponses) GetStoragePoliciesConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStoragePoliciesConnectorResponse, error) {
	rsp, err := c.GetStoragePoliciesConnectorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoragePoliciesConnectorResponse(rsp)
}

func (c *ClientWithResponses) GetStoragePoliciesConnectorWithResponse(ctx context.Context, body GetStoragePoliciesConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStoragePoliciesConnectorResponse, error) {
	rsp, err := c.GetStoragePoliciesConnector(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoragePoliciesConnectorResponse(rsp)
}

// GetSvtImagesWithBodyWithResponse request with arbitrary body returning *GetSvtImagesResponse
func (c *ClientWithResponses) GetSvtImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSvtImagesResponse, error) {
	rsp, err := c.GetSvtImagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSvtImagesResponse(rsp)
}

func (c *ClientWithResponses) GetSvtImagesWithResponse(ctx context.Context, body GetSvtImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSvtImagesResponse, error) {
	rsp, err := c.GetSvtImages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSvtImagesResponse(rsp)
}

// GetSvtImagesConnectionWithBodyWithResponse request with arbitrary body returning *GetSvtImagesConnectionResponse
func (c *ClientWithResponses) GetSvtImagesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSvtImagesConnectionResponse, error) {
	rsp, err := c.GetSvtImagesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSvtImagesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetSvtImagesConnectionWithResponse(ctx context.Context, body GetSvtImagesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSvtImagesConnectionResponse, error) {
	rsp, err := c.GetSvtImagesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSvtImagesConnectionResponse(rsp)
}

// GetSystemAuditLogsWithBodyWithResponse request with arbitrary body returning *GetSystemAuditLogsResponse
func (c *ClientWithResponses) GetSystemAuditLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSystemAuditLogsResponse, error) {
	rsp, err := c.GetSystemAuditLogsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAuditLogsResponse(rsp)
}

func (c *ClientWithResponses) GetSystemAuditLogsWithResponse(ctx context.Context, body GetSystemAuditLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSystemAuditLogsResponse, error) {
	rsp, err := c.GetSystemAuditLogs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAuditLogsResponse(rsp)
}

// GetSystemAuditLogsConnectionWithBodyWithResponse request with arbitrary body returning *GetSystemAuditLogsConnectionResponse
func (c *ClientWithResponses) GetSystemAuditLogsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSystemAuditLogsConnectionResponse, error) {
	rsp, err := c.GetSystemAuditLogsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAuditLogsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetSystemAuditLogsConnectionWithResponse(ctx context.Context, body GetSystemAuditLogsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSystemAuditLogsConnectionResponse, error) {
	rsp, err := c.GetSystemAuditLogsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAuditLogsConnectionResponse(rsp)
}

// GetTasksWithBodyWithResponse request with arbitrary body returning *GetTasksResponse
func (c *ClientWithResponses) GetTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTasksResponse, error) {
	rsp, err := c.GetTasksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksResponse(rsp)
}

func (c *ClientWithResponses) GetTasksWithResponse(ctx context.Context, body GetTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTasksResponse, error) {
	rsp, err := c.GetTasks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksResponse(rsp)
}

// GetTasksConnectionWithBodyWithResponse request with arbitrary body returning *GetTasksConnectionResponse
func (c *ClientWithResponses) GetTasksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTasksConnectionResponse, error) {
	rsp, err := c.GetTasksConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetTasksConnectionWithResponse(ctx context.Context, body GetTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTasksConnectionResponse, error) {
	rsp, err := c.GetTasksConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksConnectionResponse(rsp)
}

// GetUploadTasksWithBodyWithResponse request with arbitrary body returning *GetUploadTasksResponse
func (c *ClientWithResponses) GetUploadTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUploadTasksResponse, error) {
	rsp, err := c.GetUploadTasksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadTasksResponse(rsp)
}

func (c *ClientWithResponses) GetUploadTasksWithResponse(ctx context.Context, body GetUploadTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUploadTasksResponse, error) {
	rsp, err := c.GetUploadTasks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadTasksResponse(rsp)
}

// GetUploadTasksConnectionWithBodyWithResponse request with arbitrary body returning *GetUploadTasksConnectionResponse
func (c *ClientWithResponses) GetUploadTasksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUploadTasksConnectionResponse, error) {
	rsp, err := c.GetUploadTasksConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadTasksConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetUploadTasksConnectionWithResponse(ctx context.Context, body GetUploadTasksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUploadTasksConnectionResponse, error) {
	rsp, err := c.GetUploadTasksConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadTasksConnectionResponse(rsp)
}

// GetUsbDevicesWithBodyWithResponse request with arbitrary body returning *GetUsbDevicesResponse
func (c *ClientWithResponses) GetUsbDevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsbDevicesResponse, error) {
	rsp, err := c.GetUsbDevicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsbDevicesResponse(rsp)
}

func (c *ClientWithResponses) GetUsbDevicesWithResponse(ctx context.Context, body GetUsbDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsbDevicesResponse, error) {
	rsp, err := c.GetUsbDevices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsbDevicesResponse(rsp)
}

// GetUsbDevicesConnectionWithBodyWithResponse request with arbitrary body returning *GetUsbDevicesConnectionResponse
func (c *ClientWithResponses) GetUsbDevicesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsbDevicesConnectionResponse, error) {
	rsp, err := c.GetUsbDevicesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsbDevicesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetUsbDevicesConnectionWithResponse(ctx context.Context, body GetUsbDevicesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsbDevicesConnectionResponse, error) {
	rsp, err := c.GetUsbDevicesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsbDevicesConnectionResponse(rsp)
}

// GetUserAuditLogsWithBodyWithResponse request with arbitrary body returning *GetUserAuditLogsResponse
func (c *ClientWithResponses) GetUserAuditLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserAuditLogsResponse, error) {
	rsp, err := c.GetUserAuditLogsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAuditLogsResponse(rsp)
}

func (c *ClientWithResponses) GetUserAuditLogsWithResponse(ctx context.Context, body GetUserAuditLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserAuditLogsResponse, error) {
	rsp, err := c.GetUserAuditLogs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAuditLogsResponse(rsp)
}

// GetUserAuditLogsConnectionWithBodyWithResponse request with arbitrary body returning *GetUserAuditLogsConnectionResponse
func (c *ClientWithResponses) GetUserAuditLogsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserAuditLogsConnectionResponse, error) {
	rsp, err := c.GetUserAuditLogsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAuditLogsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetUserAuditLogsConnectionWithResponse(ctx context.Context, body GetUserAuditLogsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserAuditLogsConnectionResponse, error) {
	rsp, err := c.GetUserAuditLogsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAuditLogsConnectionResponse(rsp)
}

// GetUserRoleNextsWithBodyWithResponse request with arbitrary body returning *GetUserRoleNextsResponse
func (c *ClientWithResponses) GetUserRoleNextsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserRoleNextsResponse, error) {
	rsp, err := c.GetUserRoleNextsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleNextsResponse(rsp)
}

func (c *ClientWithResponses) GetUserRoleNextsWithResponse(ctx context.Context, body GetUserRoleNextsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserRoleNextsResponse, error) {
	rsp, err := c.GetUserRoleNexts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleNextsResponse(rsp)
}

// GetUserRoleNextsConnectionWithBodyWithResponse request with arbitrary body returning *GetUserRoleNextsConnectionResponse
func (c *ClientWithResponses) GetUserRoleNextsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserRoleNextsConnectionResponse, error) {
	rsp, err := c.GetUserRoleNextsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleNextsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetUserRoleNextsConnectionWithResponse(ctx context.Context, body GetUserRoleNextsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserRoleNextsConnectionResponse, error) {
	rsp, err := c.GetUserRoleNextsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleNextsConnectionResponse(rsp)
}

// GetUsersWithBodyWithResponse request with arbitrary body returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, body GetUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUsersConnectionWithBodyWithResponse request with arbitrary body returning *GetUsersConnectionResponse
func (c *ClientWithResponses) GetUsersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersConnectionResponse, error) {
	rsp, err := c.GetUsersConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetUsersConnectionWithResponse(ctx context.Context, body GetUsersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersConnectionResponse, error) {
	rsp, err := c.GetUsersConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersConnectionResponse(rsp)
}

// GetVcenterAccountsWithBodyWithResponse request with arbitrary body returning *GetVcenterAccountsResponse
func (c *ClientWithResponses) GetVcenterAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVcenterAccountsResponse, error) {
	rsp, err := c.GetVcenterAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVcenterAccountsResponse(rsp)
}

func (c *ClientWithResponses) GetVcenterAccountsWithResponse(ctx context.Context, body GetVcenterAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVcenterAccountsResponse, error) {
	rsp, err := c.GetVcenterAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVcenterAccountsResponse(rsp)
}

// GetVcenterAccountsConnectionWithBodyWithResponse request with arbitrary body returning *GetVcenterAccountsConnectionResponse
func (c *ClientWithResponses) GetVcenterAccountsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVcenterAccountsConnectionResponse, error) {
	rsp, err := c.GetVcenterAccountsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVcenterAccountsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVcenterAccountsConnectionWithResponse(ctx context.Context, body GetVcenterAccountsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVcenterAccountsConnectionResponse, error) {
	rsp, err := c.GetVcenterAccountsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVcenterAccountsConnectionResponse(rsp)
}

// GetVdsesWithBodyWithResponse request with arbitrary body returning *GetVdsesResponse
func (c *ClientWithResponses) GetVdsesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVdsesResponse, error) {
	rsp, err := c.GetVdsesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVdsesResponse(rsp)
}

func (c *ClientWithResponses) GetVdsesWithResponse(ctx context.Context, body GetVdsesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVdsesResponse, error) {
	rsp, err := c.GetVdses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVdsesResponse(rsp)
}

// GetVdsesConnectionWithBodyWithResponse request with arbitrary body returning *GetVdsesConnectionResponse
func (c *ClientWithResponses) GetVdsesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVdsesConnectionResponse, error) {
	rsp, err := c.GetVdsesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVdsesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVdsesConnectionWithResponse(ctx context.Context, body GetVdsesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVdsesConnectionResponse, error) {
	rsp, err := c.GetVdsesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVdsesConnectionResponse(rsp)
}

// GetViewsWithBodyWithResponse request with arbitrary body returning *GetViewsResponse
func (c *ClientWithResponses) GetViewsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetViewsResponse, error) {
	rsp, err := c.GetViewsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewsResponse(rsp)
}

func (c *ClientWithResponses) GetViewsWithResponse(ctx context.Context, body GetViewsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetViewsResponse, error) {
	rsp, err := c.GetViews(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewsResponse(rsp)
}

// GetViewsConnectionWithBodyWithResponse request with arbitrary body returning *GetViewsConnectionResponse
func (c *ClientWithResponses) GetViewsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetViewsConnectionResponse, error) {
	rsp, err := c.GetViewsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetViewsConnectionWithResponse(ctx context.Context, body GetViewsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetViewsConnectionResponse, error) {
	rsp, err := c.GetViewsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewsConnectionResponse(rsp)
}

// GetVlansWithBodyWithResponse request with arbitrary body returning *GetVlansResponse
func (c *ClientWithResponses) GetVlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVlansResponse, error) {
	rsp, err := c.GetVlansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVlansResponse(rsp)
}

func (c *ClientWithResponses) GetVlansWithResponse(ctx context.Context, body GetVlansJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVlansResponse, error) {
	rsp, err := c.GetVlans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVlansResponse(rsp)
}

// GetVlansConnectionWithBodyWithResponse request with arbitrary body returning *GetVlansConnectionResponse
func (c *ClientWithResponses) GetVlansConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVlansConnectionResponse, error) {
	rsp, err := c.GetVlansConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVlansConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVlansConnectionWithResponse(ctx context.Context, body GetVlansConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVlansConnectionResponse, error) {
	rsp, err := c.GetVlansConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVlansConnectionResponse(rsp)
}

// GetVmDisksWithBodyWithResponse request with arbitrary body returning *GetVmDisksResponse
func (c *ClientWithResponses) GetVmDisksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmDisksResponse, error) {
	rsp, err := c.GetVmDisksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDisksResponse(rsp)
}

func (c *ClientWithResponses) GetVmDisksWithResponse(ctx context.Context, body GetVmDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmDisksResponse, error) {
	rsp, err := c.GetVmDisks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDisksResponse(rsp)
}

// GetVmDisksConnectionWithBodyWithResponse request with arbitrary body returning *GetVmDisksConnectionResponse
func (c *ClientWithResponses) GetVmDisksConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmDisksConnectionResponse, error) {
	rsp, err := c.GetVmDisksConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDisksConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmDisksConnectionWithResponse(ctx context.Context, body GetVmDisksConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmDisksConnectionResponse, error) {
	rsp, err := c.GetVmDisksConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDisksConnectionResponse(rsp)
}

// GetVmEntityFilterResultsWithBodyWithResponse request with arbitrary body returning *GetVmEntityFilterResultsResponse
func (c *ClientWithResponses) GetVmEntityFilterResultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmEntityFilterResultsResponse, error) {
	rsp, err := c.GetVmEntityFilterResultsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmEntityFilterResultsResponse(rsp)
}

func (c *ClientWithResponses) GetVmEntityFilterResultsWithResponse(ctx context.Context, body GetVmEntityFilterResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmEntityFilterResultsResponse, error) {
	rsp, err := c.GetVmEntityFilterResults(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmEntityFilterResultsResponse(rsp)
}

// GetVmEntityFilterResultsConnectionWithBodyWithResponse request with arbitrary body returning *GetVmEntityFilterResultsConnectionResponse
func (c *ClientWithResponses) GetVmEntityFilterResultsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmEntityFilterResultsConnectionResponse, error) {
	rsp, err := c.GetVmEntityFilterResultsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmEntityFilterResultsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmEntityFilterResultsConnectionWithResponse(ctx context.Context, body GetVmEntityFilterResultsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmEntityFilterResultsConnectionResponse, error) {
	rsp, err := c.GetVmEntityFilterResultsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmEntityFilterResultsConnectionResponse(rsp)
}

// GetVmFoldersWithBodyWithResponse request with arbitrary body returning *GetVmFoldersResponse
func (c *ClientWithResponses) GetVmFoldersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmFoldersResponse, error) {
	rsp, err := c.GetVmFoldersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmFoldersResponse(rsp)
}

func (c *ClientWithResponses) GetVmFoldersWithResponse(ctx context.Context, body GetVmFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmFoldersResponse, error) {
	rsp, err := c.GetVmFolders(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmFoldersResponse(rsp)
}

// GetVmFoldersConnectionWithBodyWithResponse request with arbitrary body returning *GetVmFoldersConnectionResponse
func (c *ClientWithResponses) GetVmFoldersConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmFoldersConnectionResponse, error) {
	rsp, err := c.GetVmFoldersConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmFoldersConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmFoldersConnectionWithResponse(ctx context.Context, body GetVmFoldersConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmFoldersConnectionResponse, error) {
	rsp, err := c.GetVmFoldersConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmFoldersConnectionResponse(rsp)
}

// GetVmNicsWithBodyWithResponse request with arbitrary body returning *GetVmNicsResponse
func (c *ClientWithResponses) GetVmNicsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmNicsResponse, error) {
	rsp, err := c.GetVmNicsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmNicsResponse(rsp)
}

func (c *ClientWithResponses) GetVmNicsWithResponse(ctx context.Context, body GetVmNicsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmNicsResponse, error) {
	rsp, err := c.GetVmNics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmNicsResponse(rsp)
}

// GetVmNicsConnectionWithBodyWithResponse request with arbitrary body returning *GetVmNicsConnectionResponse
func (c *ClientWithResponses) GetVmNicsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmNicsConnectionResponse, error) {
	rsp, err := c.GetVmNicsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmNicsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmNicsConnectionWithResponse(ctx context.Context, body GetVmNicsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmNicsConnectionResponse, error) {
	rsp, err := c.GetVmNicsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmNicsConnectionResponse(rsp)
}

// GetVmPlacementGroupsWithBodyWithResponse request with arbitrary body returning *GetVmPlacementGroupsResponse
func (c *ClientWithResponses) GetVmPlacementGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmPlacementGroupsResponse, error) {
	rsp, err := c.GetVmPlacementGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmPlacementGroupsResponse(rsp)
}

func (c *ClientWithResponses) GetVmPlacementGroupsWithResponse(ctx context.Context, body GetVmPlacementGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmPlacementGroupsResponse, error) {
	rsp, err := c.GetVmPlacementGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmPlacementGroupsResponse(rsp)
}

// GetVmPlacementGroupsConnectionWithBodyWithResponse request with arbitrary body returning *GetVmPlacementGroupsConnectionResponse
func (c *ClientWithResponses) GetVmPlacementGroupsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmPlacementGroupsConnectionResponse, error) {
	rsp, err := c.GetVmPlacementGroupsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmPlacementGroupsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmPlacementGroupsConnectionWithResponse(ctx context.Context, body GetVmPlacementGroupsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmPlacementGroupsConnectionResponse, error) {
	rsp, err := c.GetVmPlacementGroupsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmPlacementGroupsConnectionResponse(rsp)
}

// GetVmSnapshotsWithBodyWithResponse request with arbitrary body returning *GetVmSnapshotsResponse
func (c *ClientWithResponses) GetVmSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmSnapshotsResponse, error) {
	rsp, err := c.GetVmSnapshotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) GetVmSnapshotsWithResponse(ctx context.Context, body GetVmSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmSnapshotsResponse, error) {
	rsp, err := c.GetVmSnapshots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmSnapshotsResponse(rsp)
}

// GetVmSnapshotsConnectionWithBodyWithResponse request with arbitrary body returning *GetVmSnapshotsConnectionResponse
func (c *ClientWithResponses) GetVmSnapshotsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmSnapshotsConnectionResponse, error) {
	rsp, err := c.GetVmSnapshotsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmSnapshotsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmSnapshotsConnectionWithResponse(ctx context.Context, body GetVmSnapshotsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmSnapshotsConnectionResponse, error) {
	rsp, err := c.GetVmSnapshotsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmSnapshotsConnectionResponse(rsp)
}

// GetVmTemplatesWithBodyWithResponse request with arbitrary body returning *GetVmTemplatesResponse
func (c *ClientWithResponses) GetVmTemplatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmTemplatesResponse, error) {
	rsp, err := c.GetVmTemplatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmTemplatesResponse(rsp)
}

func (c *ClientWithResponses) GetVmTemplatesWithResponse(ctx context.Context, body GetVmTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmTemplatesResponse, error) {
	rsp, err := c.GetVmTemplates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmTemplatesResponse(rsp)
}

// GetVmTemplatesConnectionWithBodyWithResponse request with arbitrary body returning *GetVmTemplatesConnectionResponse
func (c *ClientWithResponses) GetVmTemplatesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmTemplatesConnectionResponse, error) {
	rsp, err := c.GetVmTemplatesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmTemplatesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmTemplatesConnectionWithResponse(ctx context.Context, body GetVmTemplatesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmTemplatesConnectionResponse, error) {
	rsp, err := c.GetVmTemplatesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmTemplatesConnectionResponse(rsp)
}

// GetVmVolumesWithBodyWithResponse request with arbitrary body returning *GetVmVolumesResponse
func (c *ClientWithResponses) GetVmVolumesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmVolumesResponse, error) {
	rsp, err := c.GetVmVolumesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmVolumesResponse(rsp)
}

func (c *ClientWithResponses) GetVmVolumesWithResponse(ctx context.Context, body GetVmVolumesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmVolumesResponse, error) {
	rsp, err := c.GetVmVolumes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmVolumesResponse(rsp)
}

// GetVmVolumesConnectionWithBodyWithResponse request with arbitrary body returning *GetVmVolumesConnectionResponse
func (c *ClientWithResponses) GetVmVolumesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmVolumesConnectionResponse, error) {
	rsp, err := c.GetVmVolumesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmVolumesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmVolumesConnectionWithResponse(ctx context.Context, body GetVmVolumesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmVolumesConnectionResponse, error) {
	rsp, err := c.GetVmVolumesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmVolumesConnectionResponse(rsp)
}

// GetVmsWithBodyWithResponse request with arbitrary body returning *GetVmsResponse
func (c *ClientWithResponses) GetVmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmsResponse, error) {
	rsp, err := c.GetVmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmsResponse(rsp)
}

func (c *ClientWithResponses) GetVmsWithResponse(ctx context.Context, body GetVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmsResponse, error) {
	rsp, err := c.GetVms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmsResponse(rsp)
}

// GetVmsConnectionWithBodyWithResponse request with arbitrary body returning *GetVmsConnectionResponse
func (c *ClientWithResponses) GetVmsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVmsConnectionResponse, error) {
	rsp, err := c.GetVmsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVmsConnectionWithResponse(ctx context.Context, body GetVmsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVmsConnectionResponse, error) {
	rsp, err := c.GetVmsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmsConnectionResponse(rsp)
}

// GetVsphereEsxiAccountsWithBodyWithResponse request with arbitrary body returning *GetVsphereEsxiAccountsResponse
func (c *ClientWithResponses) GetVsphereEsxiAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVsphereEsxiAccountsResponse, error) {
	rsp, err := c.GetVsphereEsxiAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVsphereEsxiAccountsResponse(rsp)
}

func (c *ClientWithResponses) GetVsphereEsxiAccountsWithResponse(ctx context.Context, body GetVsphereEsxiAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVsphereEsxiAccountsResponse, error) {
	rsp, err := c.GetVsphereEsxiAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVsphereEsxiAccountsResponse(rsp)
}

// GetVsphereEsxiAccountsConnectionWithBodyWithResponse request with arbitrary body returning *GetVsphereEsxiAccountsConnectionResponse
func (c *ClientWithResponses) GetVsphereEsxiAccountsConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVsphereEsxiAccountsConnectionResponse, error) {
	rsp, err := c.GetVsphereEsxiAccountsConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVsphereEsxiAccountsConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetVsphereEsxiAccountsConnectionWithResponse(ctx context.Context, body GetVsphereEsxiAccountsConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVsphereEsxiAccountsConnectionResponse, error) {
	rsp, err := c.GetVsphereEsxiAccountsConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVsphereEsxiAccountsConnectionResponse(rsp)
}

// GetWitnessesWithBodyWithResponse request with arbitrary body returning *GetWitnessesResponse
func (c *ClientWithResponses) GetWitnessesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWitnessesResponse, error) {
	rsp, err := c.GetWitnessesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWitnessesResponse(rsp)
}

func (c *ClientWithResponses) GetWitnessesWithResponse(ctx context.Context, body GetWitnessesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWitnessesResponse, error) {
	rsp, err := c.GetWitnesses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWitnessesResponse(rsp)
}

// GetWitnessesConnectionWithBodyWithResponse request with arbitrary body returning *GetWitnessesConnectionResponse
func (c *ClientWithResponses) GetWitnessesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWitnessesConnectionResponse, error) {
	rsp, err := c.GetWitnessesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWitnessesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetWitnessesConnectionWithResponse(ctx context.Context, body GetWitnessesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWitnessesConnectionResponse, error) {
	rsp, err := c.GetWitnessesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWitnessesConnectionResponse(rsp)
}

// GetZoneTopoesWithBodyWithResponse request with arbitrary body returning *GetZoneTopoesResponse
func (c *ClientWithResponses) GetZoneTopoesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetZoneTopoesResponse, error) {
	rsp, err := c.GetZoneTopoesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneTopoesResponse(rsp)
}

func (c *ClientWithResponses) GetZoneTopoesWithResponse(ctx context.Context, body GetZoneTopoesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetZoneTopoesResponse, error) {
	rsp, err := c.GetZoneTopoes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneTopoesResponse(rsp)
}

// GetZoneTopoesConnectionWithBodyWithResponse request with arbitrary body returning *GetZoneTopoesConnectionResponse
func (c *ClientWithResponses) GetZoneTopoesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetZoneTopoesConnectionResponse, error) {
	rsp, err := c.GetZoneTopoesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneTopoesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetZoneTopoesConnectionWithResponse(ctx context.Context, body GetZoneTopoesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetZoneTopoesConnectionResponse, error) {
	rsp, err := c.GetZoneTopoesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneTopoesConnectionResponse(rsp)
}

// GetZonesWithBodyWithResponse request with arbitrary body returning *GetZonesResponse
func (c *ClientWithResponses) GetZonesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetZonesResponse, error) {
	rsp, err := c.GetZonesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZonesResponse(rsp)
}

func (c *ClientWithResponses) GetZonesWithResponse(ctx context.Context, body GetZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetZonesResponse, error) {
	rsp, err := c.GetZones(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZonesResponse(rsp)
}

// GetZonesConnectionWithBodyWithResponse request with arbitrary body returning *GetZonesConnectionResponse
func (c *ClientWithResponses) GetZonesConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetZonesConnectionResponse, error) {
	rsp, err := c.GetZonesConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZonesConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetZonesConnectionWithResponse(ctx context.Context, body GetZonesConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetZonesConnectionResponse, error) {
	rsp, err := c.GetZonesConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZonesConnectionResponse(rsp)
}

// InstallVmtoolsWithBodyWithResponse request with arbitrary body returning *InstallVmtoolsResponse
func (c *ClientWithResponses) InstallVmtoolsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallVmtoolsResponse, error) {
	rsp, err := c.InstallVmtoolsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallVmtoolsResponse(rsp)
}

func (c *ClientWithResponses) InstallVmtoolsWithResponse(ctx context.Context, body InstallVmtoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallVmtoolsResponse, error) {
	rsp, err := c.InstallVmtools(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallVmtoolsResponse(rsp)
}

// KeepSnapshotGroupWithBodyWithResponse request with arbitrary body returning *KeepSnapshotGroupResponse
func (c *ClientWithResponses) KeepSnapshotGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KeepSnapshotGroupResponse, error) {
	rsp, err := c.KeepSnapshotGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeepSnapshotGroupResponse(rsp)
}

func (c *ClientWithResponses) KeepSnapshotGroupWithResponse(ctx context.Context, body KeepSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*KeepSnapshotGroupResponse, error) {
	rsp, err := c.KeepSnapshotGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeepSnapshotGroupResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// MigRateVmWithBodyWithResponse request with arbitrary body returning *MigRateVmResponse
func (c *ClientWithResponses) MigRateVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigRateVmResponse, error) {
	rsp, err := c.MigRateVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigRateVmResponse(rsp)
}

func (c *ClientWithResponses) MigRateVmWithResponse(ctx context.Context, body MigRateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*MigRateVmResponse, error) {
	rsp, err := c.MigRateVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigRateVmResponse(rsp)
}

// MountDiskWithBodyWithResponse request with arbitrary body returning *MountDiskResponse
func (c *ClientWithResponses) MountDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MountDiskResponse, error) {
	rsp, err := c.MountDiskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMountDiskResponse(rsp)
}

func (c *ClientWithResponses) MountDiskWithResponse(ctx context.Context, body MountDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*MountDiskResponse, error) {
	rsp, err := c.MountDisk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMountDiskResponse(rsp)
}

// MountUsbDeviceWithBodyWithResponse request with arbitrary body returning *MountUsbDeviceResponse
func (c *ClientWithResponses) MountUsbDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MountUsbDeviceResponse, error) {
	rsp, err := c.MountUsbDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMountUsbDeviceResponse(rsp)
}

func (c *ClientWithResponses) MountUsbDeviceWithResponse(ctx context.Context, body MountUsbDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*MountUsbDeviceResponse, error) {
	rsp, err := c.MountUsbDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMountUsbDeviceResponse(rsp)
}

// MoveBrickTopoWithBodyWithResponse request with arbitrary body returning *MoveBrickTopoResponse
func (c *ClientWithResponses) MoveBrickTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveBrickTopoResponse, error) {
	rsp, err := c.MoveBrickTopoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveBrickTopoResponse(rsp)
}

func (c *ClientWithResponses) MoveBrickTopoWithResponse(ctx context.Context, body MoveBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveBrickTopoResponse, error) {
	rsp, err := c.MoveBrickTopo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveBrickTopoResponse(rsp)
}

// UpdateNodeTopoWithBodyWithResponse request with arbitrary body returning *UpdateNodeTopoResponse
func (c *ClientWithResponses) UpdateNodeTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeTopoResponse, error) {
	rsp, err := c.UpdateNodeTopoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeTopoResponse(rsp)
}

func (c *ClientWithResponses) UpdateNodeTopoWithResponse(ctx context.Context, body UpdateNodeTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeTopoResponse, error) {
	rsp, err := c.UpdateNodeTopo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeTopoResponse(rsp)
}

// MoveVmToRecycleBinWithBodyWithResponse request with arbitrary body returning *MoveVmToRecycleBinResponse
func (c *ClientWithResponses) MoveVmToRecycleBinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveVmToRecycleBinResponse, error) {
	rsp, err := c.MoveVmToRecycleBinWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveVmToRecycleBinResponse(rsp)
}

func (c *ClientWithResponses) MoveVmToRecycleBinWithResponse(ctx context.Context, body MoveVmToRecycleBinJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveVmToRecycleBinResponse, error) {
	rsp, err := c.MoveVmToRecycleBin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveVmToRecycleBinResponse(rsp)
}

// ForceShutDownVmWithBodyWithResponse request with arbitrary body returning *ForceShutDownVmResponse
func (c *ClientWithResponses) ForceShutDownVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ForceShutDownVmResponse, error) {
	rsp, err := c.ForceShutDownVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForceShutDownVmResponse(rsp)
}

func (c *ClientWithResponses) ForceShutDownVmWithResponse(ctx context.Context, body ForceShutDownVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ForceShutDownVmResponse, error) {
	rsp, err := c.ForceShutDownVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForceShutDownVmResponse(rsp)
}

// RebuildVmWithBodyWithResponse request with arbitrary body returning *RebuildVmResponse
func (c *ClientWithResponses) RebuildVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RebuildVmResponse, error) {
	rsp, err := c.RebuildVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRebuildVmResponse(rsp)
}

func (c *ClientWithResponses) RebuildVmWithResponse(ctx context.Context, body RebuildVmJSONRequestBody, reqEditors ...RequestEditorFn) (*RebuildVmResponse, error) {
	rsp, err := c.RebuildVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRebuildVmResponse(rsp)
}

// RecoverVmFromRecycleBinWithBodyWithResponse request with arbitrary body returning *RecoverVmFromRecycleBinResponse
func (c *ClientWithResponses) RecoverVmFromRecycleBinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RecoverVmFromRecycleBinResponse, error) {
	rsp, err := c.RecoverVmFromRecycleBinWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecoverVmFromRecycleBinResponse(rsp)
}

func (c *ClientWithResponses) RecoverVmFromRecycleBinWithResponse(ctx context.Context, body RecoverVmFromRecycleBinJSONRequestBody, reqEditors ...RequestEditorFn) (*RecoverVmFromRecycleBinResponse, error) {
	rsp, err := c.RecoverVmFromRecycleBin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecoverVmFromRecycleBinResponse(rsp)
}

// RemoveLabelsFromResourcesWithBodyWithResponse request with arbitrary body returning *RemoveLabelsFromResourcesResponse
func (c *ClientWithResponses) RemoveLabelsFromResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveLabelsFromResourcesResponse, error) {
	rsp, err := c.RemoveLabelsFromResourcesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveLabelsFromResourcesResponse(rsp)
}

func (c *ClientWithResponses) RemoveLabelsFromResourcesWithResponse(ctx context.Context, body RemoveLabelsFromResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveLabelsFromResourcesResponse, error) {
	rsp, err := c.RemoveLabelsFromResources(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveLabelsFromResourcesResponse(rsp)
}

// RemoveVmCdRomWithBodyWithResponse request with arbitrary body returning *RemoveVmCdRomResponse
func (c *ClientWithResponses) RemoveVmCdRomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveVmCdRomResponse, error) {
	rsp, err := c.RemoveVmCdRomWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVmCdRomResponse(rsp)
}

func (c *ClientWithResponses) RemoveVmCdRomWithResponse(ctx context.Context, body RemoveVmCdRomJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveVmCdRomResponse, error) {
	rsp, err := c.RemoveVmCdRom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVmCdRomResponse(rsp)
}

// RemoveVmDiskWithBodyWithResponse request with arbitrary body returning *RemoveVmDiskResponse
func (c *ClientWithResponses) RemoveVmDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveVmDiskResponse, error) {
	rsp, err := c.RemoveVmDiskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVmDiskResponse(rsp)
}

func (c *ClientWithResponses) RemoveVmDiskWithResponse(ctx context.Context, body RemoveVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveVmDiskResponse, error) {
	rsp, err := c.RemoveVmDisk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVmDiskResponse(rsp)
}

// RemoveVmToFolderWithBodyWithResponse request with arbitrary body returning *RemoveVmToFolderResponse
func (c *ClientWithResponses) RemoveVmToFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveVmToFolderResponse, error) {
	rsp, err := c.RemoveVmToFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVmToFolderResponse(rsp)
}

func (c *ClientWithResponses) RemoveVmToFolderWithResponse(ctx context.Context, body RemoveVmToFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveVmToFolderResponse, error) {
	rsp, err := c.RemoveVmToFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVmToFolderResponse(rsp)
}

// RemoveVmNicWithBodyWithResponse request with arbitrary body returning *RemoveVmNicResponse
func (c *ClientWithResponses) RemoveVmNicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveVmNicResponse, error) {
	rsp, err := c.RemoveVmNicWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVmNicResponse(rsp)
}

func (c *ClientWithResponses) RemoveVmNicWithResponse(ctx context.Context, body RemoveVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveVmNicResponse, error) {
	rsp, err := c.RemoveVmNic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVmNicResponse(rsp)
}

// ResolveAlertWithBodyWithResponse request with arbitrary body returning *ResolveAlertResponse
func (c *ClientWithResponses) ResolveAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveAlertResponse, error) {
	rsp, err := c.ResolveAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveAlertResponse(rsp)
}

func (c *ClientWithResponses) ResolveAlertWithResponse(ctx context.Context, body ResolveAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolveAlertResponse, error) {
	rsp, err := c.ResolveAlert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveAlertResponse(rsp)
}

// RestartVmWithBodyWithResponse request with arbitrary body returning *RestartVmResponse
func (c *ClientWithResponses) RestartVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestartVmResponse, error) {
	rsp, err := c.RestartVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartVmResponse(rsp)
}

func (c *ClientWithResponses) RestartVmWithResponse(ctx context.Context, body RestartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*RestartVmResponse, error) {
	rsp, err := c.RestartVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartVmResponse(rsp)
}

// ResumeSnapshotPlanWithBodyWithResponse request with arbitrary body returning *ResumeSnapshotPlanResponse
func (c *ClientWithResponses) ResumeSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResumeSnapshotPlanResponse, error) {
	rsp, err := c.ResumeSnapshotPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeSnapshotPlanResponse(rsp)
}

func (c *ClientWithResponses) ResumeSnapshotPlanWithResponse(ctx context.Context, body ResumeSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*ResumeSnapshotPlanResponse, error) {
	rsp, err := c.ResumeSnapshotPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeSnapshotPlanResponse(rsp)
}

// ResumeVmWithBodyWithResponse request with arbitrary body returning *ResumeVmResponse
func (c *ClientWithResponses) ResumeVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResumeVmResponse, error) {
	rsp, err := c.ResumeVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeVmResponse(rsp)
}

func (c *ClientWithResponses) ResumeVmWithResponse(ctx context.Context, body ResumeVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ResumeVmResponse, error) {
	rsp, err := c.ResumeVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeVmResponse(rsp)
}

// UpdateConsistencyGroupSnapshotWithBodyWithResponse request with arbitrary body returning *UpdateConsistencyGroupSnapshotResponse
func (c *ClientWithResponses) UpdateConsistencyGroupSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConsistencyGroupSnapshotResponse, error) {
	rsp, err := c.UpdateConsistencyGroupSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConsistencyGroupSnapshotResponse(rsp)
}

func (c *ClientWithResponses) UpdateConsistencyGroupSnapshotWithResponse(ctx context.Context, body UpdateConsistencyGroupSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConsistencyGroupSnapshotResponse, error) {
	rsp, err := c.UpdateConsistencyGroupSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConsistencyGroupSnapshotResponse(rsp)
}

// RollbackIscsiLunFromSnapshotWithBodyWithResponse request with arbitrary body returning *RollbackIscsiLunFromSnapshotResponse
func (c *ClientWithResponses) RollbackIscsiLunFromSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RollbackIscsiLunFromSnapshotResponse, error) {
	rsp, err := c.RollbackIscsiLunFromSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackIscsiLunFromSnapshotResponse(rsp)
}

func (c *ClientWithResponses) RollbackIscsiLunFromSnapshotWithResponse(ctx context.Context, body RollbackIscsiLunFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*RollbackIscsiLunFromSnapshotResponse, error) {
	rsp, err := c.RollbackIscsiLunFromSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackIscsiLunFromSnapshotResponse(rsp)
}

// RollbackNvmfNamespaceFromSnapshotWithBodyWithResponse request with arbitrary body returning *RollbackNvmfNamespaceFromSnapshotResponse
func (c *ClientWithResponses) RollbackNvmfNamespaceFromSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RollbackNvmfNamespaceFromSnapshotResponse, error) {
	rsp, err := c.RollbackNvmfNamespaceFromSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackNvmfNamespaceFromSnapshotResponse(rsp)
}

func (c *ClientWithResponses) RollbackNvmfNamespaceFromSnapshotWithResponse(ctx context.Context, body RollbackNvmfNamespaceFromSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*RollbackNvmfNamespaceFromSnapshotResponse, error) {
	rsp, err := c.RollbackNvmfNamespaceFromSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackNvmfNamespaceFromSnapshotResponse(rsp)
}

// RollbackSnapshotGroupWithBodyWithResponse request with arbitrary body returning *RollbackSnapshotGroupResponse
func (c *ClientWithResponses) RollbackSnapshotGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RollbackSnapshotGroupResponse, error) {
	rsp, err := c.RollbackSnapshotGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackSnapshotGroupResponse(rsp)
}

func (c *ClientWithResponses) RollbackSnapshotGroupWithResponse(ctx context.Context, body RollbackSnapshotGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*RollbackSnapshotGroupResponse, error) {
	rsp, err := c.RollbackSnapshotGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackSnapshotGroupResponse(rsp)
}

// RollbackVmWithBodyWithResponse request with arbitrary body returning *RollbackVmResponse
func (c *ClientWithResponses) RollbackVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RollbackVmResponse, error) {
	rsp, err := c.RollbackVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackVmResponse(rsp)
}

func (c *ClientWithResponses) RollbackVmWithResponse(ctx context.Context, body RollbackVmJSONRequestBody, reqEditors ...RequestEditorFn) (*RollbackVmResponse, error) {
	rsp, err := c.RollbackVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackVmResponse(rsp)
}

// ShutDownVmWithBodyWithResponse request with arbitrary body returning *ShutDownVmResponse
func (c *ClientWithResponses) ShutDownVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShutDownVmResponse, error) {
	rsp, err := c.ShutDownVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShutDownVmResponse(rsp)
}

func (c *ClientWithResponses) ShutDownVmWithResponse(ctx context.Context, body ShutDownVmJSONRequestBody, reqEditors ...RequestEditorFn) (*ShutDownVmResponse, error) {
	rsp, err := c.ShutDownVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShutDownVmResponse(rsp)
}

// StartVmWithBodyWithResponse request with arbitrary body returning *StartVmResponse
func (c *ClientWithResponses) StartVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartVmResponse, error) {
	rsp, err := c.StartVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartVmResponse(rsp)
}

func (c *ClientWithResponses) StartVmWithResponse(ctx context.Context, body StartVmJSONRequestBody, reqEditors ...RequestEditorFn) (*StartVmResponse, error) {
	rsp, err := c.StartVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartVmResponse(rsp)
}

// SuspendSnapshotPlanWithBodyWithResponse request with arbitrary body returning *SuspendSnapshotPlanResponse
func (c *ClientWithResponses) SuspendSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SuspendSnapshotPlanResponse, error) {
	rsp, err := c.SuspendSnapshotPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendSnapshotPlanResponse(rsp)
}

func (c *ClientWithResponses) SuspendSnapshotPlanWithResponse(ctx context.Context, body SuspendSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*SuspendSnapshotPlanResponse, error) {
	rsp, err := c.SuspendSnapshotPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendSnapshotPlanResponse(rsp)
}

// SuspendVmWithBodyWithResponse request with arbitrary body returning *SuspendVmResponse
func (c *ClientWithResponses) SuspendVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SuspendVmResponse, error) {
	rsp, err := c.SuspendVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendVmResponse(rsp)
}

func (c *ClientWithResponses) SuspendVmWithResponse(ctx context.Context, body SuspendVmJSONRequestBody, reqEditors ...RequestEditorFn) (*SuspendVmResponse, error) {
	rsp, err := c.SuspendVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendVmResponse(rsp)
}

// TriggerDiskBlinkWithBodyWithResponse request with arbitrary body returning *TriggerDiskBlinkResponse
func (c *ClientWithResponses) TriggerDiskBlinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerDiskBlinkResponse, error) {
	rsp, err := c.TriggerDiskBlinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerDiskBlinkResponse(rsp)
}

func (c *ClientWithResponses) TriggerDiskBlinkWithResponse(ctx context.Context, body TriggerDiskBlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerDiskBlinkResponse, error) {
	rsp, err := c.TriggerDiskBlink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerDiskBlinkResponse(rsp)
}

// UnmountDiskWithBodyWithResponse request with arbitrary body returning *UnmountDiskResponse
func (c *ClientWithResponses) UnmountDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnmountDiskResponse, error) {
	rsp, err := c.UnmountDiskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnmountDiskResponse(rsp)
}

func (c *ClientWithResponses) UnmountDiskWithResponse(ctx context.Context, body UnmountDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*UnmountDiskResponse, error) {
	rsp, err := c.UnmountDisk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnmountDiskResponse(rsp)
}

// UnmountUsbDeviceWithBodyWithResponse request with arbitrary body returning *UnmountUsbDeviceResponse
func (c *ClientWithResponses) UnmountUsbDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnmountUsbDeviceResponse, error) {
	rsp, err := c.UnmountUsbDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnmountUsbDeviceResponse(rsp)
}

func (c *ClientWithResponses) UnmountUsbDeviceWithResponse(ctx context.Context, body UnmountUsbDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*UnmountUsbDeviceResponse, error) {
	rsp, err := c.UnmountUsbDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnmountUsbDeviceResponse(rsp)
}

// UpdateBrickTopoWithBodyWithResponse request with arbitrary body returning *UpdateBrickTopoResponse
func (c *ClientWithResponses) UpdateBrickTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBrickTopoResponse, error) {
	rsp, err := c.UpdateBrickTopoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBrickTopoResponse(rsp)
}

func (c *ClientWithResponses) UpdateBrickTopoWithResponse(ctx context.Context, body UpdateBrickTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBrickTopoResponse, error) {
	rsp, err := c.UpdateBrickTopo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBrickTopoResponse(rsp)
}

// UpdateClusterWithBodyWithResponse request with arbitrary body returning *UpdateClusterResponse
func (c *ClientWithResponses) UpdateClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterResponse, error) {
	rsp, err := c.UpdateClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateClusterWithResponse(ctx context.Context, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterResponse, error) {
	rsp, err := c.UpdateCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterResponse(rsp)
}

// UpdateClusterLicenseWithBodyWithResponse request with arbitrary body returning *UpdateClusterLicenseResponse
func (c *ClientWithResponses) UpdateClusterLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterLicenseResponse, error) {
	rsp, err := c.UpdateClusterLicenseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterLicenseResponse(rsp)
}

func (c *ClientWithResponses) UpdateClusterLicenseWithResponse(ctx context.Context, body UpdateClusterLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterLicenseResponse, error) {
	rsp, err := c.UpdateClusterLicense(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterLicenseResponse(rsp)
}

// UpdateClusterRecycleBinSettingWithBodyWithResponse request with arbitrary body returning *UpdateClusterRecycleBinSettingResponse
func (c *ClientWithResponses) UpdateClusterRecycleBinSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterRecycleBinSettingResponse, error) {
	rsp, err := c.UpdateClusterRecycleBinSettingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterRecycleBinSettingResponse(rsp)
}

func (c *ClientWithResponses) UpdateClusterRecycleBinSettingWithResponse(ctx context.Context, body UpdateClusterRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterRecycleBinSettingResponse, error) {
	rsp, err := c.UpdateClusterRecycleBinSetting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterRecycleBinSettingResponse(rsp)
}

// UpdateConsistencyGroupWithBodyWithResponse request with arbitrary body returning *UpdateConsistencyGroupResponse
func (c *ClientWithResponses) UpdateConsistencyGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConsistencyGroupResponse, error) {
	rsp, err := c.UpdateConsistencyGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConsistencyGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateConsistencyGroupWithResponse(ctx context.Context, body UpdateConsistencyGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConsistencyGroupResponse, error) {
	rsp, err := c.UpdateConsistencyGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConsistencyGroupResponse(rsp)
}

// UpdateCustomizeAlertRuleWithBodyWithResponse request with arbitrary body returning *UpdateCustomizeAlertRuleResponse
func (c *ClientWithResponses) UpdateCustomizeAlertRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomizeAlertRuleResponse, error) {
	rsp, err := c.UpdateCustomizeAlertRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomizeAlertRuleResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomizeAlertRuleWithResponse(ctx context.Context, body UpdateCustomizeAlertRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomizeAlertRuleResponse, error) {
	rsp, err := c.UpdateCustomizeAlertRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomizeAlertRuleResponse(rsp)
}

// UpdateDatacenterWithBodyWithResponse request with arbitrary body returning *UpdateDatacenterResponse
func (c *ClientWithResponses) UpdateDatacenterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatacenterResponse, error) {
	rsp, err := c.UpdateDatacenterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatacenterResponse(rsp)
}

func (c *ClientWithResponses) UpdateDatacenterWithResponse(ctx context.Context, body UpdateDatacenterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatacenterResponse, error) {
	rsp, err := c.UpdateDatacenter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatacenterResponse(rsp)
}

// UpdateElfImageWithBodyWithResponse request with arbitrary body returning *UpdateElfImageResponse
func (c *ClientWithResponses) UpdateElfImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateElfImageResponse, error) {
	rsp, err := c.UpdateElfImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElfImageResponse(rsp)
}

func (c *ClientWithResponses) UpdateElfImageWithResponse(ctx context.Context, body UpdateElfImageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateElfImageResponse, error) {
	rsp, err := c.UpdateElfImage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElfImageResponse(rsp)
}

// UpdateEntityFilterWithBodyWithResponse request with arbitrary body returning *UpdateEntityFilterResponse
func (c *ClientWithResponses) UpdateEntityFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEntityFilterResponse, error) {
	rsp, err := c.UpdateEntityFilterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEntityFilterResponse(rsp)
}

func (c *ClientWithResponses) UpdateEntityFilterWithResponse(ctx context.Context, body UpdateEntityFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEntityFilterResponse, error) {
	rsp, err := c.UpdateEntityFilter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEntityFilterResponse(rsp)
}

// UpdateGlobalAlertRuleWithBodyWithResponse request with arbitrary body returning *UpdateGlobalAlertRuleResponse
func (c *ClientWithResponses) UpdateGlobalAlertRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGlobalAlertRuleResponse, error) {
	rsp, err := c.UpdateGlobalAlertRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGlobalAlertRuleResponse(rsp)
}

func (c *ClientWithResponses) UpdateGlobalAlertRuleWithResponse(ctx context.Context, body UpdateGlobalAlertRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGlobalAlertRuleResponse, error) {
	rsp, err := c.UpdateGlobalAlertRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGlobalAlertRuleResponse(rsp)
}

// UpdateGlobalRecycleBinSettingWithBodyWithResponse request with arbitrary body returning *UpdateGlobalRecycleBinSettingResponse
func (c *ClientWithResponses) UpdateGlobalRecycleBinSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGlobalRecycleBinSettingResponse, error) {
	rsp, err := c.UpdateGlobalRecycleBinSettingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGlobalRecycleBinSettingResponse(rsp)
}

func (c *ClientWithResponses) UpdateGlobalRecycleBinSettingWithResponse(ctx context.Context, body UpdateGlobalRecycleBinSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGlobalRecycleBinSettingResponse, error) {
	rsp, err := c.UpdateGlobalRecycleBinSetting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGlobalRecycleBinSettingResponse(rsp)
}

// UpdateGraphWithBodyWithResponse request with arbitrary body returning *UpdateGraphResponse
func (c *ClientWithResponses) UpdateGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGraphResponse, error) {
	rsp, err := c.UpdateGraphWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGraphResponse(rsp)
}

func (c *ClientWithResponses) UpdateGraphWithResponse(ctx context.Context, body UpdateGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGraphResponse, error) {
	rsp, err := c.UpdateGraph(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGraphResponse(rsp)
}

// UpdateHostWithBodyWithResponse request with arbitrary body returning *UpdateHostResponse
func (c *ClientWithResponses) UpdateHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHostResponse, error) {
	rsp, err := c.UpdateHostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHostResponse(rsp)
}

func (c *ClientWithResponses) UpdateHostWithResponse(ctx context.Context, body UpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHostResponse, error) {
	rsp, err := c.UpdateHost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHostResponse(rsp)
}

// UpdateIscsiLunWithBodyWithResponse request with arbitrary body returning *UpdateIscsiLunResponse
func (c *ClientWithResponses) UpdateIscsiLunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIscsiLunResponse, error) {
	rsp, err := c.UpdateIscsiLunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIscsiLunResponse(rsp)
}

func (c *ClientWithResponses) UpdateIscsiLunWithResponse(ctx context.Context, body UpdateIscsiLunJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIscsiLunResponse, error) {
	rsp, err := c.UpdateIscsiLun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIscsiLunResponse(rsp)
}

// UpdateIscsiTargetWithBodyWithResponse request with arbitrary body returning *UpdateIscsiTargetResponse
func (c *ClientWithResponses) UpdateIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIscsiTargetResponse, error) {
	rsp, err := c.UpdateIscsiTargetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIscsiTargetResponse(rsp)
}

func (c *ClientWithResponses) UpdateIscsiTargetWithResponse(ctx context.Context, body UpdateIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIscsiTargetResponse, error) {
	rsp, err := c.UpdateIscsiTarget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIscsiTargetResponse(rsp)
}

// UpdateLabelWithBodyWithResponse request with arbitrary body returning *UpdateLabelResponse
func (c *ClientWithResponses) UpdateLabelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLabelResponse, error) {
	rsp, err := c.UpdateLabelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLabelResponse(rsp)
}

func (c *ClientWithResponses) UpdateLabelWithResponse(ctx context.Context, body UpdateLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLabelResponse, error) {
	rsp, err := c.UpdateLabel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLabelResponse(rsp)
}

// UpdateDeployWithBodyWithResponse request with arbitrary body returning *UpdateDeployResponse
func (c *ClientWithResponses) UpdateDeployWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeployResponse, error) {
	rsp, err := c.UpdateDeployWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeployResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeployWithResponse(ctx context.Context, body UpdateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeployResponse, error) {
	rsp, err := c.UpdateDeploy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeployResponse(rsp)
}

// UpdateManagementVlanWithBodyWithResponse request with arbitrary body returning *UpdateManagementVlanResponse
func (c *ClientWithResponses) UpdateManagementVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateManagementVlanResponse, error) {
	rsp, err := c.UpdateManagementVlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateManagementVlanResponse(rsp)
}

func (c *ClientWithResponses) UpdateManagementVlanWithResponse(ctx context.Context, body UpdateManagementVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateManagementVlanResponse, error) {
	rsp, err := c.UpdateManagementVlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateManagementVlanResponse(rsp)
}

// UpdateMigrationVlanWithBodyWithResponse request with arbitrary body returning *UpdateMigrationVlanResponse
func (c *ClientWithResponses) UpdateMigrationVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMigrationVlanResponse, error) {
	rsp, err := c.UpdateMigrationVlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMigrationVlanResponse(rsp)
}

func (c *ClientWithResponses) UpdateMigrationVlanWithResponse(ctx context.Context, body UpdateMigrationVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMigrationVlanResponse, error) {
	rsp, err := c.UpdateMigrationVlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMigrationVlanResponse(rsp)
}

// UpdateNamespaceGroupWithBodyWithResponse request with arbitrary body returning *UpdateNamespaceGroupResponse
func (c *ClientWithResponses) UpdateNamespaceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNamespaceGroupResponse, error) {
	rsp, err := c.UpdateNamespaceGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNamespaceGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateNamespaceGroupWithResponse(ctx context.Context, body UpdateNamespaceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNamespaceGroupResponse, error) {
	rsp, err := c.UpdateNamespaceGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNamespaceGroupResponse(rsp)
}

// UpdateNfsExportWithBodyWithResponse request with arbitrary body returning *UpdateNfsExportResponse
func (c *ClientWithResponses) UpdateNfsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNfsExportResponse, error) {
	rsp, err := c.UpdateNfsExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNfsExportResponse(rsp)
}

func (c *ClientWithResponses) UpdateNfsExportWithResponse(ctx context.Context, body UpdateNfsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNfsExportResponse, error) {
	rsp, err := c.UpdateNfsExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNfsExportResponse(rsp)
}

// UpdateNicWithBodyWithResponse request with arbitrary body returning *UpdateNicResponse
func (c *ClientWithResponses) UpdateNicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNicResponse, error) {
	rsp, err := c.UpdateNicWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNicResponse(rsp)
}

func (c *ClientWithResponses) UpdateNicWithResponse(ctx context.Context, body UpdateNicJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNicResponse, error) {
	rsp, err := c.UpdateNic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNicResponse(rsp)
}

// UpdateNvmfNamespaceWithBodyWithResponse request with arbitrary body returning *UpdateNvmfNamespaceResponse
func (c *ClientWithResponses) UpdateNvmfNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNvmfNamespaceResponse, error) {
	rsp, err := c.UpdateNvmfNamespaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNvmfNamespaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateNvmfNamespaceWithResponse(ctx context.Context, body UpdateNvmfNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNvmfNamespaceResponse, error) {
	rsp, err := c.UpdateNvmfNamespace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNvmfNamespaceResponse(rsp)
}

// UpdateNvmfSubsystemWithBodyWithResponse request with arbitrary body returning *UpdateNvmfSubsystemResponse
func (c *ClientWithResponses) UpdateNvmfSubsystemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNvmfSubsystemResponse, error) {
	rsp, err := c.UpdateNvmfSubsystemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNvmfSubsystemResponse(rsp)
}

func (c *ClientWithResponses) UpdateNvmfSubsystemWithResponse(ctx context.Context, body UpdateNvmfSubsystemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNvmfSubsystemResponse, error) {
	rsp, err := c.UpdateNvmfSubsystem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNvmfSubsystemResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// UpdateRackTopoWithBodyWithResponse request with arbitrary body returning *UpdateRackTopoResponse
func (c *ClientWithResponses) UpdateRackTopoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRackTopoResponse, error) {
	rsp, err := c.UpdateRackTopoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRackTopoResponse(rsp)
}

func (c *ClientWithResponses) UpdateRackTopoWithResponse(ctx context.Context, body UpdateRackTopoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRackTopoResponse, error) {
	rsp, err := c.UpdateRackTopo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRackTopoResponse(rsp)
}

// UpdateReportTemplateWithBodyWithResponse request with arbitrary body returning *UpdateReportTemplateResponse
func (c *ClientWithResponses) UpdateReportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateReportTemplateResponse, error) {
	rsp, err := c.UpdateReportTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReportTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateReportTemplateWithResponse(ctx context.Context, body UpdateReportTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateReportTemplateResponse, error) {
	rsp, err := c.UpdateReportTemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReportTemplateResponse(rsp)
}

// UpdateRoleWithBodyWithResponse request with arbitrary body returning *UpdateRoleResponse
func (c *ClientWithResponses) UpdateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateRoleWithResponse(ctx context.Context, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

// UpdateSnapshotPlanWithBodyWithResponse request with arbitrary body returning *UpdateSnapshotPlanResponse
func (c *ClientWithResponses) UpdateSnapshotPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSnapshotPlanResponse, error) {
	rsp, err := c.UpdateSnapshotPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSnapshotPlanResponse(rsp)
}

func (c *ClientWithResponses) UpdateSnapshotPlanWithResponse(ctx context.Context, body UpdateSnapshotPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSnapshotPlanResponse, error) {
	rsp, err := c.UpdateSnapshotPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSnapshotPlanResponse(rsp)
}

// UpdateSnmpTransportWithBodyWithResponse request with arbitrary body returning *UpdateSnmpTransportResponse
func (c *ClientWithResponses) UpdateSnmpTransportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSnmpTransportResponse, error) {
	rsp, err := c.UpdateSnmpTransportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSnmpTransportResponse(rsp)
}

func (c *ClientWithResponses) UpdateSnmpTransportWithResponse(ctx context.Context, body UpdateSnmpTransportJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSnmpTransportResponse, error) {
	rsp, err := c.UpdateSnmpTransport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSnmpTransportResponse(rsp)
}

// UpdateSnmpTrapReceiverWithBodyWithResponse request with arbitrary body returning *UpdateSnmpTrapReceiverResponse
func (c *ClientWithResponses) UpdateSnmpTrapReceiverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSnmpTrapReceiverResponse, error) {
	rsp, err := c.UpdateSnmpTrapReceiverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSnmpTrapReceiverResponse(rsp)
}

func (c *ClientWithResponses) UpdateSnmpTrapReceiverWithResponse(ctx context.Context, body UpdateSnmpTrapReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSnmpTrapReceiverResponse, error) {
	rsp, err := c.UpdateSnmpTrapReceiver(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSnmpTrapReceiverResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// UpdateVdsWithBodyWithResponse request with arbitrary body returning *UpdateVdsResponse
func (c *ClientWithResponses) UpdateVdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVdsResponse, error) {
	rsp, err := c.UpdateVdsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVdsResponse(rsp)
}

func (c *ClientWithResponses) UpdateVdsWithResponse(ctx context.Context, body UpdateVdsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVdsResponse, error) {
	rsp, err := c.UpdateVds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVdsResponse(rsp)
}

// UpdateViewWithBodyWithResponse request with arbitrary body returning *UpdateViewResponse
func (c *ClientWithResponses) UpdateViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateViewResponse, error) {
	rsp, err := c.UpdateViewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateViewResponse(rsp)
}

func (c *ClientWithResponses) UpdateViewWithResponse(ctx context.Context, body UpdateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateViewResponse, error) {
	rsp, err := c.UpdateView(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateViewResponse(rsp)
}

// UpdateVmWithBodyWithResponse request with arbitrary body returning *UpdateVmResponse
func (c *ClientWithResponses) UpdateVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmResponse, error) {
	rsp, err := c.UpdateVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmResponse(rsp)
}

func (c *ClientWithResponses) UpdateVmWithResponse(ctx context.Context, body UpdateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmResponse, error) {
	rsp, err := c.UpdateVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmResponse(rsp)
}

// UpdateVmDiskWithBodyWithResponse request with arbitrary body returning *UpdateVmDiskResponse
func (c *ClientWithResponses) UpdateVmDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmDiskResponse, error) {
	rsp, err := c.UpdateVmDiskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmDiskResponse(rsp)
}

func (c *ClientWithResponses) UpdateVmDiskWithResponse(ctx context.Context, body UpdateVmDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmDiskResponse, error) {
	rsp, err := c.UpdateVmDisk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmDiskResponse(rsp)
}

// UpdateVmFolderWithBodyWithResponse request with arbitrary body returning *UpdateVmFolderResponse
func (c *ClientWithResponses) UpdateVmFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmFolderResponse, error) {
	rsp, err := c.UpdateVmFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmFolderResponse(rsp)
}

func (c *ClientWithResponses) UpdateVmFolderWithResponse(ctx context.Context, body UpdateVmFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmFolderResponse, error) {
	rsp, err := c.UpdateVmFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmFolderResponse(rsp)
}

// UpdateVmNicWithBodyWithResponse request with arbitrary body returning *UpdateVmNicResponse
func (c *ClientWithResponses) UpdateVmNicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmNicResponse, error) {
	rsp, err := c.UpdateVmNicWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmNicResponse(rsp)
}

func (c *ClientWithResponses) UpdateVmNicWithResponse(ctx context.Context, body UpdateVmNicJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmNicResponse, error) {
	rsp, err := c.UpdateVmNic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmNicResponse(rsp)
}

// UpdateVmPlacementGroupWithBodyWithResponse request with arbitrary body returning *UpdateVmPlacementGroupResponse
func (c *ClientWithResponses) UpdateVmPlacementGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmPlacementGroupResponse, error) {
	rsp, err := c.UpdateVmPlacementGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmPlacementGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateVmPlacementGroupWithResponse(ctx context.Context, body UpdateVmPlacementGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmPlacementGroupResponse, error) {
	rsp, err := c.UpdateVmPlacementGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmPlacementGroupResponse(rsp)
}

// UpdateVmTemplateFromVmWithBodyWithResponse request with arbitrary body returning *UpdateVmTemplateFromVmResponse
func (c *ClientWithResponses) UpdateVmTemplateFromVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmTemplateFromVmResponse, error) {
	rsp, err := c.UpdateVmTemplateFromVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmTemplateFromVmResponse(rsp)
}

func (c *ClientWithResponses) UpdateVmTemplateFromVmWithResponse(ctx context.Context, body UpdateVmTemplateFromVmJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmTemplateFromVmResponse, error) {
	rsp, err := c.UpdateVmTemplateFromVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmTemplateFromVmResponse(rsp)
}

// UpdateVlanWithBodyWithResponse request with arbitrary body returning *UpdateVlanResponse
func (c *ClientWithResponses) UpdateVlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVlanResponse, error) {
	rsp, err := c.UpdateVlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVlanResponse(rsp)
}

func (c *ClientWithResponses) UpdateVlanWithResponse(ctx context.Context, body UpdateVlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVlanResponse, error) {
	rsp, err := c.UpdateVlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVlanResponse(rsp)
}

// CreateElfImageWithBodyWithResponse request with arbitrary body returning *CreateElfImageResponse
func (c *ClientWithResponses) CreateElfImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateElfImageResponse, error) {
	rsp, err := c.CreateElfImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateElfImageResponse(rsp)
}

// ParseAddLabelsToResourcesResponse parses an HTTP response from a AddLabelsToResourcesWithResponse call
func ParseAddLabelsToResourcesResponse(rsp *http.Response) (*AddLabelsToResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddLabelsToResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddVmCdRomResponse parses an HTTP response from a AddVmCdRomWithResponse call
func ParseAddVmCdRomResponse(rsp *http.Response) (*AddVmCdRomResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddVmCdRomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddVmDiskResponse parses an HTTP response from a AddVmDiskWithResponse call
func ParseAddVmDiskResponse(rsp *http.Response) (*AddVmDiskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddVmDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddVmNicResponse parses an HTTP response from a AddVmNicWithResponse call
func ParseAddVmNicResponse(rsp *http.Response) (*AddVmNicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddVmNicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddVmToFolderResponse parses an HTTP response from a AddVmToFolderWithResponse call
func ParseAddVmToFolderResponse(rsp *http.Response) (*AddVmToFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddVmToFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCloneIscsiLunFromSnapshotResponse parses an HTTP response from a CloneIscsiLunFromSnapshotWithResponse call
func ParseCloneIscsiLunFromSnapshotResponse(rsp *http.Response) (*CloneIscsiLunFromSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CloneIscsiLunFromSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskIscsiLun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCloneNvmfNamespaceFromSnapshotResponse parses an HTTP response from a CloneNvmfNamespaceFromSnapshotWithResponse call
func ParseCloneNvmfNamespaceFromSnapshotResponse(rsp *http.Response) (*CloneNvmfNamespaceFromSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CloneNvmfNamespaceFromSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNvmfNamespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCloneSnapshotGroupResponse parses an HTTP response from a CloneSnapshotGroupWithResponse call
func ParseCloneSnapshotGroupResponse(rsp *http.Response) (*CloneSnapshotGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CloneSnapshotGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnapshotGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCloneVmResponse parses an HTTP response from a CloneVmWithResponse call
func ParseCloneVmResponse(rsp *http.Response) (*CloneVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CloneVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCloneVmTemplateFromVmResponse parses an HTTP response from a CloneVmTemplateFromVmWithResponse call
func ParseCloneVmTemplateFromVmResponse(rsp *http.Response) (*CloneVmTemplateFromVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CloneVmTemplateFromVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConnectClusterResponse parses an HTTP response from a ConnectClusterWithResponse call
func ParseConnectClusterResponse(rsp *http.Response) (*ConnectClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ConnectClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConvertVmTemplateFromVmResponse parses an HTTP response from a ConvertVmTemplateFromVmWithResponse call
func ParseConvertVmTemplateFromVmResponse(rsp *http.Response) (*ConvertVmTemplateFromVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ConvertVmTemplateFromVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConvertVmTemplateToVmResponse parses an HTTP response from a ConvertVmTemplateToVmWithResponse call
func ParseConvertVmTemplateToVmResponse(rsp *http.Response) (*ConvertVmTemplateToVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ConvertVmTemplateToVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateBrickTopoResponse parses an HTTP response from a CreateBrickTopoWithResponse call
func ParseCreateBrickTopoResponse(rsp *http.Response) (*CreateBrickTopoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateBrickTopoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskBrickTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateClusterRecycleBinSettingResponse parses an HTTP response from a CreateClusterRecycleBinSettingWithResponse call
func ParseCreateClusterRecycleBinSettingResponse(rsp *http.Response) (*CreateClusterRecycleBinSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateClusterRecycleBinSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskClusterSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateConsistencyGroupResponse parses an HTTP response from a CreateConsistencyGroupWithResponse call
func ParseCreateConsistencyGroupResponse(rsp *http.Response) (*CreateConsistencyGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateConsistencyGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskConsistencyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateConsistencyGroupSnapshotResponse parses an HTTP response from a CreateConsistencyGroupSnapshotWithResponse call
func ParseCreateConsistencyGroupSnapshotResponse(rsp *http.Response) (*CreateConsistencyGroupSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateConsistencyGroupSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskConsistencyGroupSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateDatacenterResponse parses an HTTP response from a CreateDatacenterWithResponse call
func ParseCreateDatacenterResponse(rsp *http.Response) (*CreateDatacenterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateDatacenterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDatacenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateEntityFilterResponse parses an HTTP response from a CreateEntityFilterWithResponse call
func ParseCreateEntityFilterResponse(rsp *http.Response) (*CreateEntityFilterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateEntityFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskEntityFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateGraphResponse parses an HTTP response from a CreateGraphWithResponse call
func ParseCreateGraphResponse(rsp *http.Response) (*CreateGraphResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateHostResponse parses an HTTP response from a CreateHostWithResponse call
func ParseCreateHostResponse(rsp *http.Response) (*CreateHostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskBatchHosts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateIscsiLunResponse parses an HTTP response from a CreateIscsiLunWithResponse call
func ParseCreateIscsiLunResponse(rsp *http.Response) (*CreateIscsiLunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIscsiLunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskIscsiLun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateIscsiLunSnapshotResponse parses an HTTP response from a CreateIscsiLunSnapshotWithResponse call
func ParseCreateIscsiLunSnapshotResponse(rsp *http.Response) (*CreateIscsiLunSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIscsiLunSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskIscsiLunSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateIscsiTargetResponse parses an HTTP response from a CreateIscsiTargetWithResponse call
func ParseCreateIscsiTargetResponse(rsp *http.Response) (*CreateIscsiTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskIscsiTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateLabelResponse parses an HTTP response from a CreateLabelWithResponse call
func ParseCreateLabelResponse(rsp *http.Response) (*CreateLabelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateNamespaceGroupResponse parses an HTTP response from a CreateNamespaceGroupWithResponse call
func ParseCreateNamespaceGroupResponse(rsp *http.Response) (*CreateNamespaceGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateNamespaceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNamespaceGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateNfsExportResponse parses an HTTP response from a CreateNfsExportWithResponse call
func ParseCreateNfsExportResponse(rsp *http.Response) (*CreateNfsExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateNfsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNfsExport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateNvmfNamespaceResponse parses an HTTP response from a CreateNvmfNamespaceWithResponse call
func ParseCreateNvmfNamespaceResponse(rsp *http.Response) (*CreateNvmfNamespaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateNvmfNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNvmfNamespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateNvmfNamespaceSnapshotResponse parses an HTTP response from a CreateNvmfNamespaceSnapshotWithResponse call
func ParseCreateNvmfNamespaceSnapshotResponse(rsp *http.Response) (*CreateNvmfNamespaceSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateNvmfNamespaceSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNvmfNamespaceSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateNvmfSubsystemResponse parses an HTTP response from a CreateNvmfSubsystemWithResponse call
func ParseCreateNvmfSubsystemResponse(rsp *http.Response) (*CreateNvmfSubsystemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateNvmfSubsystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNvmfSubsystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateRackTopoResponse parses an HTTP response from a CreateRackTopoWithResponse call
func ParseCreateRackTopoResponse(rsp *http.Response) (*CreateRackTopoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateRackTopoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskRackTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateReportTemplateResponse parses an HTTP response from a CreateReportTemplateWithResponse call
func ParseCreateReportTemplateResponse(rsp *http.Response) (*CreateReportTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateReportTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskReportTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskUserRoleNext
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateSnapshotPlanResponse parses an HTTP response from a CreateSnapshotPlanWithResponse call
func ParseCreateSnapshotPlanResponse(rsp *http.Response) (*CreateSnapshotPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSnapshotPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnapshotPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateSnmpTransportResponse parses an HTTP response from a CreateSnmpTransportWithResponse call
func ParseCreateSnmpTransportResponse(rsp *http.Response) (*CreateSnmpTransportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSnmpTransportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnmpTransport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateSnmpTrapReceiverResponse parses an HTTP response from a CreateSnmpTrapReceiverWithResponse call
func ParseCreateSnmpTrapReceiverResponse(rsp *http.Response) (*CreateSnmpTrapReceiverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSnmpTrapReceiverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnmpTrapReceiver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVdsResponse parses an HTTP response from a CreateVdsWithResponse call
func ParseCreateVdsResponse(rsp *http.Response) (*CreateVdsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVdsWithAccessVlanResponse parses an HTTP response from a CreateVdsWithAccessVlanWithResponse call
func ParseCreateVdsWithAccessVlanResponse(rsp *http.Response) (*CreateVdsWithAccessVlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVdsWithAccessVlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVdsWithMigrateVlanResponse parses an HTTP response from a CreateVdsWithMigrateVlanWithResponse call
func ParseCreateVdsWithMigrateVlanResponse(rsp *http.Response) (*CreateVdsWithMigrateVlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVdsWithMigrateVlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateViewResponse parses an HTTP response from a CreateViewWithResponse call
func ParseCreateViewResponse(rsp *http.Response) (*CreateViewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVmResponse parses an HTTP response from a CreateVmWithResponse call
func ParseCreateVmResponse(rsp *http.Response) (*CreateVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVmFolderResponse parses an HTTP response from a CreateVmFolderWithResponse call
func ParseCreateVmFolderResponse(rsp *http.Response) (*CreateVmFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVmFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVmFromTemplateResponse parses an HTTP response from a CreateVmFromTemplateWithResponse call
func ParseCreateVmFromTemplateResponse(rsp *http.Response) (*CreateVmFromTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVmFromTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVmPlacementGroupResponse parses an HTTP response from a CreateVmPlacementGroupWithResponse call
func ParseCreateVmPlacementGroupResponse(rsp *http.Response) (*CreateVmPlacementGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVmPlacementGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmPlacementGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVmSnapshotResponse parses an HTTP response from a CreateVmSnapshotWithResponse call
func ParseCreateVmSnapshotResponse(rsp *http.Response) (*CreateVmSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVmSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVmVlanResponse parses an HTTP response from a CreateVmVlanWithResponse call
func ParseCreateVmVlanResponse(rsp *http.Response) (*CreateVmVlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVmVlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVmVolumeResponse parses an HTTP response from a CreateVmVolumeWithResponse call
func ParseCreateVmVolumeResponse(rsp *http.Response) (*CreateVmVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVmVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmVolume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteBrickTopoResponse parses an HTTP response from a DeleteBrickTopoWithResponse call
func ParseDeleteBrickTopoResponse(rsp *http.Response) (*DeleteBrickTopoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteBrickTopoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteBrickTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteClusterResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterResponse(rsp *http.Response) (*DeleteClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteClusterRecycleBinSettingResponse parses an HTTP response from a DeleteClusterRecycleBinSettingWithResponse call
func ParseDeleteClusterRecycleBinSettingResponse(rsp *http.Response) (*DeleteClusterRecycleBinSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterRecycleBinSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteClusterRecycleBin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteConsistencyGroupResponse parses an HTTP response from a DeleteConsistencyGroupWithResponse call
func ParseDeleteConsistencyGroupResponse(rsp *http.Response) (*DeleteConsistencyGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsistencyGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteConsistencyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteConsistencyGroupSnapshotResponse parses an HTTP response from a DeleteConsistencyGroupSnapshotWithResponse call
func ParseDeleteConsistencyGroupSnapshotResponse(rsp *http.Response) (*DeleteConsistencyGroupSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsistencyGroupSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteConsistencyGroupSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteDatacenterResponse parses an HTTP response from a DeleteDatacenterWithResponse call
func ParseDeleteDatacenterResponse(rsp *http.Response) (*DeleteDatacenterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatacenterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteDatacenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteElfImageResponse parses an HTTP response from a DeleteElfImageWithResponse call
func ParseDeleteElfImageResponse(rsp *http.Response) (*DeleteElfImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteElfImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteElfImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteEntityFilterResponse parses an HTTP response from a DeleteEntityFilterWithResponse call
func ParseDeleteEntityFilterResponse(rsp *http.Response) (*DeleteEntityFilterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEntityFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteEntityFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteGraphResponse parses an HTTP response from a DeleteGraphWithResponse call
func ParseDeleteGraphResponse(rsp *http.Response) (*DeleteGraphResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteIscsiLunResponse parses an HTTP response from a DeleteIscsiLunWithResponse call
func ParseDeleteIscsiLunResponse(rsp *http.Response) (*DeleteIscsiLunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiLunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteIscsiLun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteIscsiLunSnapshotResponse parses an HTTP response from a DeleteIscsiLunSnapshotWithResponse call
func ParseDeleteIscsiLunSnapshotResponse(rsp *http.Response) (*DeleteIscsiLunSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiLunSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteIscsiLunSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteIscsiTargetResponse parses an HTTP response from a DeleteIscsiTargetWithResponse call
func ParseDeleteIscsiTargetResponse(rsp *http.Response) (*DeleteIscsiTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteIscsiTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteLabelResponse parses an HTTP response from a DeleteLabelWithResponse call
func ParseDeleteLabelResponse(rsp *http.Response) (*DeleteLabelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteNamespaceGroupResponse parses an HTTP response from a DeleteNamespaceGroupWithResponse call
func ParseDeleteNamespaceGroupResponse(rsp *http.Response) (*DeleteNamespaceGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteNamespaceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteNamespaceGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteNfsExportResponse parses an HTTP response from a DeleteNfsExportWithResponse call
func ParseDeleteNfsExportResponse(rsp *http.Response) (*DeleteNfsExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteNfsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteNfsExport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteNvmfNamespaceResponse parses an HTTP response from a DeleteNvmfNamespaceWithResponse call
func ParseDeleteNvmfNamespaceResponse(rsp *http.Response) (*DeleteNvmfNamespaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteNvmfNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteNvmfNamespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteNvmfNamespaceSnapshotResponse parses an HTTP response from a DeleteNvmfNamespaceSnapshotWithResponse call
func ParseDeleteNvmfNamespaceSnapshotResponse(rsp *http.Response) (*DeleteNvmfNamespaceSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteNvmfNamespaceSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteNvmfNamespaceSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteNvmfSubsystemResponse parses an HTTP response from a DeleteNvmfSubsystemWithResponse call
func ParseDeleteNvmfSubsystemResponse(rsp *http.Response) (*DeleteNvmfSubsystemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteNvmfSubsystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteNvmfSubsystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationResponse parses an HTTP response from a DeleteOrganizationWithResponse call
func ParseDeleteOrganizationResponse(rsp *http.Response) (*DeleteOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteRackTopoResponse parses an HTTP response from a DeleteRackTopoWithResponse call
func ParseDeleteRackTopoResponse(rsp *http.Response) (*DeleteRackTopoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteRackTopoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteRackTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteReportTemplateResponse parses an HTTP response from a DeleteReportTemplateWithResponse call
func ParseDeleteReportTemplateResponse(rsp *http.Response) (*DeleteReportTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteReportTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteReportTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteSnapshotGroupResponse parses an HTTP response from a DeleteSnapshotGroupWithResponse call
func ParseDeleteSnapshotGroupResponse(rsp *http.Response) (*DeleteSnapshotGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnapshotGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteSnapshotGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteSnapshotPlanResponse parses an HTTP response from a DeleteSnapshotPlanWithResponse call
func ParseDeleteSnapshotPlanResponse(rsp *http.Response) (*DeleteSnapshotPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnapshotPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteSnapshotPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteSnmpTransportResponse parses an HTTP response from a DeleteSnmpTransportWithResponse call
func ParseDeleteSnmpTransportResponse(rsp *http.Response) (*DeleteSnmpTransportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnmpTransportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteSnmpTransport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteSnmpTrapReceiverResponse parses an HTTP response from a DeleteSnmpTrapReceiverWithResponse call
func ParseDeleteSnmpTrapReceiverResponse(rsp *http.Response) (*DeleteSnmpTrapReceiverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnmpTrapReceiverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteSnmpTrapReceiver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVdsResponse parses an HTTP response from a DeleteVdsWithResponse call
func ParseDeleteVdsResponse(rsp *http.Response) (*DeleteVdsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteVds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteViewResponse parses an HTTP response from a DeleteViewWithResponse call
func ParseDeleteViewResponse(rsp *http.Response) (*DeleteViewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVmResponse parses an HTTP response from a DeleteVmWithResponse call
func ParseDeleteVmResponse(rsp *http.Response) (*DeleteVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/DeleteVm)
				DeleteVm `yaml:",inline"`
			} `json:"data"`
			TaskId *string `json:"task_id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVmFolderResponse parses an HTTP response from a DeleteVmFolderWithResponse call
func ParseDeleteVmFolderResponse(rsp *http.Response) (*DeleteVmFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteVmFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVmPlacementGroupResponse parses an HTTP response from a DeleteVmPlacementGroupWithResponse call
func ParseDeleteVmPlacementGroupResponse(rsp *http.Response) (*DeleteVmPlacementGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmPlacementGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteVmPlacementGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVmSnapshotResponse parses an HTTP response from a DeleteVmSnapshotWithResponse call
func ParseDeleteVmSnapshotResponse(rsp *http.Response) (*DeleteVmSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteVmSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVmTemplateFromVmResponse parses an HTTP response from a DeleteVmTemplateFromVmWithResponse call
func ParseDeleteVmTemplateFromVmResponse(rsp *http.Response) (*DeleteVmTemplateFromVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmTemplateFromVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteVmTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVlanResponse parses an HTTP response from a DeleteVlanWithResponse call
func ParseDeleteVlanResponse(rsp *http.Response) (*DeleteVlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteVlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVmVolumeFromVmResponse parses an HTTP response from a DeleteVmVolumeFromVmWithResponse call
func ParseDeleteVmVolumeFromVmResponse(rsp *http.Response) (*DeleteVmVolumeFromVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmVolumeFromVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDeleteVmVolume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseExecuteSnapshotPlanResponse parses an HTTP response from a ExecuteSnapshotPlanWithResponse call
func ParseExecuteSnapshotPlanResponse(rsp *http.Response) (*ExecuteSnapshotPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExecuteSnapshotPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnapshotPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseForceRestartVmResponse parses an HTTP response from a ForceRestartVmWithResponse call
func ParseForceRestartVmResponse(rsp *http.Response) (*ForceRestartVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ForceRestartVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGenerateFromReportTemplateResponse parses an HTTP response from a GenerateFromReportTemplateWithResponse call
func ParseGenerateFromReportTemplateResponse(rsp *http.Response) (*GenerateFromReportTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GenerateFromReportTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskReportTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAlertNotifiersResponse parses an HTTP response from a GetAlertNotifiersWithResponse call
func ParseGetAlertNotifiersResponse(rsp *http.Response) (*GetAlertNotifiersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertNotifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAlertNotifiersConnectionResponse parses an HTTP response from a GetAlertNotifiersConnectionWithResponse call
func ParseGetAlertNotifiersConnectionResponse(rsp *http.Response) (*GetAlertNotifiersConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertNotifiersConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertNotifierConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAlertRulesResponse parses an HTTP response from a GetAlertRulesWithResponse call
func ParseGetAlertRulesResponse(rsp *http.Response) (*GetAlertRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlertRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAlertRulesConnectionResponse parses an HTTP response from a GetAlertRulesConnectionWithResponse call
func ParseGetAlertRulesConnectionResponse(rsp *http.Response) (*GetAlertRulesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertRulesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertRuleConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAlertsResponse parses an HTTP response from a GetAlertsWithResponse call
func ParseGetAlertsResponse(rsp *http.Response) (*GetAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Alert
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAlertsConnectionResponse parses an HTTP response from a GetAlertsConnectionWithResponse call
func ParseGetAlertsConnectionResponse(rsp *http.Response) (*GetAlertsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetApplicationsResponse parses an HTTP response from a GetApplicationsWithResponse call
func ParseGetApplicationsResponse(rsp *http.Response) (*GetApplicationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetApplicationsConnectionResponse parses an HTTP response from a GetApplicationsConnectionWithResponse call
func ParseGetApplicationsConnectionResponse(rsp *http.Response) (*GetApplicationsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetBrickTopoesResponse parses an HTTP response from a GetBrickTopoesWithResponse call
func ParseGetBrickTopoesResponse(rsp *http.Response) (*GetBrickTopoesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBrickTopoesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BrickTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetBrickTopoesConnectionResponse parses an HTTP response from a GetBrickTopoesConnectionWithResponse call
func ParseGetBrickTopoesConnectionResponse(rsp *http.Response) (*GetBrickTopoesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBrickTopoesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BrickTopoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClusterImagesResponse parses an HTTP response from a GetClusterImagesWithResponse call
func ParseGetClusterImagesResponse(rsp *http.Response) (*GetClusterImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClusterImagesConnectionResponse parses an HTTP response from a GetClusterImagesConnectionWithResponse call
func ParseGetClusterImagesConnectionResponse(rsp *http.Response) (*GetClusterImagesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterImagesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterImageConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClusterSettingsesResponse parses an HTTP response from a GetClusterSettingsesWithResponse call
func ParseGetClusterSettingsesResponse(rsp *http.Response) (*GetClusterSettingsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterSettingsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClusterSettingsesConnectionResponse parses an HTTP response from a GetClusterSettingsesConnectionWithResponse call
func ParseGetClusterSettingsesConnectionResponse(rsp *http.Response) (*GetClusterSettingsesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterSettingsesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterSettingsConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClusterTopoesResponse parses an HTTP response from a GetClusterTopoesWithResponse call
func ParseGetClusterTopoesResponse(rsp *http.Response) (*GetClusterTopoesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterTopoesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClusterTopoesConnectionResponse parses an HTTP response from a GetClusterTopoesConnectionWithResponse call
func ParseGetClusterTopoesConnectionResponse(rsp *http.Response) (*GetClusterTopoesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterTopoesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterTopoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClusterUpgradeHistoriesResponse parses an HTTP response from a GetClusterUpgradeHistoriesWithResponse call
func ParseGetClusterUpgradeHistoriesResponse(rsp *http.Response) (*GetClusterUpgradeHistoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterUpgradeHistoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterUpgradeHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClusterUpgradeHistoriesConnectionResponse parses an HTTP response from a GetClusterUpgradeHistoriesConnectionWithResponse call
func ParseGetClusterUpgradeHistoriesConnectionResponse(rsp *http.Response) (*GetClusterUpgradeHistoriesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterUpgradeHistoriesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterUpgradeHistoryConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClustersResponse parses an HTTP response from a GetClustersWithResponse call
func ParseGetClustersResponse(rsp *http.Response) (*GetClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetClustersConnectionResponse parses an HTTP response from a GetClustersConnectionWithResponse call
func ParseGetClustersConnectionResponse(rsp *http.Response) (*GetClustersConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClustersConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConsistencyGroupSnapshotsResponse parses an HTTP response from a GetConsistencyGroupSnapshotsWithResponse call
func ParseGetConsistencyGroupSnapshotsResponse(rsp *http.Response) (*GetConsistencyGroupSnapshotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConsistencyGroupSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ConsistencyGroupSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConsistencyGroupSnapshotsConnectionResponse parses an HTTP response from a GetConsistencyGroupSnapshotsConnectionWithResponse call
func ParseGetConsistencyGroupSnapshotsConnectionResponse(rsp *http.Response) (*GetConsistencyGroupSnapshotsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConsistencyGroupSnapshotsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConsistencyGroupSnapshotConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConsistencyGroupsResponse parses an HTTP response from a GetConsistencyGroupsWithResponse call
func ParseGetConsistencyGroupsResponse(rsp *http.Response) (*GetConsistencyGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConsistencyGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ConsistencyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConsistencyGroupsConnectionResponse parses an HTTP response from a GetConsistencyGroupsConnectionWithResponse call
func ParseGetConsistencyGroupsConnectionResponse(rsp *http.Response) (*GetConsistencyGroupsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConsistencyGroupsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConsistencyGroupConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDatacentersResponse parses an HTTP response from a GetDatacentersWithResponse call
func ParseGetDatacentersResponse(rsp *http.Response) (*GetDatacentersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDatacentersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Datacenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDatacentersConnectionResponse parses an HTTP response from a GetDatacentersConnectionWithResponse call
func ParseGetDatacentersConnectionResponse(rsp *http.Response) (*GetDatacentersConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDatacentersConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatacenterConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDeploysResponse parses an HTTP response from a GetDeploysWithResponse call
func ParseGetDeploysResponse(rsp *http.Response) (*GetDeploysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDeploysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Deploy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDeploysConnectionResponse parses an HTTP response from a GetDeploysConnectionWithResponse call
func ParseGetDeploysConnectionResponse(rsp *http.Response) (*GetDeploysConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDeploysConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeployConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDiscoverHostsResponse parses an HTTP response from a GetDiscoverHostsWithResponse call
func ParseGetDiscoverHostsResponse(rsp *http.Response) (*GetDiscoverHostsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDiscoverHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DiscoveredHost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDisksResponse parses an HTTP response from a GetDisksWithResponse call
func ParseGetDisksResponse(rsp *http.Response) (*GetDisksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDisksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Disk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDisksConnectionResponse parses an HTTP response from a GetDisksConnectionWithResponse call
func ParseGetDisksConnectionResponse(rsp *http.Response) (*GetDisksConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDisksConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DiskConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetElfDataStoresResponse parses an HTTP response from a GetElfDataStoresWithResponse call
func ParseGetElfDataStoresResponse(rsp *http.Response) (*GetElfDataStoresResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetElfDataStoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ElfDataStore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetElfDataStoresConnectionResponse parses an HTTP response from a GetElfDataStoresConnectionWithResponse call
func ParseGetElfDataStoresConnectionResponse(rsp *http.Response) (*GetElfDataStoresConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetElfDataStoresConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ElfDataStoreConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetElfImagesResponse parses an HTTP response from a GetElfImagesWithResponse call
func ParseGetElfImagesResponse(rsp *http.Response) (*GetElfImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetElfImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ElfImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetElfImagesConnectionResponse parses an HTTP response from a GetElfImagesConnectionWithResponse call
func ParseGetElfImagesConnectionResponse(rsp *http.Response) (*GetElfImagesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetElfImagesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ElfImageConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetElfStoragePoliciesResponse parses an HTTP response from a GetElfStoragePoliciesWithResponse call
func ParseGetElfStoragePoliciesResponse(rsp *http.Response) (*GetElfStoragePoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetElfStoragePoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ElfStoragePolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetElfStoragePoliciesConnectionResponse parses an HTTP response from a GetElfStoragePoliciesConnectionWithResponse call
func ParseGetElfStoragePoliciesConnectionResponse(rsp *http.Response) (*GetElfStoragePoliciesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetElfStoragePoliciesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ElfStoragePolicyConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetEntityFiltersResponse parses an HTTP response from a GetEntityFiltersWithResponse call
func ParseGetEntityFiltersResponse(rsp *http.Response) (*GetEntityFiltersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEntityFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntityFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetEntityFiltersConnectionResponse parses an HTTP response from a GetEntityFiltersConnectionWithResponse call
func ParseGetEntityFiltersConnectionResponse(rsp *http.Response) (*GetEntityFiltersConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEntityFiltersConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityFilterConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetGlobalAlertRulesResponse parses an HTTP response from a GetGlobalAlertRulesWithResponse call
func ParseGetGlobalAlertRulesResponse(rsp *http.Response) (*GetGlobalAlertRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalAlertRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GlobalAlertRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetGlobalAlertRulesConnectionResponse parses an HTTP response from a GetGlobalAlertRulesConnectionWithResponse call
func ParseGetGlobalAlertRulesConnectionResponse(rsp *http.Response) (*GetGlobalAlertRulesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalAlertRulesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalAlertRuleConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetGlobalSettingsesResponse parses an HTTP response from a GetGlobalSettingsesWithResponse call
func ParseGetGlobalSettingsesResponse(rsp *http.Response) (*GetGlobalSettingsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalSettingsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GlobalSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetGlobalSettingsesConnectionResponse parses an HTTP response from a GetGlobalSettingsesConnectionWithResponse call
func ParseGetGlobalSettingsesConnectionResponse(rsp *http.Response) (*GetGlobalSettingsesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalSettingsesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalSettingsConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetGraphsResponse parses an HTTP response from a GetGraphsWithResponse call
func ParseGetGraphsResponse(rsp *http.Response) (*GetGraphsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGraphsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Graph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetGraphsConnectionResponse parses an HTTP response from a GetGraphsConnectionWithResponse call
func ParseGetGraphsConnectionResponse(rsp *http.Response) (*GetGraphsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGraphsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GraphConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetHostsResponse parses an HTTP response from a GetHostsWithResponse call
func ParseGetHostsResponse(rsp *http.Response) (*GetHostsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetHostsConnectionResponse parses an HTTP response from a GetHostsConnectionWithResponse call
func ParseGetHostsConnectionResponse(rsp *http.Response) (*GetHostsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetHostsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetImagesConnectorResponse parses an HTTP response from a GetImagesConnectorWithResponse call
func ParseGetImagesConnectorResponse(rsp *http.Response) (*GetImagesConnectorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetImagesConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageConnector
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIpmisResponse parses an HTTP response from a GetIpmisWithResponse call
func ParseGetIpmisResponse(rsp *http.Response) (*GetIpmisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIpmisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Ipmi
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIscsiConnectionsResponse parses an HTTP response from a GetIscsiConnectionsWithResponse call
func ParseGetIscsiConnectionsResponse(rsp *http.Response) (*GetIscsiConnectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IscsiConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIscsiConnectionsConnectionResponse parses an HTTP response from a GetIscsiConnectionsConnectionWithResponse call
func ParseGetIscsiConnectionsConnectionResponse(rsp *http.Response) (*GetIscsiConnectionsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiConnectionsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IscsiConnectionConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIscsiLunSnapshotsResponse parses an HTTP response from a GetIscsiLunSnapshotsWithResponse call
func ParseGetIscsiLunSnapshotsResponse(rsp *http.Response) (*GetIscsiLunSnapshotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiLunSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IscsiLunSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIscsiLunSnapshotsConnectionResponse parses an HTTP response from a GetIscsiLunSnapshotsConnectionWithResponse call
func ParseGetIscsiLunSnapshotsConnectionResponse(rsp *http.Response) (*GetIscsiLunSnapshotsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiLunSnapshotsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IscsiLunSnapshotConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIscsiLunsResponse parses an HTTP response from a GetIscsiLunsWithResponse call
func ParseGetIscsiLunsResponse(rsp *http.Response) (*GetIscsiLunsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiLunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IscsiLun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIscsiLunsConnectionResponse parses an HTTP response from a GetIscsiLunsConnectionWithResponse call
func ParseGetIscsiLunsConnectionResponse(rsp *http.Response) (*GetIscsiLunsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiLunsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IscsiLunConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIscsiTargetsResponse parses an HTTP response from a GetIscsiTargetsWithResponse call
func ParseGetIscsiTargetsResponse(rsp *http.Response) (*GetIscsiTargetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IscsiTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetIscsiTargetsConnectionResponse parses an HTTP response from a GetIscsiTargetsConnectionWithResponse call
func ParseGetIscsiTargetsConnectionResponse(rsp *http.Response) (*GetIscsiTargetsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IscsiTargetConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLabelsResponse parses an HTTP response from a GetLabelsWithResponse call
func ParseGetLabelsResponse(rsp *http.Response) (*GetLabelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Label
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLabelsConnectionResponse parses an HTTP response from a GetLabelsConnectionWithResponse call
func ParseGetLabelsConnectionResponse(rsp *http.Response) (*GetLabelsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLabelsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LabelConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLicensesResponse parses an HTTP response from a GetLicensesWithResponse call
func ParseGetLicensesResponse(rsp *http.Response) (*GetLicensesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []License
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLicensesConnectionResponse parses an HTTP response from a GetLicensesConnectionWithResponse call
func ParseGetLicensesConnectionResponse(rsp *http.Response) (*GetLicensesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLicensesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LicenseConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLogCollectionsResponse parses an HTTP response from a GetLogCollectionsWithResponse call
func ParseGetLogCollectionsResponse(rsp *http.Response) (*GetLogCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLogCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LogCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLogCollectionsConnectionResponse parses an HTTP response from a GetLogCollectionsConnectionWithResponse call
func ParseGetLogCollectionsConnectionResponse(rsp *http.Response) (*GetLogCollectionsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLogCollectionsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogCollectionConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMigrateTransmittersResponse parses an HTTP response from a GetMigrateTransmittersWithResponse call
func ParseGetMigrateTransmittersResponse(rsp *http.Response) (*GetMigrateTransmittersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMigrateTransmittersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MigrateTransmitter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMigrateTransmittersConnectionResponse parses an HTTP response from a GetMigrateTransmittersConnectionWithResponse call
func ParseGetMigrateTransmittersConnectionResponse(rsp *http.Response) (*GetMigrateTransmittersConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMigrateTransmittersConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MigrateTransmitterConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNamespaceGroupsResponse parses an HTTP response from a GetNamespaceGroupsWithResponse call
func ParseGetNamespaceGroupsResponse(rsp *http.Response) (*GetNamespaceGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNamespaceGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NamespaceGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNamespaceGroupsConnectionResponse parses an HTTP response from a GetNamespaceGroupsConnectionWithResponse call
func ParseGetNamespaceGroupsConnectionResponse(rsp *http.Response) (*GetNamespaceGroupsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNamespaceGroupsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamespaceGroupConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNfsExportsResponse parses an HTTP response from a GetNfsExportsWithResponse call
func ParseGetNfsExportsResponse(rsp *http.Response) (*GetNfsExportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNfsExportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NfsExport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNfsExportsConnectionResponse parses an HTTP response from a GetNfsExportsConnectionWithResponse call
func ParseGetNfsExportsConnectionResponse(rsp *http.Response) (*GetNfsExportsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNfsExportsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NfsExportConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNfsInodesResponse parses an HTTP response from a GetNfsInodesWithResponse call
func ParseGetNfsInodesResponse(rsp *http.Response) (*GetNfsInodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNfsInodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NfsInode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNfsInodesConnectionResponse parses an HTTP response from a GetNfsInodesConnectionWithResponse call
func ParseGetNfsInodesConnectionResponse(rsp *http.Response) (*GetNfsInodesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNfsInodesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NfsInodeConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNicsResponse parses an HTTP response from a GetNicsWithResponse call
func ParseGetNicsResponse(rsp *http.Response) (*GetNicsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Nic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNicsConnectionResponse parses an HTTP response from a GetNicsConnectionWithResponse call
func ParseGetNicsConnectionResponse(rsp *http.Response) (*GetNicsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNicsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NicConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNodeTopoesResponse parses an HTTP response from a GetNodeTopoesWithResponse call
func ParseGetNodeTopoesResponse(rsp *http.Response) (*GetNodeTopoesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNodeTopoesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NodeTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNodeTopoesConnectionResponse parses an HTTP response from a GetNodeTopoesConnectionWithResponse call
func ParseGetNodeTopoesConnectionResponse(rsp *http.Response) (*GetNodeTopoesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNodeTopoesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeTopoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNvmfNamespaceSnapshotsResponse parses an HTTP response from a GetNvmfNamespaceSnapshotsWithResponse call
func ParseGetNvmfNamespaceSnapshotsResponse(rsp *http.Response) (*GetNvmfNamespaceSnapshotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNvmfNamespaceSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NvmfNamespaceSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNvmfNamespaceSnapshotsConnectionResponse parses an HTTP response from a GetNvmfNamespaceSnapshotsConnectionWithResponse call
func ParseGetNvmfNamespaceSnapshotsConnectionResponse(rsp *http.Response) (*GetNvmfNamespaceSnapshotsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNvmfNamespaceSnapshotsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NvmfNamespaceSnapshotConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNvmfNamespacesResponse parses an HTTP response from a GetNvmfNamespacesWithResponse call
func ParseGetNvmfNamespacesResponse(rsp *http.Response) (*GetNvmfNamespacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNvmfNamespacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NvmfNamespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNvmfNamespacesConnectionResponse parses an HTTP response from a GetNvmfNamespacesConnectionWithResponse call
func ParseGetNvmfNamespacesConnectionResponse(rsp *http.Response) (*GetNvmfNamespacesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNvmfNamespacesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NvmfNamespaceConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNvmfSubsystemsResponse parses an HTTP response from a GetNvmfSubsystemsWithResponse call
func ParseGetNvmfSubsystemsResponse(rsp *http.Response) (*GetNvmfSubsystemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNvmfSubsystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NvmfSubsystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNvmfSubsystemsConnectionResponse parses an HTTP response from a GetNvmfSubsystemsConnectionWithResponse call
func ParseGetNvmfSubsystemsConnectionResponse(rsp *http.Response) (*GetNvmfSubsystemsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNvmfSubsystemsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NvmfSubsystemConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsConnectionResponse parses an HTTP response from a GetOrganizationsConnectionWithResponse call
func ParseGetOrganizationsConnectionResponse(rsp *http.Response) (*GetOrganizationsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPmemDimmsResponse parses an HTTP response from a GetPmemDimmsWithResponse call
func ParseGetPmemDimmsResponse(rsp *http.Response) (*GetPmemDimmsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPmemDimmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PmemDimm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPmemDimmsConnectionResponse parses an HTTP response from a GetPmemDimmsConnectionWithResponse call
func ParseGetPmemDimmsConnectionResponse(rsp *http.Response) (*GetPmemDimmsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPmemDimmsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PmemDimmConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRackTopoesResponse parses an HTTP response from a GetRackTopoesWithResponse call
func ParseGetRackTopoesResponse(rsp *http.Response) (*GetRackTopoesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRackTopoesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RackTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRackTopoesConnectionResponse parses an HTTP response from a GetRackTopoesConnectionWithResponse call
func ParseGetRackTopoesConnectionResponse(rsp *http.Response) (*GetRackTopoesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRackTopoesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RackTopoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetReportTasksResponse parses an HTTP response from a GetReportTasksWithResponse call
func ParseGetReportTasksResponse(rsp *http.Response) (*GetReportTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReportTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReportTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetReportTasksConnectionResponse parses an HTTP response from a GetReportTasksConnectionWithResponse call
func ParseGetReportTasksConnectionResponse(rsp *http.Response) (*GetReportTasksConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReportTasksConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportTaskConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetReportTemplatesResponse parses an HTTP response from a GetReportTemplatesWithResponse call
func ParseGetReportTemplatesResponse(rsp *http.Response) (*GetReportTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReportTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReportTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetReportTemplatesConnectionResponse parses an HTTP response from a GetReportTemplatesConnectionWithResponse call
func ParseGetReportTemplatesConnectionResponse(rsp *http.Response) (*GetReportTemplatesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReportTemplatesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportTemplateConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnapshotGroupsResponse parses an HTTP response from a GetSnapshotGroupsWithResponse call
func ParseGetSnapshotGroupsResponse(rsp *http.Response) (*GetSnapshotGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SnapshotGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnapshotGroupsConnectionResponse parses an HTTP response from a GetSnapshotGroupsConnectionWithResponse call
func ParseGetSnapshotGroupsConnectionResponse(rsp *http.Response) (*GetSnapshotGroupsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotGroupsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotGroupConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnapshotPlanTasksResponse parses an HTTP response from a GetSnapshotPlanTasksWithResponse call
func ParseGetSnapshotPlanTasksResponse(rsp *http.Response) (*GetSnapshotPlanTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotPlanTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SnapshotPlanTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnapshotPlanTasksConnectionResponse parses an HTTP response from a GetSnapshotPlanTasksConnectionWithResponse call
func ParseGetSnapshotPlanTasksConnectionResponse(rsp *http.Response) (*GetSnapshotPlanTasksConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotPlanTasksConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotPlanTaskConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnapshotPlansResponse parses an HTTP response from a GetSnapshotPlansWithResponse call
func ParseGetSnapshotPlansResponse(rsp *http.Response) (*GetSnapshotPlansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SnapshotPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnapshotPlansConnectionResponse parses an HTTP response from a GetSnapshotPlansConnectionWithResponse call
func ParseGetSnapshotPlansConnectionResponse(rsp *http.Response) (*GetSnapshotPlansConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotPlansConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotPlanConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnmpTransportsResponse parses an HTTP response from a GetSnmpTransportsWithResponse call
func ParseGetSnmpTransportsResponse(rsp *http.Response) (*GetSnmpTransportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnmpTransportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SnmpTransport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnmpTransportsConnectionResponse parses an HTTP response from a GetSnmpTransportsConnectionWithResponse call
func ParseGetSnmpTransportsConnectionResponse(rsp *http.Response) (*GetSnmpTransportsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnmpTransportsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnmpTransportConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnmpTrapReceiversResponse parses an HTTP response from a GetSnmpTrapReceiversWithResponse call
func ParseGetSnmpTrapReceiversResponse(rsp *http.Response) (*GetSnmpTrapReceiversResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnmpTrapReceiversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SnmpTrapReceiver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnmpTrapReceiversConnectionResponse parses an HTTP response from a GetSnmpTrapReceiversConnectionWithResponse call
func ParseGetSnmpTrapReceiversConnectionResponse(rsp *http.Response) (*GetSnmpTrapReceiversConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnmpTrapReceiversConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnmpTrapReceiverConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetStoragePoliciesConnectorResponse parses an HTTP response from a GetStoragePoliciesConnectorWithResponse call
func ParseGetStoragePoliciesConnectorResponse(rsp *http.Response) (*GetStoragePoliciesConnectorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStoragePoliciesConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StoragePolicyConector
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSvtImagesResponse parses an HTTP response from a GetSvtImagesWithResponse call
func ParseGetSvtImagesResponse(rsp *http.Response) (*GetSvtImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSvtImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SvtImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSvtImagesConnectionResponse parses an HTTP response from a GetSvtImagesConnectionWithResponse call
func ParseGetSvtImagesConnectionResponse(rsp *http.Response) (*GetSvtImagesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSvtImagesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SvtImageConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSystemAuditLogsResponse parses an HTTP response from a GetSystemAuditLogsWithResponse call
func ParseGetSystemAuditLogsResponse(rsp *http.Response) (*GetSystemAuditLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemAuditLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SystemAuditLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSystemAuditLogsConnectionResponse parses an HTTP response from a GetSystemAuditLogsConnectionWithResponse call
func ParseGetSystemAuditLogsConnectionResponse(rsp *http.Response) (*GetSystemAuditLogsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemAuditLogsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemAuditLogConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTasksResponse parses an HTTP response from a GetTasksWithResponse call
func ParseGetTasksResponse(rsp *http.Response) (*GetTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTasksConnectionResponse parses an HTTP response from a GetTasksConnectionWithResponse call
func ParseGetTasksConnectionResponse(rsp *http.Response) (*GetTasksConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTasksConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUploadTasksResponse parses an HTTP response from a GetUploadTasksWithResponse call
func ParseGetUploadTasksResponse(rsp *http.Response) (*GetUploadTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUploadTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UploadTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUploadTasksConnectionResponse parses an HTTP response from a GetUploadTasksConnectionWithResponse call
func ParseGetUploadTasksConnectionResponse(rsp *http.Response) (*GetUploadTasksConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUploadTasksConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadTaskConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUsbDevicesResponse parses an HTTP response from a GetUsbDevicesWithResponse call
func ParseGetUsbDevicesResponse(rsp *http.Response) (*GetUsbDevicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsbDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UsbDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUsbDevicesConnectionResponse parses an HTTP response from a GetUsbDevicesConnectionWithResponse call
func ParseGetUsbDevicesConnectionResponse(rsp *http.Response) (*GetUsbDevicesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsbDevicesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsbDeviceConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserAuditLogsResponse parses an HTTP response from a GetUserAuditLogsWithResponse call
func ParseGetUserAuditLogsResponse(rsp *http.Response) (*GetUserAuditLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserAuditLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserAuditLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserAuditLogsConnectionResponse parses an HTTP response from a GetUserAuditLogsConnectionWithResponse call
func ParseGetUserAuditLogsConnectionResponse(rsp *http.Response) (*GetUserAuditLogsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserAuditLogsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAuditLogConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserRoleNextsResponse parses an HTTP response from a GetUserRoleNextsWithResponse call
func ParseGetUserRoleNextsResponse(rsp *http.Response) (*GetUserRoleNextsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleNextsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleNext
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserRoleNextsConnectionResponse parses an HTTP response from a GetUserRoleNextsConnectionWithResponse call
func ParseGetUserRoleNextsConnectionResponse(rsp *http.Response) (*GetUserRoleNextsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleNextsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleNextConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUsersConnectionResponse parses an HTTP response from a GetUsersConnectionWithResponse call
func ParseGetUsersConnectionResponse(rsp *http.Response) (*GetUsersConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsersConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVcenterAccountsResponse parses an HTTP response from a GetVcenterAccountsWithResponse call
func ParseGetVcenterAccountsResponse(rsp *http.Response) (*GetVcenterAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVcenterAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VcenterAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVcenterAccountsConnectionResponse parses an HTTP response from a GetVcenterAccountsConnectionWithResponse call
func ParseGetVcenterAccountsConnectionResponse(rsp *http.Response) (*GetVcenterAccountsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVcenterAccountsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VcenterAccountConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVdsesResponse parses an HTTP response from a GetVdsesWithResponse call
func ParseGetVdsesResponse(rsp *http.Response) (*GetVdsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVdsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Vds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVdsesConnectionResponse parses an HTTP response from a GetVdsesConnectionWithResponse call
func ParseGetVdsesConnectionResponse(rsp *http.Response) (*GetVdsesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVdsesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VdsConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetViewsResponse parses an HTTP response from a GetViewsWithResponse call
func ParseGetViewsResponse(rsp *http.Response) (*GetViewsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetViewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetViewsConnectionResponse parses an HTTP response from a GetViewsConnectionWithResponse call
func ParseGetViewsConnectionResponse(rsp *http.Response) (*GetViewsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetViewsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ViewConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVlansResponse parses an HTTP response from a GetVlansWithResponse call
func ParseGetVlansResponse(rsp *http.Response) (*GetVlansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Vlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVlansConnectionResponse parses an HTTP response from a GetVlansConnectionWithResponse call
func ParseGetVlansConnectionResponse(rsp *http.Response) (*GetVlansConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVlansConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VlanConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmDisksResponse parses an HTTP response from a GetVmDisksWithResponse call
func ParseGetVmDisksResponse(rsp *http.Response) (*GetVmDisksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmDisksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VmDisk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmDisksConnectionResponse parses an HTTP response from a GetVmDisksConnectionWithResponse call
func ParseGetVmDisksConnectionResponse(rsp *http.Response) (*GetVmDisksConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmDisksConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmDiskConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmEntityFilterResultsResponse parses an HTTP response from a GetVmEntityFilterResultsWithResponse call
func ParseGetVmEntityFilterResultsResponse(rsp *http.Response) (*GetVmEntityFilterResultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmEntityFilterResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VmEntityFilterResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmEntityFilterResultsConnectionResponse parses an HTTP response from a GetVmEntityFilterResultsConnectionWithResponse call
func ParseGetVmEntityFilterResultsConnectionResponse(rsp *http.Response) (*GetVmEntityFilterResultsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmEntityFilterResultsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmEntityFilterResultConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmFoldersResponse parses an HTTP response from a GetVmFoldersWithResponse call
func ParseGetVmFoldersResponse(rsp *http.Response) (*GetVmFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VmFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmFoldersConnectionResponse parses an HTTP response from a GetVmFoldersConnectionWithResponse call
func ParseGetVmFoldersConnectionResponse(rsp *http.Response) (*GetVmFoldersConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmFoldersConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmFolderConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmNicsResponse parses an HTTP response from a GetVmNicsWithResponse call
func ParseGetVmNicsResponse(rsp *http.Response) (*GetVmNicsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmNicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VmNic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmNicsConnectionResponse parses an HTTP response from a GetVmNicsConnectionWithResponse call
func ParseGetVmNicsConnectionResponse(rsp *http.Response) (*GetVmNicsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmNicsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmNicConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmPlacementGroupsResponse parses an HTTP response from a GetVmPlacementGroupsWithResponse call
func ParseGetVmPlacementGroupsResponse(rsp *http.Response) (*GetVmPlacementGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmPlacementGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VmPlacementGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmPlacementGroupsConnectionResponse parses an HTTP response from a GetVmPlacementGroupsConnectionWithResponse call
func ParseGetVmPlacementGroupsConnectionResponse(rsp *http.Response) (*GetVmPlacementGroupsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmPlacementGroupsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmPlacementGroupConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmSnapshotsResponse parses an HTTP response from a GetVmSnapshotsWithResponse call
func ParseGetVmSnapshotsResponse(rsp *http.Response) (*GetVmSnapshotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VmSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmSnapshotsConnectionResponse parses an HTTP response from a GetVmSnapshotsConnectionWithResponse call
func ParseGetVmSnapshotsConnectionResponse(rsp *http.Response) (*GetVmSnapshotsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmSnapshotsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmSnapshotConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmTemplatesResponse parses an HTTP response from a GetVmTemplatesWithResponse call
func ParseGetVmTemplatesResponse(rsp *http.Response) (*GetVmTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VmTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmTemplatesConnectionResponse parses an HTTP response from a GetVmTemplatesConnectionWithResponse call
func ParseGetVmTemplatesConnectionResponse(rsp *http.Response) (*GetVmTemplatesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmTemplatesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmTemplateConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmVolumesResponse parses an HTTP response from a GetVmVolumesWithResponse call
func ParseGetVmVolumesResponse(rsp *http.Response) (*GetVmVolumesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmVolumesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VmVolume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmVolumesConnectionResponse parses an HTTP response from a GetVmVolumesConnectionWithResponse call
func ParseGetVmVolumesConnectionResponse(rsp *http.Response) (*GetVmVolumesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmVolumesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmVolumeConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmsResponse parses an HTTP response from a GetVmsWithResponse call
func ParseGetVmsResponse(rsp *http.Response) (*GetVmsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Vm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVmsConnectionResponse parses an HTTP response from a GetVmsConnectionWithResponse call
func ParseGetVmsConnectionResponse(rsp *http.Response) (*GetVmsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVsphereEsxiAccountsResponse parses an HTTP response from a GetVsphereEsxiAccountsWithResponse call
func ParseGetVsphereEsxiAccountsResponse(rsp *http.Response) (*GetVsphereEsxiAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVsphereEsxiAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VsphereEsxiAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVsphereEsxiAccountsConnectionResponse parses an HTTP response from a GetVsphereEsxiAccountsConnectionWithResponse call
func ParseGetVsphereEsxiAccountsConnectionResponse(rsp *http.Response) (*GetVsphereEsxiAccountsConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVsphereEsxiAccountsConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VsphereEsxiAccountConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetWitnessesResponse parses an HTTP response from a GetWitnessesWithResponse call
func ParseGetWitnessesResponse(rsp *http.Response) (*GetWitnessesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWitnessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Witness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetWitnessesConnectionResponse parses an HTTP response from a GetWitnessesConnectionWithResponse call
func ParseGetWitnessesConnectionResponse(rsp *http.Response) (*GetWitnessesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWitnessesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WitnessConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetZoneTopoesResponse parses an HTTP response from a GetZoneTopoesWithResponse call
func ParseGetZoneTopoesResponse(rsp *http.Response) (*GetZoneTopoesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetZoneTopoesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ZoneTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetZoneTopoesConnectionResponse parses an HTTP response from a GetZoneTopoesConnectionWithResponse call
func ParseGetZoneTopoesConnectionResponse(rsp *http.Response) (*GetZoneTopoesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetZoneTopoesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneTopoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetZonesResponse parses an HTTP response from a GetZonesWithResponse call
func ParseGetZonesResponse(rsp *http.Response) (*GetZonesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetZonesConnectionResponse parses an HTTP response from a GetZonesConnectionWithResponse call
func ParseGetZonesConnectionResponse(rsp *http.Response) (*GetZonesConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetZonesConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseInstallVmtoolsResponse parses an HTTP response from a InstallVmtoolsWithResponse call
func ParseInstallVmtoolsResponse(rsp *http.Response) (*InstallVmtoolsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InstallVmtoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseKeepSnapshotGroupResponse parses an HTTP response from a KeepSnapshotGroupWithResponse call
func ParseKeepSnapshotGroupResponse(rsp *http.Response) (*KeepSnapshotGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &KeepSnapshotGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnapshotGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WithTaskTokenString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMigRateVmResponse parses an HTTP response from a MigRateVmWithResponse call
func ParseMigRateVmResponse(rsp *http.Response) (*MigRateVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MigRateVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMountDiskResponse parses an HTTP response from a MountDiskWithResponse call
func ParseMountDiskResponse(rsp *http.Response) (*MountDiskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MountDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDisk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMountUsbDeviceResponse parses an HTTP response from a MountUsbDeviceWithResponse call
func ParseMountUsbDeviceResponse(rsp *http.Response) (*MountUsbDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MountUsbDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskUsbDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMoveBrickTopoResponse parses an HTTP response from a MoveBrickTopoWithResponse call
func ParseMoveBrickTopoResponse(rsp *http.Response) (*MoveBrickTopoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MoveBrickTopoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskBrickTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateNodeTopoResponse parses an HTTP response from a UpdateNodeTopoWithResponse call
func ParseUpdateNodeTopoResponse(rsp *http.Response) (*UpdateNodeTopoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNodeTopoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNodeTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMoveVmToRecycleBinResponse parses an HTTP response from a MoveVmToRecycleBinWithResponse call
func ParseMoveVmToRecycleBinResponse(rsp *http.Response) (*MoveVmToRecycleBinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MoveVmToRecycleBinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/DeleteVm)
				DeleteVm `yaml:",inline"`
			} `json:"data"`
			TaskId *string `json:"task_id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseForceShutDownVmResponse parses an HTTP response from a ForceShutDownVmWithResponse call
func ParseForceShutDownVmResponse(rsp *http.Response) (*ForceShutDownVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ForceShutDownVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRebuildVmResponse parses an HTTP response from a RebuildVmWithResponse call
func ParseRebuildVmResponse(rsp *http.Response) (*RebuildVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RebuildVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRecoverVmFromRecycleBinResponse parses an HTTP response from a RecoverVmFromRecycleBinWithResponse call
func ParseRecoverVmFromRecycleBinResponse(rsp *http.Response) (*RecoverVmFromRecycleBinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RecoverVmFromRecycleBinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/DeleteVm)
				DeleteVm `yaml:",inline"`
			} `json:"data"`
			TaskId *string `json:"task_id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRemoveLabelsFromResourcesResponse parses an HTTP response from a RemoveLabelsFromResourcesWithResponse call
func ParseRemoveLabelsFromResourcesResponse(rsp *http.Response) (*RemoveLabelsFromResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveLabelsFromResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRemoveVmCdRomResponse parses an HTTP response from a RemoveVmCdRomWithResponse call
func ParseRemoveVmCdRomResponse(rsp *http.Response) (*RemoveVmCdRomResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveVmCdRomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRemoveVmDiskResponse parses an HTTP response from a RemoveVmDiskWithResponse call
func ParseRemoveVmDiskResponse(rsp *http.Response) (*RemoveVmDiskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveVmDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRemoveVmToFolderResponse parses an HTTP response from a RemoveVmToFolderWithResponse call
func ParseRemoveVmToFolderResponse(rsp *http.Response) (*RemoveVmToFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveVmToFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRemoveVmNicResponse parses an HTTP response from a RemoveVmNicWithResponse call
func ParseRemoveVmNicResponse(rsp *http.Response) (*RemoveVmNicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveVmNicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseResolveAlertResponse parses an HTTP response from a ResolveAlertWithResponse call
func ParseResolveAlertResponse(rsp *http.Response) (*ResolveAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResolveAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskAlert
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRestartVmResponse parses an HTTP response from a RestartVmWithResponse call
func ParseRestartVmResponse(rsp *http.Response) (*RestartVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RestartVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseResumeSnapshotPlanResponse parses an HTTP response from a ResumeSnapshotPlanWithResponse call
func ParseResumeSnapshotPlanResponse(rsp *http.Response) (*ResumeSnapshotPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResumeSnapshotPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnapshotPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseResumeVmResponse parses an HTTP response from a ResumeVmWithResponse call
func ParseResumeVmResponse(rsp *http.Response) (*ResumeVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResumeVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateConsistencyGroupSnapshotResponse parses an HTTP response from a UpdateConsistencyGroupSnapshotWithResponse call
func ParseUpdateConsistencyGroupSnapshotResponse(rsp *http.Response) (*UpdateConsistencyGroupSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateConsistencyGroupSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskConsistencyGroupSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRollbackIscsiLunFromSnapshotResponse parses an HTTP response from a RollbackIscsiLunFromSnapshotWithResponse call
func ParseRollbackIscsiLunFromSnapshotResponse(rsp *http.Response) (*RollbackIscsiLunFromSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RollbackIscsiLunFromSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskIscsiLun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRollbackNvmfNamespaceFromSnapshotResponse parses an HTTP response from a RollbackNvmfNamespaceFromSnapshotWithResponse call
func ParseRollbackNvmfNamespaceFromSnapshotResponse(rsp *http.Response) (*RollbackNvmfNamespaceFromSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RollbackNvmfNamespaceFromSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNvmfNamespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRollbackSnapshotGroupResponse parses an HTTP response from a RollbackSnapshotGroupWithResponse call
func ParseRollbackSnapshotGroupResponse(rsp *http.Response) (*RollbackSnapshotGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RollbackSnapshotGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnapshotGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRollbackVmResponse parses an HTTP response from a RollbackVmWithResponse call
func ParseRollbackVmResponse(rsp *http.Response) (*RollbackVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RollbackVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseShutDownVmResponse parses an HTTP response from a ShutDownVmWithResponse call
func ParseShutDownVmResponse(rsp *http.Response) (*ShutDownVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShutDownVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStartVmResponse parses an HTTP response from a StartVmWithResponse call
func ParseStartVmResponse(rsp *http.Response) (*StartVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &StartVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSuspendSnapshotPlanResponse parses an HTTP response from a SuspendSnapshotPlanWithResponse call
func ParseSuspendSnapshotPlanResponse(rsp *http.Response) (*SuspendSnapshotPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SuspendSnapshotPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnapshotPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSuspendVmResponse parses an HTTP response from a SuspendVmWithResponse call
func ParseSuspendVmResponse(rsp *http.Response) (*SuspendVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SuspendVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTriggerDiskBlinkResponse parses an HTTP response from a TriggerDiskBlinkWithResponse call
func ParseTriggerDiskBlinkResponse(rsp *http.Response) (*TriggerDiskBlinkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TriggerDiskBlinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskHost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUnmountDiskResponse parses an HTTP response from a UnmountDiskWithResponse call
func ParseUnmountDiskResponse(rsp *http.Response) (*UnmountDiskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnmountDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDisk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUnmountUsbDeviceResponse parses an HTTP response from a UnmountUsbDeviceWithResponse call
func ParseUnmountUsbDeviceResponse(rsp *http.Response) (*UnmountUsbDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnmountUsbDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskUsbDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateBrickTopoResponse parses an HTTP response from a UpdateBrickTopoWithResponse call
func ParseUpdateBrickTopoResponse(rsp *http.Response) (*UpdateBrickTopoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateBrickTopoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskBrickTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateClusterResponse parses an HTTP response from a UpdateClusterWithResponse call
func ParseUpdateClusterResponse(rsp *http.Response) (*UpdateClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateClusterLicenseResponse parses an HTTP response from a UpdateClusterLicenseWithResponse call
func ParseUpdateClusterLicenseResponse(rsp *http.Response) (*UpdateClusterLicenseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateClusterLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateClusterRecycleBinSettingResponse parses an HTTP response from a UpdateClusterRecycleBinSettingWithResponse call
func ParseUpdateClusterRecycleBinSettingResponse(rsp *http.Response) (*UpdateClusterRecycleBinSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateClusterRecycleBinSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskClusterSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateConsistencyGroupResponse parses an HTTP response from a UpdateConsistencyGroupWithResponse call
func ParseUpdateConsistencyGroupResponse(rsp *http.Response) (*UpdateConsistencyGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateConsistencyGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskConsistencyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateCustomizeAlertRuleResponse parses an HTTP response from a UpdateCustomizeAlertRuleWithResponse call
func ParseUpdateCustomizeAlertRuleResponse(rsp *http.Response) (*UpdateCustomizeAlertRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomizeAlertRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskGlobalAlertRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateDatacenterResponse parses an HTTP response from a UpdateDatacenterWithResponse call
func ParseUpdateDatacenterResponse(rsp *http.Response) (*UpdateDatacenterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateDatacenterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskDatacenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateElfImageResponse parses an HTTP response from a UpdateElfImageWithResponse call
func ParseUpdateElfImageResponse(rsp *http.Response) (*UpdateElfImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateElfImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskElfImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateEntityFilterResponse parses an HTTP response from a UpdateEntityFilterWithResponse call
func ParseUpdateEntityFilterResponse(rsp *http.Response) (*UpdateEntityFilterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEntityFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskEntityFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateGlobalAlertRuleResponse parses an HTTP response from a UpdateGlobalAlertRuleWithResponse call
func ParseUpdateGlobalAlertRuleResponse(rsp *http.Response) (*UpdateGlobalAlertRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateGlobalAlertRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskGlobalAlertRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateGlobalRecycleBinSettingResponse parses an HTTP response from a UpdateGlobalRecycleBinSettingWithResponse call
func ParseUpdateGlobalRecycleBinSettingResponse(rsp *http.Response) (*UpdateGlobalRecycleBinSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateGlobalRecycleBinSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WithTaskGlobalSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateGraphResponse parses an HTTP response from a UpdateGraphWithResponse call
func ParseUpdateGraphResponse(rsp *http.Response) (*UpdateGraphResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateHostResponse parses an HTTP response from a UpdateHostWithResponse call
func ParseUpdateHostResponse(rsp *http.Response) (*UpdateHostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskHost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateIscsiLunResponse parses an HTTP response from a UpdateIscsiLunWithResponse call
func ParseUpdateIscsiLunResponse(rsp *http.Response) (*UpdateIscsiLunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIscsiLunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskIscsiLun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateIscsiTargetResponse parses an HTTP response from a UpdateIscsiTargetWithResponse call
func ParseUpdateIscsiTargetResponse(rsp *http.Response) (*UpdateIscsiTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskIscsiTarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateLabelResponse parses an HTTP response from a UpdateLabelWithResponse call
func ParseUpdateLabelResponse(rsp *http.Response) (*UpdateLabelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateDeployResponse parses an HTTP response from a UpdateDeployWithResponse call
func ParseUpdateDeployResponse(rsp *http.Response) (*UpdateDeployResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeployResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WithTaskLicense
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateManagementVlanResponse parses an HTTP response from a UpdateManagementVlanWithResponse call
func ParseUpdateManagementVlanResponse(rsp *http.Response) (*UpdateManagementVlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateManagementVlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateMigrationVlanResponse parses an HTTP response from a UpdateMigrationVlanWithResponse call
func ParseUpdateMigrationVlanResponse(rsp *http.Response) (*UpdateMigrationVlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateMigrationVlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateNamespaceGroupResponse parses an HTTP response from a UpdateNamespaceGroupWithResponse call
func ParseUpdateNamespaceGroupResponse(rsp *http.Response) (*UpdateNamespaceGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNamespaceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNamespaceGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateNfsExportResponse parses an HTTP response from a UpdateNfsExportWithResponse call
func ParseUpdateNfsExportResponse(rsp *http.Response) (*UpdateNfsExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNfsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNfsExport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateNicResponse parses an HTTP response from a UpdateNicWithResponse call
func ParseUpdateNicResponse(rsp *http.Response) (*UpdateNicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateNvmfNamespaceResponse parses an HTTP response from a UpdateNvmfNamespaceWithResponse call
func ParseUpdateNvmfNamespaceResponse(rsp *http.Response) (*UpdateNvmfNamespaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNvmfNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNvmfNamespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateNvmfSubsystemResponse parses an HTTP response from a UpdateNvmfSubsystemWithResponse call
func ParseUpdateNvmfSubsystemResponse(rsp *http.Response) (*UpdateNvmfSubsystemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNvmfSubsystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskNvmfSubsystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateRackTopoResponse parses an HTTP response from a UpdateRackTopoWithResponse call
func ParseUpdateRackTopoResponse(rsp *http.Response) (*UpdateRackTopoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateRackTopoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskRackTopo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateReportTemplateResponse parses an HTTP response from a UpdateReportTemplateWithResponse call
func ParseUpdateReportTemplateResponse(rsp *http.Response) (*UpdateReportTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateReportTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskReportTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateRoleResponse parses an HTTP response from a UpdateRoleWithResponse call
func ParseUpdateRoleResponse(rsp *http.Response) (*UpdateRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskUserRoleNext
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateSnapshotPlanResponse parses an HTTP response from a UpdateSnapshotPlanWithResponse call
func ParseUpdateSnapshotPlanResponse(rsp *http.Response) (*UpdateSnapshotPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSnapshotPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnapshotPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateSnmpTransportResponse parses an HTTP response from a UpdateSnmpTransportWithResponse call
func ParseUpdateSnmpTransportResponse(rsp *http.Response) (*UpdateSnmpTransportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSnmpTransportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnmpTransport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateSnmpTrapReceiverResponse parses an HTTP response from a UpdateSnmpTrapReceiverWithResponse call
func ParseUpdateSnmpTrapReceiverResponse(rsp *http.Response) (*UpdateSnmpTrapReceiverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSnmpTrapReceiverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskSnmpTrapReceiver
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateVdsResponse parses an HTTP response from a UpdateVdsWithResponse call
func ParseUpdateVdsResponse(rsp *http.Response) (*UpdateVdsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateViewResponse parses an HTTP response from a UpdateViewWithResponse call
func ParseUpdateViewResponse(rsp *http.Response) (*UpdateViewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateVmResponse parses an HTTP response from a UpdateVmWithResponse call
func ParseUpdateVmResponse(rsp *http.Response) (*UpdateVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateVmDiskResponse parses an HTTP response from a UpdateVmDiskWithResponse call
func ParseUpdateVmDiskResponse(rsp *http.Response) (*UpdateVmDiskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVmDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateVmFolderResponse parses an HTTP response from a UpdateVmFolderWithResponse call
func ParseUpdateVmFolderResponse(rsp *http.Response) (*UpdateVmFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVmFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateVmNicResponse parses an HTTP response from a UpdateVmNicWithResponse call
func ParseUpdateVmNicResponse(rsp *http.Response) (*UpdateVmNicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVmNicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateVmPlacementGroupResponse parses an HTTP response from a UpdateVmPlacementGroupWithResponse call
func ParseUpdateVmPlacementGroupResponse(rsp *http.Response) (*UpdateVmPlacementGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVmPlacementGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmPlacementGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateVmTemplateFromVmResponse parses an HTTP response from a UpdateVmTemplateFromVmWithResponse call
func ParseUpdateVmTemplateFromVmResponse(rsp *http.Response) (*UpdateVmTemplateFromVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVmTemplateFromVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVmTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateVlanResponse parses an HTTP response from a UpdateVlanWithResponse call
func ParseUpdateVlanResponse(rsp *http.Response) (*UpdateVlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WithTaskVlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateElfImageResponse parses an HTTP response from a CreateElfImageWithResponse call
func ParseCreateElfImageResponse(rsp *http.Response) (*CreateElfImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateElfImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UploadTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /add-labels-to-resources)
	AddLabelsToResources(ctx echo.Context) error

	// (POST /add-vm-cd-rom)
	AddVmCdRom(ctx echo.Context) error

	// (POST /add-vm-disk)
	AddVmDisk(ctx echo.Context) error

	// (POST /add-vm-nic)
	AddVmNic(ctx echo.Context) error

	// (POST /add-vm-to-folder)
	AddVmToFolder(ctx echo.Context) error

	// (POST /clone-iscsi-lun-from-snapshot)
	CloneIscsiLunFromSnapshot(ctx echo.Context) error

	// (POST /clone-nvmf-namespace-from-snapshot)
	CloneNvmfNamespaceFromSnapshot(ctx echo.Context) error

	// (POST /clone-snapshot-group)
	CloneSnapshotGroup(ctx echo.Context) error

	// (POST /clone-vm)
	CloneVm(ctx echo.Context) error

	// (POST /clone-vm-template-from-vm)
	CloneVmTemplateFromVm(ctx echo.Context) error

	// (POST /connect-cluster)
	ConnectCluster(ctx echo.Context) error

	// (POST /convert-vm-template-from-vm)
	ConvertVmTemplateFromVm(ctx echo.Context) error

	// (POST /convert-vm-template-to-vm)
	ConvertVmTemplateToVm(ctx echo.Context) error

	// (POST /create-brick-topo)
	CreateBrickTopo(ctx echo.Context) error

	// (POST /create-cluster-recycle-bin-setting)
	CreateClusterRecycleBinSetting(ctx echo.Context) error

	// (POST /create-consistency-group)
	CreateConsistencyGroup(ctx echo.Context) error

	// (POST /create-consistency-snapshot-group)
	CreateConsistencyGroupSnapshot(ctx echo.Context) error

	// (POST /create-datacenter)
	CreateDatacenter(ctx echo.Context) error

	// (POST /create-entity-filter)
	CreateEntityFilter(ctx echo.Context) error

	// (POST /create-graph)
	CreateGraph(ctx echo.Context) error

	// (POST /create-host)
	CreateHost(ctx echo.Context) error

	// (POST /create-iscsi-lun)
	CreateIscsiLun(ctx echo.Context) error

	// (POST /create-iscsi-lun-snapshot)
	CreateIscsiLunSnapshot(ctx echo.Context) error

	// (POST /create-iscsi-target)
	CreateIscsiTarget(ctx echo.Context) error

	// (POST /create-label)
	CreateLabel(ctx echo.Context) error

	// (POST /create-namespace-group)
	CreateNamespaceGroup(ctx echo.Context) error

	// (POST /create-nfs-export)
	CreateNfsExport(ctx echo.Context) error

	// (POST /create-nvmf-namespace)
	CreateNvmfNamespace(ctx echo.Context) error

	// (POST /create-nvmf-namespace-snapshot)
	CreateNvmfNamespaceSnapshot(ctx echo.Context) error

	// (POST /create-nvmf-subsystem)
	CreateNvmfSubsystem(ctx echo.Context) error

	// (POST /create-organization)
	CreateOrganization(ctx echo.Context) error

	// (POST /create-rack-topo)
	CreateRackTopo(ctx echo.Context) error

	// (POST /create-report-template)
	CreateReportTemplate(ctx echo.Context) error

	// (POST /create-role)
	CreateRole(ctx echo.Context) error

	// (POST /create-snapshot-plan)
	CreateSnapshotPlan(ctx echo.Context) error

	// (POST /create-snmp-transport)
	CreateSnmpTransport(ctx echo.Context) error

	// (POST /create-snmp-trap-receiver)
	CreateSnmpTrapReceiver(ctx echo.Context) error

	// (POST /create-user)
	CreateUser(ctx echo.Context) error

	// (POST /create-vds)
	CreateVds(ctx echo.Context) error

	// (POST /create-vds-with-access-vlan)
	CreateVdsWithAccessVlan(ctx echo.Context) error

	// (POST /create-vds-with-migrate-vlan)
	CreateVdsWithMigrateVlan(ctx echo.Context) error

	// (POST /create-view)
	CreateView(ctx echo.Context) error

	// (POST /create-vm)
	CreateVm(ctx echo.Context) error

	// (POST /create-vm-folder)
	CreateVmFolder(ctx echo.Context) error

	// (POST /create-vm-from-template)
	CreateVmFromTemplate(ctx echo.Context) error

	// (POST /create-vm-placement-group)
	CreateVmPlacementGroup(ctx echo.Context) error

	// (POST /create-vm-snapshot)
	CreateVmSnapshot(ctx echo.Context) error

	// (POST /create-vm-vlan)
	CreateVmVlan(ctx echo.Context) error

	// (POST /create-vm-volume)
	CreateVmVolume(ctx echo.Context) error

	// (POST /delete-brick-topo)
	DeleteBrickTopo(ctx echo.Context) error

	// (POST /delete-cluster)
	DeleteCluster(ctx echo.Context) error

	// (POST /delete-cluster-recycle-bin-setting)
	DeleteClusterRecycleBinSetting(ctx echo.Context) error

	// (POST /delete-consistency-group)
	DeleteConsistencyGroup(ctx echo.Context) error

	// (POST /delete-consistency-snapshot-group)
	DeleteConsistencyGroupSnapshot(ctx echo.Context) error

	// (POST /delete-datacenter)
	DeleteDatacenter(ctx echo.Context) error

	// (POST /delete-elf-image)
	DeleteElfImage(ctx echo.Context) error

	// (POST /delete-entity-filter)
	DeleteEntityFilter(ctx echo.Context) error

	// (POST /delete-graph)
	DeleteGraph(ctx echo.Context) error

	// (POST /delete-iscsi-lun)
	DeleteIscsiLun(ctx echo.Context) error

	// (POST /delete-iscsi-lun-snapshot)
	DeleteIscsiLunSnapshot(ctx echo.Context) error

	// (POST /delete-iscsi-target)
	DeleteIscsiTarget(ctx echo.Context) error

	// (POST /delete-label)
	DeleteLabel(ctx echo.Context) error

	// (POST /delete-namespace-group)
	DeleteNamespaceGroup(ctx echo.Context) error

	// (POST /delete-nfs-export)
	DeleteNfsExport(ctx echo.Context) error

	// (POST /delete-nvmf-namespace)
	DeleteNvmfNamespace(ctx echo.Context) error

	// (POST /delete-nvmf-namespace-snapshot)
	DeleteNvmfNamespaceSnapshot(ctx echo.Context) error

	// (POST /delete-nvmf-subsystem)
	DeleteNvmfSubsystem(ctx echo.Context) error

	// (POST /delete-organization)
	DeleteOrganization(ctx echo.Context) error

	// (POST /delete-rack-topo)
	DeleteRackTopo(ctx echo.Context) error

	// (POST /delete-report-template)
	DeleteReportTemplate(ctx echo.Context) error

	// (POST /delete-role)
	DeleteRole(ctx echo.Context) error

	// (POST /delete-snapshot-group)
	DeleteSnapshotGroup(ctx echo.Context) error

	// (POST /delete-snapshot-plan)
	DeleteSnapshotPlan(ctx echo.Context) error

	// (POST /delete-snmp-transport)
	DeleteSnmpTransport(ctx echo.Context) error

	// (POST /delete-snmp-trap-receiver)
	DeleteSnmpTrapReceiver(ctx echo.Context) error

	// (POST /delete-user)
	DeleteUser(ctx echo.Context) error

	// (POST /delete-vds)
	DeleteVds(ctx echo.Context) error

	// (POST /delete-view)
	DeleteView(ctx echo.Context) error

	// (POST /delete-vm)
	DeleteVm(ctx echo.Context) error

	// (POST /delete-vm-folder)
	DeleteVmFolder(ctx echo.Context) error

	// (POST /delete-vm-placement-group)
	DeleteVmPlacementGroup(ctx echo.Context) error

	// (POST /delete-vm-snapshot)
	DeleteVmSnapshot(ctx echo.Context) error

	// (POST /delete-vm-template)
	DeleteVmTemplateFromVm(ctx echo.Context) error

	// (POST /delete-vm-vlan)
	DeleteVlan(ctx echo.Context) error

	// (POST /delete-vm-volume)
	DeleteVmVolumeFromVm(ctx echo.Context) error

	// (POST /execute-snapshot-plan)
	ExecuteSnapshotPlan(ctx echo.Context) error

	// (POST /force-restart-vm)
	ForceRestartVm(ctx echo.Context) error

	// (POST /generate-from-report-template)
	GenerateFromReportTemplate(ctx echo.Context) error

	// (POST /get-alert-notifiers)
	GetAlertNotifiers(ctx echo.Context) error

	// (POST /get-alert-notifiers-connection)
	GetAlertNotifiersConnection(ctx echo.Context) error

	// (POST /get-alert-rules)
	GetAlertRules(ctx echo.Context) error

	// (POST /get-alert-rules-connection)
	GetAlertRulesConnection(ctx echo.Context) error

	// (POST /get-alerts)
	GetAlerts(ctx echo.Context) error

	// (POST /get-alerts-connection)
	GetAlertsConnection(ctx echo.Context) error

	// (POST /get-applications)
	GetApplications(ctx echo.Context) error

	// (POST /get-applications-connection)
	GetApplicationsConnection(ctx echo.Context) error

	// (POST /get-brick-topoes)
	GetBrickTopoes(ctx echo.Context) error

	// (POST /get-brick-topoes-connection)
	GetBrickTopoesConnection(ctx echo.Context) error

	// (POST /get-cluster-images)
	GetClusterImages(ctx echo.Context) error

	// (POST /get-cluster-images-connection)
	GetClusterImagesConnection(ctx echo.Context) error

	// (POST /get-cluster-settingses)
	GetClusterSettingses(ctx echo.Context) error

	// (POST /get-cluster-settingses-connection)
	GetClusterSettingsesConnection(ctx echo.Context) error

	// (POST /get-cluster-topoes)
	GetClusterTopoes(ctx echo.Context) error

	// (POST /get-cluster-topoes-connection)
	GetClusterTopoesConnection(ctx echo.Context) error

	// (POST /get-cluster-upgrade-histories)
	GetClusterUpgradeHistories(ctx echo.Context) error

	// (POST /get-cluster-upgrade-histories-connection)
	GetClusterUpgradeHistoriesConnection(ctx echo.Context) error

	// (POST /get-clusters)
	GetClusters(ctx echo.Context) error

	// (POST /get-clusters-connection)
	GetClustersConnection(ctx echo.Context) error

	// (POST /get-consistency-group-snapshots)
	GetConsistencyGroupSnapshots(ctx echo.Context) error

	// (POST /get-consistency-group-snapshots-connection)
	GetConsistencyGroupSnapshotsConnection(ctx echo.Context) error

	// (POST /get-consistency-groups)
	GetConsistencyGroups(ctx echo.Context) error

	// (POST /get-consistency-groups-connection)
	GetConsistencyGroupsConnection(ctx echo.Context) error

	// (POST /get-datacenters)
	GetDatacenters(ctx echo.Context) error

	// (POST /get-datacenters-connection)
	GetDatacentersConnection(ctx echo.Context) error

	// (POST /get-deploys)
	GetDeploys(ctx echo.Context) error

	// (POST /get-deploys-connection)
	GetDeploysConnection(ctx echo.Context) error

	// (POST /get-discover-hosts)
	GetDiscoverHosts(ctx echo.Context) error

	// (POST /get-disks)
	GetDisks(ctx echo.Context) error

	// (POST /get-disks-connection)
	GetDisksConnection(ctx echo.Context) error

	// (POST /get-elf-data-stores)
	GetElfDataStores(ctx echo.Context) error

	// (POST /get-elf-data-stores-connection)
	GetElfDataStoresConnection(ctx echo.Context) error

	// (POST /get-elf-images)
	GetElfImages(ctx echo.Context) error

	// (POST /get-elf-images-connection)
	GetElfImagesConnection(ctx echo.Context) error

	// (POST /get-elf-storage-policies)
	GetElfStoragePolicies(ctx echo.Context) error

	// (POST /get-elf-storage-policies-connection)
	GetElfStoragePoliciesConnection(ctx echo.Context) error

	// (POST /get-entity-filters)
	GetEntityFilters(ctx echo.Context) error

	// (POST /get-entity-filters-connection)
	GetEntityFiltersConnection(ctx echo.Context) error

	// (POST /get-global-alert-rules)
	GetGlobalAlertRules(ctx echo.Context) error

	// (POST /get-global-alert-rules-connection)
	GetGlobalAlertRulesConnection(ctx echo.Context) error

	// (POST /get-global-settingses)
	GetGlobalSettingses(ctx echo.Context) error

	// (POST /get-global-settingses-connection)
	GetGlobalSettingsesConnection(ctx echo.Context) error

	// (POST /get-graphs)
	GetGraphs(ctx echo.Context) error

	// (POST /get-graphs-connection)
	GetGraphsConnection(ctx echo.Context) error

	// (POST /get-hosts)
	GetHosts(ctx echo.Context) error

	// (POST /get-hosts-connection)
	GetHostsConnection(ctx echo.Context) error

	// (POST /get-images-connector)
	GetImagesConnector(ctx echo.Context) error

	// (POST /get-ipmis)
	GetIpmis(ctx echo.Context) error

	// (POST /get-iscsi-connections)
	GetIscsiConnections(ctx echo.Context) error

	// (POST /get-iscsi-connections-connection)
	GetIscsiConnectionsConnection(ctx echo.Context) error

	// (POST /get-iscsi-lun-snapshots)
	GetIscsiLunSnapshots(ctx echo.Context) error

	// (POST /get-iscsi-lun-snapshots-connection)
	GetIscsiLunSnapshotsConnection(ctx echo.Context) error

	// (POST /get-iscsi-luns)
	GetIscsiLuns(ctx echo.Context) error

	// (POST /get-iscsi-luns-connection)
	GetIscsiLunsConnection(ctx echo.Context) error

	// (POST /get-iscsi-targets)
	GetIscsiTargets(ctx echo.Context) error

	// (POST /get-iscsi-targets-connection)
	GetIscsiTargetsConnection(ctx echo.Context) error

	// (POST /get-labels)
	GetLabels(ctx echo.Context) error

	// (POST /get-labels-connection)
	GetLabelsConnection(ctx echo.Context) error

	// (POST /get-licenses)
	GetLicenses(ctx echo.Context) error

	// (POST /get-licenses-connection)
	GetLicensesConnection(ctx echo.Context) error

	// (POST /get-log-collections)
	GetLogCollections(ctx echo.Context) error

	// (POST /get-log-collections-connection)
	GetLogCollectionsConnection(ctx echo.Context) error

	// (POST /get-migrate-transmitters)
	GetMigrateTransmitters(ctx echo.Context) error

	// (POST /get-migrate-transmitters-connection)
	GetMigrateTransmittersConnection(ctx echo.Context) error

	// (POST /get-namespace-groups)
	GetNamespaceGroups(ctx echo.Context) error

	// (POST /get-namespace-groups-connection)
	GetNamespaceGroupsConnection(ctx echo.Context) error

	// (POST /get-nfs-exports)
	GetNfsExports(ctx echo.Context) error

	// (POST /get-nfs-exports-connection)
	GetNfsExportsConnection(ctx echo.Context) error

	// (POST /get-nfs-inodes)
	GetNfsInodes(ctx echo.Context) error

	// (POST /get-nfs-inodes-connection)
	GetNfsInodesConnection(ctx echo.Context) error

	// (POST /get-nics)
	GetNics(ctx echo.Context) error

	// (POST /get-nics-connection)
	GetNicsConnection(ctx echo.Context) error

	// (POST /get-node-topoes)
	GetNodeTopoes(ctx echo.Context) error

	// (POST /get-node-topoes-connection)
	GetNodeTopoesConnection(ctx echo.Context) error

	// (POST /get-nvmf-namespace-snapshots)
	GetNvmfNamespaceSnapshots(ctx echo.Context) error

	// (POST /get-nvmf-namespace-snapshots-connection)
	GetNvmfNamespaceSnapshotsConnection(ctx echo.Context) error

	// (POST /get-nvmf-namespaces)
	GetNvmfNamespaces(ctx echo.Context) error

	// (POST /get-nvmf-namespaces-connection)
	GetNvmfNamespacesConnection(ctx echo.Context) error

	// (POST /get-nvmf-subsystems)
	GetNvmfSubsystems(ctx echo.Context) error

	// (POST /get-nvmf-subsystems-connection)
	GetNvmfSubsystemsConnection(ctx echo.Context) error

	// (POST /get-organizations)
	GetOrganizations(ctx echo.Context) error

	// (POST /get-organizations-connection)
	GetOrganizationsConnection(ctx echo.Context) error

	// (POST /get-pmem-dimms)
	GetPmemDimms(ctx echo.Context) error

	// (POST /get-pmem-dimms-connection)
	GetPmemDimmsConnection(ctx echo.Context) error

	// (POST /get-rack-topoes)
	GetRackTopoes(ctx echo.Context) error

	// (POST /get-rack-topoes-connection)
	GetRackTopoesConnection(ctx echo.Context) error

	// (POST /get-report-tasks)
	GetReportTasks(ctx echo.Context) error

	// (POST /get-report-tasks-connection)
	GetReportTasksConnection(ctx echo.Context) error

	// (POST /get-report-templates)
	GetReportTemplates(ctx echo.Context) error

	// (POST /get-report-templates-connection)
	GetReportTemplatesConnection(ctx echo.Context) error

	// (POST /get-snapshot-groups)
	GetSnapshotGroups(ctx echo.Context) error

	// (POST /get-snapshot-groups-connection)
	GetSnapshotGroupsConnection(ctx echo.Context) error

	// (POST /get-snapshot-plan-tasks)
	GetSnapshotPlanTasks(ctx echo.Context) error

	// (POST /get-snapshot-plan-tasks-connection)
	GetSnapshotPlanTasksConnection(ctx echo.Context) error

	// (POST /get-snapshot-plans)
	GetSnapshotPlans(ctx echo.Context) error

	// (POST /get-snapshot-plans-connection)
	GetSnapshotPlansConnection(ctx echo.Context) error

	// (POST /get-snmp-transports)
	GetSnmpTransports(ctx echo.Context) error

	// (POST /get-snmp-transports-connection)
	GetSnmpTransportsConnection(ctx echo.Context) error

	// (POST /get-snmp-trap-receivers)
	GetSnmpTrapReceivers(ctx echo.Context) error

	// (POST /get-snmp-trap-receivers-connection)
	GetSnmpTrapReceiversConnection(ctx echo.Context) error

	// (POST /get-storage-policies-connector)
	GetStoragePoliciesConnector(ctx echo.Context) error

	// (POST /get-svt-images)
	GetSvtImages(ctx echo.Context) error

	// (POST /get-svt-images-connection)
	GetSvtImagesConnection(ctx echo.Context) error

	// (POST /get-system-audit-logs)
	GetSystemAuditLogs(ctx echo.Context) error

	// (POST /get-system-audit-logs-connection)
	GetSystemAuditLogsConnection(ctx echo.Context) error

	// (POST /get-tasks)
	GetTasks(ctx echo.Context) error

	// (POST /get-tasks-connection)
	GetTasksConnection(ctx echo.Context) error

	// (POST /get-upload-tasks)
	GetUploadTasks(ctx echo.Context) error

	// (POST /get-upload-tasks-connection)
	GetUploadTasksConnection(ctx echo.Context) error

	// (POST /get-usb-devices)
	GetUsbDevices(ctx echo.Context) error

	// (POST /get-usb-devices-connection)
	GetUsbDevicesConnection(ctx echo.Context) error

	// (POST /get-user-audit-logs)
	GetUserAuditLogs(ctx echo.Context) error

	// (POST /get-user-audit-logs-connection)
	GetUserAuditLogsConnection(ctx echo.Context) error

	// (POST /get-user-role-nexts)
	GetUserRoleNexts(ctx echo.Context) error

	// (POST /get-user-role-nexts-connection)
	GetUserRoleNextsConnection(ctx echo.Context) error

	// (POST /get-users)
	GetUsers(ctx echo.Context) error

	// (POST /get-users-connection)
	GetUsersConnection(ctx echo.Context) error

	// (POST /get-vcenter-accounts)
	GetVcenterAccounts(ctx echo.Context) error

	// (POST /get-vcenter-accounts-connection)
	GetVcenterAccountsConnection(ctx echo.Context) error

	// (POST /get-vdses)
	GetVdses(ctx echo.Context) error

	// (POST /get-vdses-connection)
	GetVdsesConnection(ctx echo.Context) error

	// (POST /get-views)
	GetViews(ctx echo.Context) error

	// (POST /get-views-connection)
	GetViewsConnection(ctx echo.Context) error

	// (POST /get-vlans)
	GetVlans(ctx echo.Context) error

	// (POST /get-vlans-connection)
	GetVlansConnection(ctx echo.Context) error

	// (POST /get-vm-disks)
	GetVmDisks(ctx echo.Context) error

	// (POST /get-vm-disks-connection)
	GetVmDisksConnection(ctx echo.Context) error

	// (POST /get-vm-entity-filter-results)
	GetVmEntityFilterResults(ctx echo.Context) error

	// (POST /get-vm-entity-filter-results-connection)
	GetVmEntityFilterResultsConnection(ctx echo.Context) error

	// (POST /get-vm-folders)
	GetVmFolders(ctx echo.Context) error

	// (POST /get-vm-folders-connection)
	GetVmFoldersConnection(ctx echo.Context) error

	// (POST /get-vm-nics)
	GetVmNics(ctx echo.Context) error

	// (POST /get-vm-nics-connection)
	GetVmNicsConnection(ctx echo.Context) error

	// (POST /get-vm-placement-groups)
	GetVmPlacementGroups(ctx echo.Context) error

	// (POST /get-vm-placement-groups-connection)
	GetVmPlacementGroupsConnection(ctx echo.Context) error

	// (POST /get-vm-snapshots)
	GetVmSnapshots(ctx echo.Context) error

	// (POST /get-vm-snapshots-connection)
	GetVmSnapshotsConnection(ctx echo.Context) error

	// (POST /get-vm-templates)
	GetVmTemplates(ctx echo.Context) error

	// (POST /get-vm-templates-connection)
	GetVmTemplatesConnection(ctx echo.Context) error

	// (POST /get-vm-volumes)
	GetVmVolumes(ctx echo.Context) error

	// (POST /get-vm-volumes-connection)
	GetVmVolumesConnection(ctx echo.Context) error

	// (POST /get-vms)
	GetVms(ctx echo.Context) error

	// (POST /get-vms-connection)
	GetVmsConnection(ctx echo.Context) error

	// (POST /get-vsphere-esxi-accounts)
	GetVsphereEsxiAccounts(ctx echo.Context) error

	// (POST /get-vsphere-esxi-accounts-connection)
	GetVsphereEsxiAccountsConnection(ctx echo.Context) error

	// (POST /get-witnesses)
	GetWitnesses(ctx echo.Context) error

	// (POST /get-witnesses-connection)
	GetWitnessesConnection(ctx echo.Context) error

	// (POST /get-zone-topoes)
	GetZoneTopoes(ctx echo.Context) error

	// (POST /get-zone-topoes-connection)
	GetZoneTopoesConnection(ctx echo.Context) error

	// (POST /get-zones)
	GetZones(ctx echo.Context) error

	// (POST /get-zones-connection)
	GetZonesConnection(ctx echo.Context) error

	// (POST /install-vmtools)
	InstallVmtools(ctx echo.Context) error

	// (POST /keep-snapshot-group)
	KeepSnapshotGroup(ctx echo.Context) error

	// (POST /login)
	Login(ctx echo.Context) error

	// (POST /migrate-vm)
	MigRateVm(ctx echo.Context) error

	// (POST /mount-disk)
	MountDisk(ctx echo.Context) error

	// (POST /mount-usb-device)
	MountUsbDevice(ctx echo.Context) error

	// (POST /move-brick-topo)
	MoveBrickTopo(ctx echo.Context) error

	// (POST /move-node-topo)
	UpdateNodeTopo(ctx echo.Context) error

	// (POST /move-vm-to-recycle)
	MoveVmToRecycleBin(ctx echo.Context) error

	// (POST /poweroff-vm)
	ForceShutDownVm(ctx echo.Context) error

	// (POST /rebuild-vm-from-snapshot)
	RebuildVm(ctx echo.Context) error

	// (POST /recover-vm-from-recycle)
	RecoverVmFromRecycleBin(ctx echo.Context) error

	// (POST /remove-labels-from-resources)
	RemoveLabelsFromResources(ctx echo.Context) error

	// (POST /remove-vm-cd-rom)
	RemoveVmCdRom(ctx echo.Context) error

	// (POST /remove-vm-disk)
	RemoveVmDisk(ctx echo.Context) error

	// (POST /remove-vm-from-folder)
	RemoveVmToFolder(ctx echo.Context) error

	// (POST /remove-vm-nic)
	RemoveVmNic(ctx echo.Context) error

	// (POST /resolve-alert)
	ResolveAlert(ctx echo.Context) error

	// (POST /restart-vm)
	RestartVm(ctx echo.Context) error

	// (POST /resume-snapshot-plan)
	ResumeSnapshotPlan(ctx echo.Context) error

	// (POST /resume-vm)
	ResumeVm(ctx echo.Context) error

	// (POST /rollback-consistency-snapshot-group)
	UpdateConsistencyGroupSnapshot(ctx echo.Context) error

	// (POST /rollback-iscsi-lun-from-snapshot)
	RollbackIscsiLunFromSnapshot(ctx echo.Context) error

	// (POST /rollback-nvmf-namespace-from-snapshot)
	RollbackNvmfNamespaceFromSnapshot(ctx echo.Context) error

	// (POST /rollback-snapshot-group)
	RollbackSnapshotGroup(ctx echo.Context) error

	// (POST /rollback-vm)
	RollbackVm(ctx echo.Context) error

	// (POST /shutdown-vm)
	ShutDownVm(ctx echo.Context) error

	// (POST /start-vm)
	StartVm(ctx echo.Context) error

	// (POST /suspend-snapshot-plan)
	SuspendSnapshotPlan(ctx echo.Context) error

	// (POST /suspend-vm)
	SuspendVm(ctx echo.Context) error

	// (POST /trigger-disk-blink)
	TriggerDiskBlink(ctx echo.Context) error

	// (POST /unmount-disk)
	UnmountDisk(ctx echo.Context) error

	// (POST /unmount-usb-device)
	UnmountUsbDevice(ctx echo.Context) error

	// (POST /update-brick-topo)
	UpdateBrickTopo(ctx echo.Context) error

	// (POST /update-cluster)
	UpdateCluster(ctx echo.Context) error

	// (POST /update-cluster-license)
	UpdateClusterLicense(ctx echo.Context) error

	// (POST /update-cluster-recycle-bin-setting)
	UpdateClusterRecycleBinSetting(ctx echo.Context) error

	// (POST /update-consistency-group)
	UpdateConsistencyGroup(ctx echo.Context) error

	// (POST /update-customize-alert-rule)
	UpdateCustomizeAlertRule(ctx echo.Context) error

	// (POST /update-datacenter)
	UpdateDatacenter(ctx echo.Context) error

	// (POST /update-elf-image)
	UpdateElfImage(ctx echo.Context) error

	// (POST /update-entity-filter)
	UpdateEntityFilter(ctx echo.Context) error

	// (POST /update-global-alert-rule)
	UpdateGlobalAlertRule(ctx echo.Context) error

	// (POST /update-global-recycle-bin-setting)
	UpdateGlobalRecycleBinSetting(ctx echo.Context) error

	// (POST /update-graph)
	UpdateGraph(ctx echo.Context) error

	// (POST /update-host)
	UpdateHost(ctx echo.Context) error

	// (POST /update-iscsi-lun)
	UpdateIscsiLun(ctx echo.Context) error

	// (POST /update-iscsi-target)
	UpdateIscsiTarget(ctx echo.Context) error

	// (POST /update-label)
	UpdateLabel(ctx echo.Context) error

	// (POST /update-license)
	UpdateDeploy(ctx echo.Context) error

	// (POST /update-management-vlan)
	UpdateManagementVlan(ctx echo.Context) error

	// (POST /update-migration-vlan)
	UpdateMigrationVlan(ctx echo.Context) error

	// (POST /update-namespace-group)
	UpdateNamespaceGroup(ctx echo.Context) error

	// (POST /update-nfs-export)
	UpdateNfsExport(ctx echo.Context) error

	// (POST /update-nic)
	UpdateNic(ctx echo.Context) error

	// (POST /update-nvmf-namespace)
	UpdateNvmfNamespace(ctx echo.Context) error

	// (POST /update-nvmf-subsystem)
	UpdateNvmfSubsystem(ctx echo.Context) error

	// (POST /update-organization)
	UpdateOrganization(ctx echo.Context) error

	// (POST /update-rack-topo)
	UpdateRackTopo(ctx echo.Context) error

	// (POST /update-report-template)
	UpdateReportTemplate(ctx echo.Context) error

	// (POST /update-role)
	UpdateRole(ctx echo.Context) error

	// (POST /update-snapshot-plan)
	UpdateSnapshotPlan(ctx echo.Context) error

	// (POST /update-snmp-transport)
	UpdateSnmpTransport(ctx echo.Context) error

	// (POST /update-snmp-trap-receiver)
	UpdateSnmpTrapReceiver(ctx echo.Context) error

	// (POST /update-user)
	UpdateUser(ctx echo.Context) error

	// (POST /update-vds)
	UpdateVds(ctx echo.Context) error

	// (POST /update-view)
	UpdateView(ctx echo.Context) error

	// (POST /update-vm-basic-info)
	UpdateVm(ctx echo.Context) error

	// (POST /update-vm-disk)
	UpdateVmDisk(ctx echo.Context) error

	// (POST /update-vm-folder)
	UpdateVmFolder(ctx echo.Context) error

	// (POST /update-vm-nic)
	UpdateVmNic(ctx echo.Context) error

	// (POST /update-vm-placement-group)
	UpdateVmPlacementGroup(ctx echo.Context) error

	// (POST /update-vm-template)
	UpdateVmTemplateFromVm(ctx echo.Context) error

	// (POST /update-vm-vlan)
	UpdateVlan(ctx echo.Context) error

	// (POST /upload-elf-image)
	CreateElfImage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddLabelsToResources converts echo context to params.
func (w *ServerInterfaceWrapper) AddLabelsToResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddLabelsToResources(ctx)
	return err
}

// AddVmCdRom converts echo context to params.
func (w *ServerInterfaceWrapper) AddVmCdRom(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddVmCdRom(ctx)
	return err
}

// AddVmDisk converts echo context to params.
func (w *ServerInterfaceWrapper) AddVmDisk(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddVmDisk(ctx)
	return err
}

// AddVmNic converts echo context to params.
func (w *ServerInterfaceWrapper) AddVmNic(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddVmNic(ctx)
	return err
}

// AddVmToFolder converts echo context to params.
func (w *ServerInterfaceWrapper) AddVmToFolder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddVmToFolder(ctx)
	return err
}

// CloneIscsiLunFromSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) CloneIscsiLunFromSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneIscsiLunFromSnapshot(ctx)
	return err
}

// CloneNvmfNamespaceFromSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) CloneNvmfNamespaceFromSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneNvmfNamespaceFromSnapshot(ctx)
	return err
}

// CloneSnapshotGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CloneSnapshotGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneSnapshotGroup(ctx)
	return err
}

// CloneVm converts echo context to params.
func (w *ServerInterfaceWrapper) CloneVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneVm(ctx)
	return err
}

// CloneVmTemplateFromVm converts echo context to params.
func (w *ServerInterfaceWrapper) CloneVmTemplateFromVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneVmTemplateFromVm(ctx)
	return err
}

// ConnectCluster converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConnectCluster(ctx)
	return err
}

// ConvertVmTemplateFromVm converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertVmTemplateFromVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertVmTemplateFromVm(ctx)
	return err
}

// ConvertVmTemplateToVm converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertVmTemplateToVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertVmTemplateToVm(ctx)
	return err
}

// CreateBrickTopo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBrickTopo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBrickTopo(ctx)
	return err
}

// CreateClusterRecycleBinSetting converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClusterRecycleBinSetting(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateClusterRecycleBinSetting(ctx)
	return err
}

// CreateConsistencyGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateConsistencyGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateConsistencyGroup(ctx)
	return err
}

// CreateConsistencyGroupSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) CreateConsistencyGroupSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateConsistencyGroupSnapshot(ctx)
	return err
}

// CreateDatacenter converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatacenter(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDatacenter(ctx)
	return err
}

// CreateEntityFilter converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEntityFilter(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEntityFilter(ctx)
	return err
}

// CreateGraph converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGraph(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGraph(ctx)
	return err
}

// CreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) CreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateHost(ctx)
	return err
}

// CreateIscsiLun converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIscsiLun(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIscsiLun(ctx)
	return err
}

// CreateIscsiLunSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIscsiLunSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIscsiLunSnapshot(ctx)
	return err
}

// CreateIscsiTarget converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIscsiTarget(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIscsiTarget(ctx)
	return err
}

// CreateLabel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLabel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateLabel(ctx)
	return err
}

// CreateNamespaceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNamespaceGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNamespaceGroup(ctx)
	return err
}

// CreateNfsExport converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNfsExport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNfsExport(ctx)
	return err
}

// CreateNvmfNamespace converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNvmfNamespace(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNvmfNamespace(ctx)
	return err
}

// CreateNvmfNamespaceSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNvmfNamespaceSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNvmfNamespaceSnapshot(ctx)
	return err
}

// CreateNvmfSubsystem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNvmfSubsystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNvmfSubsystem(ctx)
	return err
}

// CreateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrganization(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrganization(ctx)
	return err
}

// CreateRackTopo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRackTopo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRackTopo(ctx)
	return err
}

// CreateReportTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateReportTemplate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateReportTemplate(ctx)
	return err
}

// CreateRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRole(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRole(ctx)
	return err
}

// CreateSnapshotPlan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSnapshotPlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSnapshotPlan(ctx)
	return err
}

// CreateSnmpTransport converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSnmpTransport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSnmpTransport(ctx)
	return err
}

// CreateSnmpTrapReceiver converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSnmpTrapReceiver(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSnmpTrapReceiver(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// CreateVds converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVds(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVds(ctx)
	return err
}

// CreateVdsWithAccessVlan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVdsWithAccessVlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVdsWithAccessVlan(ctx)
	return err
}

// CreateVdsWithMigrateVlan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVdsWithMigrateVlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVdsWithMigrateVlan(ctx)
	return err
}

// CreateView converts echo context to params.
func (w *ServerInterfaceWrapper) CreateView(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateView(ctx)
	return err
}

// CreateVm converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVm(ctx)
	return err
}

// CreateVmFolder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVmFolder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVmFolder(ctx)
	return err
}

// CreateVmFromTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVmFromTemplate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVmFromTemplate(ctx)
	return err
}

// CreateVmPlacementGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVmPlacementGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVmPlacementGroup(ctx)
	return err
}

// CreateVmSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVmSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVmSnapshot(ctx)
	return err
}

// CreateVmVlan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVmVlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVmVlan(ctx)
	return err
}

// CreateVmVolume converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVmVolume(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVmVolume(ctx)
	return err
}

// DeleteBrickTopo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBrickTopo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBrickTopo(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx)
	return err
}

// DeleteClusterRecycleBinSetting converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClusterRecycleBinSetting(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClusterRecycleBinSetting(ctx)
	return err
}

// DeleteConsistencyGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteConsistencyGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteConsistencyGroup(ctx)
	return err
}

// DeleteConsistencyGroupSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteConsistencyGroupSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteConsistencyGroupSnapshot(ctx)
	return err
}

// DeleteDatacenter converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatacenter(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDatacenter(ctx)
	return err
}

// DeleteElfImage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteElfImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteElfImage(ctx)
	return err
}

// DeleteEntityFilter converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEntityFilter(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEntityFilter(ctx)
	return err
}

// DeleteGraph converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGraph(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGraph(ctx)
	return err
}

// DeleteIscsiLun converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiLun(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiLun(ctx)
	return err
}

// DeleteIscsiLunSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiLunSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiLunSnapshot(ctx)
	return err
}

// DeleteIscsiTarget converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiTarget(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiTarget(ctx)
	return err
}

// DeleteLabel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLabel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLabel(ctx)
	return err
}

// DeleteNamespaceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNamespaceGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNamespaceGroup(ctx)
	return err
}

// DeleteNfsExport converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNfsExport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNfsExport(ctx)
	return err
}

// DeleteNvmfNamespace converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNvmfNamespace(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNvmfNamespace(ctx)
	return err
}

// DeleteNvmfNamespaceSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNvmfNamespaceSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNvmfNamespaceSnapshot(ctx)
	return err
}

// DeleteNvmfSubsystem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNvmfSubsystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNvmfSubsystem(ctx)
	return err
}

// DeleteOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrganization(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOrganization(ctx)
	return err
}

// DeleteRackTopo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRackTopo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRackTopo(ctx)
	return err
}

// DeleteReportTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReportTemplate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteReportTemplate(ctx)
	return err
}

// DeleteRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRole(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRole(ctx)
	return err
}

// DeleteSnapshotGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSnapshotGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSnapshotGroup(ctx)
	return err
}

// DeleteSnapshotPlan converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSnapshotPlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSnapshotPlan(ctx)
	return err
}

// DeleteSnmpTransport converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSnmpTransport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSnmpTransport(ctx)
	return err
}

// DeleteSnmpTrapReceiver converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSnmpTrapReceiver(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSnmpTrapReceiver(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx)
	return err
}

// DeleteVds converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVds(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVds(ctx)
	return err
}

// DeleteView converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteView(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteView(ctx)
	return err
}

// DeleteVm converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVm(ctx)
	return err
}

// DeleteVmFolder converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmFolder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVmFolder(ctx)
	return err
}

// DeleteVmPlacementGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmPlacementGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVmPlacementGroup(ctx)
	return err
}

// DeleteVmSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVmSnapshot(ctx)
	return err
}

// DeleteVmTemplateFromVm converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmTemplateFromVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVmTemplateFromVm(ctx)
	return err
}

// DeleteVlan converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVlan(ctx)
	return err
}

// DeleteVmVolumeFromVm converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmVolumeFromVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVmVolumeFromVm(ctx)
	return err
}

// ExecuteSnapshotPlan converts echo context to params.
func (w *ServerInterfaceWrapper) ExecuteSnapshotPlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExecuteSnapshotPlan(ctx)
	return err
}

// ForceRestartVm converts echo context to params.
func (w *ServerInterfaceWrapper) ForceRestartVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ForceRestartVm(ctx)
	return err
}

// GenerateFromReportTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateFromReportTemplate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateFromReportTemplate(ctx)
	return err
}

// GetAlertNotifiers converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertNotifiers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertNotifiers(ctx)
	return err
}

// GetAlertNotifiersConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertNotifiersConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertNotifiersConnection(ctx)
	return err
}

// GetAlertRules converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertRules(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertRules(ctx)
	return err
}

// GetAlertRulesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertRulesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertRulesConnection(ctx)
	return err
}

// GetAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlerts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlerts(ctx)
	return err
}

// GetAlertsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertsConnection(ctx)
	return err
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// GetApplicationsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationsConnection(ctx)
	return err
}

// GetBrickTopoes converts echo context to params.
func (w *ServerInterfaceWrapper) GetBrickTopoes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBrickTopoes(ctx)
	return err
}

// GetBrickTopoesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetBrickTopoesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBrickTopoesConnection(ctx)
	return err
}

// GetClusterImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterImages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusterImages(ctx)
	return err
}

// GetClusterImagesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterImagesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusterImagesConnection(ctx)
	return err
}

// GetClusterSettingses converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterSettingses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusterSettingses(ctx)
	return err
}

// GetClusterSettingsesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterSettingsesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusterSettingsesConnection(ctx)
	return err
}

// GetClusterTopoes converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterTopoes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusterTopoes(ctx)
	return err
}

// GetClusterTopoesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterTopoesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusterTopoesConnection(ctx)
	return err
}

// GetClusterUpgradeHistories converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterUpgradeHistories(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusterUpgradeHistories(ctx)
	return err
}

// GetClusterUpgradeHistoriesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterUpgradeHistoriesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusterUpgradeHistoriesConnection(ctx)
	return err
}

// GetClusters converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusters(ctx)
	return err
}

// GetClustersConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetClustersConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClustersConnection(ctx)
	return err
}

// GetConsistencyGroupSnapshots converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsistencyGroupSnapshots(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConsistencyGroupSnapshots(ctx)
	return err
}

// GetConsistencyGroupSnapshotsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsistencyGroupSnapshotsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConsistencyGroupSnapshotsConnection(ctx)
	return err
}

// GetConsistencyGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsistencyGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConsistencyGroups(ctx)
	return err
}

// GetConsistencyGroupsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsistencyGroupsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConsistencyGroupsConnection(ctx)
	return err
}

// GetDatacenters converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatacenters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDatacenters(ctx)
	return err
}

// GetDatacentersConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatacentersConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDatacentersConnection(ctx)
	return err
}

// GetDeploys converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeploys(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeploys(ctx)
	return err
}

// GetDeploysConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeploysConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeploysConnection(ctx)
	return err
}

// GetDiscoverHosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscoverHosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiscoverHosts(ctx)
	return err
}

// GetDisks converts echo context to params.
func (w *ServerInterfaceWrapper) GetDisks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDisks(ctx)
	return err
}

// GetDisksConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetDisksConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDisksConnection(ctx)
	return err
}

// GetElfDataStores converts echo context to params.
func (w *ServerInterfaceWrapper) GetElfDataStores(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetElfDataStores(ctx)
	return err
}

// GetElfDataStoresConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetElfDataStoresConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetElfDataStoresConnection(ctx)
	return err
}

// GetElfImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetElfImages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetElfImages(ctx)
	return err
}

// GetElfImagesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetElfImagesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetElfImagesConnection(ctx)
	return err
}

// GetElfStoragePolicies converts echo context to params.
func (w *ServerInterfaceWrapper) GetElfStoragePolicies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetElfStoragePolicies(ctx)
	return err
}

// GetElfStoragePoliciesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetElfStoragePoliciesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetElfStoragePoliciesConnection(ctx)
	return err
}

// GetEntityFilters converts echo context to params.
func (w *ServerInterfaceWrapper) GetEntityFilters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEntityFilters(ctx)
	return err
}

// GetEntityFiltersConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetEntityFiltersConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEntityFiltersConnection(ctx)
	return err
}

// GetGlobalAlertRules converts echo context to params.
func (w *ServerInterfaceWrapper) GetGlobalAlertRules(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGlobalAlertRules(ctx)
	return err
}

// GetGlobalAlertRulesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetGlobalAlertRulesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGlobalAlertRulesConnection(ctx)
	return err
}

// GetGlobalSettingses converts echo context to params.
func (w *ServerInterfaceWrapper) GetGlobalSettingses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGlobalSettingses(ctx)
	return err
}

// GetGlobalSettingsesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetGlobalSettingsesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGlobalSettingsesConnection(ctx)
	return err
}

// GetGraphs converts echo context to params.
func (w *ServerInterfaceWrapper) GetGraphs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGraphs(ctx)
	return err
}

// GetGraphsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetGraphsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGraphsConnection(ctx)
	return err
}

// GetHosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetHosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHosts(ctx)
	return err
}

// GetHostsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetHostsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHostsConnection(ctx)
	return err
}

// GetImagesConnector converts echo context to params.
func (w *ServerInterfaceWrapper) GetImagesConnector(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetImagesConnector(ctx)
	return err
}

// GetIpmis converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpmis(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIpmis(ctx)
	return err
}

// GetIscsiConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiConnections(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiConnections(ctx)
	return err
}

// GetIscsiConnectionsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiConnectionsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiConnectionsConnection(ctx)
	return err
}

// GetIscsiLunSnapshots converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiLunSnapshots(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiLunSnapshots(ctx)
	return err
}

// GetIscsiLunSnapshotsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiLunSnapshotsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiLunSnapshotsConnection(ctx)
	return err
}

// GetIscsiLuns converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiLuns(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiLuns(ctx)
	return err
}

// GetIscsiLunsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiLunsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiLunsConnection(ctx)
	return err
}

// GetIscsiTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiTargets(ctx)
	return err
}

// GetIscsiTargetsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiTargetsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiTargetsConnection(ctx)
	return err
}

// GetLabels converts echo context to params.
func (w *ServerInterfaceWrapper) GetLabels(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabels(ctx)
	return err
}

// GetLabelsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetLabelsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelsConnection(ctx)
	return err
}

// GetLicenses converts echo context to params.
func (w *ServerInterfaceWrapper) GetLicenses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLicenses(ctx)
	return err
}

// GetLicensesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetLicensesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLicensesConnection(ctx)
	return err
}

// GetLogCollections converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogCollections(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogCollections(ctx)
	return err
}

// GetLogCollectionsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogCollectionsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogCollectionsConnection(ctx)
	return err
}

// GetMigrateTransmitters converts echo context to params.
func (w *ServerInterfaceWrapper) GetMigrateTransmitters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMigrateTransmitters(ctx)
	return err
}

// GetMigrateTransmittersConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetMigrateTransmittersConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMigrateTransmittersConnection(ctx)
	return err
}

// GetNamespaceGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetNamespaceGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNamespaceGroups(ctx)
	return err
}

// GetNamespaceGroupsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetNamespaceGroupsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNamespaceGroupsConnection(ctx)
	return err
}

// GetNfsExports converts echo context to params.
func (w *ServerInterfaceWrapper) GetNfsExports(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNfsExports(ctx)
	return err
}

// GetNfsExportsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetNfsExportsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNfsExportsConnection(ctx)
	return err
}

// GetNfsInodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNfsInodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNfsInodes(ctx)
	return err
}

// GetNfsInodesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetNfsInodesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNfsInodesConnection(ctx)
	return err
}

// GetNics converts echo context to params.
func (w *ServerInterfaceWrapper) GetNics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNics(ctx)
	return err
}

// GetNicsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetNicsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNicsConnection(ctx)
	return err
}

// GetNodeTopoes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeTopoes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeTopoes(ctx)
	return err
}

// GetNodeTopoesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeTopoesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeTopoesConnection(ctx)
	return err
}

// GetNvmfNamespaceSnapshots converts echo context to params.
func (w *ServerInterfaceWrapper) GetNvmfNamespaceSnapshots(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNvmfNamespaceSnapshots(ctx)
	return err
}

// GetNvmfNamespaceSnapshotsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetNvmfNamespaceSnapshotsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNvmfNamespaceSnapshotsConnection(ctx)
	return err
}

// GetNvmfNamespaces converts echo context to params.
func (w *ServerInterfaceWrapper) GetNvmfNamespaces(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNvmfNamespaces(ctx)
	return err
}

// GetNvmfNamespacesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetNvmfNamespacesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNvmfNamespacesConnection(ctx)
	return err
}

// GetNvmfSubsystems converts echo context to params.
func (w *ServerInterfaceWrapper) GetNvmfSubsystems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNvmfSubsystems(ctx)
	return err
}

// GetNvmfSubsystemsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetNvmfSubsystemsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNvmfSubsystemsConnection(ctx)
	return err
}

// GetOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganizations(ctx)
	return err
}

// GetOrganizationsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizationsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganizationsConnection(ctx)
	return err
}

// GetPmemDimms converts echo context to params.
func (w *ServerInterfaceWrapper) GetPmemDimms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPmemDimms(ctx)
	return err
}

// GetPmemDimmsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetPmemDimmsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPmemDimmsConnection(ctx)
	return err
}

// GetRackTopoes converts echo context to params.
func (w *ServerInterfaceWrapper) GetRackTopoes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRackTopoes(ctx)
	return err
}

// GetRackTopoesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetRackTopoesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRackTopoesConnection(ctx)
	return err
}

// GetReportTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetReportTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReportTasks(ctx)
	return err
}

// GetReportTasksConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetReportTasksConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReportTasksConnection(ctx)
	return err
}

// GetReportTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) GetReportTemplates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReportTemplates(ctx)
	return err
}

// GetReportTemplatesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetReportTemplatesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReportTemplatesConnection(ctx)
	return err
}

// GetSnapshotGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnapshotGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnapshotGroups(ctx)
	return err
}

// GetSnapshotGroupsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnapshotGroupsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnapshotGroupsConnection(ctx)
	return err
}

// GetSnapshotPlanTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnapshotPlanTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnapshotPlanTasks(ctx)
	return err
}

// GetSnapshotPlanTasksConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnapshotPlanTasksConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnapshotPlanTasksConnection(ctx)
	return err
}

// GetSnapshotPlans converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnapshotPlans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnapshotPlans(ctx)
	return err
}

// GetSnapshotPlansConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnapshotPlansConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnapshotPlansConnection(ctx)
	return err
}

// GetSnmpTransports converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnmpTransports(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnmpTransports(ctx)
	return err
}

// GetSnmpTransportsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnmpTransportsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnmpTransportsConnection(ctx)
	return err
}

// GetSnmpTrapReceivers converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnmpTrapReceivers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnmpTrapReceivers(ctx)
	return err
}

// GetSnmpTrapReceiversConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnmpTrapReceiversConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnmpTrapReceiversConnection(ctx)
	return err
}

// GetStoragePoliciesConnector converts echo context to params.
func (w *ServerInterfaceWrapper) GetStoragePoliciesConnector(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStoragePoliciesConnector(ctx)
	return err
}

// GetSvtImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetSvtImages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSvtImages(ctx)
	return err
}

// GetSvtImagesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetSvtImagesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSvtImagesConnection(ctx)
	return err
}

// GetSystemAuditLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemAuditLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemAuditLogs(ctx)
	return err
}

// GetSystemAuditLogsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemAuditLogsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemAuditLogsConnection(ctx)
	return err
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTasks(ctx)
	return err
}

// GetTasksConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasksConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTasksConnection(ctx)
	return err
}

// GetUploadTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetUploadTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUploadTasks(ctx)
	return err
}

// GetUploadTasksConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetUploadTasksConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUploadTasksConnection(ctx)
	return err
}

// GetUsbDevices converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsbDevices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsbDevices(ctx)
	return err
}

// GetUsbDevicesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsbDevicesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsbDevicesConnection(ctx)
	return err
}

// GetUserAuditLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserAuditLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserAuditLogs(ctx)
	return err
}

// GetUserAuditLogsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserAuditLogsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserAuditLogsConnection(ctx)
	return err
}

// GetUserRoleNexts converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRoleNexts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserRoleNexts(ctx)
	return err
}

// GetUserRoleNextsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRoleNextsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserRoleNextsConnection(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// GetUsersConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersConnection(ctx)
	return err
}

// GetVcenterAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetVcenterAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVcenterAccounts(ctx)
	return err
}

// GetVcenterAccountsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVcenterAccountsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVcenterAccountsConnection(ctx)
	return err
}

// GetVdses converts echo context to params.
func (w *ServerInterfaceWrapper) GetVdses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVdses(ctx)
	return err
}

// GetVdsesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVdsesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVdsesConnection(ctx)
	return err
}

// GetViews converts echo context to params.
func (w *ServerInterfaceWrapper) GetViews(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetViews(ctx)
	return err
}

// GetViewsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetViewsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetViewsConnection(ctx)
	return err
}

// GetVlans converts echo context to params.
func (w *ServerInterfaceWrapper) GetVlans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVlans(ctx)
	return err
}

// GetVlansConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVlansConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVlansConnection(ctx)
	return err
}

// GetVmDisks converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmDisks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmDisks(ctx)
	return err
}

// GetVmDisksConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmDisksConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmDisksConnection(ctx)
	return err
}

// GetVmEntityFilterResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmEntityFilterResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmEntityFilterResults(ctx)
	return err
}

// GetVmEntityFilterResultsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmEntityFilterResultsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmEntityFilterResultsConnection(ctx)
	return err
}

// GetVmFolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmFolders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmFolders(ctx)
	return err
}

// GetVmFoldersConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmFoldersConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmFoldersConnection(ctx)
	return err
}

// GetVmNics converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmNics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmNics(ctx)
	return err
}

// GetVmNicsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmNicsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmNicsConnection(ctx)
	return err
}

// GetVmPlacementGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmPlacementGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmPlacementGroups(ctx)
	return err
}

// GetVmPlacementGroupsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmPlacementGroupsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmPlacementGroupsConnection(ctx)
	return err
}

// GetVmSnapshots converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmSnapshots(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmSnapshots(ctx)
	return err
}

// GetVmSnapshotsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmSnapshotsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmSnapshotsConnection(ctx)
	return err
}

// GetVmTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmTemplates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmTemplates(ctx)
	return err
}

// GetVmTemplatesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmTemplatesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmTemplatesConnection(ctx)
	return err
}

// GetVmVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmVolumes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmVolumes(ctx)
	return err
}

// GetVmVolumesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmVolumesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmVolumesConnection(ctx)
	return err
}

// GetVms converts echo context to params.
func (w *ServerInterfaceWrapper) GetVms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVms(ctx)
	return err
}

// GetVmsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmsConnection(ctx)
	return err
}

// GetVsphereEsxiAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetVsphereEsxiAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVsphereEsxiAccounts(ctx)
	return err
}

// GetVsphereEsxiAccountsConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetVsphereEsxiAccountsConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVsphereEsxiAccountsConnection(ctx)
	return err
}

// GetWitnesses converts echo context to params.
func (w *ServerInterfaceWrapper) GetWitnesses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWitnesses(ctx)
	return err
}

// GetWitnessesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetWitnessesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWitnessesConnection(ctx)
	return err
}

// GetZoneTopoes converts echo context to params.
func (w *ServerInterfaceWrapper) GetZoneTopoes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZoneTopoes(ctx)
	return err
}

// GetZoneTopoesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetZoneTopoesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZoneTopoesConnection(ctx)
	return err
}

// GetZones converts echo context to params.
func (w *ServerInterfaceWrapper) GetZones(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZones(ctx)
	return err
}

// GetZonesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) GetZonesConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZonesConnection(ctx)
	return err
}

// InstallVmtools converts echo context to params.
func (w *ServerInterfaceWrapper) InstallVmtools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallVmtools(ctx)
	return err
}

// KeepSnapshotGroup converts echo context to params.
func (w *ServerInterfaceWrapper) KeepSnapshotGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KeepSnapshotGroup(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// MigRateVm converts echo context to params.
func (w *ServerInterfaceWrapper) MigRateVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MigRateVm(ctx)
	return err
}

// MountDisk converts echo context to params.
func (w *ServerInterfaceWrapper) MountDisk(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MountDisk(ctx)
	return err
}

// MountUsbDevice converts echo context to params.
func (w *ServerInterfaceWrapper) MountUsbDevice(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MountUsbDevice(ctx)
	return err
}

// MoveBrickTopo converts echo context to params.
func (w *ServerInterfaceWrapper) MoveBrickTopo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MoveBrickTopo(ctx)
	return err
}

// UpdateNodeTopo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateNodeTopo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateNodeTopo(ctx)
	return err
}

// MoveVmToRecycleBin converts echo context to params.
func (w *ServerInterfaceWrapper) MoveVmToRecycleBin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MoveVmToRecycleBin(ctx)
	return err
}

// ForceShutDownVm converts echo context to params.
func (w *ServerInterfaceWrapper) ForceShutDownVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ForceShutDownVm(ctx)
	return err
}

// RebuildVm converts echo context to params.
func (w *ServerInterfaceWrapper) RebuildVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RebuildVm(ctx)
	return err
}

// RecoverVmFromRecycleBin converts echo context to params.
func (w *ServerInterfaceWrapper) RecoverVmFromRecycleBin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecoverVmFromRecycleBin(ctx)
	return err
}

// RemoveLabelsFromResources converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveLabelsFromResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveLabelsFromResources(ctx)
	return err
}

// RemoveVmCdRom converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveVmCdRom(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveVmCdRom(ctx)
	return err
}

// RemoveVmDisk converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveVmDisk(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveVmDisk(ctx)
	return err
}

// RemoveVmToFolder converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveVmToFolder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveVmToFolder(ctx)
	return err
}

// RemoveVmNic converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveVmNic(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveVmNic(ctx)
	return err
}

// ResolveAlert converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveAlert(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResolveAlert(ctx)
	return err
}

// RestartVm converts echo context to params.
func (w *ServerInterfaceWrapper) RestartVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestartVm(ctx)
	return err
}

// ResumeSnapshotPlan converts echo context to params.
func (w *ServerInterfaceWrapper) ResumeSnapshotPlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResumeSnapshotPlan(ctx)
	return err
}

// ResumeVm converts echo context to params.
func (w *ServerInterfaceWrapper) ResumeVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResumeVm(ctx)
	return err
}

// UpdateConsistencyGroupSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateConsistencyGroupSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateConsistencyGroupSnapshot(ctx)
	return err
}

// RollbackIscsiLunFromSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) RollbackIscsiLunFromSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RollbackIscsiLunFromSnapshot(ctx)
	return err
}

// RollbackNvmfNamespaceFromSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) RollbackNvmfNamespaceFromSnapshot(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RollbackNvmfNamespaceFromSnapshot(ctx)
	return err
}

// RollbackSnapshotGroup converts echo context to params.
func (w *ServerInterfaceWrapper) RollbackSnapshotGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RollbackSnapshotGroup(ctx)
	return err
}

// RollbackVm converts echo context to params.
func (w *ServerInterfaceWrapper) RollbackVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RollbackVm(ctx)
	return err
}

// ShutDownVm converts echo context to params.
func (w *ServerInterfaceWrapper) ShutDownVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutDownVm(ctx)
	return err
}

// StartVm converts echo context to params.
func (w *ServerInterfaceWrapper) StartVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartVm(ctx)
	return err
}

// SuspendSnapshotPlan converts echo context to params.
func (w *ServerInterfaceWrapper) SuspendSnapshotPlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SuspendSnapshotPlan(ctx)
	return err
}

// SuspendVm converts echo context to params.
func (w *ServerInterfaceWrapper) SuspendVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SuspendVm(ctx)
	return err
}

// TriggerDiskBlink converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerDiskBlink(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TriggerDiskBlink(ctx)
	return err
}

// UnmountDisk converts echo context to params.
func (w *ServerInterfaceWrapper) UnmountDisk(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnmountDisk(ctx)
	return err
}

// UnmountUsbDevice converts echo context to params.
func (w *ServerInterfaceWrapper) UnmountUsbDevice(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnmountUsbDevice(ctx)
	return err
}

// UpdateBrickTopo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBrickTopo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateBrickTopo(ctx)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx)
	return err
}

// UpdateClusterLicense converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClusterLicense(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateClusterLicense(ctx)
	return err
}

// UpdateClusterRecycleBinSetting converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClusterRecycleBinSetting(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateClusterRecycleBinSetting(ctx)
	return err
}

// UpdateConsistencyGroup converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateConsistencyGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateConsistencyGroup(ctx)
	return err
}

// UpdateCustomizeAlertRule converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomizeAlertRule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomizeAlertRule(ctx)
	return err
}

// UpdateDatacenter converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatacenter(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDatacenter(ctx)
	return err
}

// UpdateElfImage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateElfImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateElfImage(ctx)
	return err
}

// UpdateEntityFilter converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEntityFilter(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEntityFilter(ctx)
	return err
}

// UpdateGlobalAlertRule converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGlobalAlertRule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateGlobalAlertRule(ctx)
	return err
}

// UpdateGlobalRecycleBinSetting converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGlobalRecycleBinSetting(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateGlobalRecycleBinSetting(ctx)
	return err
}

// UpdateGraph converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGraph(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateGraph(ctx)
	return err
}

// UpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateHost(ctx)
	return err
}

// UpdateIscsiLun converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIscsiLun(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIscsiLun(ctx)
	return err
}

// UpdateIscsiTarget converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIscsiTarget(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIscsiTarget(ctx)
	return err
}

// UpdateLabel converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLabel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateLabel(ctx)
	return err
}

// UpdateDeploy converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeploy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDeploy(ctx)
	return err
}

// UpdateManagementVlan converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateManagementVlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateManagementVlan(ctx)
	return err
}

// UpdateMigrationVlan converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMigrationVlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMigrationVlan(ctx)
	return err
}

// UpdateNamespaceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateNamespaceGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateNamespaceGroup(ctx)
	return err
}

// UpdateNfsExport converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateNfsExport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateNfsExport(ctx)
	return err
}

// UpdateNic converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateNic(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateNic(ctx)
	return err
}

// UpdateNvmfNamespace converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateNvmfNamespace(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateNvmfNamespace(ctx)
	return err
}

// UpdateNvmfSubsystem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateNvmfSubsystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateNvmfSubsystem(ctx)
	return err
}

// UpdateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrganization(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateOrganization(ctx)
	return err
}

// UpdateRackTopo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRackTopo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRackTopo(ctx)
	return err
}

// UpdateReportTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateReportTemplate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateReportTemplate(ctx)
	return err
}

// UpdateRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRole(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRole(ctx)
	return err
}

// UpdateSnapshotPlan converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSnapshotPlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSnapshotPlan(ctx)
	return err
}

// UpdateSnmpTransport converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSnmpTransport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSnmpTransport(ctx)
	return err
}

// UpdateSnmpTrapReceiver converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSnmpTrapReceiver(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSnmpTrapReceiver(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// UpdateVds converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVds(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateVds(ctx)
	return err
}

// UpdateView converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateView(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateView(ctx)
	return err
}

// UpdateVm converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateVm(ctx)
	return err
}

// UpdateVmDisk converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVmDisk(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateVmDisk(ctx)
	return err
}

// UpdateVmFolder converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVmFolder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateVmFolder(ctx)
	return err
}

// UpdateVmNic converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVmNic(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateVmNic(ctx)
	return err
}

// UpdateVmPlacementGroup converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVmPlacementGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateVmPlacementGroup(ctx)
	return err
}

// UpdateVmTemplateFromVm converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVmTemplateFromVm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateVmTemplateFromVm(ctx)
	return err
}

// UpdateVlan converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateVlan(ctx)
	return err
}

// CreateElfImage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateElfImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateElfImage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/add-labels-to-resources", wrapper.AddLabelsToResources)
	router.POST(baseURL+"/add-vm-cd-rom", wrapper.AddVmCdRom)
	router.POST(baseURL+"/add-vm-disk", wrapper.AddVmDisk)
	router.POST(baseURL+"/add-vm-nic", wrapper.AddVmNic)
	router.POST(baseURL+"/add-vm-to-folder", wrapper.AddVmToFolder)
	router.POST(baseURL+"/clone-iscsi-lun-from-snapshot", wrapper.CloneIscsiLunFromSnapshot)
	router.POST(baseURL+"/clone-nvmf-namespace-from-snapshot", wrapper.CloneNvmfNamespaceFromSnapshot)
	router.POST(baseURL+"/clone-snapshot-group", wrapper.CloneSnapshotGroup)
	router.POST(baseURL+"/clone-vm", wrapper.CloneVm)
	router.POST(baseURL+"/clone-vm-template-from-vm", wrapper.CloneVmTemplateFromVm)
	router.POST(baseURL+"/connect-cluster", wrapper.ConnectCluster)
	router.POST(baseURL+"/convert-vm-template-from-vm", wrapper.ConvertVmTemplateFromVm)
	router.POST(baseURL+"/convert-vm-template-to-vm", wrapper.ConvertVmTemplateToVm)
	router.POST(baseURL+"/create-brick-topo", wrapper.CreateBrickTopo)
	router.POST(baseURL+"/create-cluster-recycle-bin-setting", wrapper.CreateClusterRecycleBinSetting)
	router.POST(baseURL+"/create-consistency-group", wrapper.CreateConsistencyGroup)
	router.POST(baseURL+"/create-consistency-snapshot-group", wrapper.CreateConsistencyGroupSnapshot)
	router.POST(baseURL+"/create-datacenter", wrapper.CreateDatacenter)
	router.POST(baseURL+"/create-entity-filter", wrapper.CreateEntityFilter)
	router.POST(baseURL+"/create-graph", wrapper.CreateGraph)
	router.POST(baseURL+"/create-host", wrapper.CreateHost)
	router.POST(baseURL+"/create-iscsi-lun", wrapper.CreateIscsiLun)
	router.POST(baseURL+"/create-iscsi-lun-snapshot", wrapper.CreateIscsiLunSnapshot)
	router.POST(baseURL+"/create-iscsi-target", wrapper.CreateIscsiTarget)
	router.POST(baseURL+"/create-label", wrapper.CreateLabel)
	router.POST(baseURL+"/create-namespace-group", wrapper.CreateNamespaceGroup)
	router.POST(baseURL+"/create-nfs-export", wrapper.CreateNfsExport)
	router.POST(baseURL+"/create-nvmf-namespace", wrapper.CreateNvmfNamespace)
	router.POST(baseURL+"/create-nvmf-namespace-snapshot", wrapper.CreateNvmfNamespaceSnapshot)
	router.POST(baseURL+"/create-nvmf-subsystem", wrapper.CreateNvmfSubsystem)
	router.POST(baseURL+"/create-organization", wrapper.CreateOrganization)
	router.POST(baseURL+"/create-rack-topo", wrapper.CreateRackTopo)
	router.POST(baseURL+"/create-report-template", wrapper.CreateReportTemplate)
	router.POST(baseURL+"/create-role", wrapper.CreateRole)
	router.POST(baseURL+"/create-snapshot-plan", wrapper.CreateSnapshotPlan)
	router.POST(baseURL+"/create-snmp-transport", wrapper.CreateSnmpTransport)
	router.POST(baseURL+"/create-snmp-trap-receiver", wrapper.CreateSnmpTrapReceiver)
	router.POST(baseURL+"/create-user", wrapper.CreateUser)
	router.POST(baseURL+"/create-vds", wrapper.CreateVds)
	router.POST(baseURL+"/create-vds-with-access-vlan", wrapper.CreateVdsWithAccessVlan)
	router.POST(baseURL+"/create-vds-with-migrate-vlan", wrapper.CreateVdsWithMigrateVlan)
	router.POST(baseURL+"/create-view", wrapper.CreateView)
	router.POST(baseURL+"/create-vm", wrapper.CreateVm)
	router.POST(baseURL+"/create-vm-folder", wrapper.CreateVmFolder)
	router.POST(baseURL+"/create-vm-from-template", wrapper.CreateVmFromTemplate)
	router.POST(baseURL+"/create-vm-placement-group", wrapper.CreateVmPlacementGroup)
	router.POST(baseURL+"/create-vm-snapshot", wrapper.CreateVmSnapshot)
	router.POST(baseURL+"/create-vm-vlan", wrapper.CreateVmVlan)
	router.POST(baseURL+"/create-vm-volume", wrapper.CreateVmVolume)
	router.POST(baseURL+"/delete-brick-topo", wrapper.DeleteBrickTopo)
	router.POST(baseURL+"/delete-cluster", wrapper.DeleteCluster)
	router.POST(baseURL+"/delete-cluster-recycle-bin-setting", wrapper.DeleteClusterRecycleBinSetting)
	router.POST(baseURL+"/delete-consistency-group", wrapper.DeleteConsistencyGroup)
	router.POST(baseURL+"/delete-consistency-snapshot-group", wrapper.DeleteConsistencyGroupSnapshot)
	router.POST(baseURL+"/delete-datacenter", wrapper.DeleteDatacenter)
	router.POST(baseURL+"/delete-elf-image", wrapper.DeleteElfImage)
	router.POST(baseURL+"/delete-entity-filter", wrapper.DeleteEntityFilter)
	router.POST(baseURL+"/delete-graph", wrapper.DeleteGraph)
	router.POST(baseURL+"/delete-iscsi-lun", wrapper.DeleteIscsiLun)
	router.POST(baseURL+"/delete-iscsi-lun-snapshot", wrapper.DeleteIscsiLunSnapshot)
	router.POST(baseURL+"/delete-iscsi-target", wrapper.DeleteIscsiTarget)
	router.POST(baseURL+"/delete-label", wrapper.DeleteLabel)
	router.POST(baseURL+"/delete-namespace-group", wrapper.DeleteNamespaceGroup)
	router.POST(baseURL+"/delete-nfs-export", wrapper.DeleteNfsExport)
	router.POST(baseURL+"/delete-nvmf-namespace", wrapper.DeleteNvmfNamespace)
	router.POST(baseURL+"/delete-nvmf-namespace-snapshot", wrapper.DeleteNvmfNamespaceSnapshot)
	router.POST(baseURL+"/delete-nvmf-subsystem", wrapper.DeleteNvmfSubsystem)
	router.POST(baseURL+"/delete-organization", wrapper.DeleteOrganization)
	router.POST(baseURL+"/delete-rack-topo", wrapper.DeleteRackTopo)
	router.POST(baseURL+"/delete-report-template", wrapper.DeleteReportTemplate)
	router.POST(baseURL+"/delete-role", wrapper.DeleteRole)
	router.POST(baseURL+"/delete-snapshot-group", wrapper.DeleteSnapshotGroup)
	router.POST(baseURL+"/delete-snapshot-plan", wrapper.DeleteSnapshotPlan)
	router.POST(baseURL+"/delete-snmp-transport", wrapper.DeleteSnmpTransport)
	router.POST(baseURL+"/delete-snmp-trap-receiver", wrapper.DeleteSnmpTrapReceiver)
	router.POST(baseURL+"/delete-user", wrapper.DeleteUser)
	router.POST(baseURL+"/delete-vds", wrapper.DeleteVds)
	router.POST(baseURL+"/delete-view", wrapper.DeleteView)
	router.POST(baseURL+"/delete-vm", wrapper.DeleteVm)
	router.POST(baseURL+"/delete-vm-folder", wrapper.DeleteVmFolder)
	router.POST(baseURL+"/delete-vm-placement-group", wrapper.DeleteVmPlacementGroup)
	router.POST(baseURL+"/delete-vm-snapshot", wrapper.DeleteVmSnapshot)
	router.POST(baseURL+"/delete-vm-template", wrapper.DeleteVmTemplateFromVm)
	router.POST(baseURL+"/delete-vm-vlan", wrapper.DeleteVlan)
	router.POST(baseURL+"/delete-vm-volume", wrapper.DeleteVmVolumeFromVm)
	router.POST(baseURL+"/execute-snapshot-plan", wrapper.ExecuteSnapshotPlan)
	router.POST(baseURL+"/force-restart-vm", wrapper.ForceRestartVm)
	router.POST(baseURL+"/generate-from-report-template", wrapper.GenerateFromReportTemplate)
	router.POST(baseURL+"/get-alert-notifiers", wrapper.GetAlertNotifiers)
	router.POST(baseURL+"/get-alert-notifiers-connection", wrapper.GetAlertNotifiersConnection)
	router.POST(baseURL+"/get-alert-rules", wrapper.GetAlertRules)
	router.POST(baseURL+"/get-alert-rules-connection", wrapper.GetAlertRulesConnection)
	router.POST(baseURL+"/get-alerts", wrapper.GetAlerts)
	router.POST(baseURL+"/get-alerts-connection", wrapper.GetAlertsConnection)
	router.POST(baseURL+"/get-applications", wrapper.GetApplications)
	router.POST(baseURL+"/get-applications-connection", wrapper.GetApplicationsConnection)
	router.POST(baseURL+"/get-brick-topoes", wrapper.GetBrickTopoes)
	router.POST(baseURL+"/get-brick-topoes-connection", wrapper.GetBrickTopoesConnection)
	router.POST(baseURL+"/get-cluster-images", wrapper.GetClusterImages)
	router.POST(baseURL+"/get-cluster-images-connection", wrapper.GetClusterImagesConnection)
	router.POST(baseURL+"/get-cluster-settingses", wrapper.GetClusterSettingses)
	router.POST(baseURL+"/get-cluster-settingses-connection", wrapper.GetClusterSettingsesConnection)
	router.POST(baseURL+"/get-cluster-topoes", wrapper.GetClusterTopoes)
	router.POST(baseURL+"/get-cluster-topoes-connection", wrapper.GetClusterTopoesConnection)
	router.POST(baseURL+"/get-cluster-upgrade-histories", wrapper.GetClusterUpgradeHistories)
	router.POST(baseURL+"/get-cluster-upgrade-histories-connection", wrapper.GetClusterUpgradeHistoriesConnection)
	router.POST(baseURL+"/get-clusters", wrapper.GetClusters)
	router.POST(baseURL+"/get-clusters-connection", wrapper.GetClustersConnection)
	router.POST(baseURL+"/get-consistency-group-snapshots", wrapper.GetConsistencyGroupSnapshots)
	router.POST(baseURL+"/get-consistency-group-snapshots-connection", wrapper.GetConsistencyGroupSnapshotsConnection)
	router.POST(baseURL+"/get-consistency-groups", wrapper.GetConsistencyGroups)
	router.POST(baseURL+"/get-consistency-groups-connection", wrapper.GetConsistencyGroupsConnection)
	router.POST(baseURL+"/get-datacenters", wrapper.GetDatacenters)
	router.POST(baseURL+"/get-datacenters-connection", wrapper.GetDatacentersConnection)
	router.POST(baseURL+"/get-deploys", wrapper.GetDeploys)
	router.POST(baseURL+"/get-deploys-connection", wrapper.GetDeploysConnection)
	router.POST(baseURL+"/get-discover-hosts", wrapper.GetDiscoverHosts)
	router.POST(baseURL+"/get-disks", wrapper.GetDisks)
	router.POST(baseURL+"/get-disks-connection", wrapper.GetDisksConnection)
	router.POST(baseURL+"/get-elf-data-stores", wrapper.GetElfDataStores)
	router.POST(baseURL+"/get-elf-data-stores-connection", wrapper.GetElfDataStoresConnection)
	router.POST(baseURL+"/get-elf-images", wrapper.GetElfImages)
	router.POST(baseURL+"/get-elf-images-connection", wrapper.GetElfImagesConnection)
	router.POST(baseURL+"/get-elf-storage-policies", wrapper.GetElfStoragePolicies)
	router.POST(baseURL+"/get-elf-storage-policies-connection", wrapper.GetElfStoragePoliciesConnection)
	router.POST(baseURL+"/get-entity-filters", wrapper.GetEntityFilters)
	router.POST(baseURL+"/get-entity-filters-connection", wrapper.GetEntityFiltersConnection)
	router.POST(baseURL+"/get-global-alert-rules", wrapper.GetGlobalAlertRules)
	router.POST(baseURL+"/get-global-alert-rules-connection", wrapper.GetGlobalAlertRulesConnection)
	router.POST(baseURL+"/get-global-settingses", wrapper.GetGlobalSettingses)
	router.POST(baseURL+"/get-global-settingses-connection", wrapper.GetGlobalSettingsesConnection)
	router.POST(baseURL+"/get-graphs", wrapper.GetGraphs)
	router.POST(baseURL+"/get-graphs-connection", wrapper.GetGraphsConnection)
	router.POST(baseURL+"/get-hosts", wrapper.GetHosts)
	router.POST(baseURL+"/get-hosts-connection", wrapper.GetHostsConnection)
	router.POST(baseURL+"/get-images-connector", wrapper.GetImagesConnector)
	router.POST(baseURL+"/get-ipmis", wrapper.GetIpmis)
	router.POST(baseURL+"/get-iscsi-connections", wrapper.GetIscsiConnections)
	router.POST(baseURL+"/get-iscsi-connections-connection", wrapper.GetIscsiConnectionsConnection)
	router.POST(baseURL+"/get-iscsi-lun-snapshots", wrapper.GetIscsiLunSnapshots)
	router.POST(baseURL+"/get-iscsi-lun-snapshots-connection", wrapper.GetIscsiLunSnapshotsConnection)
	router.POST(baseURL+"/get-iscsi-luns", wrapper.GetIscsiLuns)
	router.POST(baseURL+"/get-iscsi-luns-connection", wrapper.GetIscsiLunsConnection)
	router.POST(baseURL+"/get-iscsi-targets", wrapper.GetIscsiTargets)
	router.POST(baseURL+"/get-iscsi-targets-connection", wrapper.GetIscsiTargetsConnection)
	router.POST(baseURL+"/get-labels", wrapper.GetLabels)
	router.POST(baseURL+"/get-labels-connection", wrapper.GetLabelsConnection)
	router.POST(baseURL+"/get-licenses", wrapper.GetLicenses)
	router.POST(baseURL+"/get-licenses-connection", wrapper.GetLicensesConnection)
	router.POST(baseURL+"/get-log-collections", wrapper.GetLogCollections)
	router.POST(baseURL+"/get-log-collections-connection", wrapper.GetLogCollectionsConnection)
	router.POST(baseURL+"/get-migrate-transmitters", wrapper.GetMigrateTransmitters)
	router.POST(baseURL+"/get-migrate-transmitters-connection", wrapper.GetMigrateTransmittersConnection)
	router.POST(baseURL+"/get-namespace-groups", wrapper.GetNamespaceGroups)
	router.POST(baseURL+"/get-namespace-groups-connection", wrapper.GetNamespaceGroupsConnection)
	router.POST(baseURL+"/get-nfs-exports", wrapper.GetNfsExports)
	router.POST(baseURL+"/get-nfs-exports-connection", wrapper.GetNfsExportsConnection)
	router.POST(baseURL+"/get-nfs-inodes", wrapper.GetNfsInodes)
	router.POST(baseURL+"/get-nfs-inodes-connection", wrapper.GetNfsInodesConnection)
	router.POST(baseURL+"/get-nics", wrapper.GetNics)
	router.POST(baseURL+"/get-nics-connection", wrapper.GetNicsConnection)
	router.POST(baseURL+"/get-node-topoes", wrapper.GetNodeTopoes)
	router.POST(baseURL+"/get-node-topoes-connection", wrapper.GetNodeTopoesConnection)
	router.POST(baseURL+"/get-nvmf-namespace-snapshots", wrapper.GetNvmfNamespaceSnapshots)
	router.POST(baseURL+"/get-nvmf-namespace-snapshots-connection", wrapper.GetNvmfNamespaceSnapshotsConnection)
	router.POST(baseURL+"/get-nvmf-namespaces", wrapper.GetNvmfNamespaces)
	router.POST(baseURL+"/get-nvmf-namespaces-connection", wrapper.GetNvmfNamespacesConnection)
	router.POST(baseURL+"/get-nvmf-subsystems", wrapper.GetNvmfSubsystems)
	router.POST(baseURL+"/get-nvmf-subsystems-connection", wrapper.GetNvmfSubsystemsConnection)
	router.POST(baseURL+"/get-organizations", wrapper.GetOrganizations)
	router.POST(baseURL+"/get-organizations-connection", wrapper.GetOrganizationsConnection)
	router.POST(baseURL+"/get-pmem-dimms", wrapper.GetPmemDimms)
	router.POST(baseURL+"/get-pmem-dimms-connection", wrapper.GetPmemDimmsConnection)
	router.POST(baseURL+"/get-rack-topoes", wrapper.GetRackTopoes)
	router.POST(baseURL+"/get-rack-topoes-connection", wrapper.GetRackTopoesConnection)
	router.POST(baseURL+"/get-report-tasks", wrapper.GetReportTasks)
	router.POST(baseURL+"/get-report-tasks-connection", wrapper.GetReportTasksConnection)
	router.POST(baseURL+"/get-report-templates", wrapper.GetReportTemplates)
	router.POST(baseURL+"/get-report-templates-connection", wrapper.GetReportTemplatesConnection)
	router.POST(baseURL+"/get-snapshot-groups", wrapper.GetSnapshotGroups)
	router.POST(baseURL+"/get-snapshot-groups-connection", wrapper.GetSnapshotGroupsConnection)
	router.POST(baseURL+"/get-snapshot-plan-tasks", wrapper.GetSnapshotPlanTasks)
	router.POST(baseURL+"/get-snapshot-plan-tasks-connection", wrapper.GetSnapshotPlanTasksConnection)
	router.POST(baseURL+"/get-snapshot-plans", wrapper.GetSnapshotPlans)
	router.POST(baseURL+"/get-snapshot-plans-connection", wrapper.GetSnapshotPlansConnection)
	router.POST(baseURL+"/get-snmp-transports", wrapper.GetSnmpTransports)
	router.POST(baseURL+"/get-snmp-transports-connection", wrapper.GetSnmpTransportsConnection)
	router.POST(baseURL+"/get-snmp-trap-receivers", wrapper.GetSnmpTrapReceivers)
	router.POST(baseURL+"/get-snmp-trap-receivers-connection", wrapper.GetSnmpTrapReceiversConnection)
	router.POST(baseURL+"/get-storage-policies-connector", wrapper.GetStoragePoliciesConnector)
	router.POST(baseURL+"/get-svt-images", wrapper.GetSvtImages)
	router.POST(baseURL+"/get-svt-images-connection", wrapper.GetSvtImagesConnection)
	router.POST(baseURL+"/get-system-audit-logs", wrapper.GetSystemAuditLogs)
	router.POST(baseURL+"/get-system-audit-logs-connection", wrapper.GetSystemAuditLogsConnection)
	router.POST(baseURL+"/get-tasks", wrapper.GetTasks)
	router.POST(baseURL+"/get-tasks-connection", wrapper.GetTasksConnection)
	router.POST(baseURL+"/get-upload-tasks", wrapper.GetUploadTasks)
	router.POST(baseURL+"/get-upload-tasks-connection", wrapper.GetUploadTasksConnection)
	router.POST(baseURL+"/get-usb-devices", wrapper.GetUsbDevices)
	router.POST(baseURL+"/get-usb-devices-connection", wrapper.GetUsbDevicesConnection)
	router.POST(baseURL+"/get-user-audit-logs", wrapper.GetUserAuditLogs)
	router.POST(baseURL+"/get-user-audit-logs-connection", wrapper.GetUserAuditLogsConnection)
	router.POST(baseURL+"/get-user-role-nexts", wrapper.GetUserRoleNexts)
	router.POST(baseURL+"/get-user-role-nexts-connection", wrapper.GetUserRoleNextsConnection)
	router.POST(baseURL+"/get-users", wrapper.GetUsers)
	router.POST(baseURL+"/get-users-connection", wrapper.GetUsersConnection)
	router.POST(baseURL+"/get-vcenter-accounts", wrapper.GetVcenterAccounts)
	router.POST(baseURL+"/get-vcenter-accounts-connection", wrapper.GetVcenterAccountsConnection)
	router.POST(baseURL+"/get-vdses", wrapper.GetVdses)
	router.POST(baseURL+"/get-vdses-connection", wrapper.GetVdsesConnection)
	router.POST(baseURL+"/get-views", wrapper.GetViews)
	router.POST(baseURL+"/get-views-connection", wrapper.GetViewsConnection)
	router.POST(baseURL+"/get-vlans", wrapper.GetVlans)
	router.POST(baseURL+"/get-vlans-connection", wrapper.GetVlansConnection)
	router.POST(baseURL+"/get-vm-disks", wrapper.GetVmDisks)
	router.POST(baseURL+"/get-vm-disks-connection", wrapper.GetVmDisksConnection)
	router.POST(baseURL+"/get-vm-entity-filter-results", wrapper.GetVmEntityFilterResults)
	router.POST(baseURL+"/get-vm-entity-filter-results-connection", wrapper.GetVmEntityFilterResultsConnection)
	router.POST(baseURL+"/get-vm-folders", wrapper.GetVmFolders)
	router.POST(baseURL+"/get-vm-folders-connection", wrapper.GetVmFoldersConnection)
	router.POST(baseURL+"/get-vm-nics", wrapper.GetVmNics)
	router.POST(baseURL+"/get-vm-nics-connection", wrapper.GetVmNicsConnection)
	router.POST(baseURL+"/get-vm-placement-groups", wrapper.GetVmPlacementGroups)
	router.POST(baseURL+"/get-vm-placement-groups-connection", wrapper.GetVmPlacementGroupsConnection)
	router.POST(baseURL+"/get-vm-snapshots", wrapper.GetVmSnapshots)
	router.POST(baseURL+"/get-vm-snapshots-connection", wrapper.GetVmSnapshotsConnection)
	router.POST(baseURL+"/get-vm-templates", wrapper.GetVmTemplates)
	router.POST(baseURL+"/get-vm-templates-connection", wrapper.GetVmTemplatesConnection)
	router.POST(baseURL+"/get-vm-volumes", wrapper.GetVmVolumes)
	router.POST(baseURL+"/get-vm-volumes-connection", wrapper.GetVmVolumesConnection)
	router.POST(baseURL+"/get-vms", wrapper.GetVms)
	router.POST(baseURL+"/get-vms-connection", wrapper.GetVmsConnection)
	router.POST(baseURL+"/get-vsphere-esxi-accounts", wrapper.GetVsphereEsxiAccounts)
	router.POST(baseURL+"/get-vsphere-esxi-accounts-connection", wrapper.GetVsphereEsxiAccountsConnection)
	router.POST(baseURL+"/get-witnesses", wrapper.GetWitnesses)
	router.POST(baseURL+"/get-witnesses-connection", wrapper.GetWitnessesConnection)
	router.POST(baseURL+"/get-zone-topoes", wrapper.GetZoneTopoes)
	router.POST(baseURL+"/get-zone-topoes-connection", wrapper.GetZoneTopoesConnection)
	router.POST(baseURL+"/get-zones", wrapper.GetZones)
	router.POST(baseURL+"/get-zones-connection", wrapper.GetZonesConnection)
	router.POST(baseURL+"/install-vmtools", wrapper.InstallVmtools)
	router.POST(baseURL+"/keep-snapshot-group", wrapper.KeepSnapshotGroup)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/migrate-vm", wrapper.MigRateVm)
	router.POST(baseURL+"/mount-disk", wrapper.MountDisk)
	router.POST(baseURL+"/mount-usb-device", wrapper.MountUsbDevice)
	router.POST(baseURL+"/move-brick-topo", wrapper.MoveBrickTopo)
	router.POST(baseURL+"/move-node-topo", wrapper.UpdateNodeTopo)
	router.POST(baseURL+"/move-vm-to-recycle", wrapper.MoveVmToRecycleBin)
	router.POST(baseURL+"/poweroff-vm", wrapper.ForceShutDownVm)
	router.POST(baseURL+"/rebuild-vm-from-snapshot", wrapper.RebuildVm)
	router.POST(baseURL+"/recover-vm-from-recycle", wrapper.RecoverVmFromRecycleBin)
	router.POST(baseURL+"/remove-labels-from-resources", wrapper.RemoveLabelsFromResources)
	router.POST(baseURL+"/remove-vm-cd-rom", wrapper.RemoveVmCdRom)
	router.POST(baseURL+"/remove-vm-disk", wrapper.RemoveVmDisk)
	router.POST(baseURL+"/remove-vm-from-folder", wrapper.RemoveVmToFolder)
	router.POST(baseURL+"/remove-vm-nic", wrapper.RemoveVmNic)
	router.POST(baseURL+"/resolve-alert", wrapper.ResolveAlert)
	router.POST(baseURL+"/restart-vm", wrapper.RestartVm)
	router.POST(baseURL+"/resume-snapshot-plan", wrapper.ResumeSnapshotPlan)
	router.POST(baseURL+"/resume-vm", wrapper.ResumeVm)
	router.POST(baseURL+"/rollback-consistency-snapshot-group", wrapper.UpdateConsistencyGroupSnapshot)
	router.POST(baseURL+"/rollback-iscsi-lun-from-snapshot", wrapper.RollbackIscsiLunFromSnapshot)
	router.POST(baseURL+"/rollback-nvmf-namespace-from-snapshot", wrapper.RollbackNvmfNamespaceFromSnapshot)
	router.POST(baseURL+"/rollback-snapshot-group", wrapper.RollbackSnapshotGroup)
	router.POST(baseURL+"/rollback-vm", wrapper.RollbackVm)
	router.POST(baseURL+"/shutdown-vm", wrapper.ShutDownVm)
	router.POST(baseURL+"/start-vm", wrapper.StartVm)
	router.POST(baseURL+"/suspend-snapshot-plan", wrapper.SuspendSnapshotPlan)
	router.POST(baseURL+"/suspend-vm", wrapper.SuspendVm)
	router.POST(baseURL+"/trigger-disk-blink", wrapper.TriggerDiskBlink)
	router.POST(baseURL+"/unmount-disk", wrapper.UnmountDisk)
	router.POST(baseURL+"/unmount-usb-device", wrapper.UnmountUsbDevice)
	router.POST(baseURL+"/update-brick-topo", wrapper.UpdateBrickTopo)
	router.POST(baseURL+"/update-cluster", wrapper.UpdateCluster)
	router.POST(baseURL+"/update-cluster-license", wrapper.UpdateClusterLicense)
	router.POST(baseURL+"/update-cluster-recycle-bin-setting", wrapper.UpdateClusterRecycleBinSetting)
	router.POST(baseURL+"/update-consistency-group", wrapper.UpdateConsistencyGroup)
	router.POST(baseURL+"/update-customize-alert-rule", wrapper.UpdateCustomizeAlertRule)
	router.POST(baseURL+"/update-datacenter", wrapper.UpdateDatacenter)
	router.POST(baseURL+"/update-elf-image", wrapper.UpdateElfImage)
	router.POST(baseURL+"/update-entity-filter", wrapper.UpdateEntityFilter)
	router.POST(baseURL+"/update-global-alert-rule", wrapper.UpdateGlobalAlertRule)
	router.POST(baseURL+"/update-global-recycle-bin-setting", wrapper.UpdateGlobalRecycleBinSetting)
	router.POST(baseURL+"/update-graph", wrapper.UpdateGraph)
	router.POST(baseURL+"/update-host", wrapper.UpdateHost)
	router.POST(baseURL+"/update-iscsi-lun", wrapper.UpdateIscsiLun)
	router.POST(baseURL+"/update-iscsi-target", wrapper.UpdateIscsiTarget)
	router.POST(baseURL+"/update-label", wrapper.UpdateLabel)
	router.POST(baseURL+"/update-license", wrapper.UpdateDeploy)
	router.POST(baseURL+"/update-management-vlan", wrapper.UpdateManagementVlan)
	router.POST(baseURL+"/update-migration-vlan", wrapper.UpdateMigrationVlan)
	router.POST(baseURL+"/update-namespace-group", wrapper.UpdateNamespaceGroup)
	router.POST(baseURL+"/update-nfs-export", wrapper.UpdateNfsExport)
	router.POST(baseURL+"/update-nic", wrapper.UpdateNic)
	router.POST(baseURL+"/update-nvmf-namespace", wrapper.UpdateNvmfNamespace)
	router.POST(baseURL+"/update-nvmf-subsystem", wrapper.UpdateNvmfSubsystem)
	router.POST(baseURL+"/update-organization", wrapper.UpdateOrganization)
	router.POST(baseURL+"/update-rack-topo", wrapper.UpdateRackTopo)
	router.POST(baseURL+"/update-report-template", wrapper.UpdateReportTemplate)
	router.POST(baseURL+"/update-role", wrapper.UpdateRole)
	router.POST(baseURL+"/update-snapshot-plan", wrapper.UpdateSnapshotPlan)
	router.POST(baseURL+"/update-snmp-transport", wrapper.UpdateSnmpTransport)
	router.POST(baseURL+"/update-snmp-trap-receiver", wrapper.UpdateSnmpTrapReceiver)
	router.POST(baseURL+"/update-user", wrapper.UpdateUser)
	router.POST(baseURL+"/update-vds", wrapper.UpdateVds)
	router.POST(baseURL+"/update-view", wrapper.UpdateView)
	router.POST(baseURL+"/update-vm-basic-info", wrapper.UpdateVm)
	router.POST(baseURL+"/update-vm-disk", wrapper.UpdateVmDisk)
	router.POST(baseURL+"/update-vm-folder", wrapper.UpdateVmFolder)
	router.POST(baseURL+"/update-vm-nic", wrapper.UpdateVmNic)
	router.POST(baseURL+"/update-vm-placement-group", wrapper.UpdateVmPlacementGroup)
	router.POST(baseURL+"/update-vm-template", wrapper.UpdateVmTemplateFromVm)
	router.POST(baseURL+"/update-vm-vlan", wrapper.UpdateVlan)
	router.POST(baseURL+"/upload-elf-image", wrapper.CreateElfImage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z9b2/butIvDH8XP8/LHBwc4MKFG/udm7htsNMkd+x27b0uFIIiM45OKclLkt2Vbqzv",
	"fkMSSZEUZXGGVOpm8U0bU5zhcPjj/+HMfxZJke2LnOR1tfjHfxZV8kyyuP1zud3exI+EVpvigVTFoUxI",
	"dR+XcdZ+3ZfFnpR1Stpf27iOh6kJPVQ1Kdu///8leVr8Y/H/+999ef+bFfa/L7t8vz2Tklzn+0O9+Oti",
	"kRR5lVY1yZOXaFcWh31U5fG+ei7qaX496YeGcs0IJwoA81X5NTpISG5T4SuRVWORVt+midPqm0pG6FOU",
	"ZvGOTNKu6NN1k1Glfy6qaaV+LCpNgWmVVGlED7l9y1w3JDeH3NwigqE1HxN9HZc7YinKps2rcsnjjFT7",
	"OCGWqLjl+Q2YyJ+qiPy5L8ppeW6fqlWbc8ghzYstsWFw3WTU6NNkmjJNNKJj9hT1erBu3ttj9iTUYW5j",
	"lTWMo4FTdXisXqqaZFac1jy3yum4raYl+bKtNCoaTwP1C401kB4ze31+ycxKPGZRTbI9jWsLubMNyzrg",
	"cSzoIbPh8KXNqNNbEMokf10s6pc9WfxjUTz+X5K0TL4336fYtLOQxqkkfxzSkmwX//ifbvLhvL4aSllS",
	"UtZNKfF2m9Zpkcf0XpqonmJakQtt7oobmqg80Fa8/EBp/Nj8XZeHQd502/zLiq3qMs13AyHTrVG0JD5U",
	"xEB9wSfP4axqLK0btqbFaHNdjEnTzD/I6voRgORbInN/LApK4pxPUj9VthHWabaPk9r4ibbLJ+lTz4wW",
	"SUyjpCRxTaI6zcwY6HKRfDuVZUS27mNVx2U9xeGw354UJSNVFe/M3ypyJGVav5g/FvTQ9Dnjx/q5JNVz",
	"QVvxn4oyi+vFPxbb4tA0sGiD/JA9krIddGJ6ILZ5uwEq5ZPDqwFFRyjLEJdl/DJg1Q0AfXfnfaDlLtAl",
	"sGRCzgAnEioMGDC1eN++UmtKbSe3FG+F0ZH2sshzkvA2h4y5u11JdnFNDFuJ4pDXVg2v67clHMqqZeuL",
	"Hq3WbVGnT2k3IgMqtU2rBgwjoxrJ4pRGT2WRmca2ATy77HWhInvYrRTEjQ5dNM53h3hHoqTYkm7So3dP",
	"i3/8z8RKiinihpFfNtR/fdWB3/SEok6b9WOHKN7zrMWuSHJokBhlKPnWjPzTqHxVVu+jipRHUkZj88tw",
	"QJOImvW6GZUjbPrh6VCRko82E2Xq6x2OKBkPbLwYanwSz2+8u96VW1K+e+mWjv/4z4Lkh6wtqR1Bt8s6",
	"Wq4vmwFY/L5atQlczey7+Mk+9z2XZZASWJaU06aCSuly7KuaxjLu46r6XpScg/jJPitdg+VR03hGDeI8",
	"r55syN6A25C9TWbZuzmkV2L/m2dgKOff+c/281dD71LaTlr0w6C5vL1ShppTw8VYiZMz+cXi9m7zGsXc",
	"PbxGKfJENZJXmrhEd8iL2o4CNdW13Skp8jpOu802hI7k2yr6ntbPUMJdDacgUJI0Pz0bTrWXxIqC5aVw",
	"eU839BgJuvEaWnQDNsQe9duwa1fQOGmgpOnWMhtMuekWqNB0a9sT2pzENqtry6RbW8S3Oa3lskV4lxWs",
	"fDiiGZEHfWEQnG7BJLPvKNS1kqYYeBHTulMLZAiZt1aGJp+jZnxJadWwYv0JAr2ggsFekFmOPlJ+AiNw",
	"7VmCEQVKSqGS2o5NMgGyseDjlELqTaeYMUsQQwnnP2tQdmeI/q0WMa1HtUDUyAWtFXLkAtfM9dim3fGC",
	"OseAGtZBBuS7GktHcISuvXLAkCJrQLE1sB0BTYSOjQ0fEY0svLcBZoQcMHFh4HD+OThS2nnkRHyx0prM",
	"4toJ0ohtEdRbvam/erPO5onVDGoEHJ9Lx46gYUBQwbq+ILMc46X8wNq4jieCEQVKSqGS2o7dMgGyseBj",
	"tULqTaeYsVkQwwj/GrsDGb37iA8VP5Lv/mbH9ZOXIu3lNL/waP8ev+vo7q55cvdDXIM8ElqJ+4/2B/+k",
	"32/zXIN0hYBffiu5RaKSVYgqfiqf+6tyJZuUrGSXrtGV/HI6I2B37Cwb/yVudLprd3GZw37yz+wqnn/m",
	"P9lncT3Pvve/bW9q2kt99rH7+/QdzQMzjQLcyvwMk6bkUNVFlv4Yu4A/fT2/o8VjTCPVGOxnWxydNPkR",
	"DX/K+OWPQ5zXKUWvFiR7H7sN5ZpRrJoByLiRPGHZMyGPafQ7bXIjTG0kcFzI1+rDZmfX65JdjaTo0Tvo",
	"po+80ev1pmp3XZI0sbx7uL785+JicXnzeb1ZPSwuFlfX6ybh47/vVw9frtd3TdrtavPb3UOTfLu5j9ar",
	"hy9t1vuP/15fXy5voo93683iYrG+/PKp+e92eb/+eLeJ7m+Wt83vzd3D8sMquvz4+faf0u/7u7ub5ue/",
	"15vVp5br9eVqcbHYXH9aRZ+Wlx+vb1ecR8v4t+vN7Wq9Xlwsfn+3jn6/u12dHu3QlgQ9zHiOPsHO2MBk",
	"SXB6Luvhqc8IleWUcFIXG2WYUdEpDw/2gwLEuE+Da0cojUsnUfs5T1XMXjdge/fvzYr9F92vHqL16vLu",
	"9qqB8upmff25QcnH1cPm9wa0y9s78fl+9XC5um3hypM+315vos+36/vV5fX769XVaU2+no2DVtoc9g3w",
	"IqC2DfASpFWH3WRleI5kmrHUlcW0/YPU6a1tJua2yTCub+y09KElNbaJSVvhTjvcaf+id9rScts6M0yR",
	"ggqmSkFmiWgpP4ERuLaWYESBklKopLZ4lwmQjQXHvkLqTaeYfiCIPZ00vd4qZuYVzLyrFxh3zLRsPSGL",
	"l2eTWOlOCEF9pCOBdY6OxnIo45khNXDtcB0XChGQggS0HbtEbkyjwEetns6PBjHjVUcJpppp6c/fSdox",
	"1R/smziKh48WdtTtsbv1Ep8bSNjJqr/yD0v5sJR/O0v5/q2uZVagEjsaoBI7ol0Ny00g2Z1bqGNDQTJS",
	"mIzW6BbZUY2DQHlP6EmPKLR3pLh1vvbOHE4F22GqhNgi/eyPZI4UWwmKrgRsO6pRelKB7D/AUhBxcY7Y",
	"GQtazN5YEIMAJ1GhaulXzzCcSVQo2WEIk8mcGhd7+KEw8Kx3/EGIYBEOB8PhYDgcxB0Omv3NgIkwCpeo",
	"MUqXyEG9RaFD1tZPS0sMKbIGFFsDWK9SCR0bG9vLNBbe2wDf6yQmOAaaIyc4FaZJZHJMe8j0oB6oEmJr",
	"7Kf9ZY4UWwmKrgSsG2qUro2O7Yg6D/8tge+KMhcoB8ldmm1eWBNwIpjSOZVlH+uzw2ri2oqcD4WJSYFi",
	"2vYYKT+ukeC9Q6b0pU1MT+C08Oe0vQ2gdWbgKz1OBXyZx8lsn2D2+QmMwPm5H2dEgZJSqKTWTyslAmRj",
	"IZ5SyqTedIp6OsmJwYSSD0zrzEAFcyqgcjmZbW/o8xMYgXPLcUYUKCmFSmrdGyQCZGMheoNM6k2nqN7A",
	"iaGEE05fJ5+f9G+b0E+GZRbEmYf/1609b+peReqhivj3wAqPGVSFfzjE37mhUcTJ3YqfSSV45HByt2rh",
	"ESPo51BNVkXNLA54u6Z6sTe+XcuqKC9y4ptnVWQeeRptN/d7miYx4nXaz3jLScqyKCPI1nrUZ3u7H4oz",
	"Ar7kMeyQsqKDkwU8q5q95ztpwtk3yrrN3xIWZbuz3p/wnGzNdtNk/4u/+LI/Kzwm+4Ot93VSVmNe37u4",
	"E1GV/kA99+rfb+pvMllbcD0ramNcWSV6AVVxvp7uJG/wMWdfOfT7RqVfcucAStopJwG8KwpHASLB7qVj",
	"1+jiUX37gz+ab2DAX8y3f4sPHBfiq0jgDyhf9py0/VN5NCk/9zc89J9+bJ/sD/ytffMnT+4wyb+wX/xj",
	"D1OeQUoZf7KpjyZSy16t7m/u/h2tHh7ad7ndz9WV+PP69sPiYrG6ut50f93ebSIp03pzdy+Imx/3Ivm+",
	"I/h8/+FhedX8PSHahg1gXLJPd7fXm7uHKbLXeXZgLM/34wNsIZAnCNgy5rKjhk/o6rAC8y2skAJdCyu0",
	"tu6hNSJMDZ2dGCvcKEZwihLc2lu0TuXSqAif0QN6vxpHeY5WOATn0cE6/+9inQ/alUkLRaAhuKCDGoIL",
	"QmtrfYkCXCt3a3PBioLlpXB57S34ZRJ042Es+RVij/rFWfQL8mB1GqxOg9Up1ur01Anc5GEzOzBA3wEI",
	"euLGwP9RN2NMHWtGXWuGvwjoGczhh5cfhli+qx8cyhrdobeHTAAX6KazXivJYQ7dIdIDnbjjaiCfZk/f",
	"NPeHc7Br9p4OeMneE9raRcgUBErifI/fs6JgeSlcXmsLCYUE3XgIKwmV2KN+UZYSPTnYVoKdi4K7eXfF",
	"Y+rl7Wk2roPze6NJ84WmCOwANSE5fniylR56K4YwXseYrfs0WEeYqmOM1DHm6b4twsfvLKcNEZL9wcE6",
	"pKMmLuQzGEA0bKlTnahbnRwMQxj5HGrpr6unb8HZvRxoOuNEsHmMU1kOK312Asrv3McYHwoTkwLFtB1C",
	"pPy4RoIvOGRKX9rELDU4LZhuyiRjunNKl9H4MVNh4kOUGYYKiTv1UVHqpaIOw6rKxbvKjIZnZfKc1iSp",
	"D6Vy779cPlx+/O//Wlws/vX//Hf03/9lNAB4F9fJ88eiqg3Op6Ooyc4vEYSP557CxLCOO39epxaSmyaP",
	"blvTEprMat6VafLt/jmuSOvdWhZlefnP35YPV4uLxfu7h/YvYx0bBptiX0Dt8uJ9nLCHN7qdET1kORIj",
	"ZfHdm3P+nxIGoiszqplGdbFfTZBtWn2LaPxSHOppOU412aCJtmnZm6ad9kfHM/51sdg3GJ2i0NB8Cg+n",
	"TdYaMl6mLPEFr6pJZc8k3T3XllrAxMzIii2hVtPkCAIuFnmxJS24yKm4GzPiajKqZlGlHBwWatwX30kp",
	"4dTW06FAlmn/3jGVJbFje9/Q3XOycdZg1WsaRqq2jJNvP39gqeOdUG2U5tFj02dPKAQ0tth291aM6Zo0",
	"mS7YYHCi408uKxRrWD7xXUgGwmzoGFoKM10KLI7O4c0U/PasfvuqlaQ9G7uPy9iIkl9mOTE2uINmD9vx",
	"/XRU2y1pVKuaWALHXzGmjMZ5+rt3977VpW4O6tZXhJJT2P/eNKDV0khvbk3WjtFJWT4VRzImxzau42Gq",
	"X0BpEp9UoDe9tBW7sFHPeCDDbngSsQzZT9twhtJqvI+8JFJYpg5d7Dv7gY7L1K41+WOF9m/2QXoCIT9+",
	"EH18qf4Un/t1msgiJSnZBryURDlrJWcRAaOMYw5/I2H8ho80JZr+c5P3RC81945fYN76NSemv+O8cw4j",
	"4Ku8dDGK7PedC7IIwCsXZAmzhQnTTp5AzPVqmAo4NY5MDmhsOts50xM3Bv6P6Rlj6lgz6loz/Ll8z2AG",
	"9YRnIuGZSIjHFozfg/H7L278bn130e02Yf4LWxKg58KWxtbBJMtMALmd3SG2XChEQAoS0NqtJM+NaRSE",
	"S0lB50eDKHeSLSWUyvpJIPwxIOIZIOQBIOjpn5dHf5DnfqCHfqAnfrjHfchnfd4e9KGf8qEe8UknN1CX",
	"VKaTHNPWUC4C5qAKUwLMXZVtCafPpyY3UeKsCr3FlTgQVxb+93GCNXWuH3WvH36zK7OYRU2z2TOwk3bA",
	"mwTFAAciOexNBUR64KsKRA3mM/uIxroXgDm0FrCWgNcE2B7g2ig2K3aVeIiHx6p2XgbfHSr50u76arW4",
	"WKwv19eLi8WX64fN9Z3xCuiSFoftdZ7Wt6T+XpTfNi/7gTXl9f2X/1pctP9FVx8v70cY9Ue7AOON/uXQ",
	"TzIsijUj2ZPvnOS8De2hLprV15GUJ10rSZFik87MJbJyUshsYsSTz6TIq7SqSZ68RLuyOOzP1A4uOZQl",
	"yeso2R8i+73zNq7jhOQ1wsbsdaq1TSvWfGQbbWPLNb1CVZK4ggzPrFcxIBTlqiyL8rLYjjze22q9aOSp",
	"o+RIKa/T+mVZveRJg7JuDLETbTUgNYr0FKf0UJJGX3FU7eMEfdQfV1FG6rL40zImc1xFJcmKmkSPcfLt",
	"sLcP5RyxARAjJbeYPz/4Pr/sSXlMqwJw//axpzkRpnp44mz2oJpWUUxp9ETj6tmuNdIqqdLoaPmGncaP",
	"hP6keYSmCckrEpE/92kHd8tDXEZXkTKNKYwk3eXwgmCvnW86qvH3wqCbgixO85rkcZ60B0L2wsuEXfQu",
	"AGke70jWzEe2OMriP6Pk+ZB/cxgIGh7755cqbdTTDn6yuYxXhtGelFHeTApYFyB1WUTxMU5p/JjSNkjM",
	"M0m+0bSyeD+xL9MsLl9+Z0cfmmVKmdaNwLYPC/KnwjYr7+FjNjFSyfbzIRfAnuIbeTE/hhBj0XAoKeq0",
	"mwbti6nE7Hyqt35qWvKyabtuSu5ekmgDHGMl5BCydpVhSrjoNWi0hNeP9USdLD10z1aZTqd2tZCwu8y3",
	"v6V1TqoqoDig+JdCcUWSIt+GMTig95dHbxiFA45/URx/D7gNuP0FcfujG3bD2iFg9xfDrsZKBnI/HI8v",
	"MPSF89h2UEk3KjPb1dEursn32C4Wb5M/J3XGPKJM5093ZXtHxk7R8Q6Eek7VnhBscMjxh1L1vr3wAVio",
	"1PtPo9cZDbuKlEf9Rmiyt+XH7CkiecNsa3fQvM9IBqQoi2NapUVOtu1FV1KUpMIaZph4RU9FGcVJnR5J",
	"dMw8cFb4RS0OPHBlDoQfX2ov1XcRq9xmMawRS5IUWUbyLVN8e1sJBFvD40hK577J+bj0zJK0/UVHUfVS",
	"1SRr+1KKvoArD3me5rsGO/hj8YrUdZrvKqQbD7u7mqp4qr/HJYnIFmgOs2aUq+0JM5KqLvZ7snVURF2S",
	"OrG8BqsO1b4DqVOZdVHHNEri5Jm43kYwVo7jXs/l+YczC0zf7ah9XM90nDwMhjZhJvnLRR5ismI9Hq3F",
	"loPzFX3LxYMKjjFNPYhz7KxJlonwAzPbiHPcVufqlOpkkNDW2gE0Yx6z6Kmg27M10nEaII9ZVJNsT+P6",
	"bFszO1PBpOOvn+aeq9kB/hTzD90vlGwnqNv8dVZazFtWGzOXVUre7YyuTA0TXh90l/V0k/yqIdkb8rI1",
	"biEnWbDe3C2vosubz+vN6iF6v7y+aWOoKqm3q81vdw//FKFW1Y93m+j93efbAdXn2+Xnzce7h+vfV4Zv",
	"H1fLm83Hf5+yl53yDdYbRUYwW6t9XFXfi9JMww40oqbDRNNFiHMSW4JDRUq7Di3ElIjaOp1oay8+pQye",
	"Jaw9SjHa64xFVD33kO6zG3mOhm2v42j0sKj9ah2f/MSpE4DH+GLodPzzviay3GLoZr8sBuAWM292FG5r",
	"hw9xroONhzkfpI97BhMNJWKV899yBim+d//7tI8wiUTOPR2FfDzc+IlpoVXkq7gjGinQs0cifCkAp0T4",
	"QmaLvT37yDvsG4AXTYYyLGIvD0oEPdNC1wv4WgtVt+CwJzjs+TUd9ihLLfvcQK8YggzoFUPQ2boskQig",
	"NXJ2vCE4UaiwFCystRsTmQLbaAh3JgqtP82i3JoIahSly6W5WCI6RLDtWbiLMUccW86buleReqiiS0Bb",
	"iccMqgqOcoKjnLfnKMdheHQbGR0HxZnGQ7eh0HEUdBwAZxz7QgTHEMHxTUVwJFmc12kCRY5ER3CEtMbS",
	"kRljVP41frTLHoLjIgWwt+fTx+48IzokxvS1zqQ7eMZi7Bhbvtxlp7pKEjv3VXzD8HxKGo+fId8O86Nx",
	"Jc020MbA7QrPOEjvI3OoDk36+Bxauomg82ViImFfsMf6Q5chjMLwgYcPEc5BeAiRPkHKovgDkXKq6ZyA",
	"eQLh+fhP/lm4xuAZ+oTx+4mUF5uKcmSvGPyjnCSyMVcYIg//zYOiDD1Q8Pgohi8aUed+QsvPEvWs3O2E",
	"nlukawRtSPnlMMkymIvBZwS/uzF9MpD1HiMMhNJHQSp7jBAkSqLIKnmKEDnlNCnjiPeG5VSGaRbcAcQ0",
	"L5Gzvw4b9f3Q35CNZ+Fs+hcQnEpKkTKxZw9SJp7CMw3fOvDMhi8DotZ4ekDQpZ6+4ONvF/gn/pN/lp4U",
	"8CxyEo/sw+wZeGwf/pN/lp4Z8CxyEs9mfA+wPPHtJKFq+L+0zmlganhDYGBoymVgJpuKGrgonw3kY6Ur",
	"5clvAlheJYln0434ed5BukYgA05NExktTPIFA5u8nLFij885qIn88loziOcX2Xoyz64YuPPMaqLI2pqx",
	"izzdL/5RM1vnufRkHvrKYJ7OI1+ZPqlkWjfRUweZn38Mcj7/ULOZxmnTF4XIAGrDB07ST43ylDhpVSBZ",
	"fPMsUoqcabCI0lPlzAbZh+k9QSkNpeInt3vQbLi5AYSePG0moZkp8yxKGs8ow0wG1wlTiweSvCSUvEtz",
	"G1u8YSrJY2Y8bXpe1OyqUUGcO8oLzv4MNkS9os7FAK+XCLct/ds03Vp6dXXmxoojrJtlRNfa0WOaT1uZ",
	"S28a5mrbR3PjnjIktGiiN2sbyCuINg807Kanre8U2PQTg5w4NUFwwV/THM9Q5jwWebiC4EZ5uHLmsssL",
	"dl7BzutXtPM6cT6/4X7m7celLnxwH9f2DB2Jn88CRPZza1vuIHLw+Wm4fdCDE3CGh3Paqwuhc6aLr6fh",
	"/2aXTiejsyOWTRMn7iMHpIgA4+YIu7OvnuaNrowuBL5qgpchj+nQiFfGoM6m5ZNSCCzmFa4MWNQr6zLC",
	"8jIsL8PyMsT9DXF/Q9zfEBM1mHqHmKghJqooQdoZQ9X0e5GDi4CpCVMCTE12JZw6kGJ+zPhG9d3N59X6",
	"4/Lhn4uLxfrT5l/R3Zr/9fu79antI+5y7yw8pyjZfXlX0QhQPlh+9o3k5/2ujLfkY1rVBeta530vyeNN",
	"GVbZ8PPCfVnsSuYta1BSSapDN5EO3RfG1bfocBi7I4U7N9l2Hqn00zYhn5BGLtvK0YnawG/2aE6tJvqQ",
	"Tja+lixR4Wd3vOV6s7juZ2+MdqB1b23W/OCmSLx9uT2S+D2vqxNVg695TDha8jwHhi7FwY8OXUqb61zM",
	"PmZq0wcstzosL4Cx63K9ZUIB0lGIdLZbHZ7Zw+lSOK0Mp5XhtDKcVobTyl/5tLLfN1hmhSmX0cDUyoh2",
	"NSw3gWR3bS3GBqY6CpPRFvt9dlTjwHEvEXrSIwbzjBRKpmyH7XPDVNuTwTTb01miXyYgQArXtus5Uaiw",
	"FCysbWdQKLCNBu8SKq0/zWI6Rk+NdHEQXHUEVx1vw1WHL0PZ1zxhmv1Mae5TJBj/eL+nadLe1YDvzJY9",
	"7dQxklIM7N4MWwrs7gxSihwqwr4AmWqSL8RtrsrZosnlckCOgIF1ALr/BddDds1iFwlH9eZyeiiXyNRo",
	"IPZHrB3ZuqUyWzMqTmMAulJZWxwPKwWBGh1aC2CrI2pSpVVN8uQl2pXFYQ8eti57Dh8aBpMmp8MSYSOY",
	"hwJhgxm4QN3bkNU0P/RRBFrnDMlhq50hveUC1URIkJSuy6whR4qtBEVXwnZJa6R0bXT4MtfMw39LYJa+",
	"Qy5QDr0tCXhguxKkFrd6ohDYWIYrAzZ8AcrQvZ7ZqXjgK8323tJAiC3S+UZzwJFiK0HRlbC++DRR+lVB",
	"58AOfP9tCEI2jTTmLA+yyhkvDVVP4BLOva7QVZ1LfUMIll8rBMvQxyPSDbLBWSTaSbWRl0fB/HtqNhRC",
	"Pdae+qw93tW1mdkM6uzdidpt8iX3o9YHAwNHpEgyQInMpSlS+8IjKrpfSRyIK4sZGp2zps71o+71w/cS",
	"mcVMagJvLz4WVT21IO8Yw7YU9nxh2wgrvsIBMIBvTzPBEzLzylwtGrAvA7SOAMgOXDnA5A8GjMGA8dc0",
	"YEz3ltmAyttDFbe3Ru7eHrl795bYWyN3b4/cvT1y9wjk7jHI3ftB7h6H3D2cRPJQb7fYVHzaWy9RhZd7",
	"S6m4T3xYkwkyYKsJOtveIxEQIIUzNgQnChWWgoW17mAyBbbREN1NofWnWVTnE9RgS+H4kVDwyvumoZpa",
	"yjLWsLU3hDNs9W3HeRjlwk6NhugYtmb7RlJ8sc6G5waeFF8V6lAVa2t/M603VXQxTECisLAnsKcHKi3w",
	"8YFKDASfoCIYMr96hqJNUKFkh2KsJ3NqXMTrkiEDz3pHvTRRWaDJedwfHBUY7hIhtkhvyhccKbYSFF0J",
	"MPplSm8qqJmbD8uJvKNqfYOcnMTbaBiAEyOFMUx62KEXrAbAcy9oLcL7x/D+Mbx/5GHeDdHg0IS2wB2h",
	"dSjYOcq+iSl1qA11qY0t6MeIvaqjD/UHlkmKEohAhkLtVPg86sDgQ6F2qhMGIyq5B7XI0R0tpVECQoIG",
	"ao0WNlRrxNZw1KgIhsyvnu1hp1GhZLeHmU7m1LjwudjAwLPeMfOyxgJOLkVFRRoyqJFV0VYnOhvihY9/",
	"wwqVP/VTXeqpunhzlAGfmVRnjoDrIPRISF0nHI7yJP6Zvqaa3eA6ynMGrbgBeZzp66qbx3X2XxURMXoO",
	"nEvM5xT9pzTFLF1AYj6nwmbpFDL3OZqkjzhutyKRIpTDFngSIXBlJ1HartsVEgKmcV45SrwoXGSKENl6",
	"oa7S4BsRsUTXqH1qGbU4l+gxtCwIPzQ/XOWcEK5uTgnoNz0JAdP4aFHOi8JFpgiRIf1GosE3Iq7fyNQ+",
	"tYztN5weTJvuytbHB3t+kv5Az8hDTg6rLSMzn6LNMHUbSqE+FUC9KsBhdWTmNqtKqz3pAmE7ydty8YFK",
	"zoh44jS76nwgkTPyVWkfCBScZlBhiJwUIie9wchJ9b51xAEINlTvP40+jefsIBYigqGFbjh7kH2LncRA",
	"uxaI1MfsKSJ5k2Vr90RAprB/WCBH+ZlseJ4Z1jkEFaxzCDLLEUvKT2AErr1PMKJASSlUUttRTCZANhZ8",
	"NFNIvekUM6oJYjBhRjJYr5MpAL2uLI5plRY52bZujZKiJBVyJWPkFT0VZRQndXok0TGbjzN+JWzHnMzI",
	"3f9yz6ZUOqfC6KwKw6+2Lbm/WpN4Rq1vnL6WGjxj0Tf6fONtfoSpiG43mB5qYODqB8FmxmQmzq+uej/4",
	"NjOeS0l+MD/CeeYmyEhWlC/R40vtZTEjs/ODd40j8c3y9dTrB9oaR+/68ANmneXMavY1anscp32OzK8x",
	"FnscfX2Otz5H2DnH1HKbxbBdqExhvwstSVIcSel8bzfgg0e9iZU/sWZoqkEZ1F/Vqceq41Fv5DWjKl3u",
	"6RQe7ih0vaNT+cysMnfkud7OqXzcETfnzVxJKlIeB8cR1UtVkyxqvqUJXg8WvF3Qacd+XvF/UpO4oNyO",
	"/bxqc+kVlvznaJpDnqf5rj2mQz9bUZk44F/nQ/wwmlttDtDV+XiqsQMYB4xmUF9F6jrNdxXYKfuaEU65",
	"SqqKp/p7XJKIdNHP7AtaM8oVI7RiD7kqHhRgoS69ONCFN65GwAtwTK3qYr8nW7ehR2WCH3oGfIgfRjP0",
	"HbUA6qnG1FeN8UPPkNEs6itJnVi6dGSZ7Tfe1aHak3zrjGqNjQOuh5yIL1YzNI5eBPVWb+qv3g4IN7Ca",
	"QY11Ucc0SuLkmbg+CzWxwqNxhBvxye511IlH5gg3rzrAI3SM3XxqdTSS0bg4Y9PD1b/OaXbVOYPRw0W/",
	"zskZgjNf7velPP9wFvT5hw/ctVyIDzbzqssH3FouXurqA2gdm9nU5sM/g4GTK+Z8eWQwcXsVVboC0Zfz",
	"BRM3V1i+hruFriQPxh1DRq7Y9GTQYWD2Gmp0BaYn8w0DM1dYvoLJBszhKjsYHHdXCnW0qjC0kxYVX3JC",
	"YlwISVupDxW7bkAvfiQO+L6uMiEeuPiHo8yd+qgo9VJRfEfWuMylMuf4lhoXR5R5iWypc5pddY6I8xLQ",
	"UufkiLzZQ1m2pXhY1Az4OCLQ05JmyOsVVOiIQ0/rmSEvRyy+wmrmUJHS+rE4zwx72SeoYK/6BJnlM0wp",
	"P7A2rk8GBSMKlJRCJbV9hikTIBsL/gxTIfWmU8wzTEEMJTzGNPWwNNDZ4EdmAydvQvkfTAZFUG/1pv7q",
	"jR+UTazmUGNC8pqUyyQpDjlg5/ZFoZuyQTluKwIOXvZlW9nxhUUus2YLC1tmw5aUFTPAmR4durywAZUT",
	"wcZSTmU59/XZCSi/6yjN+VCYmBQopu20J+XHNRJ80pMpfWkTM+Vx2opkcV6nCRQ5Eh3BEdIaSwcsEKqZ",
	"Nvw66FWLQmJvXXPMoqeCbkkJH1az9y3h5GjVlwAcYOEFAIda+wLwdkeu1kbONkazWRa52hM5WxE52w7N",
	"ajF0zKKaZHsa14glS7ZhpBbY7EuB9i9UIdA+Zl8IQk02TKFaseEJVcIUz+9pnZMKYLz9W0cwxfdHkcPR",
	"93uREzvGMNXa84Wpd5qvuAJbFI//lyR10z/Z9U5L+DlP/zgw8qbYbWdyHdP7stiTsk5JtfjHU0wr0j5s",
	"FUn/WQAD6VlkNspa5DlJ6nXNwlCRdj76n8Xl3e3t6nKzulpcLK6u1/LP69vrzfXy5vr369sPi4vFw+rT",
	"3Zfmz68G6S6LvEqrmuTJy4eyOOyBOkg6TTZ/mpRj9KNn+NA+2/njkJbNkud/ulwXDY+vBo0kvcjRrpE5",
	"qvJ4Xz0XdaUM5K8m0NR0sCVVUqZ7/nJiIAPJ67R+WVYvedI08wEwFqwGpMauNVL5LpY4PeRnqrgu+DdU",
	"Nk0EbNltt01KEtdkG8W1UQly37bVUPehPZA5U7Uf2iHxxEt3bUGkFc7HBBX4rTQGtUpKvOByywJ8NY+J",
	"yqDFxkj+Msl++Ip3u5Ls2MiqjWz8MAtc/ZZwKLaWrS/aqoaNwtIiv4/L2IQWpvMxKE6NQP1AEKXb6vSx",
	"wJjv3hMwhzI1oFliNBD3Qq4+E8hGqVeEklNK3cZ1PEwtSRaneXQs6CEjYuqRaiW22Kbp/Huz5pg0P9EE",
	"lVc4mm5aGTlbm0rflVtSvnsRCx6+nmBdcllHy/Vlo1Lx+2rVJkgYYlnkFJZpMJWxrMN0RpBuWY50y5P0",
	"IYJlGCQr2QUf8ZN9bi9Wlv2fLFkaYthXOYVn2m8VnfS/2ww266m1hA/AwHTNEX7ua5vBYsy0zH01aX/a",
	"SuqtrlSO2VMkht9zx6LjumW+9QkfBN7+OkXUdGq9MtjDOeHGyA6wEuBiv8KKQBZ7hPCrr3UDr5bP9QPn",
	"iV5HhCXCiEY/N6QnwDcXBOBtLzGDjWPL2yt7G2yLmkzPCYaFFPRMtGVxc8hNApiWCKYiYaelPkqEnaNC",
	"S7y927xyQ949vHKBxpWt5ZuEE/s3kzbnX7YOB1fAawhDGdPqG5YIetaBrhfwpQeqbpYn/ykwAEgKDf2R",
	"Wgf9SO3DfaTugT5S6xAfqX1wj9Q+rEeKCOiRYkJ5pH6CeKS48B0pPHBHt0+FzoA3DdXUIMZYw2Y6CGfY",
	"jGbH2bB1trzQk1aZOzQdwRG64m3AkCJrQLE1sO3JJkJP1Qde38JGE0EFG08EGQhSgMFdEPjSIQw6gOFe",
	"EMCgghn6FUpkg/nEJWoyEMSY0HYh9mKIvfjGYi+OnFxDlz63x+zplrOx3R2PFg5bHPktG7Z8QpU9eQA/",
	"/Y5QOmHDvw9VmPgQZYaHjBJ36qOi1EtFHV6Aqly8q+wvi/PJqRNU8/H9L2YccfGrWyD8lNNj2Nmfy/Hm",
	"qx1rAo8ze0tNkGOVqTH/hDUmdK61ObeFigCbceeQADbvYiXQBrHJ9ZFsuwNaRsqEsJWkTGm5wldJCJjG",
	"dc0q86JwkSlCZNtNgEaDb0T4lkCn9qllzAZBpofShquXcPUSrl7C1cv8Vy/SNgJpgDC1BpBKwNkbAArA",
	"mRdY3vSE66lwPRWup8L1VLieCtdT4XoqXE+9weup/vjX5UJq8jKoL8bh6glQisMlU7hcCpdLZ3m5VG+Y",
	"C3XheuFhuf4YXd7drq/Xm9XtZnGxeH99s4rW/15vVp/kDyPm/0dS1r13lE3xJTvxTqbJTLbRU1n0rlgi",
	"H6+sTvA2XuPsD+/jfL0nZPs5T5U3H/erh8tODw/3n8yVPlR1kaU/yJKSsn44UIK7q2O3GLYO3NUrkm1a",
	"Ca9aQ3dY9XNJqueCardxp0oRldn0tFOPmUUN0K98PtDiMaaibJeruau4jjsvjDi/Hw7OseSWPL+nhE9x",
	"Sg8lcfet2rpmw2vpDJ+bjl5pF+UuztMfMb+DerXG9BZ8yl9kIV8O092DSvgJHOChPg6u9EwPdRkkFNCd",
	"HuLe3utbqW52/kFw86ZVj49shhyd4MQT3b5uU49yrSbNnh3qJWRPPvrutZ8R+ctXKYW9Fp18HDucd1hO",
	"wwdGwmcYllH8HH89O/LeVQngthwmKdnUgFrL0S8KkRIgYDn2we5lrRp5ZTlIkTMNtKmnypkNQg7TGQHz",
	"IrmUf4y+++0x9BPWvuPzLG4RatWfAOvPVzEKMwvt1xwMWwbAEAxbhLdFu5tbW5UJ8cDF/wmKzJ36qCj1",
	"UlH8CYrGZT6Vwa3+LO0MOXugRR+QO9Baz467t92kYRWA7oZGXh4F848wQyHUY+2pz9rje6qZ2QzqdDya",
	"EAtNNAIlDq7HKzOqB48xiYNz/fB4klnMoKZgkBcM8oIvhDdgbBYMLYKhxdsztNAvJew6zJ1ENdVvvN0+",
	"uIZ/1rgQH2zmCu/uGgFa4+Klrq7B3GcNAu37gko9pXXEnM6MeOT2Kqp0BaLOzKcCXGE54DabSj1cEhqu",
	"Axyx6SlOtIHZa6jRFZieQkUbmLnC8nWCRfu4QXedl1UmxAOXWVXlGJzceU6WuTgGJJ91RvZoXeHjOHfI",
	"yJdIs6vOEXFejnB1To7Im/3w1pdVzvBq2w2BnqbbIa9XUKEjDj3NtUNejlh8hZk2hEkNYVJ92Ny3pl7k",
	"XZkm3zbFvvBq19rxvgQFLERwfiDJS0LJuzSfowxDtMaZi5ADGHkuSrU+98x8RZ+us3hH5mDdOq54n9J5",
	"JP9QxvvnGfjyR/gzsp4RLG0Rm7jckTm4tzckM/AVr9vm6q63T9Xqz31RzqEU5Xne3PxnhE5TzvrwWL1U",
	"Nclm4H8Hf/gAYf8QzzYbPpAGOvwh2hwFFHQOthwsc/Uqzv+exvks7LP9pozzaqaOy/jvH0hC0uMsk9Tn",
	"aha2X7bVHFxT8n0OtvOg40s2C9P3Bd3O02bZPY0TkpF8tv74JZtxeuhf4s7C/EvrptUz6z0tXlDh6odW",
	"MGlC8oogw3bayXskZWX2rmt62cVzj9f8Db7kauuFjqlneOQz+XyGqZk/XmG/xl+vtBK+zjMNvSjfTzQQ",
	"/CHPMxDsgxVlsKL8Ra0o+/nD0hixI5gyq5LmjEkZ+OAFah5OBGsfTmXZS/rsBJTftf05HwoTkwLFtO0+",
	"Un5cI8E7kkzpS5uYLsVpYXTGw/G07Bc9fGnw8e7h+ve7283yZnGx+LJ62FxfLm/ME3haJcWRlGT7saig",
	"03dMafRE4+rZ7Dtl20555NQkJudOs+yU84rm+5iHm6fv0fhq8mLxTGJaPzfKZq6cBzmqIvlGaqvX6n1W",
	"nbEix4UQGONOY5tW3yyUUTm62C7To/kN/9MhT2DGsVdp9e09pzKO3Vmx7U5TDXJmcZQXW+yF1r7ReeuU",
	"iV9r1sw502RHrEiZxmaprCPG84RpBbU+o3RAtcSsOCEQVxdvJKOHE9PbpHRv7gLNt8NhpP80X0f9OaRP",
	"cUJOupXZH//LbiGxP/63VcYsTqJ4uy1JZQZ2Vh9sbxvHarVP0qiiRR1Zv3Aot1kckVw4i5oe0qo96bJi",
	"Lun3FqHiD/ve50mjE1VzNphJ91nKMGPhqzoqqijNozJOt//HUgXj/ct6/99PM3xg7LEuI1vCsUCt1KFO",
	"niCk1Tfg5Dd/jICntMy+x+XrjdCDedKe8ceW9FRtOuYv5qXCM1t8vJp3qDN0oSV7eB6OeKOTZ1Yc8nrM",
	"fd14pCnHKbd4eqJpTsyl7uOybrvRKU1aj7v72HJRDZiwDxUzAjiF63tejc9tbm45ZV2MPlgLYl4+E9lm",
	"nOZKGGoHv/bZP79UaYO5dh4s8uixTJNv2DVYRrJoag3/E333lSQpsozkW7KNROvbj28MAqaBrQu8lua7",
	"iKZPJNqTMiE51rTqZ6xHLbuDpAZGgZopWhbjE4XW6GIO7CcQNltcdPcCYtTsV8x8ROzdwbHBShmZWJ+S",
	"Fgisb7L1eKeTscXCG7xskJcHsl/b5eXH1eJicbXcLBcXi/Wnzb+YT9uxAwV1MSAfS6yWN5uP/265LB82",
	"0fvl9c3qqvn5+V3/7fMt/3uM/6emvjA3WfJyyX6RpIORf0B7aW3YO7nGSqtv6PugYWym5Ug69zvHOh/3",
	"Nsd/8s9MHfwz/8ld0MmrSe6HTklTMr4oWV5OXGKJqAFL9Sf73A4D7Fv3t/jQjgviU/frtPs7sU7i38Rv",
	"loGNLewz/8U+9sMN+y4liCz1s/hYP4tk47TOM5o/clLjtM5JzR8Z6WCSZFTDdEFgmvsElfEjI+2GXZaV",
	"/eCf0h+85PZP7i6w14BcXwuXgH1NFOnlSUz5LuNzbBDS/X9/vGpGsvtPJGsGtPXVKOHnPDs1fvkYR04P",
	"IJ/5bM9Ff3d3t1lciJG+/T9a3l5Fn1btmM+G/ua/Pnm0etL8LpVxvb67WW7a0f7T3edb6a/r2w+N4pYP",
	"m+vlTdR//Hw7+LvJOlbu61xCa3r3fAUN5g65gAYzD1EQf60oiPJ50eTmT0zmoJs3QQW7dhNklhekUn5g",
	"bVwv9QQjCpSUQiW1vSWVCZCNBb8nVUi96RRzUyqIwYQzHJCKJS6gK6tcLbTFywANTADZgUMRVP5XOETm",
	"6zNgLVT2wJrAmwNaG0S74Gr0Ynd1wzdipwcqwyG+nYo+FtVk/PJgABcM4IIbwTcTszZELw3RS0P0Uuky",
	"1y4nTLUdCUynHY1lD+CZCSC3azt1XChEQAoS0BbyIjemUeBg7+n8aBAD844STiXMEqZXjvws3nqpGdzS",
	"Bre0bzD+r6NRTn85hXabI7NwF8O/85yeN3WvIvVQRbwXHYXHDKqSTLSmB1R+cWk9AltbZbW3mqBO31LA",
	"OnxLYjkCs7z2xmfOo0jLhAKkoxDpbEdgnhnRGPARWJB50R1mBG4JwUQO1nTmS3mYss08gKo3M7HtHWPU",
	"TlpwRoGZLXWqE3Wrk3W/GyX3Ag5E3xxnNFM7ofqvmRWYjVcjV7P1DHq1NcqP+GXof3ExUhD1rAnqWxP4",
	"5do4wznUK6ypoUfI9xnJrtIsmzqRlUqAnSQjCoAdKNsWMKdFt27uBryXE2bSYKt0+DUjqB6IO0ZAXTza",
	"wY/YDu688yN+GfofCkYKop41QX1rAj/SjjOcQb39gwvLt8KwRRujgS3QGJHlil3khrx4dl7pMTYUJCOF",
	"yWi7wu6zoxoHvoKWCD3pEbNCZqRgstF3RNOvk9IfDmeLjNqp8BkGgIYtdaoTdasTfqTk5HNEnWHnHvYL",
	"ke4xmTEYmuEIwPZpmo2c8EXThKyIZZKtvH5XqvOuTv2vSOdfhc72MFF7G4KR395QTykK1wDWNcG2hm1t",
	"TF6LVvTpKq7jdV105uqA5xoJyFe/n8fFW1IlZbqvxxwMkT9rUuYxjQ7VyJP4EeHSvCMcIdpH35/TmtC0",
	"M6w0eORIqjSqhf9zhK9OPwo66btg3AnBUxUR4af8pwmfH7OnqJJdgf80UUqyp2kSj8dNGT71fk7zaF8W",
	"x1RzpiLhyOY5uNwjjW6KeL9Te4OGffYoW8Baw7DyXJtpQq7yoDpM9q8TQ8jbe40t1w794FdqKJZFTuGv",
	"gqX24w+C5aTxd7i8lfkH/pN/llqeZ5GT7F7zjrzLlVAjXpv2KfzBqAIm/nRUTXR6W2p6izjoSMojyMv1",
	"9eJicft+3fz75ROZZPEqzxpHCvT8vBFfCuCZI74QaWFht9RisX2mzqm1xcPk/lzuo6DjDJkQdp4hU1qe",
	"OqkkBEzjem4i86JwkSlCZNvjKI0G34jwgymd2qeWMUdUMj2UVl9UT9skKfOWtSVTeGQUHhn9mo+M5N2j",
	"Bc75+sy+Z2j7TwsHn9L6DtZgMiWw2WTSXY2hIXAiZ5TIzChCaoqR2rrPaUQOjYnohzq5V12j+qbMAEys",
	"HdLYLS6lyHbhcV14XBce10FeXoSnQeFp0Bt7GqQcldtNISIK6NQEMjwAtyxADqE5ba43cbRtYRfUn/A5",
	"GILJTIgHLnOYfPXcqY+KUi8VdbHoUrjMYa4wuAaZ3t5oJ8HW2yKYacTwYsWHicSQ6xymEgDZoQ7OwPKP",
	"XCOLcN64K+SfdtM3eaU8u/O9s3WBz+6xoth86Y27ax51oA7xGr+nRbyN6rgLFjFfZMwsmgoANGMjHLOo",
	"YnFVz9SX+zGLahac9Swl1L06K/flktdyCeimm3Hun3wsRgAf/d7k7XdbszZablrkTr5yOTOUv1xOPPMd",
	"PNQz96hX7B5Syn26lOx07T7irXrEYTPu9rzV9+cm64mWN3t5n5pUx7s+zp27BbQmXbobeMx60T8Q2Psl",
	"P6IE2AU/ooBwuR8u98Pl/hld7gff4r+Ub/FgJBGMJIIn1jfjiVU9YrG8jJM2ETs0HcER+rmLlBhSZA0o",
	"tgawe1+V0NtVbDARCCYCwUQgmAgEE4G3ZyIQPDIGj4xvzyNj8FYRvFVY3Qi2N6bQbd6XTA+LZ9ozCe6w",
	"nR6QOWyzZ81c3OXCdbNmpKBSoDpCFQLVFaAQcbMM19eGkYJKgeoLVQhUX3aFjJjkrOuijHfkvqBp8vIW",
	"vDv8NFMclKUL3IdAQ7sncAJIRPpJNwWW7gb0oO9GLwJShVRhB4J8tYDwm7SvUGr4q1g3zOIloAcLN2Ho",
	"E9QsspmDlAL3NoAzjFCa7LXMBcYK9W824FASzHzAoaBgRhDMCIIZQTAjCGYEwYwgmBH8rcwIwg1quEEN",
	"N6jhBjXcoL7ZG9TwRDk8UZ7vifLUKev0/Vl/LoW/1ZR5EHcmc6rJ4Z5T5uGhlg53ngqT+dTlck0uHWW6",
	"4sr10lziMquqnKHlepMucXEG15xRIF7NrYLxLtF0usPvJi4fVsvN9e2HxcXianWzYn9+vr/qUo1n6C2/",
	"9ynlR7iAq5z9nr5EdRHFlEbsFLiy04ec+/zeUnfnQJGVi/A2K/fWQP5M6GFLonRbnV7jDUr8kyTRU5xS",
	"so2k8/TzU81TC5SIlGVRwqrIKPsoFKfU2uGxP0MbCxUA1TONqzpqlH0AWPqP+08oSUXseJQHevJdPr+b",
	"ZCPKtG4eDpQse6JVMwL8dbHYHkrBxGKsy0hdpol9iZ/a/LywYm9PebfnVH8c4rxOqf0teUmq54JuMTfD",
	"PbFUbiu4qLukswulGUzd46RPA3nYUMcCrd/onYFHCGhz8sv7FjBfR2eATrNv8Bperl1JTj54H52ATk84",
	"wLvJvimP0zcAXzLt8nTUImUwINj1I8H5JBQ77qz4KTX78SghMcR5lZAYjNleGBuc2QuYvzHjgkmjDanv",
	"KpYYkRz5QOm1LJuadsJYQ5t5uNGGnjzha6Kdcbi3ie4Ht+tompxbdLR/OxhWSG2B8zoRuuZJJ10+u9S0",
	"Nw0znxlNZEYE92wegy4FYhqDLsRhd2Qeyqx98QkKoLGupV2OJBDEShfKHWaea8ld29lBrAfGff3JMwXY",
	"WMDWUaFcCML2wU56lLmDdQ2Ge9yZEGoqaRawmgqaBbeDzbMdd3UbPckY0vb6Dt3y4AATvhFaCyCKoTUJ",
	"9jrBXudXdfuBOP0a7FB2aDqCI3Q2B9EZUmQNKLYG1qY3BkIv9gLBLiXYpbyxl/32Z+/snAT2oLyjAT4n",
	"74h2NSw3gWR3fqnesaEgGSlMRuu3/iI7qnEQ7/17Qk96RL3570hhZON3wXpA1S+fjGd649dGEu3yy4fF",
	"xeLT8l/Nv9e3i4vF//t5ebu5vlktLhbrz1OcxcFSuNz6BS+3jJpQgBVd3n+OPq+XHxo4fPkUfVp9unv4",
	"t5xyf/fb6uHu/fvoavnvtZx0K6U8rJZXvz1cb1bR9d0EophmJSk+bBYXiw+bprybTfvP6gSPoY3E6l+r",
	"y8/MMuL98vpmdbW4WFzfXm+ulzfXv3fp98uH5me0/nx5uVqv2yz936bSPpB6SUlZ3xZ1+pSSsupv5h7I",
	"HwdS1e+KLfThd/w0EpFhUPwjeSpKuzH6KS0rrHFNsz5FkhbdlY79rl9Rp3IhZDwCqL6le6Ro4jAeIRjc",
	"GcAAKQEfAR8GfDSjXxhFvKCknUjODSGNUI7oCJgImJAwEUYLL8g4O1Q4ICLg4G+Pg337hqdp9TA+OOOi",
	"V+ZZoaMXyxkjARkBGT0y3pVp8m1T7IuwFXGGiNDlOQFECOUKjwCKAIoOFMykqQ1IFkYNV4DI2jwnjMhy",
	"ucMkgCOAwwCONanrNN9VYRzxBRWu0TNECxfND2ACTAJMRmESdjQ+wXJuy1dJLHeQBGgEaAyg8Xm/K+Mt",
	"+ZhWdVGmYSTxBRdFry9nCBxVQJ8QCsAJwLECThhsPGHmDFHihIuAhoAGUl8WeZVWNcmTlw9lcdjzKE9h",
	"2HAGyohmzwo5IzL6hVIAUAAQBkBhDPINoXOGjh/IBKAEoJiAchXXcULysCHyAJZel+cEk14qV4AEWARY",
	"CFiQPS1ewpjhDI5Wj2cFjFYiF1AEKAQoXKVVUhxJ+bGoXDa6khNv25Oez3n6x6H3L/hcVHUUb7clqSoX",
	"VwUjMYS/jlb/WxgcnXtEWn07q/4wGRb/rxNwCCD4e4NgRZ+aRde6Lspw1e0MC1mb5wQPWS53mARwBHBo",
	"4AgPAnxB5OzsvblMbtAIgAiAYIBoBpp4R+4LmibBvs4LRmSVvpwZVhTZPGEmICUgxYgUKaJDGFic4TIW",
	"tednQ2UkbgcOJgEcARwyOD7Q4jGmwU2bN6RoCj0nsGiiecFLQElAyRhKwptnz3g5x7esqmRe0BIwEjAy",
	"wEgZ75/DOOKMkUaNZwWNRiAHRAQc/N1x0Jq3hIHBERCNFs8JD408eDgEEPy9QaBc0BblzzN+g5msXe+z",
	"NGAXh91Gd+eE3UYeHHarpEr7+SxMbc7IUBV6ViBRRfOCl4CSgJIRlNwc8vCI3itgJI2eHWIk2fxAJgAl",
	"AOUUUMKY4gsq5wgRN2gEQARACEBs4nJHwhLEDzo6ZZ4dQDqxnDESkBGQ0SPjJn4kNIwbruho1XhOuGgF",
	"ckBEwMHfHgdpQvJgaeQBE50izwoVnUhOuAhoCGgg9U2xuywoDTcrntAhq/OsMCIL5gEpAR8BHyo+PqW7",
	"Mq7JpozzKkvr8ALLA1yGOj0nzAyl8wWcAJcAlzG43MYZqfZxQoLbYS+gUfV5ToBRJfMBlgCRAJEBRJ6q",
	"1Z/7ogy3L+444ao8K4hwoRzRETARMCEwcZ0X23C06gMcrSbPDButTG7QCIAIgGgBkSZhmHBGRZqcFSDS",
	"BI2FgIC/NQKKLQnxqf0ggqnyrGDBZHLERkBEQESLiGP2JA44wjMVbzgxqfWsQGMS0COCAm4CbgC4CSOO",
	"V+ScLWI8ICXgI+BjiI/14bF6qWqShZHEB1KEOs8NKUIwD0gJ+Aj4UPFxV+7iPP0RB0NVH0CRtXlOOJHl",
	"codJAEcAhwyO+4xkV2kWFiLOEOGaPCd4cJncoBEAEQDRAOIhTr6Fuxov2OCqPCdscJkcsREQERDRIoLs",
	"i7LexCHCsgdwCF2eFTyEVK4ACbAIsNBgQbI9jeuw1PAFEqbPMwQKk8wHWAJEAkR0iPBr3/A4zgtWFHWe",
	"E1QUwTwgJeAj4MOMj3sa52Ff4xMsXKPniBcumx/IBKAEoEwBJYwrPuFyrlBxh0kARwCHCo5s3/oSCW/3",
	"/eBEUud5AUUSzANSAj4CPoz42D+QhKTH4LfMG1iERs8QL0I2P5AJQAlAMQKlLsp4R+4LmibpLxiAcX1U",
	"Q0eGMRENdabJs4I4kwkHbQ6NAIgAiBYQrXH/8rBN65tiF0YMZ4Ao+jwrmCiS+QBLgEiAiA6RcOvkAyLn",
	"doGAvjQIN0oBBPXnPS3ibRgZfICi1+U5QaOXyhUgARYBFgIW1eMVOabBm4kHfHBVnhU8uFCO6AiYCJjg",
	"mCBlOMvwB5Bem+eFkV4ud5gEcARw6OB4KCi5JX8GExUvMOHaPDeYcLncYRLAEcChgyOMHT7gcW6wwMMh",
	"gODvDYIvCclrUi6TpDjkYWXhDAxVn+cEEVUyH2AJEAkQGUBkW4WDUXeIbKuzwsW2woMhQOBvDYGUfA/j",
	"gTMYUvL9rNCQku94OAQQ/M1BEN7q+oDDmT3D/IJ9fvklvMkNIPiSXaXBEssDIFo9nhUkWolcQBGgEKDw",
	"JVvldVq/vE9pTcoHUh1oOK30AJGhVs8LMEP5/MEngCaA5jRo3hd0G+5MfUCm0+R5waSTyQ0aARABEB0g",
	"Qnx+L7g4s/jsrUAOiAg4CDi4p3FCMpIHV8q+wKFq9LxwosrmBzIBKAEoZqCEYP7+wHKOkdh7qVwBEmAR",
	"YNHDIsSJ8QeQcwwA0kvlCpAAiwCLHhZfCnrIwqjhAR6dJs8LHJ1MbtAIgAiA6AARRgl3UJwXHLBACM3/",
	"N27+at+Qrao/0/DKzBcwBjo9K6AMpPMFnACXAJcxuPyW1jmpwuszd7gwTZ4TRphIbsAIcAhwIPXvRU42",
	"xb4IA4UzMrgqzwkaXCZHbAREBERwRISBwgcszg0SeDgEEPydQUCLx5guKSnrhwMlUAA0dFF5oN3PtCZZ",
	"+4eaK902/2oNrUVbSrfGQEsjSorLMn5pcVUUlMS5xJ+n/HWxSOJDRQxFXyy25Ck+0Dqqn0tSPRd0e0r8",
	"Pw5xXqedbhDNWJEjKdMaEruCUazyQ2ZG1TGmB5w8JgzoSt2mVcNha9aqsTUvFmm2j5Pa+CkjVRXvzC2R",
	"x5n5AxPPWmkCwnesXia9Nc0a10VpLLEq6KHBvfFjQIoJKYc8rafirYmG+dxk1vs9Bxbvrca+KUGyxZ9A",
	"W48thiSpiaUGVZqPSf11ejDs10nQYXG3K8kurskQIu2BkLk9hvpXwtG1hEOptWx90RYVVKavf/xnQRoY",
	"9Y0SLdeXCzHGRler9mfbTuxT9zf/UJK4JttlzT+K3yzDsGVZTsMHTsLanWfkP9nnlH9I+6QWGTy5+8E+",
	"Maywb/wX+9jAh31p/2TJne7YB/aDf2JI4x/5T/aZo499Fj/Z54EShpVvcMo+tn/y5P1W0XP/u83w1bCm",
	"0tr9c0ORFvl9XMamcWwb17Eh9eS0MDJAWo0Mm552MMiYhiGxMjrFXauzvDTS+kxbXc7VottIrGDjwvL2",
	"ylo5J8SfXhbd3m1ep6C7h9cpR1poRs2c94JYGJxeHKtl5EVOZi6iKrI5ipBWxCNKlTotH9rzorYjEEvq",
	"yW1cNzUkRV7HaV4BSEi+raLvaf0MoNnVoMyQGqS5gvDhAnYCuR0XChGQggQ83XaG3JhGacgwDdPQ+dFg",
	"w6mq47IGywClkue56R4hliTWfSjdWomRbmENlW6BLZRubftNm5PYZnVt73Rr213anNZy2XaULitY+fAu",
	"wog86AvTOdItnETs8S2zApXY0QCV2BHtalhuAsnu3EIdGwqSkcJktEa3yI5qHATKe0JPekShvSOFkklH",
	"V7Z5YWrlRDCdcipL1PfZYTVxbS/Oh8LEpEAxbaEv5cc1Ehz8MqUvbWLgz2mhdPx41iojTKktBUybLYkl",
	"5llegPSu7dMyoQDpKEQ6W5DzzIjGgMNbkHnRHQbYLSGUaJ67he5wUNMEiO20nlghDAz+pTe0pe8aSFcw",
	"0w3Fz1RBYBZUMDALMssRRspPYASuvUUwokBJKVRS21FHJkA2Fnz0UUi96RQzCgliKKF852idGaZgQQVT",
	"riCz7A1SfgIjcG05wYgCJaVQSW17g0yAbCx4b1BIvekU0xsEMZSQXycD57XuYtk0q7XXZpj5rGM5rae2",
	"ANxsPCE1dia2k3zcFOiBJC8JJe/SfOqWkOTx6G1gSRrMY+65GeUFZz9+H7cmdZ3muwp4CTdiv3LMorKr",
	"evTYST6o7ePM1X0013doKTWQdlpJb9WWgddvzJRh0ijBYEIwccGua5/l0hIn7uK53K94l2wocparZFw5",
	"4JtkXDHh8iVcvvyKly/GCbuM98/AYSOhh2rEaNtqmhyx19RGbmaLN2LUu02rb2B7YT9FTzUnaV1tL6uX",
	"PFnXcX2o7Bd2qwGpcXH3XFT1mVZ+pGhaJDGNxj4e8jOtTUbqMk0i+0WKIBm1SWbfu/TTaPjUZt00OVl9",
	"q32ckDPVVU7q70X5zR7stx1BVz8TzPM0OdO6lqQqDmVCRDMO96+kPKaJ3dRWx+WO1PLcIVlLpzU1l2CD",
	"oHZ05wA6puT7q2rx2Lp7/jmPOo7c99J5AuiYnalg3/nL8PMU70eR/5xnQqYNtJjUtIlCnQTUIV8fO/re",
	"z/s6K5n1169ja7Y3uBlvq9XsrU8cGLG159hSIum0wj6PL8nPeqLvJ1Lr6RM4JQ314XeaiWz64Uh/4PR9",
	"f5DaXGlhtQ1GIXVFKDkFKbuXAA2nE/b/Jwz/G0r00dJgM8EyDtPHz6L4OMU+iJ/iSUuPffGuRUpSs0lv",
	"XOQUNVOjBDVTm8KfyXTI5S9l2C/2UYEDy6Km8bcxHZz50xj2i7+M6QZV/iyG/eIfG1zxT+3f/ENfpFwS",
	"5rGM6BFSYy8fVsvFxWK9WV7+c5wK97BG2pOfgvFll00978IOmmIPfqpEPbydtHs9RfaxqGqVjO8ST1Fd",
	"V0mV3hxylfLXH9z5TugkiRqM45xmBLEPAIUT0RbxUK+cYpFt78AP/07MbXZ4nQN8XUbP5/Zw9pDjejh3",
	"aUS0O48wjI2mU4l21IM+IJsO8skZw16N2fOFPRWz4Tv/OedwkQO4zTaUgTi7hV3Mo+sFvKlH1a2dd6HA",
	"1efh0eNoIHDt+cKAa8M33N+F+7tf8/GUfI1inRmmSEEFU6Ugs0S0lJ/ACFxbSzCiQEkpVFJbvMsEyMaC",
	"Y18h9aZTTD8QxGDCQw6ez0w7RNMc0fKGTWkg1rBZzZb19E530oGQcvSz88SF+GCjgdRiFw+53mXDgauQ",
	"1E9d2dDhgc18arN+1yWfEwLfzPWE0DdzPaX1A0eZBF4z96d5PS8KF5kiRLZ/9KjQ4BsR8/hRpfapZdwj",
	"yJ4eScvPz+yGfvn48MSQ355XA3aQ2qmkndbaQkAbYoj0wD0wrAa99Qx0xXB7zJ5uOfXUBCwVA1s8YEuB",
	"rSNgpfg36GFXPYBW1g/C7YyQYCC1lhuIUKjsaQIH51QEbsYWCEZLrkDwTXMdXFlMjqnq1SBoYlJJYdOS",
	"Smu5wtCJMDV0nf9UbhQjOEUJbrvWGFC5NCp8vTGk96txzJpD5QB+SQewROS36LD3howI+NSQUdk+DRXZ",
	"YTVxfsTI+FCYmBQopvWr0D4/rpEQb0IlSl/aRL0IZbRQOnGRbZcTptaOBKbQjsYS9zwzpAaurdRxoRAB",
	"KUhAW7SL3JhGgSO9p/OjQQzKO0owFWhLKRlnmBZh0K2kYusxqRnwFtJGWuDCHCQxN5u3jNyWku9Tq9zO",
	"Hga61B/Yx5xgDVvuQzjDlvyWnJmVD1wjNrF45QKgeoHyh2rHlj9CNTZMoeqw4QlVwRRP8SABqgKrgGgy",
	"f5g2wOxhirFk376HgGpmOsoLZwxTiT1fmC5wUWk+FhXUnC5OElJVURdtZ3LSjSktkrhu8kQZyYryJXp8",
	"qYntLUvyfMi/jb5j6I3XXu3tTaP5uE6b6iT7Q5QVW0IrmEVwQ/dYxvlIpfaH6CnOo2pPyBZ6KWUqSjCL",
	"YF5fLveH93G+bijHPag0BTz/iPakjBIWd8qmVbnmRjVQk6z19HQoSZQQWqWHylUX27iObVF7xg+nn+KU",
	"Nlppq9MeUVvq43m77YiSeB8nLPqNLV1afQOZho/FLtpnKfJFvN37tLSKiipK86iM0+3/sXMTTuNHvQ+/",
	"2gvM00++q6xprE77VfxEokPG22BYjSzO4x3JSF4zlA+v1ka73KgJf06qmmyjY1rWh5imP2ItbpNUfg58",
	"PXC+D5fzYkuiutgXEciUrKgwM1xRRUdSVrau6fYZyaJtmmXQbiwRAhpJUJ1pUzH5gKPTviyOaaNysm1n",
	"8WbqqhC0iOYuD3me5rto30ZMOGYuPI5Z1D6awsVAS45ZU3kX8k52Fw7W5jEVKdOY2mWtcBNdSweFUlWz",
	"R8JT9tbrNiOjOFS2JJ3VelUX+30zDju1+KHak3zryqYu6phGSZw8kwkN27IC9sCe6vkHiAQDio4S0UkP",
	"1WO0Jcf0bF2RHCo2+o1pcbL5Wg7gdWhLNa3QydKdQHzMis4lqt1+4Gw9URyrfbPnX1V/pstEjFuzLa+/",
	"p/Vz9BS3D82b4TKuuoHAbqH9gx2UzCSe7kdh7ORBOlXozxDGdvbydl3fnA+3v/LWdnwja9zEmTZog83X",
	"xcCnxugeQd8Q8OW/iN9pXtrL6/jhkta4/hyuLYfrsrE114n11NRayTTRDyZxPkGLaXc46WgTinmyME4E",
	"wxHw68gR27u4TjqvHeQqrb6JV6zao/UyPZq3YU+HXHgxOWnuF788kqgp4j2jiGwfI/ekm5c9iYaxG1vh",
	"LCp4/RQn5L0ksHjZf3m5Wq8XF4tPy9vlh9Wn1e2mfeh/97D8sFpcLL58+m35sIpYNtPTf1NJI7q01dhJ",
	"4dsTi5Nju/2pX07qLK6+WUwILKPoqG3nFfWxaYF9lo6oZaQ6+7iqvheleR47VKS0m8tEToljK/+Y0G/P",
	"P09bKzf3PNx3xchqY3g2CcB3P/r8ZX77OnZ21H47HEZEbr6OniGlTwN/fNAeOSoyP1CEMBS9owE+jesG",
	"J2PVFt9P9hCRy76rMKXwo2ZJhbKu+zb5Ohkk3BxrV8LaGFzH3O6Iix7m0aX/zVy+jK2weP6xzzyMNVuF",
	"ca8+/Cf/zNdd/Lv4LWVQLzeknNoHiURar0n55VQpc7tmkrJ1v63jcHdXDjymNvvFPg7XgCyf4QMjGawQ",
	"GcUwXSYQqyE5d594IsK3cpjOP6uJdt6TxlapPPvYZ+4wSV7JcpdJShrPKDWX0lQjQceNa2Dhcsn0jRNq",
	"vqBy3RHU8AyZ5xx+4GHOK1Mv0lP7zOzYuM/HE1iW4VKdZTV8GJJIldNT1cwauvRUntm0/Ockxm8GQoN6",
	"Rj9zT1mn9hDcc9bJPBqj7thBo2SJ3OkWO1rlXrf4T/kzK2I5SJEzSajtf/eevdKY9o69mh/8U2UeJobp",
	"MoHekFoiz9psp3iO9m/pg3C8Vine1tTTS5FFSeRZtTNKnllP5r7IDGeR3DeZ6ZNKpsFQTx1kfv4xyPn8",
	"Q81mUrvpi0JkgKThg23MBOlcj2eRUuRMg5lHT5UzG4QcpvdhG/q2U1usP3gTn0UCyzJ2yMQIRj+P+pnr",
	"j9+l1c311U2z6by+jT6vmz8eVp/uvlzffjjJ4VDJLC7vbm9Xl5vVVbR6eLh7WFxIKR9Xy5vNx38rab8t",
	"H26bEkRa9+P69npzvby5/r37uV6t19d3t9HqX/fXD6urUXlwLvBcF8yjq3zlOsfCp76VyzDdUY15jTvu",
	"OEyjn89v2NATn0+3YXDuAK9hcOZACzCxbQDZp/dkMPv0ns7y8YBMQIAUribwPScKFZaChbV9UKBQYBsN",
	"/rBApfWnWcwDg54aTAmyd5y8pxrdQ6OdjpzgSHyz9O9VY7Qo6l0f1L8+8A5LTrGcQc2y2e0k5MXBDWio",
	"EFSwUUKQWY7uUn4CI3AdgQQjCpSUQiW1HdhlAmRjwYd1hdSbTjGDuiAGE87kJFUxBJ+WQpx/wppOkAHb",
	"TdDZ9jSJgAApnHEhOFGosBQsrHV3kymwjYbocAqtP82iupygxlDO/nJBuyQAPI4cFGGnSa1A0BNPbK2A",
	"zz6RNZt8BDK5xNFvYdAr3CEjXyLNsNDSSqC+Kk29VRq/aDVwmkmF4mWD1bjS3QyBB+SODD4Yd3SAWZQT",
	"ECCFj7G+40ShwlKwsJBZVFBgGw03i/a0/jSLnUU7aigl6M0bu54GqZgTwZTLqSz7RJ+dgPK7thrnQ2Fi",
	"UqCYtj1Byo9rJHgvkCl9aRPTAzgtmC6Eoej42r4anZzTDcYp6IWakZdHwfyvNQyFUI+1pz5rj1+3mZnN",
	"oE7LJ8mTAg/tn9CYNLEi3ni9ggrxgDSx8ld1PByNvOZS5cT7Pzthe6uZnTc+xA+judXmCD+Zj6caOwJP",
	"YTSD+kKcnRBn59eMs8NNiSyjc+yzdDLmFMJ7h2aPfLpZB14/oHuDm4ZqMnZJxxq2O4Bwhu0P7DiHoEkh",
	"aFIImmThecdiaBl7zmA9OA18+UyHzVCeQ8BijyikwMgjCq1tEBmNiCConEOcKNwoRnCKEtw6nIxO5dKo",
	"iJAyA3q/GkeFlVE4gKmt74gQ90OYuyHQvRDsTsjPfRDoLgh2DwS7A0Le/2Dvfvzd++DvfHD3PdbulOBh",
	"xhDxxSCBxUARxbyEEoPEEAMFDwNFDcOFC0PGCfMWIAwdGQwVEmzUCeH0Qsr8iNN6HZY7xonM3YNE5h4i",
	"ROYzhofM3WND5h4CQ+YeokLmM4eEDLGrsK41DY+mYePlkB44cg4Z2E5sJkqCJXUeuIcsKboeFF8P6+nR",
	"SOrc+Iip08xkhvZATatDNlAWVt5rJ4dQ3VsBetobMiKeOPkf1/USqK9KU2+Vxk+KBk7zqBDiBVlydgEa",
	"CiQ6WPeXCC3HfYWCQElcxxWJFQXLS+Hy2o7nKgm68eDjt0bsUb+Y8Voih5LaOgCf7NgGLzDo0drIi/hj",
	"5n/AMRRCPdae+qw9fvA2M5tXnQ7bZd3R0M4fI+KJ0+yq8wJDx820zskLAGfcWPdRCqDb6/uMZFdpNhlg",
	"SyoBttNGFADbdAMLcDRv07177fwxIp44zQYvdxO3ISNflXbuoTNbuQEibkxLbHQXh0fiCDvild8rqdQB",
	"myPs/KrBAadj/GZWrYdDkVEfhV4w6+mYZJTl66nXD3g9naCMsvQD4Vc4U0GEGpqswmlXmWg8T7Els/B9",
	"ZZXj4T3Fdh714IE+yXdG1TuFhdH8uTrjWfAhfhjNrTZ3iAo+nmrsDsKe0Qzq8xFFrVnNoJEmcSCuLOZT",
	"Dx5XEgfn+uGxJLOYS03uwfTYKOuGJcGEeOAyq6ocQSWY+KioI7R6LnOpzD7QonA0Drqc6clg9zI9neW9",
	"mkwArZHrrU/PiUKFpWBhba/UFApso8Ev1FRaf5rFXKf11GBKQFjRzsc+TMEdDVCzHZFtf+C5IXFU3dur",
	"Y0NBMlKYjNYdQGRHNQ4C+j2hJz2iQN+RgskqPz4XhsEk8OuOyp/PhSGvGSbUypvPBRMrf1V3WJVUr+Nz",
	"wSbmsp2wHu6kBnyIH0Zzq80Rfj7uozRGjsCb+zZKBO22u2KVwnebbla7MDgAF5tKOHArWWGeQq3kBboF",
	"BcvchUqBCXyoxiU+VBhxu/DpdvLilDwhM1LNtnL7CAuvBmLCj546H+KH0RzdXymAeqox9VVjh9FzwGgO",
	"9WnBuLCy6jG98MgbciK+WM2vPgf8DTl5q7cDBg2sZlCjKb4bUmJjqDg0Gke4EZ/sXkedeGSOcPOqAzxC",
	"x9jNp1ZHiyc9MqErNj1YOemcZledMxg92DTpnJwhOLMdkxyn0lnQ5x8+cNdyIT7YzKsuH3BruXipqw+g",
	"dWxmU5uPM0VTpFRHzPk6VzRxexVVugLR1+miiZsrLF/jhHEYSddJZD/2bkZexB+z11CjKzA92bAZmLnC",
	"8hWs1Q7VY7QlxzQh4Ccrn6vHq5Zy6sWHXAbs0QqqCNizFUARIng1slHl8NfoHqsyIR64zAGqnjv1UVHq",
	"paL47qhxmUtlzkER9LjpbijzEg5B5zS76hwR5yUKgs7JEXmzxz8YBNB3kdbPysTEinjj9QoqdMShp1XJ",
	"kJcjFl9hTeJ0mu96hu98cj/beb3rKb3z2bzzifys5/DHrGh96ln6Ke6zw4y1JDqYsZZEaGlRp1AQKImr",
	"RZjEioLlpXB5ba3sVBJ048Gt7TRij/rFWN1J5HBS8F7vy+Sz/iPYI4EdT9huzoJntW9yrKo/02UijL0s",
	"uQ9op0pr2iR6iqualFFVbaO46q577Lx+jlHb+w39AWqR34t8Yhv8lyikePy/JGmj8n582ZPymFZFG5ic",
	"tFP3/yze3XxerT8uH/65uFisbt4vLhZfPv22fFgtLhb/Wt2uVw9fVg+LrwZ0XmfxjlwWeU6SumMZb7dp",
	"g/WY3pfFnpR12ixQn2JakfYtq0j6j/A7PPRWFHedY2iGmv4gVjPQXxeLkvxxSEuyberXlsT4Mi5fDcq5",
	"zqs6pvRLVhcFre7jMu6GC1XsZoE/TE22UVlkzDXlUPBjHaWNrswZNHGV3BcSa5PQ3xsMTFkIqV1NK66t",
	"EGdk1AuP2WLfts9FVQ+VNKKdESCYG3FEDSOsuwXGaIwH48dDRcpRbB5jqpCJ/qtJ2yqgFasVQipSKoCz",
	"G1P6Xbkl5buXrtmk/pqUJK7JdllHy/VlgxDx+2rVJqRb9iXdiqQ9T9rzJOH2can+ZJ8P+61SSv+bZ2D1",
	"4N/5T/a5rRv71v3dfjCOI2qcHxjWlrdX1qZyekCh6an/9m4zI/e7hxmZ805ob5s4GWspxB0Lccd+0bhj",
	"ltmAyoPuLO13lICdpIcdpP3OEbBjBOwUMTtE1M7Q044QuRNE7ABDkLUQZC0EWTMtzq0zwxQsqGDKFWSW",
	"vUHKD6yNa8sJRhQoKYVKatsbZAJkY8F7g0LqTaeY3iCIwaeDfDc6fbrU7cAsD6NMR0fXVVKl7KyHuVwH",
	"bNISmpK8jvZFWVveIST0UNWkfNVThLM5tsjTOo3rooxGDjDSpjGiOi53xNigr1aB/Jg9RdXhsXqpapL9",
	"VFG6hNOb3HVdlKQH8aYh0UuRodrD8EI90pEbiBX9dbrToLtPvNuVZMceoGo9a/wR9OlT0Y5wKLWWrS/a",
	"ooKjJ1a9TvmZlZTCDoxQx1pSQ/CPchLL1sjNPrd/2h1xGY+q1Aq/zqnVaJm+D7BcCoKcZbmUMzmVTN5t",
	"y9jb+WFCPHDxf88uc6c+Kkq9VBRvlaBxmUVlYtlhd2562RFMHZ2Gw9hwGBsOY83LWxABUKEyJVCtMqkt",
	"wlUaAidybkWZGUVITTFSW/cJjcihMRH9RCf3qmtU35EZgIm1PaDdzNIuvTYt0WTczcHezjKk5zF7WnOy",
	"qUL4rs2OtXH/NsYW4kPFyNjihVNTDMgFDKwGQE8wqFqMHvbcHMDbVEqL76SZuhmuzf0qrqp0l5NtZG3Q",
	"c7F43Ff2OaMs/hOWO6Ik33Udz5Ko3IIyA0XqCOBSfS9BmYFSdQQwqZIir9KqJnnyEu3K4rD/qYdEJK/T",
	"+mVZveTJGuhwajUgPbEsH47WBQTtaWEN9yYroBl5dlgjtlTWiGe5oVJhMN8SWoOe5YYKhoG9Pju/GsJp",
	"/EhopUwZFmVrRYyd9lrdCbJzuyiu4cZ39JCzTzZ7+TErvZLsaZrE409Thg6InuMSNiFVebyvnosaUkhd",
	"ps2kDiUASFU/p3kkYsaYDBUvFoc8/eMA4vrjsYqOBT1kdgashmWAPul3E3o/WQ8mYjHJKhOoaXIUE58y",
	"qZkmLH54X3AZ2mFWGkKHw2M/9KnDmnHI6ocjdagxDiPaEGHoPIrRKOsYF7z3yxBX4atBU4GdCqkBXFRs",
	"6O3+9cRC8ZIWORkzmZYrGsGGPqkyVuOWVpJQl8zlZD2KLCvysYpYrm/DWvUXXauGZdevvez662TPfpN3",
	"r03NmikjlUetfkOjVQWx8bYZvH/Oqk1XlrbAUGfIkZnBoFeL8zN9ovjrq9QcV4QStTlsHhCVJCuOJOLz",
	"lMUTE50C/TqIC+70RojxGDMAGM6c7Mrd8IFdzivtyXMraSxjM9ovxV9SYjN6LJVf2sduaNHysEQpa7mV",
	"spRb7ZNaCksYZhmUpaZLBN9LKdf3UvukFscShlkGxanptiYXg/MSlnGYfsJGo5CbkP8SH0XrtX/KyX1V",
	"xU/9s1JNPVXOLNqQ/9I+amWpzTicJw15DYWKluS/tI9aoWpjDudAQ161UH0LobzskpLtHoB1ozr/2P1g",
	"n6RnX/KTL2nIZV/lFJZJ2quwTHIKzyRtYXguOYlnE1sbnqlPULPIxUkp3D5I2QdxSyE1kdsM9TskbjUk",
	"pdi+nVN2ViyTmnbaAunmkD8UlD7GybexeaaflN32VGLnabuHWktzGMREVD8oVibDv+GJcbtiod0lzE+r",
	"fjjHRJ1jji5yoYdvwwoBD46YluVybTrv290uiRoOtk2mU6sTo6jDsZbtsZUig02lpjYfoA0BZ3piYzC9",
	"I+BM0I/ZfSxB/S6MRlY/PlYGpyZ8Q3PMbHM8goEZjI7RJUGtjtEFnV6eWNqK9jw+NCxMkphWCPOvQYad",
	"CWB2YihjWp/DEkF2NOh6AU1qUHULprnBNPcXNc2VNx0Ai0Lt+NC4zZnbXrHbMUDdpd00VJasYU7TIJxh",
	"rtPsOBs2MZYPs6UV0Q5NR3CEft6lSwwpsgYUWwOYDwCV0Nuz/OAuIriLCO4irF1FwN1EIFxEQNxDgFxD",
	"eHELAXEJAXIHAXIFgXMDgXQB4c39A9r1A8rtw+QZ4rR7cOlgAu/2XWHiQ5QZXL1L3KmPilIvFXVw7K5y",
	"8a6yUyY0n/fb2Maywaf5yfgBqi+7jVe3kXjV87v5z+1mP6+DFWC20ZwcUw12KKAZyEAPm4sMDCyXCkZK",
	"giV1nQoNLCm6HhRfD9sFh5nUufHhi5ERJjO0B2ahYmADZjE9/E9Of6oBGHrporPxI47/5YvKn/qpLvVU",
	"XfwiZsBnBtWNGuFPSve4d4iF1BETB+pZVIHHTkfsUqFRs29barfW6Bg4VmCmVpmyb7cWj9kBOitK8CF+",
	"GM2tNjdcK3w81Rg/Kg4Zzak+ZymdFeauqflU5CbbfHKNPQayEqvcug0Q5dZxYCi3s6nFDdDl1hHPp55d",
	"ARg4t4/7ZMeYzNZOXqY81eTeh9K8THwqr1dQoTPqvc2AKi+34XPAa2ZV+pDVh/K8aG1WdTlLOJ90Y69R",
	"rST7XroNIi09cWMwl1rc8N3SO9bMbWZkL51c28d9ZmRMZmsnLzOj+i7Mh9K8zIwqr1dQoTPqvc2MKi+3",
	"EXTAa2ZV+pDVh/K8aG1WdTlLOJM7Y5P3NZyxejBSD0bqwUg9GKmfgZF64XKFyB0QoNdGPQNXEfyP95wz",
	"da0cda4cfkaUOMyiIvTNYOt5wQE3TneDLfk86nCBi9P14GkvWtbkjm3itjUULGZqG+dtoe4WxV1ZzltC",
	"ndPsqnNEuJfNoM7JZYB8javCvhR3Od2V5kFbM6rJUboZJUPfGHLfRm7DhdOdIecwm2ocoe10bTjprhHC",
	"wb2VPEyCs10d2vqpBInpZTb0dXtoYPYaanTHv7+Z0dcNopnZ3Or0Iq0XBfrR3Lwqc5dxRvnQN4ncMZ/b",
	"kOJ0l8g5zKYaR6Q7XSdO+hGGcHBvJQ8z5mxXirYOlEFiepkxfd0qGpi9hhrd8e9vxvR1s2hmNrc6vUjr",
	"RYF+NDevytxlnEm+4NUleHUJXl2CV5fg1SV4dXklry6nwk1MTofMkTl6ESvoiRsD/1MxY0wda0Zda4Zf",
	"qvQMZlBP8AUUfAG9PV9Ak0FzJjudHKIBPSqqTIgHLv4HAJk79VFR6qWi+OFS4zKDyibDYk7KKMf2QKNL",
	"ZeJDlFlVhUeXysRHRfHo0rjMobLJEKrTQspBYfD4UrkQH2zmVZcDxFQuXurqADKNzRxqm4i6Oy1jH1MI",
	"jzCZB3FnMqeaHLAl8/BQSwdcKUzmU5fLzCiFoXLFlevMKHGZVVXO0HKdGSUuzuCacWYchvEeoZDCemvh",
	"yk5vsiDhwIM30eBNFK2yQej4yR2tGgYPtPVXSWH7f5XW8mRGJyIIKtfzBpUbxQhOUYLbHuMMqFwaFX6w",
	"M6T3q3HMUY/KAUY96qF301/C2vuUdXOT5+7azYMrmDNw2+Ph2f4ZuFhwqkXyHO8jkjd5tqbo1SyH9Sl8",
	"m7siSUnsRpmEHqqalK8ao3JLqqRM9zxK4qCMV3gS/WdNyjym0aEiZq2PBS/kflyjRtGn4mwqzTbVTCfK",
	"Sf/ILSIhKtlV9jKCMFE907zT1YieHB+Vuj0q9PAGzodh/Fk8ZfBhr3gWFqZuFdlH35/TmtC0GulZf+Tj",
	"3bL5eJr858fXHRmZ6CEHi+VnOLe9QYZfwp04n4IRACInDM8Q9EFPj7Irz+D9hKpOc9qUc8EiEvOhVcOt",
	"hFIdk6YgxbIeFR2p9R/U7evpJbES82EAqNEVMGzFi1rhgla04BUsdsUKWqGCV6TYFajrihO8dJla3Z3p",
	"EmpsyaQzMnUae18JwGUMbtkCW6bAlyXoZQhs2QFfZqCXFbhlxKkcf02NrW8yTjyr3CBE/FhoIzZZAsPA",
	"v5WVgzo5K/O2OqVrnC9kvTEtfUVFdjJM9G1wJ+mjv9D4w4cLsKj4Hf1YQPxmOuxiwzd/sbDxfDGxVH5p",
	"H9nbnaUpUcpabqUs5Vb7pJbCEoZZBmWp6RLB91LK9b3UPqnFsYRhlkFxajojkFcELK+SJGeTgvj3v+UM",
	"3RQqZ2EpPFNn4i8i+fe/WQZp/cCyyCks09D323IknRNIy2+eV05i2VKugFRUW1uv8O9aqsjMeC7Vn/wz",
	"c9G0VH6Jjz33QmJZKCAWP/XPSlvrqXJmAWT+S/uolaVi2fBMfDn2QSYRcOa/tI9aoSqiDS/tlmMfOIk0",
	"gfPMchLPxvZZPAv/KX0esFHSWEZhlL9Uf7LPUhEye9kScTlIYZkkm4ylnqBmkaAlp7BM2kX30pTIsh72",
	"W6WP9r/bDF8N58jSCG0b7xA1O134nHDsYg8O2MwcfnAo9gwRCDGFQIMQYsoI8adC/KkQfyrEnwrxp0L8",
	"qRB/KsSfCvGnQvypEH8qxJ8K8adC/KkQfyrEnwrxp0L8qRB/KsSfeuPxpzQbnennaMqFnfUjNoRtOdzN",
	"S08Ge4HS01k+K5IJoDVyfdzSc6JQYSlYWNsnRAoFttHgT4dUWn+axTwZ6qlRlJCXFNJdN1zVjBChaEa5",
	"qxEk4DclflqT8aJwkSlCZFBv6WnwjYjsMRK1Ty2jew2jB9P2L4osIyZ2BFMuPDW70kk5ZKsRUFPKhLBm",
	"lCkt+6NKQsA0rkiReVG4yBQhsm1/1GjwjQjvjzq1Ty1j+qNMD6UNAUZ/rQCj+tvE6VW8YshmvfYPgUxD",
	"INNfNJCp9CLVAufcBtO+Z4RAqSFQagiUGgKlhkCpIVBqCJQaAqWGQKkhUGoIlBoCpYZAqSFQagiUGgKl",
	"hkCpIVBqCJQaAqWGQKkhUGoIlDpvoFTNEc/05YD8yh92eSJTAq9QZNJdjaEhcCLnGxuZGUVITTFSW99/",
	"aUQOjYm4E9PJveoadU8mMwATS04vrTMDFc6pgIrmZLa9ps8PrI1zC3JGFCgphUpq3UMkAmRjIXqGTOpN",
	"p6gewYkxhMBJRfH5AlY1elpRaHc1ioggqHy0K3xq0YgwgkO6jsvsMiB3aVhfPclxglE4gIMLh3jzw3jz",
	"IfJ4iDweIo93vsmhQ0PrQermkE/2tIY3bGwAsYYNDrasQ1TtEFU7RNUOUbVDVO0QkTZEpA0RaUNE2hCR",
	"1i0irSngQLtVBbqr5a7l8cMs43Cm0YiSIq/SqiZ58hLtyuKwd6npgJeH2PzjTH8VjZ6rnNzTvDlsTVzH",
	"CcndoN8zOVMdbNPqm0v90urbmdaM0KcozeKdywJR8DjTOj4XlcvI0pCfac3Gwm1WSZVG9JA71Lrn4WFw",
	"HjI7V4VyQc9avrr1EO/cHh2bM63pN/IyWna1jxPivAzROJ1rGMinKiJ/7ovSpb17JmdcyzQvtsSxki2P",
	"c61jmrjULk3OtV7H7CnqO5NDFVVGHuadEY6/hCLPWcjq8Fi9VDXJXNtGMDrT2rJaHmnsspaqizqmDvTH",
	"mB7s7maO28qlnG11rrBrWuBcRXPpBcfMxzgncTlfJdUk29O4Jm715FzOt56Og0XDoaCHjPjgcbZaOkvB",
	"9ACv4uSLBR5v9iRfxw6M315s2q5ag6i0qohj+zQxZ51urpMq9RJEdWB4Zh0+taUcC5wqHfjzkJxSCo/a",
	"aTo159mN30YJ5VlilIOSyTpyqHKEy4OHqok8KzsH5Zn4Tx4tVD5M5OFClTSWkZ/IsTzi54lwovKRFv+q",
	"pA0yGjQ28lEh7Q9XFCIpmWX/Rl5YjuYvKWSldjwhRbDUv3AiZY/P86uJUlaxUZZy9mk8Y7fb5FnYL/5x",
	"sGXj+YYfzCQG5Z7KITNRNg8yrfqBB+lUV+A8UKeWyoN18oU2j9MpftuF6GTDFvvY/c0/dCtr/on94h/l",
	"uhwz7ZNBV3pqn1leJfWZldQ+s6aV41AjympCytanjcYmbYc/26ikzpPCYPT1MrhPhirVGcwXpHQgqt/w",
	"pAj2gMCkCO7ebsTdLI9UJsQDlxniFkjcqY+KUi8VxVuIaFzmUxnYPtrSa7ZgDzORhnKHWUnbcp/VVMOt",
	"M46wI175zYA2YznUrxqoZzU4dN8xfq+i2lmNgXzjV+NL5mH82mr3CW2N70wa8gl2nfGrqh8+o/WsPjSc",
	"1owRfJroRQDOejNIAJwZfUngrH1EiW7KRhToptvJAmV7wemwJ+I0agcnIEAK5/gwghOFCkvBwlrH35Ep",
	"3ENu+LXndJtuB3yIH0b+x3OtAOqpxtRXjfHT45DRrOoDD8BXgnQyEpJUCGzMxZUBG2YBZbgbIzt2y54D",
	"cWUxA5Y4a+pcP+peP4eOJ7GYSU3wzpZW32zgCe5g1nyBncqCr1cLeLeOpbMhXvj4x47Kn/qpLvVUXXyP",
	"G/CZU3XgvreiT9cNoTWeoZ0QUQCsN9oW4OG9hls/lDgQVxb+ISRYU+f6Uff64bubzGImNYE72ceiqm3g",
	"Ce1b9nxhXcqGb4hYFyLW/aIR67y+Y3OaEnQ2xAufGRz/Kvypn+pST9V18Jas85lVdbO8ePSFP083TiMM",
	"X0utPqDp6WZphKEPsL7CTZLhaS3WZ5ztrYmpSJwrOZcScR7mwCXO5oFPKmEeP3xSAfN445vhMbKPQVLh",
	"RHyxmqvnSkVQb/Wm/urtOgyqrGZWI66zblpaCNpRXRZTDKLj2hXDLHQnl+DfyAtsZ9IQwLYlDYXlxrDL",
	"Sqzzum51Gh7UXjQKEM12d8jywhsBvj/kVD60htkhNnQYh5uzuINwm4nMzIhHbv4HUlMp1KcCqFcF4Cem",
	"EW7zqxQ8Pd1yeivLm0FpsEnKsTDYVAUszK8TFMe+rfMhfhjNAD+1AOqpxtRXjR268IDRrOqDd9ynatVS",
	"2iMb3F0xRQA7KaQIb+573HunzIZ44TMPuHr+1E91qafqunVMhc+cqsN0y+uG0BrPiE4JLQDcJe0KcHU2",
	"5dgLBQPiyGEG+DDO1LVy1LlyDv2s5zCPiuB9K00sQAnuUJZcgb3IgutMXs3cupWJF/HHbAYkDQuhHmtP",
	"fdbeoTcamc2vzvlc5HnFqacry1NcX1XV3iDs6QbzFFdvoH6Fu8wxd43gqeiYPYkDBtsbv9HCgROW17KB",
	"05p72W66hpbloFpoUQ6atCrKv0tMD0Owzov4YzZT71cLoR5rT33W3nFUHTCbXZ2ofr3m1LAegOnX6KLg",
	"/dq6KD/OX3VXVfhYRwNGxBOnGWIeaSVQX5Wm3irtEP9oyGmOGEiOToN732doxMksiDOPGVWEx5fMwr2K",
	"eEwpPGZQFcCFdOv1DmRu0JHAjA06Gku7D54ZUgNXK4aOC4UISEEC2lqAiNyYRoFbgfR0fjSIsQTpKMFU",
	"rs7P3UbLngFx5DBD92ecqWvlqHPl8GOkxGEeFcF3v1+21dQqsuMLWxFbs4Wtfm3Y0hhu8vyFxrkdY6Aa",
	"rPkC9WDD19Grv9tQ4rphP861ST86bsyPrpvxo+sG/Djnptt7OAdnHHk6e9c5za46J4h5OlfXOTmB7hXO",
	"z+UwIOAxPLM9MFZKAQ7ouEKAozukEL9BSZx7q8aIeOI0C9SUEqivSlNvlXbqrTqneVWI6K0bRgrAOLy3",
	"ogqB9lZAIR5C6zgfwx69HMEeZz1+Pfo4ej16OXY9ejlyPc5+3Oo17JI7wmQ2xAufmVXmhjOZjZ/qumFN",
	"4TOn6hAj/5eW0Ga0ZCVAR31wAdAR37YAhHJsmEL1YcMTqoLTPE3xUG7ShOQVAUYoIX/u05JEWxZezOCV",
	"xZhMu8KiipRpTI1ZsjjNa5LHedIe/YsiJo9pZcL2iBdC+meUPB/yE/4vB12xpZmKRTK840t3+bjWquKp",
	"/h6XJCJdQ0yFT1mz/CuWXbTvRNSVrhU2TVY9so3csCw8ndZourqGqpCraagUE/LrOBjfYMy7rmKjUd+m",
	"gqlJzcIDoEkp4/HN1LZjn7VEltXU8RiB8ZOBrO92BkLpoyCVcCQo5DQ54yAwnp7KI3tx7PGYXuI3z6AB",
	"kufTk3nwr5c9Z9X+aRfyyxj5Sup3UuPfrx7uV5vPy5vFxWL9+d368uH6fnN9d7u4WGwerpc3p3jh4mjR",
	"fsw/HUaRZ5xEf1vOCeC/TiisQVm+g2FhCoCEw8Lw16biyclOHjgs78lVEngxrje+Mi8KF5kiRLa9Rddo",
	"PHjBC14Vg1fFX9Gr4nBtDySBKVWjhSlXI7ZE+oCKYMhcW1RjR1GyU5zstr1kSObUuPDeY2DgWe+YXqWx",
	"gJJ72RqL9bsl6EdoHQp2bQgjU+pQG+pSG9suMUbsVR3gcw/j9gyBDIXaqfB51IHBh0LtVCcMRlRyD2qZ",
	"POKaPMFW9+boewidDfHCx/9husqf+qku9VRd/D3EgM9cqnMO1Kwf8LghzkvAZp3T7KpzxJ2X4M06J0fs",
	"zR7EWTlknxx0+/NBy3lPJoAW4TqM95woVFgKFtZ22lIo3KtouASxu/4aXIcYX9/px7yavMD7FmhtuFLn",
	"rJGhFTzXit8y2dVCuW8y1aA9VwdIrDC0kxamdzuJgXoGSW28qi12lwWlqJsxNuoO7wJGbmrzOLO4H2hz",
	"tYeWprP/NvKMop5XK9rumHW4QS+SmEajH3fNzo1so7gezdAu28ezFN/zrhEGX/Zxdwow/FAWu5JUlfUN",
	"8w9im/W0rFUd14dpVMugXHckgytUBj5+ocy1rOl0oEGuL6YdSResnkodhMRfp/rOG7xflquHvmU2XSCz",
	"tuJXx/yn+Ny3n8giJUnZ+paSMkqJLGvb4ixH9zf70ECApbd/8mQGCf6J/xS3wT/6i+Af/R2wLsxQkA5M",
	"/efmh8Pdr6GbSE2z+tfq8vPm+vbD4mLxfnl9s7paXCzWm7v7+y5t/fnycrVer66mmb/OVetIib4vXPHF",
	"QK5d8aVI06pl2POOwC5oW4gyF+5Dw33or3ofKq0lrTMDr8k4FfByjJPZ3nv2+QmMwPnOjTOiQEkpVFLr",
	"m02JANlYiNtMmdSbTlE3mJwYTqhunkAE9kBVaAicyF25EjOKkJpipLYHr0rkpbrqLtJKBmmxvUNSEQyZ",
	"3+pC2lehQskOaWOVzLna4tBisvBuwwYaFjsS2HjY0VhCh2cmgNxeNGaLD54ZIqAtGkRuTKPAJ6qezo8G",
	"MVNURwml4sdvVhlhymwpYHpsSSzxzfIS+8yubdMyoQDpKEQ6W2jzzIjGgANbkHnRHQbWLSGY6OTZ8eR1",
	"rThMQ9+8SxyIKwv/F8WCNXWuH3WvH/5aXWYxy336D7R3zPQHcXBN2lE7FT6POhw8j3bUTnVy8DHKyOdQ",
	"C2wfAN8DINb/Htf+8HU/Ys2PWO97Xuv3l36WN+Wm6z+jlUJ3gwK5Lzextq0B8L4fWAvozT+mJiMWAGku",
	"7nbU65t9XFXfi3I78rL4UCaTD4M/V6Rcdzn/ulgcKlLa3cWLnKKgi14c03XlpziPdyQjef2FxjnuESP5",
	"sy7jKN2fMDB4Lqp67DY/EyIwHqerqGa/EKxNtdMRuYtr8j1+MZdzsagOjzmps7j6ZvzcOijpKmFztTyQ",
	"5vszKSdbXnddaHreyVmZG/TlkURXafXt/SFvYR7Z9z6ZzNztevablz0Bsh634unYrpOYxmX1v+L6f13n",
	"dYScWT+RukwT/W3vu7vN5u7TPxcXi9u7h0/tE9/N3f0/jbe4DYfi8pkk37ohYsUsZzmvy4frzfVly+Pj",
	"anmz+fjvxcXi+vb9Xct9c325MrNNd2Vck00Z51WW1vy2EmA6xM0EjPD8/9h7v+9GdSVh9F+Z5Wf3zJmZ",
	"e+/DPF3vxN0730k7ubGTM+fM6sUitpLwRQYOYPfOvmv/798CJJBAgKokCMnWS3cMqlKpSr+onyTMguxt",
	"lb6F+y3w7Fi3QHtMgG2TjHo1HYvh5j/qt49RRIkf9jgXLfu3T/2tsGYWc3YpdouaqCV3XKr6E7ArV1ZL",
	"fJ/Pe6U9RnyihOac4ukSWs+7fV6CmD+K+aNcPOxh8Wflk1IKsfJLYT/1/ERqyfP3/GenG0mbU5O4e/R2",
	"a9nnw7QvgOOHaVfSzjh4U6/n6jMcgAAhTL8DakwUSiwFE6v7rSNBmGcVGP3kam86gI8GRR+IMcG+g9Dj",
	"An4QocbmXIGcK9DHdAUqr6oazYDMi6GMi7Vnbqw/c2NzScTaMzfWn7mx/syNETM3xszc2M7MjXEzNwaD",
	"8I8erYYwBhYQMPYVIJozmLUFUG8qlQIJBVBHIdTpzmXeGCEM+HyuwKzwDjOnC0C4LbX+1tduDLUzMyio",
	"nZmBaRv/q/YEBmBuyGaIKJBSCqVU3yGgBkAKC+MYIIBa4ynOQYABQwFF5ZZ2YxiDKygYcyswzdUgtAeO",
	"xlRyFSIKpJRCKdVdDSIAUljw1SCBWuMpZjVUwDDAPzq1k0EUOlvVR7BV9RipolOYXQbpa1pLr0Maj1GU",
	"afpFPA7HyP5SKjiC8EB+08T6St4Aiagf/fDwMziUUxwK48URDfZvg2w/5qy7iu5ILu99xuPYc1xBFKeA",
	"rvPmhr3W2fSVa6YxJ6TWXBCl6JalrHXWRjF/NuTnRaGGdBPpc00kxa5Nn7w0ixL/mWh3UtYgWNOnbQl4",
	"W8BVOR+6rY8d0f/a4fzNPO5t2quY+Q5bY9eagS+UjX8kaezvybckOsXQ0gLvZVCm/iOh4HwVDa4h81GU",
	"cVWlfcPLgo5Z0pueonNuhVwaM83FIZfen5C0tuhUgpDyVTB0DZJVo5bXwOez2TfGlzOs51rcPTklTmod",
	"5m2Qzi2tSeYloaSPTK37p4wSdROVUbyrs0NrwkuZPsTnehlBOjwlECkzZCbhPry6Nwnct4e27Ac95jox",
	"jefF0U28XQ8Ok34A3hsm3Tjbv7P9O9u/s/1PkAak+KqApvK5zqGGcuMw1LBkPhDMsHQ+ephVHzqaaSfE",
	"ywgodYkMiO3STuINESPFDoKiBwHLc9KAtJZ7xOXEcTlxXE4c51zjnGs+n3NNrW6EXno25+NT9VE3dJEQ",
	"uoFdgLC9wC5DsF5aGlD9TrYcDF76d0Oyn1Hy2oxZWxWpRhfLxffVZvVt/X292eU/rr7drVhZyu3u5m71",
	"bb1YLh6+q1U3T+n6tzhKsg+QpfpA0n0SxFw3+w4BbqRglReE0YF0afe7Hucwc82xHWYkCaUyz0IgXhB7",
	"P1+CjNAgzWZqjoEaWhIS02DvA8pBZy9B6MVJdA5SefpVjOrMpC1O2/YU4sGHXAQNfqtsGiL1LcqUGky+",
	"yD+hcaMa2oBdgxcz6YxRHZjkM5hL5SRoQDenQ7d9hXPKjmmFY8NZVTg02qAiLCrWRHyCtbo0FmddwFt6",
	"2hOPylYxf8F/1uGq1SSrA1frR0Z2G2EasLfiE14iW5o8vFi2/NDADsTFijMBYdcg3kZkZxJPYxJS0WrZ",
	"GoTrAmIIwvUwVu72xoVy8INJ3GJA35UiIOzTUoTU/OSXQQgYxvQjVsRF4SRTBMm6WoEGDF6IcB1BE9om",
	"lzEaAxEeCutssh/LJqv4bNUply9dekBLpQkMWypN6OcMCUZQcMbZChr4KI58iiRfdy9UwJkJGb4nqjDY",
	"5j5mb2zigBufnQ+E84H4kPkPCi0l2BzwlF7lgIMlgkrsQCsADDlQ+a+NvNaQdjBR1Jjy7/7+CdmjY9XJ",
	"EFDrDaDpEGpIcFKEGvQ5w8AQOJCFHAw1MoqgmmKoBmS0kIAMhInKciGDW+U1MvNFjcB5cFnw4HI+PM6H",
	"x/nwOB8e58PzGX14Bq2Pg+mQRSsRuv6DjIRYwGK/7IGIndoYKLUyUHyJiAaWEVjWtlQPf8o0rIman0B/",
	"qA1sxccZ1FchTYPnkBw8QIH18TXaTwElHf41h4/lVVO+ZObgrpL03WGkT6lHKo+zyVygYj8psqx0FF14",
	"8RPYhElDP05fogzg9nEKg3+eiIfNEyBPazahVHX6G9KpQ6Frzov8kEffGJlM9Y+eRfopXYuKkXX5qEgC",
	"YU4S8jPmSWE/OjiXPWtT/DkUNNzpS9KcLVIz4fFQcnU2mars6vw3r9BfzzBepl94whsJE4+3Eh9xv5R6",
	"QnLPFOGJkfNKUxU4qjdHS+9o3ZkD0QPMlwPRgcbhPHjvkRcZ+s7aRGOHHPuXMBk/tTNcamm4+NtrC88I",
	"rHOOCh/LUYFfkoe/MopjT9+84gyyziDrgtKdScOZNJxJ4/OYNFSaGDAQbMJKcAQHaIfZAkKKHAHFjgA2",
	"sWVAKwYGZ8hyhqxPFowu6YW1vbfa4SSqa4Ok/dXIz8/VV8DaBBwMWpiAw2mXkqgBCBDCvPABx0ShxFIw",
	"sfr1JAQIrNAwFSVEWHucxdWU4NBQyEHbx3CpekGXi9bGyUhskDJC4XwBO7UxUGploHgdXAPLGCwbtJMN",
	"EykaAfDzS8ZCbKAZl10GU0zGYmWsBpOsgWYEtg2aVgeJFG1I6DkmI7FByqiswk8wGYmNgeKnVwOLdZYp",
	"PVOCPdA4eEiCcxnBPByZWTTNz/EMEskQ7C8LwG0Bp7wGyyVjBgl5idJpnTSCxwM5AyKsVN7j/uGQkFRT",
	"hZx6aRJEZz0jwmwdco7+Xhy24v1v3vnJ4AQ+RgdCtTh6zE66i67TQSjYe6eT7qfay1sa7LsyFyWHo++R",
	"MMdw0JNxcgrDHLUSXRoTcsAegkU5Jo/XYxocWBZlPjWTWsayhWnuH0KKMeXmcYrVXDml5GBG6PmgXK7v",
	"U1ui2PTablXiGiuneeVXVc3BevoU3PqhPjg+oaOUfPQILlKb9frSu1v/cnOzWywXmxvv8u7qYX1X/L3z",
	"7tary78vlovyf6VPTrDHZwgqj9GV+EN+VZywcoPyEWtWH5eskfCAe1zlJxZ3uir+7kkOVB1Ode4f/oA3",
	"YQcSb8B/6jlzCXOUtRCfVI34YVC1qR7wJvl2z98Wf/MX2Yk/zk4DPmF8G+ev+E/uMsYWDfcY4z95MiNh",
	"5+bZjMRHvFm53ngL9ov7k+XbNXckK/7mL+q9mL8WnvBMScIGzPMkiY94s7eYj774s/I/qxzPNF3SpI2U",
	"NxGedPutBXtcuiX9s3r4MLJVMXAT7I1KdUjgI7rvyWRa9tyDIoc47UFxw79bYDl1ShhgKp0SSDcdEm9N",
	"IM2N0/OUaCiIRgqjUTvrUdUcJRxErqMa0BIfURmOqiMdCWb781u6YwBc6Zq4tblW9gRyDwSPA+gWCB8L",
	"UGkh3NFAk12Ag012AVBzR5IgCBTEdEUJqCiYXgqnV3eXkkHQwoPvVg1gi/zF7FoCOBSU6+v0VvqvUTpo",
	"Nwco5IqPH5gDZwEC9N8sYHR9aFljAmht7BlaYKEQAimIQG2XWt4aIxSEY20FZ4eDKPfaAtIl63K+4X+S",
	"ZF1Aa0etboLmGOJw4OxCHFA/WVQNQaAgFpIXcVQUTC+F0wtIESWAoIWHSg8lAlvkLzI1FAcHg4IMfZXa",
	"VTu+yEVpuCgNF6XhojTUNnHZPA9pD2OzCAjjsgipuTJkEAKGMZWliIvCSaYIknUXSgMGL0T4cmlC2+Qy",
	"ZtGI8HBYU7eV2rKJdumTcBBzJPYd+gTk1MIoqY1R4r35ZCRjsEvfl6kwfcMWbwECXLIFjO6uyxoTQGvj",
	"PaDAQiEEUhCB2vsqb40RCmIvreDscBC1fxaQYKguy/7w8stOBntlAUwMoEdY7tnJYFssgE0GZLARltAj",
	"sMTFj7r40U8YPwpxG6680WAM5VBAhnIw3VletycwAGOJcUQUSCmFUqo98wUApLAQK0AEtcZT1ErgwOBw",
	"UMEvflh9WXlfais8EZ71ovumfj+1P752Y33sRg79hUcpPhyRgRMj+BECEAu81GxY1HBYBrGGHH4M1gBD",
	"OESnYtDWJQLCdi4RUvO0kUEIGMZ0fxRxUTjJFEGy7uHTgMELEX4ENaFtchlzEInwUFgboUyi5z16z21g",
	"ITbQjJBzXURPrYyV2hkrfltuohmDbXaj3YpgDohfq4hQj1qgY64WxVBvXBjVp1jvXnWK9e9g5uGDYpQM",
	"PnRfQkIsYBkhdF/ATm0MlFoZqEHovoxlBJax0FK9JfZwSPs9G5SpAKID2UVxBIw2ekyC/auXMcB3Cn2V",
	"KqtP3ef7D376/AZ9BTVg/S4XcZQGPIq4GQ1MT8cQW1Qm+omC/GMohphPtWVXiDUPp+bj+tGz2j5hEDUb",
	"GTreGV78oauaAxMAD83lPw1KK7CxteNUOzJp8IBVP3xj+3bX7tm1bMTV0bfn3/J2TWlVCJaN3hTCa80k",
	"YYfzdLKCNAHaffzQjqBlvC5OsvsiNw4ymLYVwypiHj3Ctt2Z7TBbVA+QWFtUB/LFQO/i8ksO0+xK9Y0g",
	"HPd6mC9KAE28QLIZch3CRwhtcmEfLuzjY5YEcN7VzrvaeVe7sr7Om+WTerP06Zla93rYHRx4bKCJzYKn",
	"gCTXfvh88p/JBaviyj9m1xvvfrtYLv7xq3ex6fhkLDFsyf6UBNnb9waG7fZ6sVxsd6u73e46R3W/2d6u",
	"L66+Xq0v1QizuIlj/d+79d1mlSO62rA/laDn49PGP5I09vdTFKN9jFP9lt7R/w3W2qMkfC7noSZQcgA1",
	"BpJUAsCp+pmAGgOpKgFgVO2jMA3SjIT7N+85idTmksm0jeMXv+vKwhpBZnsQaU/3vClAjLw5TIgFlPaM",
	"Z62hVGHmfAGoPelZayhhmGkfpF6ZSF6dIPT98+YyXWlXrWqc/j3kJ8IMlnpNS6A7ccN/ht7PlyAjNEg7",
	"Snifj09eenpM39KMHCc1lAiV7XXrcU9RwTsfS0zgAACq2hX3FSZzYCHx5eL3x9Q7R/R0JFrq6Gap8fxC",
	"Ul82WheJ6pIgXQBUh3t1cEuHsurAZeYhfpSwY0I4Atrbe711y9uycsutt1N5q1Rug+IWp9hTVFYsaUU2",
	"V1trbckzfqAiuzAL5RnWmj3yVGlOA6UVSrzqXtAoJF05RXX3xc59VeJAZ2F+PnSdadtGWYlDxDM87uh4",
	"7E6m6m7nH/R27i6aH/2iOXRn+WN4ZX86twFpePmZJNnX6889c7VE73Y+8A2gcVro31y1Tg7oFbL5vSEc",
	"+M3rkHxWd546SkeBXoNx5yFUmP+l15eEEnjK74QcozPx+GmoklWDD02IH+jM3iL1Rjm+RURd3jKSyJij",
	"ivyMebPkh8mq+kt4mG9OK+lX42W5czXasIdC0+QgNEkOjVdyL+xBu0mrL/m5APAzEVr9TBqv5O7Yg3aT",
	"VnfycwYw6JHUUkCxhu3nPUUTIlGE/Ff1spJe8af4uB5q9bP5Whpm86nYuJIh/9V42ehLFmP7GFa0VXRa",
	"SZL/arxsdCoLs33EKto2OuU7nlB8ovwteZPV3z2SV5nw2Mj5TDwPhNfVI95MvAnwdtIzXiGi3qt5lQjh",
	"CS8IIZRBXLWe8EZiGbtV+xFvVn2d8Ub1A7mJ2J3whBeWkD7leIkJ+SH3yBMqoK1aT3TLT0gfh6yR/Kzb",
	"v0/cku8iSh/9/Wvfh6N44ht+88nf2aDvvK1wDALugi0tv3Se/vnU/Z9Vv5vf60LR7Pd+6t3308RCdY1t",
	"seoqzJoaMbFn7aX8yT/wqmG2PvR0lXPSpDbRzenr3tp9ao9z6CsH/uXBMfd8gWh+enBMaId9G9fjSe5k",
	"Nu4Xg9cGhWBG9C4fmhKWXc3Nu4P4nZv31n/F0fTurnF8y1GoKFHdMsa/x7QXGCBkVtHHMD/bPYJif9Hj",
	"AoYDo8bmHOmdI/0HdaR3WdvbWdvlbylNR1HhpvGMhiM4QDtu6wJCihwBxY4AFiIgA1rz2nfRJC6axEWT",
	"uGgSF03yCXOjtlSZmjmHumy2qutDW0mp38mWgw11MqiOHM45I6gu8NmCJCQ2SBkhW5CAndoYKLUyUINs",
	"QTIW6ywb9B7SLbNu0+mmW4dv1bfkHV04plf4TaTom0bBB+tFYwoOrkPZjwa9hzbR2CHH/j4q46d2hkst",
	"DRe/m7bwjMC6TlfpQeoe4xQ/s0pgYgA9Civwc6cENhlQp3OuLrSZNEoEhgMYSSpDXsja5DF3KmNGVXiI",
	"HURjs81sXkt4LI0Yvyu2EY3JPmMqjRlmzqnxWGRG23h0JQcDspKD2QaRHAw3huQwGlvMJnRyMJzPfcEx",
	"AATG8jE/7BiS0eRk5ciTPZdtMM3KwSfjmoCFxrPe2gko4zLbPlu4RmalDVptMM8K10ZllzGF41HXFTOo",
	"RdnPxGwTKeCJGYKx2GI2vwt4w5GZnYwsYMRUPuYnI0MympysnIxyeI0Nplk5GWVcE7DQeNZbOxllXGY7",
	"aAvXyKy0QasN5lnh2qjsMqZwHOqUWcFwPrTOd9b5zjrfWec7+/6+s705/gb3Wx7Hjb4b1QhMSbC/33PM",
	"1HRw1Hhw+BNRwDAKi9CWwSKA3WDeGNkGC/Bx2GEyXYzMg/25jrTBDWVi9mlYoRhJNsafhc3sEubMMv4k",
	"bGIanXWGM9zKx2ATk8kGOYWpsO7FnE5zplng1ohsMqRuRMrQFkOeIsZsuzCyGXIMo7HGcGobmQ0Hk+pB",
	"MJhLycIhOJrpUDebIIhMK6ehLeuhAtkUbDSf//ZORlsWRDWysdlphVorDLTDuXFZZk7jiPShLYk8v5nZ",
	"lmJkS+QYRmON4Uw3MicOZnuFYDCXkoUTczSTom6aWxCZVk5MW1ZFBbIp2Gg+/+2dmLYsi2pkY7PTCrVW",
	"GGiHc+OyzJzGkegTcy93NBZyMdeJPfvNIK0SLi5ThsuU4TJluEwZLlOGy5ThMmW4TBmfMVNGu6ibZhYL",
	"DqjlpzVc9WLwSillRUd/DjawEBto7F9wJfTUylipnbHiPwmaaMZgW7NczvD0l1Low/YJCRS4WUiwzxkK",
	"iCCgjDcnCRvFEE5RhGvv+U0oE6EiToEWvF2Oo84FCQMqldLYWY4GaxcN7i5ikQv04SAjIRaw2N/jROzU",
	"xkCplYHiz4UGlhFYNlgqdZBGsToKenbJSGyQMiqr8LNLRmJjoPjZ1cAyBssGy+oOEymW1cHPLxkLsYFm",
	"XHYZTDEZi5WxGkyyBpox2DZQiXmYxroqE36GiTiIOZIx2WQwt0QcFkZpMK8kJOOxy+RkFAp5mc4r05NR",
	"wDIqq4ynlunJKGAxnlwjnozt0u7DhrdGwTdtg53Lk+rypI43k+U68jqfzXIhQZAOQgaF6R9kWE3FUhOI",
	"IKBM1RwyNoohnKII11UstaBMhApXLLXh7XIco1iSMcCgu3IPbyVNk35uXLPMm+bZIi1kl5pBJjALmUBm",
	"kLXFaBR7ekozkkxac/JA0n0SxLyKY6uPCbIc/JaRJPSpd0qJuqB9Vxn8sATsADIMmjYLmrUQ42kj8GMW",
	"oTo2/HFn4UFtNpBYtg/OsLQvuGqvbMAH026pYK+uQXuu9P0z9LpZ3DQrt1rEEQ32bzpp7Kv7zW0Bsssx",
	"6RjAenRDMABAKYb293tzh2/W/2Vnp3yiNU6XZVkjuTo4GqtSWSqZS6cpi4rzMgcl7sgjb43qx9BFVKod",
	"0ZqznfdO2D0Tda8E3SPB90bsPRF0LwTfA7H3vhbc0J2r+/IBvGzgLhewywT88oC+LMAuB/DLAPrwhx/2",
	"Q/v6H8Nbw2csvl4Pr1V0vavQD9v4wZcXd24WMpHPrgZ48/ySjrbq+BMkwPj9A1MxSX3qFRWTpNfW6tQr",
	"XYRA9ekrDF116fMToizRnv/Fqrfz83Ul/Wq8ZHFpK9VDoWlyEJokh8YruRf2oN2k1Zf8XAD4mQitfiaN",
	"V3J37EG7Sas7+TkDGCzpL5yirIn4BFv3X7wv8rbiI9asKutfF/Tnt0r+gv/kryOxqD//Vb2sJkrxp/i4",
	"5mr1s/la4mjzqdi4mi78V+Nloy95xigSDay6Xogg1aThvxovG53K80YRq7nqesFBhMOXNxYfsWZVNMZK",
	"/sleFy7tq/pP/ph9D/BX/Kfwutm5/Iw1LHdP1oL9YK9Er7RV6wlrJNjnV80HchNh1olPWKOG0XOlesia",
	"nuKDtCLr30WDHwo1fdfxKWyRv6yuV5uL9WK5uNr8ur672g0j0q0NiDxxlnaPEK0KfSpE41boU5Juv0If",
	"shtghT5kL65mmquZ5mqmuZpprmaaq5nmaqa5mmmuZpqrmeZqprmaaa5mmquZ5mqmuZpprmaaq5nmaqa5",
	"mmmfvGZa7XasWSmtBBjKrNBwcxn06RfNd6AABxEQFtogQmpGrMggBAxjGjsh4qJwkimCZN04lQYMXojw",
	"GJUmtE0uY+JTRHgorCss+LEKCzYDGIYjRiWPAu04U1fA0BUw/KAFDIVIHY15zj1n9FeGK5DoCiS6Aomu",
	"QKIrkOgKJLoCia5AoiuQ6AokugKJrkCiK5DoCiS6AomuQKIrkOgKJLoCia5AoiuQ6AokugKJ4xZIjIF1",
	"UKTYTJjxJEZXQZFAnzMMDIEDGVtsYngFlAYMgmpt+1dsUv6kBW0gUCvWsdiw9omEAFwqzhUBbRcBdeUg",
	"XTlIVw7SlYN05SD/BOUgwYcftiok6w12Hhp2BjsikZ3BOXg+PlV9AboBsg7ZC5BnoF6EFJxaNe0QGyuH",
	"ghf1A22wdXvgaGwUCwRttnV7IKWQeozIjVeERArMVgFG/CbMgY2KNrpSpq6UqStlalzKtM42iShhKuad",
	"VB1fLH0YwM+9J63lECdZZyD3fcxogJ77BiNyFWBdBVhXPdFVT3TVE131RFc9cdrqiao85zfJsx8Gv/uI",
	"5OYHP/P3JMxIMtNiH0Zd9ybYltj2+bLDS6NrJYeXKQUIcqgrK8nGRYSoXOMigq5U44P5shUpqztyHCMS",
	"/YoU6qbn1RVaix02mT6YnbcDz3jJebsIt5ubF98LIDUvvhNhI4dqsS8r0MEEFUInMB02rg+YBlu/DxcY",
	"7gLDP2ZguLNkO0v2Z7Nkq24st36SFXeF+9R/lssf3NzsFsvFxeri1/ViufhfN/d3m9X1Yrn4vt6tLhfL",
	"xe3qbne1u7rZLJaL7d9Wt/l/f9/u1t8Xy8X95vvN/Wa3viz+zlsWf/7j5uav6/Xt+k55Vbs9kuNlcIRW",
	"Od77sb8PsjftGmfnYE88Gu39LEqUQjsE6auKn5N9rL0Qn2YvuXhBSXYug/T11wK0LxfNS1QazyYbTQdq",
	"kOtcdx3K09H3wuigW4cq9pPMYz9V+BJy9IMwCJ89GjwRLyZJftVBKkTOJEnVtfSaX6J8DrfmJ5PXciHV",
	"fqwGLQ+o7lElB76+Pt83OB9Z5ycoYy//AuU/9Ss6iTKpijpJD1lTaemylvKz7q9eZOEfPhn4u+o3r+hT",
	"zxBe1kd4UtX2Uc37qsyP8qXeV3k1Kdlr/qvzk51Lc5KPWkVnlj9ocT0APmZxHfQfm8Ml4fkaQqvoBQzE",
	"FMUIuSc5amo8Pmo+PrxOXkQxApvatymNDITSvgnMxSjBQlMxSsDaaTUbUAQDZp72UUJHUbRTHO36WTab",
	"YEbCxeTabCGwzHdcxk0JBRicfYzofwIMaeXG/bqQ7joAP5k2+mHpyJ2BPH8wowF6/qBGxD7O9Abxa5Rm",
	"TgfrdLCfUwfrYutcbJ2LrXMWCWeR+MSxdf3q28HP21rZhdZDiCjMybD/iV3jpuZDpBaGiFdGSDhGYFVD",
	"uT8c/CDoQUGLVASErVMRUnP/lEEIGMZ0RxBxUTjJFEGy7hbbgMELEb7hNqFtchmz/YrwUFirRq8OY8Gz",
	"dXzELsIxglKUHVHLnKC2OWEStdKFcAT2CtbVwRnOjU6gDYIDwTYGDqW5u9fNCai96X7D8VAYmRRIpu5O",
	"LrTHCQm+g4uQtriJ2bk5rAVvnigNuF1fNol6Xt6Yf0Nyu3jM26vMsPuIno7hkJLzu//2SLzt3qd+kn7x",
	"sy9XYeYVW0H0EwmrHtlPkojD40O4Xn/dLZaL71eXl9frxXJxd/Xt153arJxEGdln29CP05coqytYcVS3",
	"dze79cXO225Wt9tfb3bedrfa3W+9i7v1qvRf6m1xtfnW0+Ryfb3uR/J1dXW9vlSSfufvX3dRHAHt4I9J",
	"sH/1siiOyEyjToQKfxM6VwXPL5nmGaThu6Tvq/R7FJJCHJrjbUfZDPrJcIZWw2SOQxXBlQ9RTYyKSXzG",
	"fT5foWpkA7E6zcXTt5H9krfNkcouGEwYXfMENBGHJ5WnM4cEkhqgwozpDEDivLMSfMSRoQKPODA66Kgc",
	"bOWgVfyw7ZmFCFfi48KFKn2eOYsLrdKYUoNhVQoc43mfqQi2632G6wHgfYbrQJyp0Dgq5cxVmb6lTmBx",
	"VLg+YHFU2n2MVQe5bzEPfuqzPfPZGJ6YIbCvV2CIqeHIqOnI8GqYGsEYebSdQ4lzKHEOJc6hxDmUOIcS",
	"51DiHEpm5VAi6dj0bsv/iEIyfA1XfZTekWN0JkWhgPRrEh3vSBqdkj1J68/2vo5Xh0MJu4uakAXyOEoy",
	"/qKga82StXEtx+p6fbdbLBer6+vFcnFxfb/dre8Wy8XlarfyLtYb9utq+9fFcrG+/updfV99W+d/b3ZX",
	"u797X6+ud+u77WK5+HZ988vq2isQenf3hSr915ttjny3KsAfLvN2D9erTf7f9+Ifb7f+fnu92q3Vuoxi",
	"ADuf+a8DInq5skY53zo0E2Ip93YSqE5VREz9UPdKUHvM90k1H3Dt8J2RY0yVatDRVNxNlV/FTaYLrjhV",
	"6YLZwARqlZqRSp6fUCtcjc1mGiPOaf6C/+xXG7IpyWM12S/2UgoslSNKMerGatjTqLtU3dlWeCH7gKi8",
	"kF1I+9rgblNPsGc4AAFCmB7yNSYKJZaCidW9L0kQFr5Tnd7D6T0+ot5DvBoN58usTinNTJnuS9J9SX7G",
	"L0nIlwG/pMH8jxkQ0O+YQek6j1fNCai9sTszw0NhZFIgmdqO4nV7nJAQDuICpC1uohzDGSwUDhofLn73",
	"qqyN8JBw+Ut6OJ02PApck2Zg4DeMblFDoEc1+/5gcBi1lQhvVTlzIOk+CeJMnfVquSC/kf0pI14+KaEu",
	"iTrucKaJrfPRkpRkmmETpW7OO5LSG6djNE8BoYe0fwdokv0U0ExKUSY4VXaRXj7QmTttrWKTuwWuSkHE",
	"qFnyoegwPvPT1+7qEi2zc958ll6qPeo0cbY35racsE2eKQJvfgwuz0+ra+PjG/DDtLSjkDCX8EGtHY5J",
	"EkSHjnyA+V1Bcw4XR6znZ8MTkqGtutZZUJ3rfpp9qHfqfcxNqiUUeZU2FnS3W6w0oe04x3Ye8foushIK",
	"tFpbWH9V4sP6CWskcoq1kh6BM/2XpzBXgZc/qkyFgpSqBIXiM9aQb7KsTfXTWF3OWIrz0XX7mdvPRtzP",
	"kI7TutvNsPt0F6bRrUoK4kexLKH6gVuXUN04C9NHtjA1jgaNzIL1QQzMtFgDQlMs1pDaCTRFEAKGschV",
	"/byZIgicZP2MmRIMXoiYXJkytE0u47Jk1vBwk5izzDrLrCsz4yynznI6C8upvgqdfdrDTHIlDNAaVwI9",
	"Z7DWBNLc2MpXoqEgGimMRm2DadUcJRyEubQGtMRHlLG0BIWC9ds6BuP1KtUUOppSwEBMUYxQtpejpsbj",
	"o+bjw8dViihGYhM4GlrtjKoyZpfoYXHQUOywCGhd7N1GbML1JN9ISBJ/Hnr3NKJnsqIkyYxoKTDgSIjo",
	"oF3NL2yKQO2pnrWVo+4zmUTUjqHkPiVJjmxDfsPzCqfJt8xBnOZWc/yDetttvu0E2VszxOji7mp3dVEU",
	"/rvafL1ZFCrTq4v1YrnYrh/Wd1e7v3v3m+3t+uLq61VH+iqecutbEp1iqLvJO2SIOuQTs8u2QsIsyN5W",
	"6Vu43wI9pNYtUOVOStIsOPoZOXgJ2b/taRA+e1lwJABdiKEL8CshsXr0ZbQpU3uqLUMD2bFo9Bzkr9Pg",
	"d+I9vmUkNc0mUwoO4GqSsvl4S/2Qh6dZ8z865xeop6jHbHUI+j1d8vdd3Cvecfo9vYA0deK71g6hwrys",
	"iNEx6OVDV5N9Pnqd4jsfxxmQAm9NCCd2yaShOTyO8EM4KlWp4Ph+xnySitWtWMpSljjFMq0Mk8KCUyym",
	"egkozxnxLLigUUi6Dt09ZTfVLutvEh09ZijunnlZ5BWIDl73HGwwro1YhQbte9gSUz7MTpHL/Pp0vmDS",
	"8KxcCCWMqBuhhOGvhMRzosfAj6fYBCofnvIX999p3ky4E0/rOQfouKNwuK7X6FjZfNNir4o/pcR89SYm",
	"JegTHuvl8WtvelXD1ot+/6V6i2QvhQfaZVPLbZSXTWW/Op2TpGlyF1H66O9f5zR1J3EG6aTZri+IQTcA",
	"VxCDXsbKGSd8Gw1/R/BdRjuScIKPq9aOBgjsUPQxLIl2j6AQFfS4gEEruLGZfKp2HhKaRpoeeEMCTA0Q",
	"nYip4cio6ch0zT99CFwkvfPXcJH0o0TSc8WbXkt9vCq1nWZmOeES/YyGIzhAO4n1BIQUOQKKHQEsiaEM",
	"aC2voMt36fJdunyXuoaHQS8AhTIA7behxEXsIbPvpKDohFocPbU5erynhxrZGNU9nQeo8wD9dB6gQybZ",
	"wfUnqEvRe6uEg5gjsb/4BeTUwiipjVHi90wZyQjsUtnt9ZRo2wbkkJZTNPVCHfIejrw3UC8wvzxkJzD3",
	"PN1O/ujR/N+yMGaIsfKURV6pOgY4dRRQPHhaH+x9/IsGQsDDA0CLOr7K/Dey9168Yw859di4BArdx9mn",
	"KXQTaOlSxTwCOsHW4sxbl8C7HKzCFUShh8o2o+cANFxexqfZy5vav6rLacpPs2pyg6aHBKnnXqNgYG0R",
	"kPDpUzGKR9jRD08+hW8VDA6+WRyDJIkSYIbxkPyG4BjYqS1+eUtxbCyLNtfOUnBHOu85iU4xBLBILMGZ",
	"gUy0Ls7TeoKejx/BOat5xinOr6XkwaVKNFXvsaptst5peA1QxVYw7PPVXmTKBVQtDrWXmGp2qmeeclZJ",
	"M6aaHz8G7h2f112qGN2Ag/9AJUfxFFEmoeFHfmeGmlke8T1JZdC7XP9mVbgIgqIA2o6qOQL9dS2tBfUa",
	"kuq8dvoriny06nyXIzRyGGrfPaSYBF6Qm9XMXi6uNt7t3c23u/V2u1gutvcXF+viuW5oQnMmCb1drv5e",
	"FEO5v1ssF99vNrtfF8vF39brv2oiBMeVlFFmWidS3fQHNoBEU2TDASQCni4nxcapxzzbmk+Z+1vzQBRb",
	"i49Zc0uJzNiuWPk/HiS/RbifJNtIhaRoxU9V3rScparkacXzqmxxcaRXdYvLXz2Fi1UfDtypUflOBSgV",
	"HVG9UQF19ST1Yt0fs3VdYRDt5zJAe6IpXnCQ4qbDm5U/+t1BW98AvE3rub7/qOJKxfPlKd5UyfNap0WV",
	"Qq/9htecaV3IeP2Z9ou6TA07oupSNfzBKJVsxO3njqSnI5nPQdY+wTY3d9+LmLrt7ub2tjiptvfb2/Xm",
	"UuOc2p7SmIQHcpjPCDFFvt5B8TYzxZqVWL1e1UrajLxs4puM9WlDHzxdx7ZVDS2VGPSLJV8s5edKZ8QW",
	"+xyvvswl7qk/hhkdOiv1c38XGxVxs33/gwe6DFyJzA5W4Yop3ioNz9tqQguc3q22f/V2f79dexfXN5s1",
	"qyNZPrm9u9mtL3bSs7ub6+tfVhd/1eps0kgSlc1wnGASXE+IeBJcR2OFlABP5QMsSKBuD+zAOAiAI6JA",
	"SimUUm2nfgHAwvBcqM5HCtVxQRcu6MIFXQx9QTk3eecm/+d2k2+pDGAedq1QZWVZtaZzGNiJb7AH6atf",
	"p9Yd/4jSXGoSBLgT06khoKJgeimcXt1FJ4PYGCboYtmjprFTkbBXDzRGgULciID3SaNRce0XzhG31IMp",
	"80m+xQQ7iBqzHv14mWiMwUAY+uMYcsHFZTh0PiK6PiIoJ5BRDfZ6hpvJNWnTaNEm0aDBOtHyah+MsWj6",
	"SqCDY9qIiCVM9uM+mj1QW4Om1gaNj5pRYBqLhYMOz3rEih4RZvNPxkRsoRqffYZTUMZkbdyGk7CBagQ2",
	"jpeUyhXOcoWzXOEsKKyzvDnLm7O8jT421acrWv3TrW1oOw2b6YB0NSjtfk1VXJAxmuu6YOOsokehceHQ",
	"GPRmd7AAcdPeYJHi0N6EGNhh+xz3ctc26DlTtzN1f0xTt6U4b+hVrQvYpGtj66cSKzUZEDUakLbhuQva",
	"LktGto2ponymMimp+h7TatbR3/uMF7fi0asdv9Ltr3L0CsevbvzKtreqnfuRcz9y7kcuS6fL0jnbLJ2a",
	"mYYGCW5HIaPnpAoVsYZrAhbiJ6QKlb2h46ejEtd4rDQ35ypC3E3nox2TrgLZFGw0npJ2DLsKZMaTcnzj",
	"bp0cbVhDx5ImaGv0XJZklyX582VJxmUGbOcM0Z2KCkBsl8aMbmGk2EFQ9CC057IK0pgFLke2y5Ftn13a",
	"aUAHSVVlEULPMzUyYhHbJKzET0E1MpsMwE/KDmwjsFTbwX6QZlW6KvTsVCMjFrFNwkr87FQjs8kA/Ozs",
	"wDZifYGhdMaDJCvyoqHnphIXsYdsCjbiJ6YSl8XR46elGtkY7HShrH/yUNbxYlinC14dN2pVfxznI6Kg",
	"y3CNFXj9Fh2c0HItmDItx3h1yl5ukyiL9hEVU3h9v/y/F8vF9tdVR06uY3zth88n/5lcRAcp+dd6491v",
	"F8vFP371Ljad0LdJcPb3b6quV+sc/HK97QFuQ+0ubhfLxf3lbSfULvHDNI6SDF6S5sWL/TT14pfET/U2",
	"nRJIoFN31TREopwe75E+cx8dj6cwyN70AhOCNH9/UJfLeLfsmr35Mjsjg/mc0SnEUU5r8HSp4FAzprmY",
	"lCwRUQ8j5JiWi1NKEm0V/JkkKQvEGurjgTXtToRZTaJ2Tkw2VwvJCEOrCfjRsd9Vm8BnzIMpDm+gQIRq",
	"UxvexGBb13KoDIW0pwD3kBFXq9bqBK9JOytwjBXXvYqqhSYIcnDqWSomIWBEZjoQMPQUJZCWQV1nQH5c",
	"lyWoF4TUlj/jBQn4zOa5Zqvf2hUL2Ozn5Qr4T4vJaAeyzXaks8/ZyXPN53/yx+21xFsp3jSBZJa2HlfN",
	"G83k1wOZbOuFxN/zn+w1m/XsLf/VkwVXmGC4HCsT7cJum32vbRab5UVv89Ooy6JGNGa6lw7Sbed7QXcD",
	"SviC7sXgo1HYJkH+Ey1omB9FC1xTg6iAQ47WVM3WQkiRI6DYEejqF1WAhsKGO84oUViXAcahpoUEh2Ak",
	"7Yt84QMpLdtnsx4/eWdADSx8NGA1LHxEY+WBgSmo6gs5aNnVYLC1VsNp7qoiAAFCmK7hGhOFEkvBxOpu",
	"mRIEVmjwTVKGtcdZzLZYQ4PzxAh3/GGH2+pbU9tF12UlcfUAXJIElyRhgiQJLmDWBcy6gNmGydKFxrjQ",
	"mM8TGtOtWh72Zo6SzMBRvYQmJuAjuKLnaKnRmKjZmAy8yxn4GGwxdbXA6llVCGDrUoVBc99Ug+JHbroz",
	"qHBS/FCowVB0t+AOWPNJAN+gu7CMIRXM9q3Cg8YxpmtTw14MVGEqjIjaHEarZnEjQyhoUaPDyUrH/wxO",
	"PpxujDS0aEexX59+kK9d5b4A2rgqKNhOVYFpnlNCe+BoTPe+ChEFUkqhlOoeOCIAUljwo0UCtcZTzCFS",
	"AUMBBZ8L/YVceV8o/eqZTw9wCVc4NUIMWA/gDUiLbsT2o037H93+I/Ed2ZPgzIx2znP+PT3nn4OQ6Oo/",
	"xzfLvERppmRcBz+DMP/yU4+NsoASb88iSobELUWgOO/+j+vdX8wi5uTPZkhzOljz/q/2sk8bAFCP8LPH",
	"AEi7YQu2e28acxNyDrPW9ormDsDWO9stzMMVqoViM2KhQmoStFAh+YRxC2zJVvEK/Dc2sCGfDqxN8Wd3",
	"vEO57vnj8gcPhRCnGo+HkJ65mAmLMRPV/P6sYRPuZHKhHNBTQTeaQ4Vr9IAO5QBGielA9gQP60B25CI7",
	"XGSHi+xwkR0ussNFdrjIDhfZ8dkjO2AGB/41DxJjDQYTYQ2nXZa4BiBACPPKvRwThRJLwcTq1yYWILBC",
	"g689GdYeZzFrr4aGQ7qop48U9cTVLoOCLfSIoMVQQMDWQAHynEHaEv3GpmuqQEIB1FEIdbrbE2+MEAZ8",
	"U6rArPAOsxUVgPAgKhfL52L5PmIsX63t1ijrXZprtO+tLW25/pe1rDdX14wVLUPAr+qWWn6wSqrYGVhP",
	"AB0NQk8AHpGL4XQxnC6G08VwuhhOF8PpYjhdDKeL4XQxnC6G08VwuhhOF8PpYjhdDKeL4XQxnC6G02IM",
	"50MtBR5B8PAfF4vl4uE/1W7a0VP200/IunQpFeEubr5/v99c7f6+WC7Wm9367vbuarvOf2y3683uanW9",
	"WC62u9XmcnV3uVgudnf5I2UnGYnvw0CKa/jlardYLn75+y7HeHFzv8l/3q7vLtabXQeSKPGfyW1Eg/3b",
	"RRSSfRZBw1Q7PYUTEtNg73cXg2x98GQvQZgf9OeA87utmj6dlG7h6phSkYQWeoZL6SucRQmpQ9x2xfua",
	"z1fbi+3VYrnYPHwnar6es6uj/0yArHyP+Np3ribFImA8P7NZcsov99d2ZcLgd6I5F4WtV6f10TsE6Wsq",
	"bUwaMmyIqkNGg9uWOkZUKPsksFkZC5ozjLFnIA6UzexPGP/JRtYVNDYYu2WvqEwtLSlQSnhsFk/lZy88",
	"oCn/kz0uSliv6j91Y5ygQUyMz9PEX7Q7sx13geoBEm+B6mAsb2LnteVyVTv/FuffMlWuavl+CAaCuSJI",
	"cAQHaMeMLiCkyBFQ7AhgLgsyoDUvAufd4rxbnHeL825x3i2f0LvFBzQEGqVzCKAFOgfR9T0o2xL9xsZ2",
	"7BwJBVBHIdRpOwywxghhIFwCOJgV3qGM/jkgFKhbtzjoI1SoW9A+WwzaqHP7zkkFWmo0Jmo2JrzPFgcf",
	"gS29auVBwrhyDT1XagTEEMNorMFPmhqB6eDwU6fHTmmDRczM4JEzSd70VVQPx8sgfR3S7VXYwygkoyFP",
	"o6Nl5Eq77VuakePqdAiy6+gZaqOoDBvtWPNar9oU1mQmu6cgDNIXfaUIwAAHqiDWenkkacqsngprcBqd",
	"kr12MHwK1C7fpyTh4u5WwzYtQqWgJVNZ8ScfyY/BqfUJDWHS+DpzKBZj5tkQyx+6WQ6FCcyaiE+mso4x",
	"GbO3/Bd7KUxX1kB8wi1mopkvlWx7A1YzpWFM4vs05rGuLm0byQz6gZjKDLqp9/zhLErlbIflpSphgJmo",
	"SiDdhGO8NYE0N05sVaKhIBopjEbt9GFVc5RwEKnCakBLfESlBStBwWlzRjIRQ68n4t7/jAEhYBhTYYm4",
	"KJxkiiBZdw00YCwY/JwB2RmQnQHZGZCdAdkZkJ0B+WMZkAWNjG5bGHs5EIyzHEpzJdTNYSMxlRnHQ2Fk",
	"UiCZuotAaI8TEnwJiJC2uIlZABwWCgfVOopKHhCLRUAYi0VIzfUggxAwjKkkRVwUTjJFkKy7RhoweCHC",
	"10oT2iaXMWtGhAcbs0fRvldKUoDXswqzhvUZ4ccNHAPQexszDpVha+enr1BLQ/IszkChtuIMjFkHku6T",
	"IO40uJEkiZIqD91wVtmiOeTaY8maFoQZSUKfdpSf0Ql2i5PoOSGprrEYfbYdT5mvreyuoJKI0kd//+oV",
	"LMbB6mbargAzFnk5vGGFfpy+RGrGFrufvoTrza9vQecLsV7IaUbivui//SlJSIj1KuBzVI97r0Qv139M",
	"Ei8l+yg8IMnKoqyc8AjYE4td1owP59HOmuZ/Vfj+O25zTftrviHLW19Vv5PtIsrAzWqDEOZ7NV35HPzR",
	"cWh8PkN1PqpO83TyzA2zxZ/aBfhqmfAafMITHulZnUk8xLN+IDWRTczyM0NbOJ8pVUE+9hNnKuczq65z",
	"V/6EWMNb50uzafW8CSAfLU2wxtsuYHLoAiRtEvO51GxePOOWfba8uG2f/6wN/4nEV+HBsG9AsU6rN/nf",
	"eKcB4RQSZv/6v9cX97urzbfFcvF1dXW9viwSQWwuy0fb+4uL9Xa7vuxEOYn3QaMjyz4HcOwATwM48rGs",
	"rY3783DJE2E7A30ci4CwD2MRUlPDIYMQMIzpt7eIi8JJpgiSdTUcDRi8EOEajia0TS5jNBwiPLj8COa7",
	"sjjhYXVeajhgkZcaULc8jwgBHpVxGZkaFQXTS+H0atfokUDQwkNU6ZGBLfIXVaenBseBQlQq8kUXwXKc",
	"VUmGBa0aqIVJhrIjW6C1qQmEIRy2iND2pza4iWDtrSYTi5SMAQrtfOScj5zzkXM+cu9fRKi2WuiUEWJK",
	"Jv1CQs4H70/og9dvyBoumcC1j/gyFjUGYopijLoNDDU1Hh81H59BaQsBxQhscr47znfH+e4c8LA4O39l",
	"pcGxvwJHCqCCh64nAZAgIa1JvcJIsYOg6EGAV5sIaSp0g5Un4bAvCaNVWGFBY7DhPeNxJR5GRA0kSCE1",
	"sEDXaAucGMFbmyUNvNRsWNRwWOAV3Ia3M0kMVrMC01jSMlrZDVzGeMAeboKTgvZXNdw9TnZywE2OAhQ5",
	"HQpY6G7BgDAjtDbXCmwUQzhFEQ5e+xzKRKgG67yCt8txozVdYAB7vAsOpNqNYUyvoGC8rsCeM2h7mO+s",
	"sQwrRBRIKYVSGkIFFaKFFeIFFtrkKWZJVMCI+A+gx3QC09VKEAQKYszUGhUF00vh9GpPVwnExjBBUTyi",
	"S7ud6B3ZSX6MqB1NmoHROjC6uXe5fpwRPKHdLjiSZr2vy9XfF8vFrzf3d4vl4vvNZver2qEzCZ6fSXIZ",
	"pK+/0CB8vfUTXxWjcAjSV6+zqNJLlGZdid8oKdRUDS/Uwq09enpSENXw8657rvtReXzfxzTyD3fsoG+W",
	"5bq4vt/u1nfe1ffVt6ICmvjb+77erRbLxfr6a9Xg+83mandTA2wfduxvFRvLzq3GX72cwlcPUJSKRZF4",
	"BaAmjKX4ptY3R+8Ub8sJVn1rlIidWoD10q5crIcDPFjUhiC0pkBYEIfMqqqsVhWnUffZPcc/Z8RGPTZo",
	"3EbFdB64UT/QDe2QZMUbSc8MQzL0owvUlbbMogoQwQOtBSEIogobuNpc7a5W11f/KGMHblf32+J5HUSw",
	"XNzfXt+siuCC/m4mCStQdmc5uADbByDEANvF0KEyaNYVlhbaAC/hsECIfeuygJxaGCW1MUq8KV5GMga7",
	"hm8ew0RKmy1+bjXQECt4RmaZwSRroLEzXIOp1sQzAuuce6xzj3Xusc499r3dY1sfvZoaHsXnr0o31Wuz",
	"gn9fg00sY48ImiIHNSpXd8fV3YFo/J1B489j0Ghr/CwlJVNoEkdJSQahH7XbAg0dorZ0UPi1BuoZDkCA",
	"EKZTq8ZEocRSMLG6y0eCMByiyqh0nz5eknOwJ0B13GMQHshBnepsKKHbS5Rmbb30iBnmAOWPgOWO/PD0",
	"5O+zU1Ka/3Sph1pCdEwbXJCCZSN9rK6tLQLOx/lkw2KTqZkPq5gnUmUmKReWWKxJlMOSd92yunB+/Ohb",
	"CJ/Q5sKH9j3H1mn79TO//fR8VM/9BgFlM1XnP19IQrQnr6joblqIc/o4vt5hdlmWymnGjCPsh9WsYOMX",
	"rBLmOa9aJT5izYqavKv6z0GjE9KiVC8p/p7/7DY4NbYpMWXV/1pf7Apj0ubm7vvquh/+Pjz2zWZr005j",
	"vk1j01LRatmkhesCYtHC9VBfNoY9o9m61vakdtmzXPYslz0LHtfEL/F6n7G/Rmk2lMfOGQmckcDVmXI5",
	"LlydKVdnytWZ+nB1phqqMBAAsJiRCAmsZiSC6taekmEIHMi4bpKIjCKophiqtYtSNYAMhIkoT9UEt8pr",
	"VKEqEQEUmKtWtRrCGF1AwJhbgGiuEtYWQL2ppAokFEAdhVCnO/t5Y4Qw4LO9ArPCO8zsLgDBsYTOQcM5",
	"aNg37TctXrbKjbUMaePUGtOnHlxoDDwC0VQ4bJPmWn7QlldBwba8CkzXg6BuDxyNsf8AR0SBlFIopdrO",
	"AwIAUljwM0oCtcZTzFlVAUMBS9u43jp+OMIjee95tLC+qYgc/YB6/uHAs2piozjpwY+9g56t4xg9BpR4",
	"8UsUEtD1te1GG1ECi4++yyHUHqYRJX2F1kZ0JBk8CAq/VZ1CkNuyJQsd16OtcHXgvg0lvAD+o2Oi8ZKT",
	"UG+Gfaf/zhyKRlYGemUPtio6xuKK6yutba/ssH69w5EKtM6sUN6eOQPVAueF8mrh1KIYWgSf0bmnHl1n",
	"SPVe8FthP3QdX9DV6Srx8Ff1A+7NItXGa1TFgxWcG4y3ths13V5Kqrjp/iJrIpKJPEiUHVp3IsH2AvIj",
	"wXZSH2uDGyxbKKB7M4OB3ZgZkOYHTtWaQJqbXsQZGgqikcJo1P2sqZujhAP/pBEALfER8znDQKFgY5Ud",
	"lG5gw1RU58ozHIAAIUyFVGOiUGIpmFjdWS9B2Aw+dvHVLr7auU4516n3KT8Uw5Ra9UcEjJk1HJChNaDu",
	"zBYhCBTEWHI1Kgqml8Lp1V4BEghaeIgVIQNb5C9qhdTgYL8CQPlNVOFNXMlNYLFNaJlNWwU2gaU1oUU1",
	"oeU00YU08SU0bRbPNCmbiS2Y6YpBuWJQrhiUhQw2rlSEKxXhSkWYlYoYyfaG8VZqYx7LYQk0BrDPEmYc",
	"U6Rdz6E+p9nwIiFFTbOuGOqWz8mgg4i+Q0jsp+nPKDl0eot0pdzQd5fgWCqfiapPDa+JS0JJH28048vl",
	"CQcILSdJlzF30GIriY01kp/1pCsovYN4+gH2i9trBWlzo634qD/7AOc+e1X95KbcXFqr+k9uuC136ZX4",
	"Qz85QSnkKjkB+9lr171jnkqc3avL71ebxXJxt15dejeb67/nf9/c7HoRbMhvGcrfJu0/F9V6X8Cqo36W",
	"bzc6Ezcfxy1vX9T6JSnJ4E5ctyVcp6/JLF25lF4oKXc94fsJ507XEuZT4XMeH3x06I1Ksf907R2M03zv",
	"4D/562KK8ZflDzPvDj62yRwzFB2O4JiB6wXomIHrxJmwnAnrY5qwXMyei9n7fDF74lUReOGrLo2qK191",
	"dgOVA83r6BC3qn7ASg7AGBBKDvA4Rrh2sysShnKGVZduJPeHacdyXpv+4tPEI2eSvNnUMHHEIdOY2Mab",
	"RkcyhUZMmsbCpf/7arP6tv6+3uwWy8V2ff3V267vHq4u1r1X7dtqkjc/u1f3l1e7mzvVB/hycb9d33ll",
	"yy7s2yoih2O+vlzdLpaL65uLzhSDJLnPPxN61D/qZJkfUGGGzdfZq9jSSNUpwY/7aTXuJ9Won1Iw5PAY",
	"QVktCLoNyaCwK5EMq3lZbQIRBJTpFUzGRjGEUxThujfbFpSJUOF33Ta8XY5jbr8yBvj3oFNLOLXEh0xK",
	"CAj05oYeWL4zBgRMdcagdFPTVc0JqL1xEjWGh8LIpEAytbPS1e1xQkLkpBMgbXETlZGOwYL9DKHJCyRb",
	"JswpU4QEemWKoLo+tDIMYnTG/p8iMoqgmmKo1naubQAZCBPhZtsEt8prlMOtiMApt51y2ym3RWWKdmMY",
	"QysoGEMrMM1ZLrQnMABTiVWIKJBSCqVUd+aLAEhhwVeABGqNp5iVUAGDfWEtJ2fCKOa1vH5z3CiDQg+t",
	"SEOCLr0oE4LKg6IzExbClADDDzcp6OKv02Xp4+aJs7rxQcVZp+LSS+8Fn4IaNCOmoT7doglAI2sec5ME",
	"JgxkUNBkgQxMO7tj1R44GvNMhAwRBVJKoZTqZ3esAZDCwmR3FECt8RSX3ZEBwwBVNq+HPQkzkqz2lVMl",
	"wBw1h2x4nfnr1I9T7+zToKN6Z2/By14rZBwlmWYuYGDSwyBeCGRLpR8Fp/6i/wHfflnUn88xVx6fTdfc",
	"IK4TufFHTCL8Bf+pV8xwICAglyZ/lf85mte/zLJJzNKdXVo2UJv0AzBVm3QzVnoqZ7hzhruPmhJHN5UI",
	"NIsKOHOKfsobQKobCylY9FPbAFLaAFLZYFLYoFLXWEpZg0xVAwYRLpbDlVer64J2rVZXcc1VXHMV15wR",
	"wxkxnBFDX/kwWNOo+Lx8NoQmJuD2iykVaKnRmKjZmPA1pjj4CGxxmnCnCXea8B5N+CEFqr0eo/DgHaMD",
	"GSoVM5kynIRZkL2t0rdwvwXmaVq3QHt0S+3PnzDLBUE79Or+I6HgZBdtbTimLlGvTr8z5CgM9jOtsxSd",
	"08fE6yScZ7rrE/WGZD+j5HWXN/1juThTP5zpYAvSvEJzDzcq1MuzXoy8gA6frpI9hdEqcJh1IRLyQ711",
	"fEJzyiEdypKltQFi1p4XHEDpgJqTjmGQaGA9Dgz1b0H28n2135M0faC+MHLNkngtpv2xbHItn0uKAMrf",
	"ssT3SgVox0J8idKsi5tHP/SfyZGEmac0fTY4JDdfVqhV3GkuynzG/PTfvA4TK3+dnh5Dkh399FXZbOB1",
	"ziQ2VujsrzgpdVKjHFwXhYDarX4oZkrwnPgZcTPFzRTFTLGSSO/hkKLy6D0c0i4TeLVtMztx/Vu3Mlrr",
	"nslz7bWe9xjV2RnMX/Cfehb0jmxZ9dnNXgoPWBOhXppYJm3QuF5dAViD+ne3ef2Q4qLp+w/WvpPzCnxw",
	"4sLg+6flYBS8DD6it4FMpmUXAyhyiF8BFLc0ZQa/m+slD9IZ1GAwhUENp6niEQGgIzJVSNSYKJRYCiZW",
	"V88jQWCFBtf0yLD2OIvR9dTQc6kDN766pX2gAjylFX1oZB1o9Qjy+UaPC+gFjhqbc4xyjlEf1DFK0K9q",
	"uJfwu7S+e0mhoYUG7FznUEObJEMNC9WBYIYF6ehhdt42ztvGedu4QHgXCP9pA+HDYA8+8DbBfujoKNDC",
	"DjtdrLCDTgOrbEsc5JigSwPNKwEONrMEQM0FL0GAR2U6gQVUFEwvhdOrux3IIGjhwbeGBrBF/mK2CQEc",
	"CsrN6ppLTzSwqxaeqvYawGI/xCexQppNioHf6ECqS4U6cEd+oH44tM0xTT1oTwbg7fJOGHT2qy0IaA9M",
	"EQUxxmHf6bDGTc2HSC0MEe+aKeEYjVWwM354lio93QLyEx/p/Ymc2Z4TP355J7+0Dsbh3NWyID/T4tJb",
	"QGMuFu1PYZANbeG74Eju83YtFyPZoartRVWTJHb3o2M6fkL3qXxUA/5TWA+p6cVdY5Alq+lfFZCfdpwh",
	"AvIT5w0RkJ/4qoIWvB1w7gwVq7nDQvVbbJDLRWxQ/MYXAct5hXNbeOcJi/RkMJlT0zgxNCi07MUAxg5x",
	"YwAjd7ZaZ6tdVHcz6OfgtxxqaCow1LAPQghm2CVeC7MzXTvT9QdNxu9sqc6W6mypzpbqbKmf1pY68H03",
	"qFutv2vRmnARBTHGYV+9W+Om5kOkFoaI14RLOMZiFf/617tD13oApfGq0ooAvlpqlACKYR9gulQDv7f0",
	"KVdaB1jQGUCZMYGmXookG9yP1JFlmhXP2of9hwtfB44bEzR+mDZSHBLlt1ycjx4mgt+GyFQ5fBXWERZW",
	"XgQpd4cblqvxExpHqB/aMQg0DKD6ylvqh9MZBOrti7UUHjSa1Eu30VR4YdvM0Oqz3ZdJ1GRND//VbXuQ",
	"5TmiTr0xcSzr1MHYITp1MHKn+/5gum/cbQeaFleAg32lCoCaygMJgkBBTD+GBVQUTC+F06urWpBB0MKD",
	"qxkawBb5i1E5COBYUOCFV3GmopgvwOMEICAAriQJkmBBbUleQEnR46D4cUBXnAxqLHz8CmwgGUEeJitS",
	"QOOqhzuD5Z/EYOliYV0srLPfOvuts986++2fw34L/HzCfjahP5fgn0mIzyOLn0XwzyHEZxDi88fks8fo",
	"c8fyZ47h543BZ40LBJ0gEPQAy6OqE6fZaTvUivurL5lGCIghhnGCDut7qQFp1HhwZpGZHbdKGywqbcng",
	"wOSjRgIGjhsYmwxBDQwoHUat9Bk5guNJo/2rFz09pWQwxufheJG3vikbyyEi71Z2eB+fVEb1hOhOuzTa",
	"v5IsxZjgOeiSddhBX5ErkapTs8cn75T6z9g1eyCUZOTg+XrXjgNJ90kQcw+G9vsw9VKSnEmidxWZyp7p",
	"PQU0I4mXkPREs3fyAHoKkuNPX8MV4viVt8yhInp45yXyfCJp5kkTcVjxXMBEqQe7Zz0cv+WA6U1MkiJu",
	"cfuWZuTY4UtW9JEGvxOjNVCiOaXkUOBCYnnx1SVTXqI0e1fp5QRoKzs6q8J4Cdm/7SnxHoNQPdD+yjFB",
	"5MURDfagg/cySF+votsSTh1NFau/O15JEhLqBeFTBFAVv5NnoJ/P4pdTdoh+hl4WHCGaQubSpLuB93oh",
	"0ug5yF8XK+rxLes6AgfXwtH/zXv0w8PP4FB+jZniQM+dO5IPb591fwbl/QRRbDLUHHxMCskxKi+sGreR",
	"srHRftidlZ6k+VQ7B0l28mnwu9+4BwjLPSzyd6urRURJ8BwUSU2185VpZrg6Zd4pDMI08yn1TukjJIF+",
	"sSNnZJ+Rg3pIcRKdgzSIQrNzwgQ09OP0Jcq8mHl2v9uZwimZabWptLpL9q/A2pHrFAb/PBETuZ7SR+9A",
	"zsGezLUEF/vS0fG6Dg4kAt/cHnKo7m3sfPQOQfr6TofsOzqSF53H1N+XxXeek+gUz3SKHL0simjq6S6g",
	"Xd66XkUVfP4ByM6GwV37ZxB6UZypNt1WqiJB11B+uYvfx/LnqfC9VVzOq4Jx0k1WqiCXXyYlH3928lbO",
	"/uoDsD7tVEeQeK5UOxNbjW2O1+xQ+rofV4fDxeEuOsLSuZyP3v7gJZGGS/JRRN+qklTj+YHO0nI0KjeT",
	"cyC/OMEYIH19QL45tO6y2ndX+H1w6H6qcx/F9Cpu1jIrj9EpzOqXfci/501z/GlVGI2Bh+Qn+3IBYNqw",
	"PFxEQvnHYGkvPpT3nLJfCy0ObNKWmh9P51yqm77nIDfBHrwv8UN5UJfdvSUVKN5t3I3tuONQf4yiTHMF",
	"E/rkBUf/mXidypgD+U0T2St5wyimyy6WJdk6BQJl1b4QgnV9c7G63l19Xy+Wi/tdR6xQDhwSZHK9/AIA",
	"0dfn7SE6+2Gtt4lit2tULf0pSmvar5bsnGDutAT2CtHQdMf6JnvvfOwSCvybFvLBd9Q7h0sG1Ke5hQ28",
	"HnV1zRYWfMee+/niaI/l1ebh+DWJjjtyjKmf9eyI0engBSyxQuOkJU/+iRb2jMSL/TT9GSXqGSUaBpSf",
	"m4IlT1+LFpYuIr1f2rHnHw4JSTt8hnpqxBYFoQHnXxKdsl6FDAuQgBNSDlPji5w1rNFVURlaJ6vO/n+R",
	"z4erMMgE/5x1fgC3sr+W0eo1F3UoiE+PNNh7r+QNOBWKKchvfm0utU3dcz/o8z3Si4pDlqi+jA7B09ug",
	"kutxeBf/pdzAi+4gs/189M4RPR2J1keDgF5nGuTfbKhDIiHH6Ey6viflQUL8fXrTNfQOTjX53CWuusQF",
	"qfd0otTbR/GbumN3zTO45oEvchm7DnSJGnbRM72widQArmxmGdTdR577yPuTrv6P8RnH7BmVGaNpfOFd",
	"CEQK9pV6ectLV39/yQcE/BgE6OT072z1pxlT4mk7ObQgY18zlKE0O+s1DdL8/UGvmGylinxXZ4MO1J2q",
	"TeeeNKl7UkqSwNdzCk3P2Qzmk95hmw+fb/2nMPWfCHRZSlCnk2bgNYOqvI20gM7HaXP48e/Md5Rjo2mx",
	"mZcbNbP088x8x54T4zMqEqXbmmCJuVtvd3dXFztvvbr41bu82v51sawf/u3Xm+u19/C9w0Cj2AwE1Jd/",
	"36y+X10slouvN3cX68seJF2p+nL5sdxyxZ8s69xjlZLvsU7CpzxjeYo/5bsuwHwtdwEW7zjgUCLB8ghm",
	"b9kP/oodufwl/9md+++VvLFn+V/soXzgrBTPlA3LfV/Znr0SwIqTYiX/bL5uIRSf8jSExZHAUxCWPwbS",
	"DzZ3WJ6GsPVcBZBvriqA4rkMUO2rcvv6sUG5pWOfY0rp+IBzw1l+AK8LPv7m3nBx6d3dfF8sF8WO0823",
	"aZJFNruynS4SgR+SMBKBvvsrZ/DyWGzEz4bQxATcfhBogZYajYmajSk0k8c4sbGPkNC7X7qC7R5h6UJ/",
	"0Uui+QhNCdpLHzDiXZNGi5/98HwzahSwvA5qHJo5OrqATThgmllCjZWaDIgaDUg3tUcntI1JAU/40Y1n",
	"HAlh0oCoMRlj0f7SV387mImrQGEoqgIHdg0zYAPlpf0ZUmClJgOiRgNCr2EObWNSWFjDFZ5xJGRlDReY",
	"oFggqvDyKx0kEAYD4z4Des5grUGjMJUjQ0NBNFIYjbqLp26OEg58eQiAlviIWQAMFAwGsuhU2qd+YXTZ",
	"gDRTc9CnqxzClUJ1mYU/Z2ZhvO3xlbzhVSolMDGAtq85yLFSkwFRowHhtSkMegSW2Lcvo2dMEw2xgmdk",
	"luHnUxONneHi51gLz+isG9cToWU8AmjSuvyqMOOD6QMNxwjUGJqM04anh9FewTAQUxTjTPMCNTUeHzUf",
	"n9mWwFGMyabxXZIm3gPELkdc/o1uphgdxIOqNKbD8j2XMMA8zyWQbpJu3ppAmhsnjy7RUBCNFEajdkLu",
	"qjlKOIhE3DWgJT6iEnCXoGAw0RFQbxVvz5mWUgGataj287OR1lv2G7Sf1VuLXtS2pUuzBV9IuHWkDQ5b",
	"LG14zY1NBUiQkKbLtI2RYgdB0YPQ3Q+VkKZCh++Sahz2JYHZO9tYjDBAPYwFFzm8WApwA5EU8Ji1yAAJ",
	"EtLqDCgwUuwgKHoQqLXIIU2FbrgWKxz2JWG8FgssSAwwv/2W9ylGKDU0Sh41OGwdinAEB2hJ9jVCihwB",
	"xY4AuAQlQENhoxegjMK6DAyWX40EiqAMgNG9Q2uU3KjjW7TTnxYQmJIbZSmDr0WJgruiQgHQBZoICCYN",
	"BOpAnVSDwOdzmDioqdFU4igLKGKj6gkpagvyMwYYtUfZFdQzGDajCH5BBV60SZoonKC3Y+vBBaa9gUIN",
	"TDtrbkqQsi4llPMfcf4jn9N/xOZ1RX2n+CqkK+Hb8S9XN9vFcnG//nrVsY9+rYoNgUqAVVW83vviASpx",
	"3Zmj43z0Co7hatgdZ5n/v5VKvZQZu9oUmNWnfTklPuM9ho3MLDGRnuQEJBrMviSU9JGkmde4RNaT3bgv",
	"rXEJbPNiV1XqXsk/2WshhlsM2R64DvLFyt6yHz03xXJc9zmWHg6r01UDVqlBOupBsWkkpW7hGPMO3CbY",
	"9r0X0wPorovpQDj29A7yixLA3WrdrfZz3mpBt69q/wcxsoKCsbICe86g7QkMwFRaFSIKpJRCKdWd7yIA",
	"UljwuS+BWuMpZh1UwFBA7QhweMA3Ir4bEs4Nit62EqwNic0GhWKDIq9xgdbIuGprYdToqGlUkLTht3Fx",
	"PccX4OfwxAzBOLXlT0eD6vsc3nBkBrX3KwSjsAdRdn/YSgevt6+DE1poH6OeU6fyFevmXG3u/3uxXNxv",
	"/rq5+dtmsVz87WpzefO3bcd37ffgOempGKH+oO3OD9z45OQNx6my1Pcluwn2YGMoIB5WKP+Ar42dkeTJ",
	"3xPdm69c/sKsZPPR34OQHYMkiRI93lTF3nUXwibYfy9glEsrLCX5bmk/o4SptjGVd0+PIck8Xg1k+JR8",
	"7wK972k7L5ScQhXNTnP5Jth/Rr1ytQyE7Xz973/5y18Wy8X27urmYbFcPFzd7a5uOvbyTbBHK17Z7sde",
	"81/sJdvt2Ev+q1tlK25t/KX4iDerNjTeqH6gp/wVtrEqs+S+iaPcu/j78gd/lfObvyn+Zi+KRc9elH/z",
	"FJX1iuZ5KoUnJr4IUhXEDjPQvpz2Xr5PdG3twjnWe24NnC9G50nP+dFzXuieEqwQUUe9M3nLHbCvNPip",
	"V7JwE+wnUpHLPVnXj4PRg5TjYOygGxjforQTkkCubHyLA33QcyDY9zyH0tSx1M0JqL2ptoDjoTAyKZBM",
	"XZWL0B4nJLjiRYS0xU2M+oXDwhXzzj7k7EMf0T4E/1IWL5swhoqQQLaKoLozXIYhcCBjKYrIKIJqiqFa",
	"e000gAyEiVgnTXCrvEatHREBGBimPhK+xWBMr+GA7K4BdVePCEGgIMbSrFFRML0UTq/2mpFA0MJDrBcZ",
	"2CJ/UWulBnf+CM4fwfkjYP0RwKYCQQMHYrMICOOyCKm5MmQQAoYxlaWIi8JJpgiSdRdKAwYvRPhyaULb",
	"5DJm0YjwYFiIyazUSmvrsiyb2ErVNyj1i6SNHZJCgR6Yr0aHYnDCGgjVzO6oR29D16ki2cSOWJog0P4v",
	"HJwYwdt37yjxUrNhUcNh4V1fKvgRWAO1HItWKFgiMQEQmElMgNTN9yaBEDCMccYyAReFk0wRJGsngpNh",
	"8EJEpIRrQNvkMio5nAAP9jNkHhSaxwz1w2HXrrGdukp3LmIYtoV0lOr0GKDR/tWLnp5SktWlLutHvMJl",
	"fOJv45P4UDSt17+FBqfUfyZCg/K3fuFMSjJy8PysKp5ZPaiaVJX5qzb1E94oTL2UJGeScA8C8UnlHJEF",
	"2dsqfQv3ZX31yk2i+ZwB8CrmrF31k/tTFPX7m1xqPpUas2L/UlP+TGqYBr8Tibetx1LzU0oO5cuV8ilr",
	"/OKz9y9+9ShKMyH4rvrZ5xbiJWT/tqfEewzCyjFEeih6kIRVLdDqJ38dyfVE69+Va0ntU5LW9VGTsLjn",
	"PkVVndT6Cfc48XNuvZyyQ/Qz9LKgGqDiheSkwqZoPSNbj/V8Wmj0HORPCvY/vmUkrRq2XnzAGq9l7X7e",
	"pvwhvxInr/SoP+IzJGnO53OQZCefBr/7wsJXv+OA0YF4Qcybsl+VI1DwHOQzT+hVfsYbcu5EFV/iJMrI",
	"Pqu8qurfdYMyb5G8BluPue9R3UR6LG5JqbQPncLgnyci4hafaIfK1pv8Wdjlz8GBROKuJDyog2yzKKLF",
	"x3NNY/Nps3G+9dayaz1mzX8GoRfFnGj+q8fB6pb6e3IkYfYtiU7xB0hWIBxXcE+v1tkEzaUigvYEnHYo",
	"GuttD+5MVr5k07ALQ18WhsLt/HhK84twD4uklsVfp1NwmGUahgaxdZL27lHFCXkiiR4HWNuPwgNG7gAX",
	"zkehxUAOtiOre9+AHOLex0rZIe4n9e6xFB2vhWUr+WK3luSSk6hcburp2jk3uyTbEGOHbNTfNfJu/xn9",
	"xRsjNMtHYnTWVBvooAr21yhtpgPr2seFPQmBFnkKjLSxzmSnQisQ2Fqv16swm3Qmp6XMNDJSpMJDRoIO",
	"mNDSLvRGVYC1Cp3Jcex9esq7vNRMeGyeeqe1NuvLfvuVCkz61FS9aQDJi7YB13ipBlX2KL+rAet1uWo/",
	"UjVrEdZ+pf1pg8tS5E4AdwLIOyo2ZFd7m9bISNWJa8ywm+4B2I7AMekJFIxj0tFYGasaO45GpeP6gAVW",
	"eK4BoSWea0jtQtwiCAHDmJeSrnFROMkUQbJ+hW4JBi9ETK1uGdoml3FVu2t4KOy4cXLjKw7bF1yAE4+i",
	"D92c0mKPIG8k9LiADkqosbm4LhfX9ZHz/smWAjAQzBVegiM4QDtu3AJCihwBxY4A5jIvA1rzYnfRFS66",
	"wkVXqGydYCDYhJXgCA7QDrMFhBQ5AoodAWxiy4BWci+6HJ8ux+eny/Gp1LgOf3Mq1f7aX6wdfhzQzJFN",
	"FXJHhTdlV7B8kiY9wbJMgnuqtdBAvssV9vWB27p0LCy672mmTLuz8SZNu6/xpk3LwAHmP2LqSPYS7UqL",
	"leWkq3ijypYCowc1GWtoUDSbaAnScJ2qewGG4gH4Bo7Ig43BZQOWjGN35PEU0APS5Wcfn7x9lBDdkLW8",
	"fRrtX0mmCzFkUn4Sio0NFFrhLXOoouhK16ik0IhhxOqEyn8sFy++2pDanftYCEMY7vcySF+vonruS+73",
	"muxVuezr9nxHcrL32S5H+kftrQ/oWnDuR/dauPfrhkx2+Qkk5TLwnpLo6KWhH6cvUaeM0sqm0U9wrYA/",
	"7+OTJonno3cI0tdUjx9s3bIk6sFeL4CZQzVs6Z1MqDw1B3227sgxOpOLw110hLmO7A9e3mvTb7jF+34/",
	"1RrJOOnCNbwNSg4IstH1nQnSV8PhVyjeefBSGlqt6mbB3gvCA/nNrG5z0+Owwvp+/IgoffT3wKnQv/80",
	"qBAbv9s4t4wIcERMHQ06TOJF3vqmbCy7lEzmNb+PwjRIMxJmWneDi6o5P63YOdD0Ate/QUFuT82ZwkCX",
	"rEPlAHnoKNLDe2y7P+6613UR07mD6V6+5duYinbqPxIKDvdoZ7jHhL0Y2Ek703UP3jYHs1903T5hPJdv",
	"hMpUL703Uy0yGzdV6xRaucWmwe9Edx/hx8Yzj2R8v4IRkMvxO5e2qO/mHWv4MYoyzcE8Dn9D/FJ+PhyC",
	"FKBLKq6B2uYhQp+84Og/E693uZdNtLFWtzkNPrySNxv7h9uDDCmM/ZKJVrYVkItGmkVJPr2YBvB06vrw",
	"Pmc6c1VPbZOzhV/LzkfvHNHTsRdxY6tQwLCulYSqR8mYy5jP141yVZYbxrLcYZChr1xD0LF5YetXGS3/",
	"gZoh+mVBJs95118npE4kpFXKe7k4H1IvOqedqNis1Dkm89aAmSw1rzurSeqsHK/AJNezkevpSAV6hOnO",
	"5xJmWrO0DaobfiuMWfjcXApRzc3PuvI7TfwaakY+V98hxcfFslV4it3nKsUZW+XnEi8nuf9j+jMGHFdj",
	"Gwg15oqR7iJGZt/hfakfdJZMHbmuVfJHpVHpZ5ClcFeODhnoysFNM3zJ4uItG0/N0oFZCra1m6VLkfNK",
	"ldRqKBWV3RDdT5LqqSN0uCPDETpDEfvkq6Nqy5/16/xOVb8tfmHTCylW65gxiqrNwXZ0Iq4PUFwiroum",
	"7ln3SihpoVW3QmkDBDkyNBTckBFA/TFgowC7ZIBHMk50qOKaoIm/cWHQQA5hkOI+MsShRmcgcWNGAxQ5",
	"YkSipWFQQ1Cf9yDn2RoM5j1bw2n6NIsABAhh6qFbY6JQYimYWF1nZwkCKzS427MMa4+zGAfoGtogstdF",
	"tbuodhfVrh3V7uLOP1LcuWjN17251nb9Pv8A2HVV9BXQpRl649akG3zVhtBe+kEM68lffH3fc5c7wOUO",
	"+KA1Ycdx86m1d6B13PTmHuRThAzFgIwAvBtBR1H6REFDMq5zqKGPf4YaFpgBwQwLz9DD7NJZuHQWLp2F",
	"S2fxpy4WatupC130romGWMFjv9KbjJ/aGS61NFx8cbwWntFZN677X8tgirhaNcPfMOPD3RiRY0ReITHj",
	"tOFeabRXMAzEFMU407xATY3HR83HZ7YlcBRjsml8P+CJ9wCxyxGXf6ObSUbXEzoxPJ9KlxL8qufwxAzB",
	"CFO5REwNR0ZNR2aw1isEI7DHpc9y6bM+X/qs7kiNwdVWOMuh90EGbdT5CBWwc7TUaEzUbEz43Y+Dj8GW",
	"Vuyf3lWAO9q18v8rE9h0RvUNDr3wv0RPRQZNTMDt87xAS43GRM3GhJ+KHHwMthxtJk0SQkGGDZfcH1fT",
	"0qlOn7TNN2hYdofu7D8Nx3zecJysDr1u/5XzBHf0v1xfr3fry8VycXe/2Vxtvi2Wi+3u5va2eLa9396u",
	"N5fF3/ebv25u/rbp8HDekWNMWWTKdIkiotPBC8Ig89JTHEdJ1lXh5l1SSriMEC4jhMsI4aKx3zsjBCQN",
	"Q1WlWzepr0ub4NImuLQJLm2CS5uAT42gYTnfw9q/X+qEP21qhO6EhCPmOVB8/0jpD94x2QH/IPyMyQ6q",
	"sQ3WVQd+oGIrsJtmPRC675xWJarOVSHyxVKOA44Oqezg4KY5DhTsqJu3X7lsBy7bwfyyHVQfdvxl/eA9",
	"EiLwtYkrR66/ryI3ToMC15Y2rYkyRaiotZ0pAtcHKFMErguXKWJOmSLUS3r4A0Z5CGtHuY2WocJlQXBZ",
	"EFwWBJcFwWVBcFkQXBYElwXBZUFwWRBcFgSXBcFlQXBZEFwWBJcFwWVBcFkQXBYElwXBZUFwWRBcFgSX",
	"BcFlQXBZEFwWBJcFwWVBcFkQXBYElwXBZUFwWRBcFgRsRL5LUOASFAywBRjqWPvLgjZoAQ62RQuAmien",
	"BAEelelJIKCiYHopnF7dc1UGQQsPfsY2gC3yF3PeCuBQ0OmTb+yiiKbtXBWbm513tdnuVtfXRUaK/Hed",
	"teJuvd3dXV3srm42QjYLtft54XZO8g8ymOO5fohyHbCoafhg/vZdEUB1dKVmLCZHNk6SkYI9y15P9pLH",
	"m2AP9O0v48U8IfpP4QhVxWUCy1fbKkndE0epGz25XITBvmuExStAQGl/xepm3pIK+TtPDuDMiE8eJH9K",
	"3h6SQ2U4WqQruYidlA7aeRr+eC+pPeSHyI5dmfiufHF1d3e/XSwX/99/Xy+Wi4dvq/zfq7vd1U3H7vtA",
	"/XAodLI3YrhrjwQEDDc3zBKrGAfcE+eYDwAXudQ9LBjtSPlTPzScAcfbSnXMJ8D3++3Ou7z6+nV9t97s",
	"FsvywXb1fb1YLm7v1l/Xd9Jr9qho0DFBipMOnEpq+hxPUE/2/FYgpz0YXrIlM9b0aVsClgLg6uPnE0kz",
	"r/iaPqX+M/Y7rURzSsnBM1CydHB6btmQYNmP6Ekp28nm2DE6hVkOpjx6OjeU7uwlL37SiQ6Q2uQUBv88",
	"EZPpopE+aLSZoQ6AXyiXqJQYQZhKcq4ELqYqWwJLYcL5zZjbsa8Wi/wz5kpgIxvMlNCb/8D+vtmdWMvK",
	"8mgwSTmpWDaNen5IWRj6rh/FyCwlWSiRIaOVe3gsXBDu1rfXVxcr79+93a9XF3/1bu9uHq627DtdfLdR",
	"vvqPHrD/6Ab7zx6w/2yC9d1DOvNH2MnV0JoaPFlD+wUDaZ75DKD1WGpene1S6/ppd14Hy2kb2D7JkyHw",
	"n/3pEPK9lD0u/uRZEsq1wxMlsF8DKRTqc4snURCe6OVZ6JsuE0Xut9et7bh9TA+gqH1MB2PFa7uYVBeT",
	"6mJSETGpypuZru9V3x1NGcfZPhNBLlgDd8KhWNV270BfMwvjBbudmY3Zqn5BuJugjewKTNaIsm9lbnVB",
	"rY2b2hs33kCvQjUaG03VU80rr+EcFBHZIml01plOQBGRrUGbTj8J0wgsdDHgLgb8Y8aAu/hjF3/s4o9d",
	"/LGLP3bxx7I5U29XvUr3aXB9Coc2VtFGqZNynul8tbPwuHAWF87y+cJZuIleqyGMkQUEjIkFiOasZm2J",
	"fmNTyRRIKIA6CqFOd1bzxghhwGd1BWaFd5hZXQCCg7RqA/rwxs5NdtongQsBcyFgw2wx900SbcLoOSMj",
	"sUHKqKzCTyQZiY2B4qdVA8sotW1ZaQSgXqVMATBYX5ljh6lWgMhh2hUd5OpQnom8Icb0gxjRA8LVK/i4",
	"9Qpc3QBXN8DVDZiybkAOaeKEUMHjb3QiCnMy7F9NatzUfIjUwhDx9zgJxwisOhBKAGagurm+850AQaAg",
	"5k5hFSoKppfC6dX3uxNBbPq+Ob9N57fp/DZ1YcPUS0lyJkkKbQ9kuQAIZLcAqbtuJBAChjGWqICLwkmm",
	"CJK1140MgxciYt00oG1yGbVuBHhXg+dz1+Ape/WeApqRxEtIeqIZQnFX9v21wHJXIBn6kFd3DNXp2eoX",
	"qu6D9+uKHU1b7OgpogeI/unh+LWAGJJj6VILU0M1YGBnSxMYdrY0oTUvCm0wgoIzPcqa+CiOfIokX/fy",
	"oIAzEzL8EqHCYJv7mMtEEwcOPkqrVIS6y/lbDpjexCQpIuu3b2lGjn1rmvUB25I6etHlLe8TuMGixwbe",
	"cg3H5wKjXGCUC4xygVF/zsCoMQpuvkQp4Kj4NUoHv0xyjNoOxLwx7HpTQcHuNBWY5q1VaA8cjelNqUJE",
	"gZRSKKW6V1IRACks+CVUArXGU8y1swKGR5G5YEYXzPghC9qGXkL2b3tKvMcg1CzfLMEAyj6HGUlCn8Ja",
	"A/C74rzvXpw3iDVXVww0eeUAwLUYa5u4gljftBXE5iatINY2ZQWxvgkriPVNV6wtXAiITTG2Y6LieMB7",
	"XAw3Sb2SJCxUkU8RtD2MpSIgjK0ipOY8l0EIGMZUgiIuCieZIkjWXQ8NGLwQ4eujCW2Ty5j1IsK75AiG",
	"mNPMS19O2SH6GXpZoPnB3AbTjmZXQaI7NY7GbqOk6HFQ/Di049+VoNZzRbgUGS5FhkuR4VJk/KlSZETP",
	"QQ5aaM4f3zKCLbvdRoQ3rShxEXvI7FsHFJ1Qi6OnNkePt7SokY1dyt+gvnhdwt6oGLyIhljBMzLLzGrD",
	"i2jsDNesSryEZ3TWjVsvvtnPVEXjW/2OWDle1deUxfENplpR9N5or2AYiCmKcaZ5gZoaj4+aj89sS+Ao",
	"xmTTuBuB0MWUa2OC5d/oZpLR9RQlHJ5PBbDBqufwxAzBCFO5REwNR0ZNR2aw1isE47HHxKVRRGE8g0xd",
	"GSU047LLeE6Zui9KaIzn15huiy6fo8vn+PnyOYYkzcjBOwdJdvJp8Ls/EJUuJjhVgQLyo0YH4gWxHpVl",
	"W6AgGRBQjgxKd21VzQmovfEsYXgojEwKJFN7qdXtcUJCLDgB0hY3UcuOwULhoiR4DgoHLN2DRYKAsVkG",
	"hTFahtVcF00gzAhNpSpjoxjCKYpw3VXTgjIRKnwFteHtchyzmmQMYGhNxgGd4yKob1yk7RoX6XvGReaO",
	"cZG2X1yk7xYX6XvFRQinuAjjExfZcYmLcB5xEdwhLk6ijOwzctC7PFXN9e9bcRKdgzSIQrO4qyYa/Ney",
	"ApM1oux//rW6oNbGTe2NG/8FrUI1UvJnlwvb5cIeYEvox+lLlHkx9QGlP7YM7Jb6g+U/eBeIxCq8G/0u",
	"oClU4D1Ak6Vo9wBMGPRw7Munk4KTA9X4NGYNIhGQFr1g64c+zS7ru8v6PmJNgfTRO5BzsCfgbe4+fbws",
	"IId2CLEP2D6H6gK20Wl3cd7HJ6QYc1D8ymPQxAR8hHIBOVpqNCZqNib8suLgY7AlOJAInPXmIYfqtrXX",
	"SIFFsmu0EMrB9b+1qYeX+QaNwFWw6EIeBnsEWzbBXhc3lCkA1FCW6KGOqb8nRxJm3nMSnWI4c245gm85",
	"PKJHKMuMO4QyEtxhFkW0UGwBPwh2OVzfLbuBG7aHSNi1dhGpL+BmCB4LeE/EjudMklQ3oXgTCKaQbUHD",
	"VLMtcE1NuQKO4ABNtcIthBQ5Aoodga6+XQVoKGy4Ll6JwroMMHr6FhIogp9B6EWxpgKeNdbV2CtrU6Vx",
	"vk+v09+C1X4fnUJohSqeqUp+WgbRKR1KFC/+WC4S8s9TkJDD4r/+p2xV5Oj5oaC4A3Xp99F+nHpnn0ow",
	"AgPFiD9F3cc0/RklHS+jJNP8BDilJNEbeMHLYoTFeATqBVIFwhgZQhc/tER8EYUh2XO/HICw/efnhDz7",
	"5SYjv6rmziBHGoMuAduEN5rVXeuN8SY5kOSXt6roGglPx6K7MmZ0lXmr7cViKfy+XBcPggN7ExyqRzF/",
	"FFePmGT4C/6Tva6i7lbyT/aaS5C9rn7y11HCySv+ZI9P8UEivf7NG7BpwN/zn8XrH4rdps22aSrV9XVr",
	"u3KdYV+QSnaGXdlP+ufSnLk0Zx80zVms2QyaDwmcCkk/JRUgI5WF1Er6+agA6agA2agwyahQuagspaJC",
	"ZqKCgwg3To0UePzioO1147JUuCwVLkuF6iNNuzGMwRUUjLkVmOZqENoTGICp5CpEFEgphVKquxpEAKSw",
	"4KtBArXGU8xqqIDBgJ1aiWFvvfxD89kQmpiAj+BhmaOlRmOiZmMy8J5k4KP4cNQKqcEpVSkRQMuwgoIt",
	"wQpMc88U2gNHY7q+K0QUSCmFUqq7Z4oASGHB90wJ1BpPMXtmBQwDVOnE/xZkLzs/ffVWlCSZ19Z1HvzM",
	"H1IGFbA5tizHpHVdb2g8i15+9NH3i5/tX36N0ixFElkjGJvSJNi/7qI4whLK4Uem84Ke0owkW5JlQfiM",
	"ZWsDyzQ0m9E6No1RmAZpRsL9W+EcwJ2FsUR3oJt4FJaoH5nqSz/z9yTET5EawdiUFlXRTfeKBpZJaGar",
	"6K6ssvBLEBrR3sI25RhsUD4NvXb3lH6k7zIiqyOZZATme00DzSRUr+nT1dF/JkY0cyTTUCxUJjajWkA0",
	"CeXfEj9+MSK5wDAJrVfpPg2uT6GVnaWJbNIRWKF8Oop3fvJMLLC7xDMJ3UV1ASOKCwyT0LrxjySN/T0x",
	"P2VkVNNQ/5SufyvUY0aEcyzT0Hw+PlWssrKdKDFOPxZ7Y5iM9u3pMS0KHBvTXmGahPab5NkPeVIsE9JF",
	"RJNQfudb+KDjSKahmORbw44cY+pnZpNcRjUN9RE1pDmi01DKNy7zg0jCNCntt9QPrZCeI5qI8mO8S/ww",
	"NT5FJUxT0h7fkT0JzoZfP01kk4zgPjWkOkcwCaUPh9SI0IdDOg2dAflpRmhAfk5Dqele8TDVHvFw/BrR",
	"g+FM5UgmolgOQDSkXEY20QisfBrUaCai2so9qUYzEdUPET0dTWkukYxNcZC+YukM0teRqTPUnk6kN7Wg",
	"MZ1QV/qNRo8+LXwI7k7oy3wDyyQ0G5rOZSRjU2ygi55CC/1rlGJPghx0ZOosaccn1osbasQn0oWba8Gn",
	"03+baL6n0HlfB3sSptg9lEGPTKMVjfykunhTLfxU+vdNsMdSGOzHpi06EAO9KAcfm0qLtov3sFrYsFdM",
	"aamwYaOY0jphwS4xoUXC0BYxkRWCGQ189HdfjWAaSs00AJPaSGzYHKa0NliwM0xoYbBhW5jSqmDJnjCx",
	"JaHKQookt4IfnU6S3EWUbMhvGZrUGsUE1BpQOTJ1eGvM+HYYAwvMBLYXA6vLBPYWQ0vLRDYWS9aVie0q",
	"xhaVyWwpxlaUyewnhpaTiWwmD0c0fSNT5mXRKwm/lPBeD5Xy0wJqOIdc2UxFwChDCkmaAjOF7VmMyJRJ",
	"A/fxyXv53YtJ4u2jhGgGUucD97oSC6qJBWVn6RjZcsG+/Yv+937s74PsTZNmBnpKyaGEL1UWesBZlPnU",
	"y5mVcykFQ738DgJhNXYf3zLNvpqpA9lMasu3lh1Lp8imh5KxnUxrM6QxWOVAelbK50u8yAbWmW1RlgvP",
	"udh4ytIXDqZmZDJlr/mv7ryNA1kYhVSJdZpE9RxhzZSvZLDGHJIBmy8ZaGOWMZjm01bjl99bLV9+l5uJ",
	"E1NqLL3Qyy+pSiDJxD9J1sh2X5ZTRaI6AOSHROEXTku9vJAsBHMoNaTWiTiYpaS5ktEJZNqIbJFkP39K",
	"swdqa9DU2qDxeWcUmEZgoXCzGrwl8X0elNOEA8HSmXAozfQzdXMCam+aKIXjoTAyKZBM3cwzQnuckOB5",
	"Z0RIW9zEZJ3hsPCMqC4xr0vM+xET87r0oy79qEs/2tTgaDWEMRaRPg+SOg+UNs9KyjxIujxQqjxQmjxc",
	"ijxkejxrqfHQafEQKfEg6sfhks4qjQm+5LYaG7GJboTa06puqFUeULs8MCjh3YFuPLZqabp16W4q6Exn",
	"ahufZQKnYqvxfG3js8wJ4zmrQDgCe7VMLIMkN3XD6HnaRkQsYRqddfgp2UZka9D4SajANCoLu0x1AEJf",
	"frcx7wosxAaacdllY7oVWKyM1cZEK9GMxrZh664mrZKtynDGNXARe8imYKPpHGzgsjh60/nYRGadnapE",
	"3//gFZXn7bxyqLNhTtntkx/QU0LM79YvUZp5hUMAGjyVJsNkLBhWu3YVHY0T8kSSopP/37SIU5xE5yAN",
	"opAcjC+OSlzeU5R4/j4LzsQ7Hy1gNp4yIjIL50hyCsMgfPbOR4N5mGZRHJODIZJTGpPwYIqGHeL+/oWY",
	"amhsf5AYXixtKJ2s3T/s6BbKAm/maPATptNvTjhaeN1hce/60XFofj4/tnxU6JLB7ZOStVS8YCD8TGQN",
	"q589RYgFwdRVh+tHmpWHlfv/quddL6B0cPSikVsqkLaY1/FSAarwcut8zcDlE4EBNR5yxz5p3+cOffJD",
	"3rSxu/PGzceyK5+0i8suffKr0d0FVT6Pqjej+Ri2tty6lLVqEjR3Vta69Zg3F4UiikLl2pjvCEWk7wfw",
	"bmeVGzJG7nvX4u8tq5/4+9eCUjLLS323i7nIZHZYVgPtOlLyCfQ5D8t8ZDZr7A+cWwjfZE7lJM7Jis4s",
	"eyfjegC4J+M6GM0/ubGngZA3h+Fq4zsXPOeC51zwnAve53PBE+6THjmT5E3/tODJfIaOCrGLkNsMRush",
	"jY7We+iyfkx2Nxr3XjTqnWge9yHZCKSHui6jNoTdmq1HofFCW2yVuCwSZt9iq+iEWhw9tTl6vMVWjWwE",
	"dlowHBY6HvQMFDCYGj9HZA9+jgkYjMeHn08iipHYBL4a/Bql2dCmWSKGXQj08cKuATp43Rev++L9mF+8",
	"TYeKDgDBwUIyjfULAOuW4b6s3Zf1p/6y/nh+R13mZvQFUA85GRG7/fuQTq90TIbRURmGv4dqYp9MJJZn",
	"re15OhUbLM9F27PP9nwbf4ZZ9c60oejpxGeZwKnYamfKWlH8dCC0M2lHVwBZdgPudAqzMnMthZZ0opyO",
	"vXbmr6Vgk06Udubw6IEnlrzPG76J6BnbwkPsIBqbbfg52cJjacT4+ddGNEYct5VwBdnNFR8O38RD7CAa",
	"m20GYe9NPJZGbBDm3kI0BvvsxLe0PKbxM6+NidhCNT77DOZfG5O1cRvMQQWq8eK2LYZHyY74pmHvTWzE",
	"Jrpp2GkcDt/EZpUHxuHxLXQuFYhLBeJSgbhUIC4VCIJt9oJ6LSWSUyMjFrFNwkrTiWgriZwKm+m0nCKF",
	"nEtU4xLVzC1Rja2sA9ZSGdrLYTh+8kJrWQvtpSu0l6dwmgSFtrJVNGOw0fNPgckaUeOzDz8FFZisjRs/",
	"CVWoxmCjifbQVGdorCkcTT9oqhU01gUaawBH1Pu1g5zyR0H4FJUh82Hm70uPwSKLwGIX/STJvxzImdAo",
	"JklRI/dA0n0SxGW0/mJPo9MhK5rlLYr69P+yur36Fz88/Mv28q+L5YIGexKmREB7tb0orgtBlhO6+H8L",
	"+H+r4L/4cbBYLs4kSctO/v1f/59//UsOEcUkzF/+1+I///Uv//qXxXIR+9lLwZt/8w+HL9R/JDT9kkVf",
	"EpJGp2RfXlfjKC1GVfVwdVj812J1OFwX7XfRXdW6DPInafZLdHjjTCFlJgE/jmmwLxD82/9Oy2QFpXf5",
	"UJCUqqtbP/GPaSmBOrEAj3YjaRyFaUn+f/zlLyBKdEttlcU2C8K8xR+tudKS9U1RKf//AlLTTETRQltM",
	"y5TsT0nx6fs/P/LfhTjPxy/7w5ckOvYK8eF4cbiLjiOJ7uG4OhyKDuYisIfjbKV1CNLXAVld5k1GFFWO",
	"30lqUFJhsB8Q1CbYjymnTbB3YhoUUxZ9eSprl/cLaxexEucjSqzswQmtW2h7GoXkS5Du0+ALPYVfnpLo",
	"+CXl1dE7JXiRg13lUNen8GsS1QXV8dLUYibvsyCAC1bF0/cUNCdyruIOz8enL/nFtvjYA8l8cz4+bTjk",
	"lIKXOp619CVK5zoFuLi/PCfRKR4QOpfxt6LtyIKWOpu1oCVK5yro83FAuA/HsSX6cJy1GOd7LOe3KXKM",
	"qZ+xTVpDmDsGkO/NU4iW93eRkALTfKXMKZ2htMtkkl/ENKNqGZcNL6r8laMKl3Uzd8kyMmcp1jNJMuAy",
	"LoHcQv6gC7kl8SyCyXsXjS9tZafufAYIukh+++UxCfavX6oMzWoBF01/yVvuyizDo4q26mju67gidLbS",
	"Zcfxl4Ts3/aUfHkMwi8pybIc14C42Zl0V0L+EoRbBjeOsqvVXVP4MzmjGRfS+Yo8CtMgzUi4fxv8Mi4F",
	"XQNM8nXc7G/2l7MGvR9C8trKEeUUmEoj1tXvR5sSnO7ZTo1GqbaeqXApVt4ZVfh1T3MXd03pbAVMwizI",
	"3r48BVRDxuui8dey7chSFvuau5xFWmcr6efEj1+GJPytaDSyaItO5i7TgsjZCvOFybBPlr/m70YWZd7H",
	"7L+2/Gz/8muRg3Su4qyM0EMy5ebVyWzNM5ftjM3NDcnqWJklEU/tVvBR7tBNemcu+sxPnome0Hdl0ynk",
	"XXb1IURdkjpbKRdOzEPiLbx2xxZs0cncRTpT/2UmzNoxSEv9Ubm6TKL/knubu6Blaucr8af0C/ktjpLB",
	"LXrzlK7LhmPLmXc0exFzQucrXcnbb1DCovfatE59c5f0zP36VNLWvnBLg3sXn86PcvVWEj3v6ZCeHtO3",
	"NCNHnVmwrRpPIP2qs48g9YrY2Uo7Sp79MPjd53WJ+2R9I7YdWdRiX3OXtEjrbAWd+Jp+J7yS4NgS5v3M",
	"XbqczvlKluSXycp9bFC+RXPuxjW6lKXeZi9ridr5Sjyiw2KO6PjCjejsRXqfkiSnc0N+m++dq3Ifiak/",
	"eAzzG+Rt3nai0Jq8r7lLWqR1xpI+xl+yxA9THeXJNjzGu6rx6LIWOpu/sAViZy/t+EtC9iQ4D/uKsHHF",
	"d7z9NEKv+vsgcq/ona3oT+mwsPOzaWwB5318hDN6toI8H9IhOT4c0tGjbQ7p7MNsDumchfjlZ5C9fPH3",
	"e5KmX84a96yHQ5qPbVVAPExw2RJknHf8ve7ZidxA5MfgOSke6Mv8ewnyHkKve3ZCRwg9ID8HZZy3GVuq",
	"Afk5+/06ID/nK8hBy8MkWQhmH9k6YwEOJnXicjTO6qQpzbKf+cu0pHPWkk2io7bC+eH4NYmOUymc2aJt",
	"9OoWMEbMMfX35EhCzbC2h+MtB5jEs6vZ3/xXtkzvnEWv6wXyYCOdV7+Qu9w83l+cs/flOB/1vnqOk3zp",
	"FL3MfpHO2XqQyzOip6PGmftQthtfpkU/8996SzrnJ9kDoUQzL8hl0dRGXhCtdCBFdzPabxvDn60oB3Ny",
	"lQMxT8mlkd9jnjKcbf4tWYKwNC7S0N4tjcusBV6TOV/R66dzYUOzl84FkrpjpnKefe4WhZh1c7eohzjy",
	"509Xdx9D/vP9QGLzQCdRSzk0K4la9PKzzFO2c87KwqRJ6NOX4Og/kyFhrunTVdFuHFFy9PMUJKduvmLU",
	"S67DRmMnuY5uTp2ZinTWmXSYWAcy6ZQjMc2kM5hAZ54CnGnaHCY5jTwr5TAs5FnRybkxTxnON6lKU4wa",
	"2n15SCNfcpvdzFu+s7/U6mVQEQZlnEFFM3HKjOU613QpTKQD6VLKgZimSxnMkjJP+c00NwqTnHZulHIw",
	"1nKj6KdEmadU554IhYtXIxEKG5CFRCha+U9mKs/5Zj3hotTMesLGYynriXa2i5mKdd4pTpSi1b7+2k5x",
	"As5s8gFkPvvbsG4+k3psNvKZaKcxma+IZ5y8hIlWL3lJOSJLyUt0c5bMU6zzzlTCpKqRqaQcjYVMJToJ",
	"SuYpyvmmJeFi1E1LwsZjKy2JfjaSmQp25jlIuHh7c5CwoZjlIBlKPTJT+UV0vlKD+TrYquKrXbx3nhKd",
	"edXepmj7c8jIQzLMIaObOmbecp1nwphKrHoJY/iQ7CSM0c4TM1fJzjo7TEO0OtlhpHHZyA4DSQozayHP",
	"OBUMk3N/KphyMIapYIYywMxTgvPM+8Kk1pv3paTfLO/LQFaIeYpslskfuMR6kz8w+s2SPwzlfJip0GaZ",
	"6YFLbVAn+3AcLbb0puiOTCCuOMmHlgUlmoOfFa99Sm+eFv/1PwOuwZwNf/xYLsITpf5j/vHN6MtyQQeH",
	"HJ38btmSjDi6/6kAlyU5P6r20eP/JvtsvhNmMLMEZ5hxZgmdhBIzXfOzTSNRi1E7vwAfkrX8ApC0AnOV",
	"79yTCdRy1rW3TphMYK5Cnb059XzUVuk/VOlXvibRccRTfN4K/Zq+OQv1rKE1fBhPW/gwWy3hw5y1gxoJ",
	"IfgkLBMgjLwSy07mug7nmgOC/Eb2J30V/rpsPrEOv+x1RlKdt/r+KUr25EtC0sxPst6P3K95y7uy4af4",
	"1P2wmc+eSVjwqMxvp+3A8I2B5XvrhG4MhPfC+p/R0mRcyP+coZCzLz4lSfYljLLgKSBJ2ifabJW33VRN",
	"RwpNbPZzJ3TyXuKUKPoIcvyyj8KQ7PvdAf8Pe2fXG6fOb/Hvkuui537f7d20z65OmlaThCOdR1sVA56J",
	"TzBGvEyaSvu7H2EbMAyDTfexvSrNbfKHtcZrfgwYv5w19fvxIE/hjoqOY7ZOV2sDnFyrNicWbO5Emdvo",
	"hAYMk50bYB5FbptYFM3rjcOZWmgGOzuI/Fmg5xo7HORwcdtGmj/KgAhDo2s8sYExvdBdWpoKBG/jKTCp",
	"09rLmj3tGC8ELuqF5HA8EozGceVVw83msPKoy7tNTQSBxXGxWUQS9ehsSdQa2AeIi3IBORz8gFHYL7kq",
	"lm9b51AtJvpJVjpLbiKDwKJuCBLHaYa2QE7a2QeSFwQDQqk7AuVSLX9c27H5MFa7jnGUAmK0NwWN6Rjp",
	"RlTHJveI65JoeGR7V6DUWtzVqg/i+r52IgNEKuy97TTCjYT6u7+9IBieTOB73LY8VklGomdaN7yidoA+",
	"yYP+HI5xHelcEAjaibU3aHzPst5I8jwFj0xflg5P9/QbgMm5FdbuOUYCFxnVrWT6RBGKPTTa5ju2DMMo",
	"DQBe2KvCJZGXJCEQvbSxCSSzl0O3xvhSGF64NouHBP2CO3TytwHvEXRIwH8NsH+a5yAcY/ILxu246dI6",
	"sLdanbMENREESLVtphDx1KKz5VJrYB9ELsoFZHH0g0YhKXP+ZiBQ1bhLSwpAkCesYFInW8maOFnuhba5",
	"VEjShBc0ymid8hOpomdeGx5Ib1Xpn6LSXWS6DAR4yhDJOkuYANL6xRjei9vQXlDCesGNyPoK2RV7uT5O",
	"hUJeHWn9AnZtJPlB3FBGdcMrw1uwD/mhu5N6kJXO8prIIPCmG4LkbhaiLYGThvZB4gXBgETqjgDJtBiJ",
	"2e8k6xZInBGYw7bBqCBuG3k5tK0n/oBGXPZuALnrrqPJkUQlz2lKzQQ+yPqvfbnLBGdaIEzqrt5g2Zzn",
	"uoHSWbN7wvWialhuJ2mj8avvXG4gV9uy2yW0ugwEr/p+7ZCsTjK0plRvZy+ALguGZFNzBMblMef7JLde",
	"VuLfotzH4hJzJQRCZ54gIT0P1BbUeYv7YPWyZkBcZ6YwibWcdiQ/i49ZR3MlHGCh5xydxbkNV78zji5r",
	"BscVdL7RsUrKZwOissRdaOL8EDh2TjApFG1kjZ6o9gLcTCkkZp0VMLrMr44dvzKGeVUM+4JYRGQLlmhO",
	"H1zNhAJi1TkBo2raV86r1cgmXde8chfZTAgBOr2jnGP22dCS0fUr5CdR4S627vQQYZWMYkZUpzXVrpCG",
	"uLrq91qxu+RmShAhTj39Gnna/vrNG9zHD+FlzYC/iTNTaD+PIt+8LSyn04lPc9cWHqbRnUnBMKuZAoZ2",
	"EuombPVG98btsmhocDVXqOTaAesBVChAscHczKNXDrH4g+SuSaojsfmtfFSFbkNTKjAASj/ADKr8NmGo",
	"GtkbiWd6oWGUhsB4zJM9yddBvJMlztKS50eATziBxE7GZMubbFEfpM2VAjImrKDRRVNSmN7L3/VF7lJS",
	"ChCMSS+YlKl2suZM1Xsh7UwrJGvSDBpt/BilPM9t+k7v+PG9VuoutokOBIC6I0wMpzla0zhpai9MXlAM",
	"SaZuCYxPRo9i48imSoqa0cY4/PuzPOBRr3cW5oIYAq7ntiCZXcrWFtyFlvdB76psQITPfYFxXCSM1GWS",
	"EpsFxe77YtfLic2EENidWoLkdp6lLbOz1vbB60XJgKxOPaFxeqgj8r3kpl0K7w/1B1XmLrxBAwLM3g0m",
	"k2Nu1jgOzeuFxAW1kBD2dgD5owXPiBG/T7LKZWBSAgQ+YQaWPZnZBvRk23oiby4WFjzhBo07mhqI6wrc",
	"ZURTDM5oiokYTe3hoqkfriY6IZGiKRpNPCM2eyTd84y43iBp1IAATLnBpGyMzRq2oXW9ILegFhI8ZQeN",
	"vhM7aA/pdsNM70/sMDyZehhruqwHgeiSM0xeLwRtDe9iBl5ANiiHhHrJGjThG8D2BTQeyL8AwD/HrX9e",
	"ATlF5LNu9/Vb3X9RV8N8GEudRjjqoPA5OMLlc8xxC59jU/vic0kxMJ+DJTA+eXVMCvojMY/5+TKpdJbf",
	"RAaBTd0QJJqTCG3BnDSzDy4vCAbEUncERmXJCIsyygw/mF8ZYbeiyllsgwQCir0ZSAzHzGwZHNrWB38L",
	"YgHZ692AcVcl6YtNb+0uSV9c99aOGgjo9W4g0dNis2VvbF0f8C2pBaSvt4NGHyl51URNYtoJZycKHxOn",
	"++FoIhAADnYwEdSys2ZwbGEvEC7JhaRw8APKIWFlnjTEisWh1nV8vRAQk8oSNJd9s21ksz/MI5/nkuEZ",
	"VZ7AOO3fctkMJO9f37geRz7VQYB04giS0VmOtohOm9oHoZcUAwI6sYTKZ5knhcVtbf9ZvuZJ4fjm9kwK",
	"idTeFDasY6hbgR0a3SezC6IA2PaukMm1h9YTsHCw4oP6U4x65xOPTTguWSknyZrnZT0UrHwcSx0GqOtg",
	"oKk5AmVzkqM9nHpT+6FzWTEonpolUD7LqCIpoSfTEgXqs5S7odp1kqMUEKmDKWhYtVA3Ajs2ukdml0TD",
	"Yzu4QiP3wtahhk0LljfwdLl7wSVFCJxn+4bi7mZQnxqb3bcfTo3r3bcHCYgAlRnwzKwvv6fG3+7bC2Ih",
	"L7fKDdplVowBjZI2o2KlLgN+ovr3rviuq3WX3VQIAsWJJUwg52Faczltbi90XpIMyejEExip5u56x130",
	"MN3ysF3xmzrfvXW443SyA3ast2XOk8wCridR6BgxTQQBtNEOJG56drbUaS3sg71FuYAEjn7QOKz3UUZO",
	"1DRl9qne36oyd6ENGhAQ9m4wGRxzs0ZwaF4vBC6ohQSwtwPHH6lsnwKfalJ5eAacyGCQOBoChXESoj2Q",
	"WkP7YXJRMCiWoyNEMiuek6gg3xszmTuek3tR6TS/QQaFzN4QLpljiFvIHBraF5kLgoHJ7B0Bkmnm0TGH",
	"MPzBcreJNm+U4dAFRtUpJUXT3cekKW8Lww9eLIt/72udRTYTQoBuagkSv3mWtiTOWtsHkxclA9I59YTG",
	"aWbaCS3OnG6DJk4PAWJWY9KXbdj8TLSmF9AylG3P4qxGY4qSVwNTosJdON3pIZii5BUTqq6FrKHqir1A",
	"NRUKCRUlr2hUGefMxG7nysQoc2Ri1Lkxpy1TYmJfU2FimCkwMd7UlxOLMmp6ax6zW+r0jbkSgIBLWMHE",
	"S2VlTZhsVS+MzaVCUia84HFGioY2b9GB5t3DdEXqNjf1i7AP4piP4pCdOsJhiAtyGEyeG0MldDFle2IX",
	"EvDD76pwUJrPneGxfeB5ZnqNELOPqsphjEoCg1ppBpVUlZk9m6pt/fB4JhaUQekGjzvjrmIxc7uvmDw/",
	"Bm6oe4upnOxB87XB2FwpKGJ4m4ydWFTmSUoYKawWA4vZ177c9XpgZ1IYBE5NocI4D9UezFmj+2H0omhQ",
	"XKeu8Mi125QsZh52ItNEMDCF3nNMz86eTK+biy3KBaURdBuxE7Nc7jZmHpa61UQwOIRe4lbPzp5Dr0vb",
	"LsoF5RB0SdsTi048b5mRwlhVOYxMSWAQKM2g8qcys6dPta0f9s7EgpIn3cBxZwLOKWogkIHitYErT0Sh",
	"sIRGUV0+k4pEpP5OLQdUyyM+1N+ph0HV52IQ3J3ZwuRwKVxrMs+b3gupa7IhyT3zBUbyK20KUptGXP/3",
	"UOUswUECgVRlBhLPITFbJIeW9QHiglhA/JQbMOZ+8ILYbL73P7wgrjffGzUQuOvdQIKnxWaL3ti6Pthb",
	"UgsIX28HkD4zd46Rg6ENlrRNjHnDC4csIKpoUTdJnkcn1nCer7D1SRbGqs5NUlORr0mVsDrkjeTzY1K/",
	"fIvZNzjUXggpZ3tyXc7uvwgppzuMuYlvotGJoiQ4MYYXZs6PdOVCeSf+7SYyce5PRdk2Ae7vZTjfGv5C",
	"ikg22rdvwdNg9FglDYlO7HIkn+lxlzQkZo5iidln6eJ6DVwJirdFIyaxrATV1Yg5OG6C6k4tNFCC6gyh",
	"RjUuDGgIbFzf0E1qw/mhohtcIeZ3ItG+omoL+7X4TuSPrk50BbhJbzh/J4YS3mAKNLyCZ8SQ3VOZJQ25",
	"5xlxGF5/eiFGeYGSX+8LNL4TixoeVSR9S3Oyjl/MHvlOFv7h7L4xZl+EsA/+yqr7kA2Vp8mSRvw7yfMv",
	"h5vf/mP4fSY5Efdpf//17qZo8zzZd+2n/DVd8jTrTjf937uzsPRP95/hwHfSzl9DPd//L0nx3g2W/JVU",
	"/HBYvan9yKuUPDy3zS1/LRze2vr75vyyt7YV2bc0z8TEsoqPY3gvh7eTR/yj2CxHoCipPr+lprvmOc8z",
	"5SdSDXkaL+Q7eUDMPlacXa/m16v59Nsk7gnyZE/yuv9C1bytVlfK34mj7sRB8lvVH+LmS3VRD+XCL6x9",
	"Q033xKI0iyrOTInG7H224+5+rqWK0Lj+ZNvEtt4j1YfmsFOqz6yTuEZmE5m4hsop/ObkHrlaiuB6gwwQ",
	"XUFTc2T3NHXM2j1Nr3mt5VXz/ESiJCfV6lOMKPtdVLm6LRklUBITZiBDa5KqWe002Mmaa3dB4KBaRsbx",
	"AGWeFKuRtYz078S/drVuxwN0ElIUbUBA5ww2TgN2LSNX6oLGxPN8n6QvUcqLmtYNKdI36zE58mXL+/FI",
	"MTZlWEvATayX5NBexlzyCfwdoHVa0yhvC+sOW3Xkp+7Au7b4WHH2/xC/VUP3mr0H1K7c3idw7sWJHaIi",
	"YaQuk5RsDf/+xA73/cE+vwETYfSvwcQs8HfB9trft7f3MZnzoK/jMu2CXb0TU0UO78XQYkO8Gauf2ybj",
	"r8VqVteX2xBRGTsVHhx3KYjzXyNaiaitS1Jktj0KD7Lcc5eCUiXZtVdhS6ar4Mma6/UxZFBNRY9HUon3",
	"iNE+p8XK28RHWXtL65c/RKXj54a5Huojw5+8BuwtaAubOQtPssrxrAWlcp23YBOYzcwF1aDe5i6ABQg8",
	"e6EVfa1W8xdkt6y3GQxoHa/AsxhUiGne1s3aKA3Vsa7KHPWjy7PDdZtLW+jZRTlNSVETywzvVLXTKJXI",
	"NdGfS1SNZ472tIhq0jTduezSHcc2P6jjnOY8yoFGrVqhxo1ce9n5U+84Pb3bRH+niRtwWzec0R9qsFZU",
	"tbn5Ut0fI0Yy7bojHKV8JoSW879zvk/ywR5szFnSJHIveVO4t2Olo8fRQQAtzNEZbI4kP0SUJUcjox/y",
	"wydR5ybE/vRoEfa+cAPU93g0hqhtX+gqSE0CLkzNG2ygR/ELsOHXc/aT4WoZtKnK9XfzH6X7E0888hP6",
	"euCZq7nPe0PM2lMOSKpVUj4bAxRFjuLqzg3HZGcKlsRnFdVaZH92/3OTWHdqtMBAX3vJvIYhsqbQ+mGf",
	"rlaZVKdHCw93tOskwCapjqSxyvBRljqMUSpAJimtwYYpVg8wpSimyLtaerI7N1pyoGsC9JnZvTi5JWXO",
	"31zF5utNiV1e0g3MfSRLiuQot8M9rQ6Zk0l9Hspjd2PmpiJoxMWQg+X6OMUqrJQXdmn21S7D1DWuWW7I",
	"cpykY/Xaaphw4vKl1VQEbk3EiTvcYA91RL6XvDLelN4f6g+y0FGc/fnhkuyN4Ya4toyHSs/ZIh73NIVL",
	"jKa4WU3mPBpj02fvuQpQ14CLEnv6oh5q3e7rt7ohzCbUh6HYXaiDBmKogznYUHl1TAr6I1nfiUdG+kWv",
	"dZOoLoEWqO4NNs8qsRzBvEucDmDuT48WYu8LN0DS3YVFjdrZ3hijKO/3wXe2IpYuAhfpxB1usNz8nn/H",
	"nb3c706NltxTTarO1z35jvvcYTnDVQboeYIrWqDY81uHQFkZNVVS1DY9Ag8FKx+HYleRahp4mWrm4EMt",
	"o4qkhJ7MA+XU5yp3fb3TbAcZ0HgHf7AJt7U50+4HxdmsSrzsOk+weZ2y2hRXnLlaWj7OarhXHxnulJ0T",
	"Ja/GsLoaR2lR8goXFyWvuHmxaJ/UNI1ocTA+6Ttcq0MKXJfqsAnMsKSDisrpov9q8Md10X/LyEzr/feh",
	"OV7tX54e7gKpfCEHaPHO0O3S/8N7yStwNnmVeZLKsVFWIzBi9rU/wOUYjLkMHolTf8gJ2/Zrx6zv0P1Y",
	"cebwFga1V3t0hhynzaA3h2PdYnYd5GYfWs6TzGY28PuK2M4GZm3e0DKpmn8deMWifrO+0ex0Mz+1Goja",
	"g2/2QWYfY+H/BypfoXRaSXPz282eFkn1dvPuvLRIGFk8R01/LP9Dts83bY/A9T0BhZl3+kdSqkpj+nHO",
	"zn++h2Cgr+2T8NV9cbG+suIP1YlUtdj1sa3ym99u/nXz919//18AAAD//+sMLAFmCBEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
